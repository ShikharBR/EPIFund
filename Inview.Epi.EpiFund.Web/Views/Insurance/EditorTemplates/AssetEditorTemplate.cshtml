@model AssetViewModel
@using MVCVideo
@using Inview.Epi.EpiFund.Domain.Helpers
@using Inview.Epi.EpiFund.Domain.Entity
@using Inview.Epi.EpiFund.Domain.ViewModel
@using Inview.Epi.EpiFund.Domain.Enum
@{
    ViewBag.Title = "Asset View";
    Layout = ViewBag.Layout;
    ViewBag.IsAssetView = true;
    List<MVCVideo.VideoOptions> videoOptions = ViewBag.Videos as List<MVCVideo.VideoOptions>;

    MultiFamilyAssetViewModel mfAsset = new MultiFamilyAssetViewModel();
    CommercialAssetViewModel cAsset = new CommercialAssetViewModel();
    double proformaSGI = new double();
    double proformaNOI = new double();
    double listPricePerSqFt = new double();
    double listPricePerUnit = new double();
    double listPricePerMHP = new double();
    double appraisalPerUnit = new double();
    double appraisalPerSqFt = new double();
    double capRate = new double();
    double defCapRate = new double();
    double defProformaSGI = new double();
    double defProformaNOI = new double();
    double defTotalListing = new double();
    double defAnnualRevenueAdjustment = new double();
    double bpoRate = new double();
    double proformaCam = new double();
    double sgiPerSqFt = new double();
    double percentOfPropLeased = new double();
    double currentAnnualGrossIncome = new double();
    double listPriceBPO = new double();

    listPricePerSqFt = 0;
    listPricePerUnit = 0;
    listPricePerMHP = 0;
    appraisalPerSqFt = 0;
    appraisalPerUnit = 0;
    defCapRate = 0;
    defProformaNOI = 0;
    defProformaSGI = 0;
    defAnnualRevenueAdjustment = 0;
    currentAnnualGrossIncome = 0;
    listPriceBPO = 0;
    currentAnnualGrossIncome = Model.AnnualGrossIncome;
    if (Model.SquareFeet > 0)
    {
        listPricePerSqFt = Model.AskingPrice / Model.SquareFeet;
        appraisalPerSqFt = Model.CurrentBpo / Model.SquareFeet;
    }
    if (Model.GetType() == typeof(MultiFamilyAssetViewModel))
    {
        mfAsset = (Model as MultiFamilyAssetViewModel);
        if (mfAsset.UnitSpecifications.Count > 0)
        {
            //listPricePerSqFt = Model.AskingPrice / (mfAsset.TotalUnits * (Model.SquareFeet / mfAsset.UnitSpecifications.Count));
        }
        if (mfAsset.TotalUnits > 0)
        {
            listPricePerUnit = Model.AskingPrice / mfAsset.TotalUnits;
            if (Model.NumberRentableSpace != null && Model.NumberNonRentableSpace != null)
            {
                listPricePerMHP = Model.AskingPrice / ((double)Model.NumberRentableSpace + (double)Model.NumberNonRentableSpace);
            }
            appraisalPerUnit = Model.CurrentBpo / mfAsset.TotalUnits;
        }

        var aoe = Model.ProformaAnnualOperExpenses;
        var pagi = Model.ProformaAnnualIncome;
        var pami = Model.ProformaMiscIncome;
        proformaSGI = 0;
        proformaNOI = 0;
        defTotalListing = 0;
        if (Model.HasDeferredMaintenance)
        {
            defTotalListing = Model.AskingPrice == 0 ? Model.CurrentBpo + mfAsset.EstDeferredMaintenance : Model.AskingPrice + mfAsset.EstDeferredMaintenance;
        }
        else
        {
            defTotalListing = Model.AskingPrice == 0 ? Model.CurrentBpo : Model.AskingPrice;
        }
        //if (pami > 0 && pagi > 0)
        if (true)
        {
            //o   Formula:  [((P:SGI + P:AMI) – P:VF) – P:AOE] = P:NOI (Pre-Tax)
            //o   Numerical application of Formula: [(($1,307,760 + $53,618) - $245,048*) - $733,230] = $383,100 (correct amount)
            //§  *P:VF is 18% per data in the Asset file.  18% of ($1,307,760 + $53,618) = $245,048

            var totalIncome = pagi + pami;
            if (totalIncome > 0)
            {
                proformaSGI = ((aoe / totalIncome) * 100);
            }
            var pvf = (Model.ProformaVacancyFac / 100) * totalIncome;
            proformaNOI = Math.Round((totalIncome - pvf) - aoe);
            var pretax = totalIncome - pvf - aoe;
            capRate = ((pretax / Model.AskingPrice) * 100);
            bpoRate = ((pretax / Model.CurrentBpo));
            var e = (Model.AverageAdjustmentToBaseRentalIncomePerUnitAfterRenovations.GetValueOrDefault(0) * mfAsset.TotalUnits * 12);
            defAnnualRevenueAdjustment = mfAsset.EstDeferredMaintenance == 0 ? 0 : (Model.AverageAdjustmentToBaseRentalIncomePerUnitAfterRenovations.GetValueOrDefault(0) * mfAsset.TotalUnits * 12);
            defProformaSGI = mfAsset.EstDeferredMaintenance == 0 ? Model.ProformaAnnualIncome : Model.ProformaAnnualIncome + defAnnualRevenueAdjustment + pami;

            var adjDefPvf = (Model.ProformaVacancyFac / 100) * defProformaSGI;
            //[{(Proforma SGI + Annualized Revenue Adjustment to Proforma SGI after Renovation + Proforma AMI) – Proforma VF} – Proforma AOE]
            defProformaNOI = mfAsset.EstDeferredMaintenance == 0 ? proformaNOI : Math.Round(defProformaSGI - adjDefPvf - aoe);
            if (Model.AskingPrice + mfAsset.EstDeferredMaintenance > 0)
            {
                defCapRate = Math.Round(((defProformaNOI / defTotalListing) * 100), 2);
            }
            else
            {
                defCapRate = Math.Round(Convert.ToDouble(bpoRate.ToString("P2").Replace('%', ' ')), 2);
            }
        }
        if (mfAsset.EstDeferredMaintenance == 0)
        {
            defProformaSGI = Model.ProformaAnnualIncome;
        }
    }
    if (Model.GetType() == typeof(CommercialAssetViewModel))
    {
        cAsset = (Model as CommercialAssetViewModel);
        //listPricePerUnit = Model.AskingPrice / mfAsset.TotalUnits;
        //appraisalPerUnit = Model.CurrentBpo / mfAsset.TotalUnits;

        var aoe = Model.ProformaAnnualOperExpenses;
        var pagi = Model.ProformaAnnualIncome;
        var pami = Model.ProformaMiscIncome;
        proformaSGI = 0;
        proformaNOI = 0;
        proformaCam = 0;
        sgiPerSqFt = 0;
        percentOfPropLeased = 0;
        defTotalListing = 0;
        defTotalListing = cAsset.AskingPrice == 0 ? cAsset.CurrentBpo + cAsset.EstDeferredMaintenance : cAsset.AskingPrice + cAsset.EstDeferredMaintenance;

        //if (pami > 0 && pagi > 0)
        if (true)
        {
            //o   Formula:  [((P:SGI + P:AMI) – P:VF) – P:AOE] = P:NOI (Pre-Tax)
            //o   Numerical application of Formula: [(($1,307,760 + $53,618) - $245,048*) - $733,230] = $383,100 (correct amount)
            //§  *P:VF is 18% per data in the Asset file.  18% of ($1,307,760 + $53,618) = $245,048

            var totalIncome = pagi + pami;
            if (totalIncome > 0)
            {
                proformaSGI = ((aoe / totalIncome) * 100);
            }
            if (cAsset.SquareFeet > 0)
            {
                proformaCam = pami / cAsset.SquareFeet;
                sgiPerSqFt = pagi / cAsset.SquareFeet;
                if (cAsset.LeasedSquareFootageByMajorTenant > 0)
                {
                    percentOfPropLeased = Math.Round((Math.Round((double)((double)cAsset.LeasedSquareFootageByMajorTenant / (double)cAsset.SquareFeet), 4) * 100), 2);
                }
            }
            var pvf = (Model.ProformaVacancyFac / 100) * totalIncome;
            proformaNOI = Math.Round((totalIncome - pvf) - aoe);
            var pretax = totalIncome - pvf - aoe;
            capRate = ((pretax / Model.AskingPrice) * 100);
            bpoRate = ((pretax / Model.CurrentBpo));
            defAnnualRevenueAdjustment = cAsset.AverageAdjustmentToBaseRentalIncomePerUnitAfterRenovations.GetValueOrDefault(0);
            defProformaSGI = mfAsset.EstDeferredMaintenance == 0 ? Model.ProformaAnnualIncome : Model.ProformaAnnualIncome + defAnnualRevenueAdjustment + pami;

            var adjDefPvf = (Model.ProformaVacancyFac / 100) * defProformaSGI;
            //[{(Proforma SGI + Annualized Revenue Adjustment to Proforma SGI after Renovation + Proforma AMI) – Proforma VF} – Proforma AOE]
            defProformaNOI = mfAsset.EstDeferredMaintenance == 0 ? proformaNOI : Math.Round(defProformaSGI - adjDefPvf - aoe);
            if (Model.AskingPrice + mfAsset.EstDeferredMaintenance > 0)
            {
                defCapRate = Math.Round(((defProformaNOI / defTotalListing) * 100), 2);
            }
            else
            {
                defCapRate = Math.Round(Convert.ToDouble(bpoRate.ToString("P2").Replace('%', ' ')), 2);
            }
        }
    }
}
<style>
    .field-validation-error
    {
        color: red;
        font-weight: bold;
    }

    .detailsHeading
    {
        margin: 1px;
        color: #fff;
        padding: 3px 10px;
        cursor: pointer;
        position: relative;
        background-color: #428bca;
    }

    .layer1
    {
        margin: 0;
        padding: 0;
        width: 300px;
    }

    .detailsContent
    {
        padding: 5px 10px;
        background-color: #fafafa;
    }

    #uploadDiv #AssetDocumentType, #uploadDiv #docTitle
    {
        border: 1px solid #ccc;
    }

    #documents .deleteDocUpload
    {
        background-color: transparent;
        border: 0;
        font-size: 10px;
        color: #428bca;
        padding: 0;
        margin: 0;
    }

        #documents .deleteDocUpload:hover, #docManager .deleteDocUpload:focus
        {
            color: #2a6496;
        }

    #documents a
    {
        display: block;
    }

    #documents .description
    {
        color: #888;
        font-weight: normal;
        font-style: italic;
        font-size: 10px;
        display: block;
        margin: 0;
    }

    #documents .docPreviewDiv.row
    {
        background-color: #f7f7f7;
        width: 100%;
        margin-left: 0px;
        padding: 10px 0;
        margin-bottom: 5px;
        border: 1px solid #eee;
        border-radius: 4px;
    }

        #documents .docPreviewDiv.row .col-sm-2
        {
            text-align: right;
        }

    #documents .document-item
    {
        background-color: #fff;
        border: 0;
        padding: 0;
    }

    #documents .document-item-expanded
    {
        background-color: transparent;
        border: 0;
        padding: 0;
        margin: 0;
    }

    #PendingUploads .docPreviewDiv.row
    {
        background-color: #F1FBED;
        border-color: #d6e9c6;
    }

    #documents h4
    {
        margin-bottom: 5px;
    }

    .progressbar
    {
        width: 300px;
        height: 20px;
        background-color: transparent;
    }

    .progressbarlabel
    {
        width: 300px;
        height: 20px;
        position: absolute;
        text-align: center;
        font-size: smaller;
    }


    .ui-progressbar .ui-progressbar-value
    {
        height: 20px;
    }

    .spaceLab
    {
        margin-right: 10px;
    }

    .spaceText
    {
        margin-left: 10px;
    }
</style>
<!-- Nav tabs -->
<ul class="nav nav-pills">
    <li class="active"><a href="#basic" data-toggle="pill">Basic Info</a></li>
    <li><a href="#pics" data-toggle="tab">Images</a></li>
    <li><a href="#videos" data-toggle="tab">Videos</a></li>
    <li><a href="#documents" data-toggle="tab">Documents</a></li>
    <li><a href="#finish" data-toggle="tab">Finish</a></li>
</ul>

<!-- Tab panes -->
<div class="tab-content"> 
    <div class="tab-pane active" id="basic">
        <div class="row">
            <div class="col-sm-6 text-right">
                <div class="input-group">
                    @Html.LabelFor(model => model.AssetType)
                </div>
            </div> 
        @Inview.Epi.EpiFund.Domain.Helpers.EnumHelper.GetEnumDescription(@Model.AssetType)
        @Html.HiddenFor(model => model.AssetType)
        @Html.HiddenFor(s => s.ExistingListingStatus)
        @Html.HiddenFor(model => Model.AssetNumber)
        @Html.HiddenFor(model => Model.IsPaper)
        @Html.HiddenFor(model => Model.IsSubmitted)
        @Html.HiddenFor(model => Model.Show)
            <div class="col-sm-6">
                <div class="input-group">
                    @Inview.Epi.EpiFund.Domain.Helpers.EnumHelper.GetEnumDescription(@Model.AssetType)
                    @Html.HiddenFor(model => model.AssetType)
                    @Html.HiddenFor(s => s.ExistingListingStatus)
                    @Html.HiddenFor(model => Model.AssetNumber)
                    @Html.HiddenFor(model => Model.IsPaper)
                    @Html.HiddenFor(model => Model.IsSubmitted)
                    @Html.HiddenFor(model => Model.Show)

        @Html.HiddenFor(model => Model.TitleCompanyId)
        @Html.HiddenFor(model => Model.TitleCompanyUserId)
        @Html.HiddenFor(model => Model.OrderId)
        @Html.HiddenFor(model => Model.OrderStatus)
        @Html.HiddenFor(model => Model.OrderDate)
        @Html.HiddenFor(model => Model.OrderedByUserId)

        @Html.HiddenFor(model => Model.AssetSellerId)

        @Html.Hidden("CODM", @cAsset.EstDeferredMaintenance)
        @Html.Hidden("MFDM", @mfAsset.EstDeferredMaintenance)
                    </div>
                </div>
        @if (Model.GetType() == typeof(CommercialAssetViewModel))
        {
            @Html.Hidden("CoType", true);
        }
        @if (Model.GetType() == typeof(MultiFamilyAssetViewModel))
        {
            @Html.Hidden("MfType", true);
        }
        @if (Model.GetType() == typeof(CommercialAssetViewModel))
        {
            <hr />
            <h4>Property Proforma Details</h4>
            <div class="row">  
                <div class="col-lg-6">
                    <table class="table table-striped asset-table">
                        <tbody>
                            <tr>
                                <td>
                                    <label>Listed/Asking Price</label>
                                </td>
                                <td style="text-align: right;">
                                    @if (!Model.IsTBDMarket || Model.AskingPrice > 0)
                                    {
                                        <span class="padmoney" id="AskingPrice">@Model.AskingPrice.ToString("C0")</span>
                                    }
                                    else
                                    {
                                        <a title="Per Professional Listing, Pricing to be determined by Market Conditions and highest and best offer submitted">TBD</a>
                                    }
                                    @Html.HiddenFor(s => s.AskingPrice)
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <label>List Price / Sq.Ft.</label>
                                </td>
                                <td style="text-align: right;">
                                    @if (!Model.IsTBDMarket || Model.AskingPrice > 0)
                                    {
                                        <span class="padmoney">@listPricePerSqFt.ToString()</span>
                                    }
                                    else
                                    {
                                        <a title="Per Professional Listing, Pricing to be determined by Market Conditions and highest and best offer submitted">TBD</a>
                                    }
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <label>Current Annual Gross Income</label>
                                </td>
                                <td style="text-align: right;">
                                    <span class="padmoney">@Model.AnnualGrossIncome.ToString()</span>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <label>Proforma <a title="Annualized Scheduled Gross Income">SGI</a> (Annual)</label>
                                </td>
                                <td style="text-align: right;">
                                    <span class="padmoney">@Model.ProformaAnnualIncome.ToString("C0")</span>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <label>Proforma <a title="Annualized Scheduled Gross Income">SGI</a> per Sq.Ft.</label>
                                </td>
                                <td style="text-align: right;">
                                    <span class="padmoney">@sgiPerSqFt</span>
                                </td>
                            </tr>
                            @*<tr>
                        <td>
                            <label><a title="Common Area Maintenance">CAM</a> Pass thru to Tenants: <span class="padmoney">@proformaCam</span> per Sq.Ft.</label>
                        </td>
                        <td style="text-align: right;">
                            <span class="padmoney">@Model.ProformaMiscIncome.ToString("C0")</span>
                        </td>
                    </tr>*@
                            <tr>
                                <td>
                                    <label>Proforma <a title="Annual Operating Expense">AOE</a></label>
                                </td>
                                <td style="text-align: right;">
                                    <span class="padmoney">@Model.ProformaAnnualOperExpenses.ToString("C0")</span>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <label>Proforma <a title="Common Area Maintenance">CAM</a></label>
                                </td>
                                <td style="text-align: right;">
                                    <span class="padmoney">@Model.ProformaAnnualOperExpenses.ToString("C0")</span>
                                    @Html.HiddenFor(s => s.ProformaAnnualOperExpenses)
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <label>Proforma <a title="Annual Operating Expense">AOE</a> as % of <a title="Scheduled Gross Income">SGI</a></label>
                                </td>
                                <td style="text-align: right;">
                                    <span class="pad">@Model.ProformaAoeFactorAsPerOfSGI</span>%
                            @Html.HiddenFor(s => s.ProformaAoeFactorAsPerOfSGI)
                                </td>
                            </tr>
                            @*<tr>
                        <td>
                            <label>Proforma <a title="Vacancy Factor">VF</a>(Annualized)</label>
                        </td>
                        <td style="text-align: right;">
                            @((Model.ProformaVacancyFac / 100).ToString("P"))
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <label>Proforma <a title="Vacancy Factor">VF</a>, Concessions, & Misc Offsets</label>
                        </td>
                        <td style="text-align: right;">
                            <span class="pad">@Model.ProformaVacancyFac.ToString("P")</span>
                        </td>
                    </tr>
                    
                    <tr>
                        <td>
                            <label>Proforma <a title="Common Area Maintenance">CAM</a> as % of <a title="Scheduled Gross Income">SGI</a></label>
                        </td>
                        <td style="text-align: right;">
                            <span class="pad">@Model.ProformaAoeFactorAsPerOfSGI</span>%
                            @Html.HiddenFor(s => s.ProformaAoeFactorAsPerOfSGI)
                        </td>
                    </tr>*@
                            <tr>
                                <td>
                                    <label>Proforma Pre Tax <a title="Annualized Net Operating Income">NOI</a></label>
                                </td>
                                <td style="text-align: right;">
                                    @proformaNOI.ToString("C0")
                                    <input type="hidden" value="@proformaNOI" id="hdnProformaNOI" />
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <label>Listed Price/<a title="[Calculated Market Value is based solely on either (1) comparable sales data provided by the Listing Agent or Seller in their Offering Memorandum, or, in the absence thereof, (2) calculated to the displayed CAP Rate only if the offering price for the asset is TBD by Market.]">CMV</a> <a title="Annual Capitalization Rate">CAP</a> (Profroma Annualized Operating Data)</label>

                                </td>
                                <td style="text-align: right;">
                                    @if (Model.CashInvestmentApy <= 0)
                                    {
                                        <span style="font-weight: bold; color: red;">@Model.CashInvestmentApy.ToString()</span><span>%</span>
                                    }
                                    else
                                    {
                                        <span>@Model.CashInvestmentApy.ToString()</span><span>%</span>
                                    }
                                    @Html.HiddenFor(s => s.CashInvestmentApy)
                                </td>
                            </tr>
                            @if (Model.HasPositionMortgage == Inview.Epi.EpiFund.Domain.Enum.PositionMortgageType.Yes &&
                        Model.MortgageLienAssumable == Inview.Epi.EpiFund.Domain.Enum.MortgageLienAssumable.Yes)
                            {
                                <tr>
                                    <td colspan="2">
                                        <em>This Property may have existing assumable financing. Details on the existing debt structure are available for your review in the Listing Agent’s Marketing Brochure located in the Asset Documents Section below.</em>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
                <div class="col-lg-6">
                    <table class="table table-striped asset-table">
                        <tbody>
                            <tr>
                                <td>
                                    <label>Calculated Market Value (<a title="[Calculated Market Value is based solely on either (1) comparable sales data provided by the Listing Agent or Seller in their Offering Memorandum, or, in the absence thereof, (2) calculated to the displayed CAP Rate only if the offering price for the asset is TBD by Market.]">CMV</a>)</label>
                                </td>
                                <td style="text-align: right;">
                                    <span class="padmoney" id="bpo">@Model.CurrentBpo.ToString("C0")</span>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <label>Calculated Market Value/<a title="[Calculated Market Value is based solely on either (1) comparable sales data provided by the Listing Agent or Seller in their Offering Memorandum, or, in the absence thereof, (2) calculated to the displayed CAP Rate only if the offering price for the asset is TBD by Market.]">CMV</a> Price/Sq.Ft.</label>
                                </td>
                                <td style="text-align: right;">
                                    <span class="padmoney">@appraisalPerSqFt</span>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <label>Is Property Currently Producing Income</label>
                                </td>
                                <td style="text-align: right;">
                                    <span class="pad">@(Model.HasIncome ? "Yes" : "No")</span>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <label>Last Reported Occupancy</label>
                                </td>
                                <td style="text-align: right;">
                                    @cAsset.OccupancyPercentage %
                            <br />
                                    @(cAsset.OccupancyDate.HasValue ? cAsset.OccupancyDate.Value.ToString("MM/yyyy") : "")
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <label>Is property Operated as Multi or Single Tenant</label>
                                </td>
                                <td style="text-align: right;">
                                    @if (@cAsset.NumberOfTenants > 1)
                                    {
                                        <span>Multi</span>
                                    }
                                    else
                                    {
                                        <span>Single</span>
                                    }
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <label>Is Sale of Property Subject to Auction?</label>
                                </td>
                                <td style="text-align: right;">
                                    @if (Model.IsTBDMarket)
                                    {
                                        <span class="asset-sold">Yes</span>
                                    }
                                    else
                                    {
                                        <span>No</span>
                                    }
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <label>If Yes, What is the Auction Date?</label>
                                </td>
                                <td style="text-align: right;">
                                    <span>@(Model.AuctionDate.HasValue ? Model.AuctionDate.Value.ToString("MM/dd/yy") : "N/A")</span>
                                </td>
                            </tr>
                            @if (Model.ClosingDate.HasValue && !Model.IsTBDMarket)
                            {
                                <tr>
                                    <td>
                                        <label>Offer Closing Date</label></td>
                                    <td style="text-align: right;">@Model.ClosingDate.Value.ToString("MM/dd/yy")</td>
                                </tr>
                            }
                            <tr>
                                <td>
                                    <label>Est Tenant Improvement Budget</label>
                                    <a data-toggle="modal" data-target="#loginwarning" style="margin-left: 10px;">(View list)</a>
                                </td>
                                <td style="text-align: right;">
                                    <span class="padmoney">@cAsset.EstDeferredMaintenance</span>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
    
        }
        @if (Model.GetType() == typeof(MultiFamilyAssetViewModel) && Model.AssetType != AssetType.MHP)
        {
            <hr />
            <h4>Property Proforma Details</h4>
            <div class="row">
                <div class="col-lg-6">
                    <table class="table table-striped asset-table">
                        <tbody>
                            <tr>
                                <td>
                                    @Html.LabelFor(s => s.AskingPrice)
                                </td>
                                <td style="text-align: right;">
                                    @if (!Model.IsTBDMarket || Model.AskingPrice > 0)
                                    {
                                        <span class="padmoney" id="AskingPrice">@Model.AskingPrice.ToString("C0")</span>
                                    }
                                    else
                                    {
                                        <a title="Per Professional Listing, Pricing to be determined by Market Conditions and highest and best offer submitted">TBD</a>
                                    }
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <label>List Price / Unit</label>
                                </td>
                                <td style="text-align: right;">
                                    @if (!Model.IsTBDMarket || Model.AskingPrice > 0)
                                    {
                                        <span class="padmoney">@listPricePerUnit.ToString("C0")</span>
                                    }
                                    else
                                    {
                                        <a title="Per Professional Listing, Pricing to be determined by Market Conditions and highest and best offer submitted">TBD</a>
                                    }
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <label>List Price / Sq.Ft.</label>
                                </td>
                                <td style="text-align: right;">
                                    @if (!Model.IsTBDMarket || Model.AskingPrice > 0)
                                    {
                                        <span class="padmoney">@listPricePerSqFt.ToString("C")</span>
                                    }
                                    else
                                    {
                                        <a title="Per Professional Listing, Pricing to be determined by Market Conditions and highest and best offer submitted">TBD</a>
                                    }
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <label>Proforma <a title="Annualized Scheduled Gross Income">SGI</a> (Annual)</label>
                                </td>
                                <td style="text-align: right;">
                                    <span class="padmoney">@Model.ProformaAnnualIncome.ToString("C0")</span>
                                </td>
                            </tr>
                            @*<tr>
                        <td>
                            <label>Proforma <a title="Vacancy Factor">VF</a></label>
                        </td>
                        <td style="text-align: right;">
                            @((Model.ProformaVacancyFac / 100).ToString("P"))
                        </td>
                    </tr>*@
                            <tr>
                                <td>
                                    <label>Proforma <a title="Annual Operating Expense">AOE</a></label>
                                </td>
                                <td style="text-align: right;">
                                    <span class="padmoney">@Model.ProformaAnnualOperExpenses.ToString("C0")</span>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <label>Proforma <a title="Annual Miscellaneous Income">AMI</a></label>
                                </td>
                                <td style="text-align: right;">
                                    <span class="padmoney">@Model.ProformaMiscIncome.ToString("C0")</span>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <label>Proforma <a title="Annual Operating Expense">AOE</a> as % of <a title="Scheduled Gross Income">SGI</a></label>
                                </td>
                                <td style="text-align: right;">
                                    <span class="pad">@Model.ProformaAoeFactorAsPerOfSGI</span>%
                            @Html.HiddenFor(s => s.ProformaAoeFactorAsPerOfSGI)
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <label>Proforma Pre Tax <a title="Annualized Net Operating Income">NOI</a></label>
                                </td>
                                <td style="text-align: right;">
                                    <span class="padmoney">@proformaNOI.ToString("C0")</span>
                                    <input type="hidden" value="@proformaNOI" id="hdnProformaNOI" />
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <label>Listed Price/<a title="[Calculated Market Value is based solely on either (1) comparable sales data provided by the Listing Agent or Seller in their Offering Memorandum, or, in the absence thereof, (2) calculated to the displayed CAP Rate only if the offering price for the asset is TBD by Market.]">CMV</a> <a title="Annual Capitalization Rate">CAP</a> (Profroma Annualized Operating Data)</label>
                                </td>
                                <td style="text-align: right;">
                                    @if (Model.CashInvestmentApy <= 0)
                                    {
                                        <span style="font-weight: bold; color: red;">@((Model.CashInvestmentApy / 100).ToString("P2"))</span>
                                    }
                                    else
                                    {
                                        @((Model.CashInvestmentApy / 100).ToString("P2"))
                                    }
                                </td>
                            </tr>
                            @if (Model.HasPositionMortgage == Inview.Epi.EpiFund.Domain.Enum.PositionMortgageType.Yes &&
                        Model.MortgageLienAssumable == Inview.Epi.EpiFund.Domain.Enum.MortgageLienAssumable.Yes)
                            {
                                <tr>
                                    <td colspan="2">
                                        <em>This Property may have existing assumable financing. Details on the existing debt structure are available for your review in the Listing Agent’s Marketing Brochure located in the Asset Documents Section below.</em>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
                <div class="col-lg-6">
                    <table class="table table-striped asset-table">
                        <tbody>
                            <tr>
                                <td>
                                    <label>Calculated Market Value (<a title="[Calculated Market Value is based solely on either (1) comparable sales data provided by the Listing Agent or Seller in their Offering Memorandum, or, in the absence thereof, (2) calculated to the displayed CAP Rate only if the offering price for the asset is TBD by Market.]">CMV</a>)</label>
                                </td>
                                <td style="text-align: right;">
                                    <span class="padmoney" id="bpo">@Html.DisplayFor(s => s.CurrentBpo, new { @class = "control-label" })</span>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <label>Calculated Market Value / <a title="[Calculated Market Value is based solely on either (1) comparable sales data provided by the Listing Agent or Seller in their Offering Memorandum, or, in the absence thereof, (2) calculated to the displayed CAP Rate only if the offering price for the asset is TBD by Market.]">CMV</a> / Unit</label>
                                </td>
                                <td style="text-align: right;">
                                    <span class="padmoney">@appraisalPerUnit.ToString("c0")</span>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <label>Calculated Market Value / <a title="[Calculated Market Value is based solely on either (1) comparable sales data provided by the Listing Agent or Seller in their Offering Memorandum, or, in the absence thereof, (2) calculated to the displayed CAP Rate only if the offering price for the asset is TBD by Market.]">CMV</a> / Sq.Ft.</label>
                                </td>
                                <td style="text-align: right;">
                                    <span class="padmoney">@appraisalPerSqFt</span>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <label>Independent Appraisal/<a title="[Calculated Market Value is based solely on either (1) comparable sales data provided by the Listing Agent or Seller in their Offering Memorandum, or, in the absence thereof, (2) calculated to the displayed CAP Rate only if the offering price for the asset is TBD by Market.]">CMV</a> <a title="Annual Capitalization Rate">CAP</a>Rate</label></td>
                                <td style="text-align: right;">
                                    @capRate.ToString("P2")
                                </td>
                            </tr>
                            <tr>
                                <td>@Html.LabelFor(s => s.HasIncome)
                                </td>
                                <td style="text-align: right;">
                                    @(Model.HasIncome ? "Yes" : "No")
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <label>Last Reported Occupancy</label>
                                </td>
                                <td style="text-align: right;">
                                    @(((100 - Model.CurrentVacancyFac) / 100).ToString("P"))
                                    <br />@(Model.LastReportedOccupancyDate.HasValue ? Model.LastReportedOccupancyDate.Value.ToString("MM/yyyy") : "")
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <label>Current Annualized Operating Income</label>
                                </td>
                                <td style="text-align: right;">
                                    <span class="padmoney">@Model.AnnualGrossIncome.ToString("C0")</span>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <label>Is Sale of Property Subject to Auction?</label>
                                </td>
                                <td style="text-align: right;">
                                    @if (Model.IsTBDMarket)
                                    {
                                        <span class="asset-sold">Yes</span>
                                    }
                                    else
                                    {
                                        <span>No</span>
                                    }
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <label>If Yes, What is the Auction Date?</label>
                                </td>
                                <td style="text-align: right;">
                                    @if (Model.AuctionDate.HasValue)
                                    {
                                        <span class="asset-sold">@Model.AuctionDate.Value.ToShortDateString()</span>
                                    }
                                    else
                                    {
                                        <span>N/A</span>
                                    }
                                </td>
                            </tr>
                            @if (Model.ClosingDate.HasValue && !Model.IsTBDMarket)
                            {
                                <tr>
                                    <td>
                                        <label>Offer Closing Date</label></td>
                                    <td style="text-align: right;">@Model.ClosingDate.Value.ToString("MM/dd/yy")</td>
                                </tr>
                            }
                            <tr>
                                <td>
                                    <label>Est Def Maintenance</label>
                                    <a data-toggle="modal" data-target="#loginwarning" style="margin-left: 10px;">(View list)</a>
                                </td>
                                @if (!Model.HasDeferredMaintenance)
                                {
                                    <td style="text-align: right;">
                                        <span class="padmoney">$0</span>
                                    </td>
                                }
                                else if (Model.HasDeferredMaintenance)
                                {
                                    <td style="text-align: right;">
                                        <span class="padmoney">@mfAsset.EstDeferredMaintenance.ToString("C")</span>
                                    </td>
                                }
                            </tr>
                            @*<tr>
                        <td>
                            <label>Independent Appraisal/<a title="Broker Price Opinion and or weighted average of Sale Comps provided by List Agent">BPO</a> <a title="Annual Capitalization Rate">CAP</a> Rate</label></td>
                        <td style="text-align: right;">
                            @bpoRate.ToString("P2")
                        </td>
                    </tr>*@
                        </tbody>
                    </table>
                </div>
            </div>
        
        }
        @if (Model.AssetType == AssetType.MHP)
        {
            <hr />
            <h4>Property Proforma Details</h4>
            <div class="row">
                <div class="col-lg-6">
                    <table class="table table-striped asset-table">
                        <tbody>
                            <tr>
                                <td>
                                    @Html.LabelFor(s => s.AskingPrice)
                                </td>
                                <td style="text-align: right;">
                                    @if (!Model.IsTBDMarket || Model.AskingPrice > 0)
                                    {
                                        <span class="padmoney" id="AskingPrice">@Model.AskingPrice.ToString("C0")</span>
                                    }
                                    else
                                    {
                                        <a title="Per Professional Listing, Pricing to be determined by Market Conditions and highest and best offer submitted">TBD</a>
                                    }
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <label>List Price / MHP Space</label>
                                </td>
                                <td style="text-align: right;">
                                    @if (!Model.IsTBDMarket || Model.AskingPrice > 0)
                                    {
                                        <span class="padmoney">@listPricePerMHP.ToString("C0")</span>
                                    }
                                    else
                                    {
                                        <a title="Per Professional Listing, Pricing to be determined by Market Conditions and highest and best offer submitted">TBD</a>
                                    }
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <label>List Price / Acreage  Sq.Ft.</label>
                                </td>
                                <td style="text-align: right;">
                                    @if (!Model.IsTBDMarket || Model.AskingPrice > 0)
                                    {
                                        <span class="padmoney">@listPricePerSqFt.ToString("C")</span>
                                    }
                                    else
                                    {
                                        <a title="Per Professional Listing, Pricing to be determined by Market Conditions and highest and best offer submitted">TBD</a>
                                    }
                                </td>
                            </tr>
                            @*<tr>
                        <td>
                            <label>Current Annualized Operating Income</label>
                        </td>
                        <td style="text-align: right;">
                            <span class="padmoney">@Model.AnnualGrossIncome.ToString("C0")</span>
                        </td>
                    </tr>*@
                            <tr>
                                <td>
                                    <label>Proforma <a title="Annualized Scheduled Gross Income">SGI</a> (Annualized)</label>
                                </td>
                                <td style="text-align: right;">
                                    <span class="padmoney">@Model.ProformaAnnualIncome.ToString("C0")</span>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <label>Proforma <a title="Vacancy Factor">VF</a>(Annualized)</label>
                                </td>
                                <td style="text-align: right;">
                                    @((Model.ProformaVacancyFac / 100).ToString("P"))
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <label>Proforma <a title="Annual Miscellaneous Income">AMI</a></label>
                                </td>
                                <td style="text-align: right;">
                                    <span class="padmoney">@Model.ProformaMiscIncome.ToString("C0")</span>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <label>Proforma <a title="Annual Operating Expense">AOE</a></label>
                                </td>
                                <td style="text-align: right;">
                                    <span class="padmoney">@Model.ProformaAnnualOperExpenses.ToString("C0")</span>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <label>Proforma <a title="Annual Operating Expense">AOE</a> as % of <a title="Scheduled Gross Income">SGI</a></label>
                                </td>
                                <td style="text-align: right;">
                                    <span class="pad">@Model.ProformaAoeFactorAsPerOfSGI</span>%
                            @Html.HiddenFor(s => s.ProformaAoeFactorAsPerOfSGI)
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <label>Proforma Pre Tax <a title="Annualized Net Operating Income">NOI</a></label>
                                </td>
                                <td style="text-align: right;">
                                    <span class="padmoney">@proformaNOI.ToString("C0")</span>
                                    <input type="hidden" value="@proformaNOI" id="hdnProformaNOI" />
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <label>Listed Price/<a title="[Calculated Market Value is based solely on either (1) comparable sales data provided by the Listing Agent or Seller in their Offering Memorandum, or, in the absence thereof, (2) calculated to the displayed CAP Rate only if the offering price for the asset is TBD by Market.]">CMV</a> <a title="Annual Capitalization Rate">CAP</a> (Profroma Annualized Operating Data)</label>
                                </td>
                                <td style="text-align: right;">
                                    @if (Model.CashInvestmentApy <= 0)
                                    {
                                        <span style="font-weight: bold; color: red;">@((Model.CashInvestmentApy / 100).ToString("P2"))</span>
                                    }
                                    else
                                    {
                                        @((Model.CashInvestmentApy / 100).ToString("P2"))
                                    }
                                </td>
                            </tr>
                            @if (Model.HasPositionMortgage == Inview.Epi.EpiFund.Domain.Enum.PositionMortgageType.Yes &&
                        Model.MortgageLienAssumable == Inview.Epi.EpiFund.Domain.Enum.MortgageLienAssumable.Yes)
                            {
                                <tr>
                                    <td colspan="2">
                                        <em>This Property may have existing assumable financing. Details on the existing debt structure are available for your review in the Listing Agent’s Marketing Brochure located in the Asset Documents Section below.</em>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
                <div class="col-lg-6">
                    <table class="table table-striped asset-table">
                        <tbody>
                            @*<tr>
                        <td>
                            <label>Calculated Market Value (<a title="[Calculated Market Value is based solely on either (1) comparable sales data provided by the Listing Agent or Seller in their Offering Memorandum, or, in the absence thereof, (2) calculated to the displayed CAP Rate only if the offering price for the asset is TBD by Market.]">CMV</a>)</label>
                        </td>
                        <td style="text-align: right;">
                            <span class="padmoney" id="bpo">@Html.DisplayFor(s => s.CurrentBpo, new { @class = "control-label" })</span>
                        </td>
                    </tr>*@
                            <tr>
                                <td>
                                    <label>Independent Appraisal/<a title="Broker Price Opinion and or weighted average of Sale Comps provided by List Agent">BPO</a> </label>
                                </td>
                                <td style="text-align: right;">
                                    @bpoRate.ToString("P2")
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <label>Calculated Market Value / <a title="[Calculated Market Value is based solely on either (1) comparable sales data provided by the Listing Agent or Seller in their Offering Memorandum, or, in the absence thereof, (2) calculated to the displayed CAP Rate only if the offering price for the asset is TBD by Market.]">CMV</a> / MHP Space</label>
                                </td>
                                <td style="text-align: right;">
                                    <span class="padmoney">@appraisalPerUnit.ToString("c0")</span>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <label>Calculated Market Value / <a title="[Calculated Market Value is based solely on either (1) comparable sales data provided by the Listing Agent or Seller in their Offering Memorandum, or, in the absence thereof, (2) calculated to the displayed CAP Rate only if the offering price for the asset is TBD by Market.]">CMV</a> /Acreage Sq.Ft.</label>
                                </td>
                                <td style="text-align: right;">
                                    <span class="padmoney">@appraisalPerSqFt</span>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <label>Independent Appraisal/<a title="[Calculated Market Value is based solely on either (1) comparable sales data provided by the Listing Agent or Seller in their Offering Memorandum, or, in the absence thereof, (2) calculated to the displayed CAP Rate only if the offering price for the asset is TBD by Market.]">CMV</a> <a title="Annual Capitalization Rate">CAP</a>Rate</label></td>
                                <td style="text-align: right;">
                                    @capRate.ToString("P2")
                                </td>
                            </tr>
                            <tr>
                                <td>@Html.LabelFor(s => s.HasIncome)
                                </td>
                                <td style="text-align: right;">
                                    @(Model.HasIncome ? "Yes" : "No")
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <label>Last Reported Occupancy</label>
                                </td>
                                <td style="text-align: right;">
                                    @(((100 - Model.CurrentVacancyFac) / 100).ToString("P"))
                                    <br />@(Model.LastReportedOccupancyDate.HasValue ? Model.LastReportedOccupancyDate.Value.ToString("MM/yyyy") : "")
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <label>Is Sale of Property Subject to Auction?</label>
                                </td>
                                <td style="text-align: right;">
                                    @if (Model.IsTBDMarket)
                                    {
                                        <span class="asset-sold">Yes</span>
                                    }
                                    else
                                    {
                                        <span>No</span>
                                    }
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <label>If Yes, What is the Auction Date?</label>
                                </td>
                                <td style="text-align: right;">
                                    @if (Model.AuctionDate.HasValue)
                                    {
                                        <span class="asset-sold">@Model.AuctionDate.Value.ToShortDateString()</span>
                                    }
                                    else
                                    {
                                        <span>N/A</span>
                                    }
                                </td>
                            </tr>
                            @* @if (Model.ClosingDate.HasValue && !Model.IsTBDMarket)
                    {
                        <tr>
                            <td>
                                <label>Offer Closing Date</label></td>
                            <td style="text-align: right;">@Model.ClosingDate.Value.ToString("MM/dd/yy")</td>
                        </tr>
                    }*@
                            <tr>
                                <td>
                                    <label>Est Def Maintenance</label>
                                    <a data-toggle="modal" data-target="#loginwarning" style="margin-left: 10px;">(View list)</a>
                                </td>
                                @if (!Model.HasDeferredMaintenance)
                                {
                                    <td style="text-align: right;">
                                        <span class="padmoney">$0</span>
                                    </td>
                                }
                                else if (Model.HasDeferredMaintenance)
                                {
                                    <td style="text-align: right;">
                                        <span class="padmoney">@mfAsset.EstDeferredMaintenance.ToString("C")</span>
                                    </td>
                                }
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        
        }

        <hr />

        @if (Model.GetType() == typeof(CommercialAssetViewModel))
        {
            <h4>Preferred CAP Rate Analysis Calculator to Proforma Operating Data</h4>
            <div class="row">
                <div class="col-lg-6">
                    <table class="table table-striped asset-table">
                        <tbody>
                            <tr>
                                <td style="line-height: 32px">
                                    <label>Enter Desired CAP Rate</label></td>
                                <td style="line-height: 32px">
                                    <input type="text" id="txtBoxDesiredCapRate" style="width: 60px; text-align: right; margin-right: 5px; margin-bottom: 0" value="0.00%" /></td>
                            </tr>
                            <tr>
                            <tr>
                                <td>
                                    <label>Comparative % to Listed Pricing/<a title="[Calculated Market Value is based solely on either (1) comparable sales data provided by the Listing Agent or Seller in their Offering Memorandum, or, in the absence thereof, (2) calculated to the displayed CAP Rate only if the offering price for the asset is TBD by Market.]">CMV</a></label></td>
                                <td style="text-align: right;"><span id="CompPercPerCapRate">0.00%</span></td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                <div class="col-lg-6">
                    <table class="table table-striped asset-table">
                        <tbody>
                            <tr>
                                <td>
                                    <label>Calculated value at your selected <a title="Annual Capitalization Rate">CAP</a></label></td>
                                <td style="text-align: right;"><span id="CalculatedPricePerCapRate">$0.00</span>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <label>New <a title="Annual Capitalization Rate">CAP</a> Pricing Per Sq.Ft</label></td>
                                <td style="text-align: right;"><span id="PricePerFootPerCapRate">$0.00</span></td>
                            </tr>
                            <tr>
                                <td>
                                    <label>Equity Adjustment to selected <a title="Annual Capitalization Rate">CAP</a></label></td>
                                <td style="text-align: right;"><span id="EquityAdjPerCapRate">$0.00</span></td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                <div class="col-lg-12" style="text-align: center">
                    <input type="button" id="BtnCapRateCalc" value="Calculate" />
                </div>
            </div>
    
            <hr />
            <h4>Property Data</h4>
            <div class="row">
                <div class="col-lg-6">
                    <table class="table table-striped asset-table">
                        <tbody>
                            <tr>
                                <td>
                                    <label>Property Type</label></td>
                                <td style="text-align: right;">
                                    @Inview.Epi.EpiFund.Domain.Helpers.EnumHelper.GetEnumDescription(Model.AssetType)
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <label>Number of Rentable Suites</label></td>
                                <td style="text-align: right;">@cAsset.NumberofSuites
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <label>Gross Rentable Sq. Ft.</label></td>
                                <td style="text-align: right;">
                                    <span class="pad">@cAsset.SquareFeet</span>
                                    @Html.HiddenFor(s => cAsset.SquareFeet, new { id = "mfAsset_SquareFeet" })
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <label>Property Address</label>
                                </td>
                                <td style="text-align: right;">
                                    @Html.DisplayFor(s => s.PropertyAddress, new { @class = "control-label" })
                                    <a href="http://maps.google.com/maps?q=@Model.PropertyAddress @Model.City @Model.State">Click Here For Map</a>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <label>City, State, Zip</label></td>
                                <td style="text-align: right;">@(string.Format("{0}, {1} {2}", Model.City, Model.State, Model.Zip))</td>
                            </tr>
                            <tr>
                                <td>
                                    <label>County where Property Located</label>
                                </td>
                                <td style="text-align: right;">@Model.County</td>
                            </tr>
                            <tr>
                                <td style="width: 50%;">
                                    <label>Tax Assessor Number(s)</label>
                                <td style="width: 50%; text-align: right;">
                                    @foreach (var tpn in Model.AssetTaxParcelNumbers)
                                    {
                                        <span>@tpn.TaxParcelNumber</span> <br />
                                    }
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <label>Year Orginally Built</label></td>
                                <td style="text-align: right;">@Model.YearBuilt</td>
                            </tr>
                            @*<tr>
                        <td>
                            @Html.LabelFor(s => s.PropLastUpdatedYear)</td>
                        <td style="text-align: right;">@Model.PropLastUpdatedYear</td>
                    </tr>*@
                            <tr>
                                <td>
                                    <label>Total Lot Size of Property</label></td>
                                <td style="text-align: right;">@Model.LotSize acres</td>
                            </tr>
                            <tr>
                                <td>
                                    <label>Number of Buildings</label></td>
                                <td style="text-align: right;">@Model.BuildingsCount</td>
                            </tr>
                            <tr>
                                <td>
                                    <label>Number of Parking Spaces</label></td>
                                <td style="text-align: right;"><span class="pad">@cAsset.ParkingSpaces</span></td>
                            </tr>
                            <tr>
                                <td>
                                    <label>Number of Covered Parking Spaces</label></td>
                                <td style="text-align: right;"><span class="pad">@cAsset.CoveredParkingSpaces</span></td>
                            </tr>
                            <tr>
                                <td>
                                    <label>Property Operating Status</label></td>
                                <td style="text-align: right;">@Inview.Epi.EpiFund.Domain.Helpers.EnumHelper.GetEnumDescription(Model.OperatingStatus)</td>
                            </tr>
                            <tr>
                                <td>
                                    <label>List Agent Grade Classification of Prop:</label></td>
                                <td style="text-align: right;">@Model.GradeClassification</td>
                            </tr>
                            <tr>
                                <td>@Html.LabelFor(s => s.PropertyCondition)</td>
                                <td style="text-align: right;">@Inview.Epi.EpiFund.Domain.Helpers.EnumHelper.GetEnumDescription(Model.PropertyCondition)</td>
                            </tr>
                            @*<tr>
                        <td>
                            @Html.LabelFor(s => s.PropHoldTypeId)</td>
                        <td style="text-align: right;">@Model.PropHoldType</td>
                    </tr>*@
                        </tbody>
                    </table>
                </div>
                <div class="col-lg-6">
                    <table class="table table-striped asset-table">
                        <tbody>
                            <tr>
                                <td>
                                    <label>Is the Major Tenant a Publically Traded Company?</label>
                                </td>
                                <td style="text-align: right;">
                                    @(cAsset.HasAAARatedMajorTenant ? "Yes" : "No")
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <label>Name of Major Tenant (if applicable)</label>
                                </td>
                                <td style="text-align: right;">
                                    @cAsset.NameOfAAARatedMajorTenant
                                </td>
                            </tr>
                            @*<tr>
                        <td>
                            <label>Is the Major Tenant a Publically Traded Company</label>
                        </td>
                        <td style="text-align: right;">
                            @(cAsset.IsMajorTenantAAARated ? "Yes" : "No")
                        </td>
                    </tr>*@
                            <tr>
                                <td>
                                    <label>Leased Square Footage of Major Tenant</label>
                                </td>
                                <td style="text-align: right;">
                                    <span class="pad">@cAsset.LeasedSquareFootageByMajorTenant</span>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <label>Percentage of Property Leased by Major Tenant</label>
                                </td>
                                <td style="text-align: right;">
                                    @percentOfPropLeased %
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <label>Major Tenant's Base Rent per Sq.Ft</label>
                                </td>
                                <td style="text-align: right;">
                                    <span class="padmoney">@cAsset.BaseRentPerSqFtMajorTenant</span>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <label>Total Number of Tenants Currently Occ Prop</label>
                                </td>
                                <td style="text-align: right;">
                                    @cAsset.NumberOfTenants
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <label>Current Market Rents per Sq.Ft</label>
                                </td>
                                <td style="text-align: right;">
                                    <span class="padmoney">@cAsset.CurrentMarkerRentPerSqFt</span>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <label>Current Number of Vacant Suites for the Property</label>
                                </td>
                                <td style="text-align: right;">
                                    @cAsset.NumberOfRentableSuites
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <label>Define Vacancy Suite Build Out Status of Property</label>
                                </td>
                                <td style="text-align: right;">
                                    @Inview.Epi.EpiFund.Domain.Helpers.EnumHelper.GetEnumDescription(cAsset.VacantSuites)
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <label>Is Property in a Pending Foreclosure/Bankruptcy</label>
                                </td>
                                <td style="text-align: right;">
                                    @(cAsset.isPendingForeclosure ? "Yes" : "No")
                                </td>
                            </tr>
                            @if (cAsset.isPendingForeclosure)
                            {
                                <tr>
                                    <td>
                                        <label>Pending Foreclosure Sale Date</label>
                                    </td>
                                    <td style="text-align: right;">
                                        @(cAsset.ForeclosureSaleDate.HasValue ? @cAsset.ForeclosureSaleDate.Value.ToString("MM/dd/yy") : "N/A")
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <label>Foreclosure File Recordation Number</label>
                                    </td>
                                    <td style="text-align: right;">
                                        @cAsset.ForeclosureRecordNumber
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <label>Foreclosing Lender of Record</label>
                                    </td>
                                    <td style="text-align: right;">
                                        @cAsset.ForeclosureLender
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <label>Mortgage Position for Lender of Record</label>
                                    </td>
                                    <td style="text-align: right;">
                                        @Inview.Epi.EpiFund.Domain.Helpers.EnumHelper.GetEnumDescription(cAsset.ForeclosurePosition)
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
    
            <hr />
            <h4>Adjusted Proforma Analysis: Tenant Improvement Inclusion</h4>
    
            <div class="row">
                <div class="col-lg-6">
                    <table class="table table-striped asset-table">
                        <tbody>
                            <tr>
                                <td>
                                    <label>List Price + Est Tenant Improvement</label></td>
                                <td style="text-align: right;"><span class="padmoney">@(cAsset.AskingPrice == 0 ? cAsset.CurrentBpo + cAsset.EstDeferredMaintenance : cAsset.AskingPrice + cAsset.EstDeferredMaintenance)</span></td>
                            </tr>
                            <tr>
                                <td>
                                    <label>Adjusted <a title="Annualized Scheduled Gross Income">SGI</a> after Tenant Improvement</label></td>
                                <td style="text-align: right;">@defProformaSGI.ToString("C0")</td>
                            </tr>

                            @*<tr>
                        <td>
                            <label>Base Monthly Rental Income Adjustment per Unit after Renovations</label></td>
                        <td style="text-align: right;"><span class="padmoney">@(mfAsset.EstDeferredMaintenance == 0 ? 0 : Model.AverageAdjustmentToBaseRentalIncomePerUnitAfterRenovations)</span></td>
                    </tr>*@
                            <tr>
                                <td>
                                    <label>EST Base Rent Adjustment After Tenant Improvement Budget</label></td>
                                <td style="text-align: right;"><span class="padmoney">@defAnnualRevenueAdjustment</span></td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                <div class="col-lg-6">
                    <table class="table table-striped asset-table">
                        <tbody>
                            <tr>
                                <td>
                                    <label>Adjusted Proforma Pre Tax NOI</label></td>
                                <td style="text-align: right;"><span class="padmoney">@defProformaNOI.ToString("C0")</span><input type="hidden" value="@defProformaNOI" id="hdnDefProformaNOI" /><input type="hidden" value="@defTotalListing" id="hdnDefTotalListing" /></td>
                            </tr>
                            <tr>
                                <td>
                                    <label>Adjusted CAP Rate Calculation</label></td>
                                <td style="text-align: right;"><span class="pad">@defCapRate</span>%</td>
                            </tr>
                            @*<tr>
                        <td colspan="2">
                            <em>“The comparative pricing analysis computes the differentials between the adjusted price points of [List Price + Deferred Maintenance Budget] and calculated Operating & Value Proforma subsequent Deferred Maintenance implementation.”</em>
                        </td>
                    </tr>*@
                        </tbody>
                    </table>
                </div>
            </div>
    
            <hr />
            <h4>Adjusted Preferred Cap Rate Analysis Calculator: Tenant Improvement Inclusion</h4>
            <div class="row">
                <div class="col-lg-6">
                    <table class="table table-striped asset-table">
                        <tbody>
                            <tr>
                                <td style="line-height: 32px">
                                    <label>Enter Desired CAP Rate</label></td>
                                <td style="line-height: 32px; text-align: right;">
                                    <input type="text" id="defTxtBoxDesiredCapRate" style="width: 60px; text-align: right; margin-right: 5px; margin-bottom: 0" value="0.00%" /></td>
                            </tr>

                            <tr style="display: none">
                                <td>
                                    <label>New Tenant Improvement CAP Pricing Per Unit</label></td>
                                <td style="text-align: right;"><span id="defPricePerUnitPerCapRate">$0.00</span></td>
                            </tr>
                            <tr>
                                <td>
                                    <label>New Tenant Improvement Budget CAP Pricer per Sq.Ft</label></td>
                                <td style="text-align: right;"><span id="defPricePerFootPerCapRate">$0.00</span></td>
                            </tr>
                            <tr>
                                <td>
                                    <label>Comparative % to Listed Pricing/<a title="[Calculated Market Value is based solely on either (1) comparable sales data provided by the Listing Agent or Seller in their Offering Memorandum, or, in the absence thereof, (2) calculated to the displayed CAP Rate only if the offering price for the asset is TBD by Market.]">CMV</a></label></td>
                                <td style="text-align: right;"><span id="defCompPercPerCapRate">0.00%</span></td>
                            </tr>
                        </tbody>
                    </table>
                </div>

                <div class="col-lg-6">
                    <table class="table table-striped asset-table">
                        <tbody>
                            <tr>
                                <td>
                                    <label>Calculated Price at your selected CAP</label></td>
                                <td style="text-align: right;"><span id="defCalculatedPricePerCapRate">$0.00</span></td>
                            </tr>
                            <tr>
                                <td>
                                    <b>Less DM/TI Budget of:</b><span style="padding: 5px" id="defLessDMBudget">$0.00</span>

                                    <b>Net Offering:</b><span style="padding: 5px" id="defNetOffering">$0.00</span></td>
                            </tr>
                            <tr>
                                <td>
                                    <label>Equity Adjustment to Selected CAP</label></td>
                                <td style="text-align: right;"><span id="defEquityAdjPerCapRate">$0.00</span></td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
    
            <div class="row">
                <div class="col-lg-12" style="text-align: center">
                    <input type="button" id="defBtnCapRateCalc" value="Calculate" />
                </div>
            </div>
    
            <div class="modal fade" id="loginwarning" tabindex="-1" role="dialog" aria-labelledby="loginwarning-label" aria-hidden="true" data-backdrop="false">
                <form>
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                                <h4 class="modal-title" id="loginwarning-label">Estimated Tenant Improvement Items</h4>
                            </div>
                            <div class="modal-body">
                                @if (@cAsset.EstDeferredMaintenance == 0)
                                {
                                }
                                else
                                {
                                    <table class="tabled table-striped">
                                        <thead>
                                            <tr>
                                                <td style="width: auto;">
                                                    <label>Item</label></td>
                                                <td style="width: auto;">
                                                    <label>Description</label></td>
                                                <td>
                                                    <label>Unit Per Cost</label></td>
                                                <td>
                                                    <label>Number of Items</label></td>
                                                <td>
                                                    <label>Total Item Cost</label></td>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var item in Model.DeferredMaintenanceItems)
                                            {
                                                if (item.Selected)
                                                {
                                        
                                                <tr>
                                                    <td style="text-align: center;">@item.ItemTitle</td>
                                                    <td style="text-align: center;">@item.ItemDescription</td>
                                                    <td style="text-align: right;">@item.UnitCost.ToString("C0")</td>
                                                    <td style="text-align: center;">@(string.Format("{0} {1}", item.NumberOfUnits, item.UnitTypeLabel))</td>
                                                    <td style="text-align: right;">@((item.NumberOfUnits * item.UnitCost).ToString("C0"))</td>
                                                </tr>
                                    
                                                }
                                            }
                                        </tbody>
                                    </table>
                                }
                                <label>Total Cost:</label>@cAsset.EstDeferredMaintenance.ToString("C0")
                            </div>
                            <div class="modal-footer">
                                <input type="button" class="btn" value="Close" data-dismiss="modal" />
                            </div>
                        </div>
                    </div>
                </form>
            </div>
        }
        @if (Model.GetType() == typeof(MultiFamilyAssetViewModel) && Model.AssetType != AssetType.MHP)
        {
            <h4>Preferred Cap Rate Analysis Calculator</h4>
            <div class="row">
                <div class="col-lg-6">
                    <table class="table table-striped asset-table">
                        <tbody>
                            <tr>
                                <td style="line-height: 32px">
                                    <label>Enter Desired CAP Rate</label></td>
                                <td style="line-height: 32px">
                                    <input type="text" id="txtBoxDesiredCapRate" style="width: 60px; text-align: right; margin-right: 5px; margin-bottom: 0" value="0.00%" /></td>
                            </tr>
                            <tr>
                                <td>
                                    <label>New <a title="Annual Capitalization Rate">CAP</a> Pricing Per Unit</label></td>
                                <td style="text-align: right;"><span id="PricePerUnitPerCapRate">$0.00</span></td>
                            </tr>
                            <tr>
                                <td>
                                    <label>Comparative % to Listed Pricing/<a title="[Calculated Market Value is based solely on either (1) comparable sales data provided by the Listing Agent or Seller in their Offering Memorandum, or, in the absence thereof, (2) calculated to the displayed CAP Rate only if the offering price for the asset is TBD by Market.]">CMV</a></label></td>
                                <td style="text-align: right;"><span id="CompPercPerCapRate">0.00%</span></td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                <div class="col-lg-6">
                    <table class="table table-striped asset-table">
                        <tbody>
                            <tr>
                                <td>
                                    <label>Calculated value at your selected <a title="Annual Capitalization Rate">CAP</a></label></td>
                                <td style="text-align: right;"><span id="CalculatedPricePerCapRate">$0.00</span>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <label>New <a title="Annual Capitalization Rate">CAP</a> Pricing Per Square Foot</label></td>
                                <td style="text-align: right;"><span id="PricePerFootPerCapRate">$0.00</span></td>
                            </tr>
                            <tr>
                                <td>
                                    <label>Equity Adjustment to selected <a title="Annual Capitalization Rate">CAP</a></label></td>
                                <td style="text-align: right;"><span id="EquityAdjPerCapRate">$0.00</span></td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                <div class="col-lg-12" style="text-align: center">
                    <input type="button" id="BtnCapRateCalc" value="Calculate" />
                </div>
            </div>
            <hr />
            <h4>Property Data</h4>
            <div class="row">
                <div class="col-lg-6">
                    <table class="table table-striped asset-table">
                        <tbody>
                            <tr>
                                <td>
                                    <label>Property Type</label></td>
                                <td style="text-align: right;">
                                    @Inview.Epi.EpiFund.Domain.Helpers.EnumHelper.GetEnumDescription(Model.AssetType)
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <label>Number of Units</label></td>
                                <td style="text-align: right;">@mfAsset.TotalUnits
                                    <input id="mfAsset_TotalUnits" value="@mfAsset.TotalUnits" style="display:none;"/>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <label>Gross Rentable Sq. Ft.</label></td>
                                <td style="text-align: right;">
                                    <span class="pad">@mfAsset.SquareFeet</span>
                                    <input id="mfAsset_SquareFeet" value="@mfAsset.SquareFeet" style="display:none" />
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <label>Property Address</label>
                                </td>
                                <td style="text-align: right;">
                                    @Html.DisplayFor(s => s.PropertyAddress, new { @class = "control-label" })
                                    <a href="http://maps.google.com/maps?q=@Model.PropertyAddress @Model.City @Model.State">Click Here For Map</a>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <label>City, State, Zip</label></td>
                                <td style="text-align: right;">@(string.Format("{0}, {1} {2}", Model.City, Model.State, Model.Zip))</td>
                            </tr>
                            <tr>
                                <td>
                                    <label>County where Property Located</label>
                                </td>
                                <td style="text-align: right;">@Model.County</td>
                            </tr>
                            <tr>
                                <td style="width: 50%;">
                                    <label>Tax Assessor Number(s)</label>
                                <td style="width: 50%; text-align: right;">
                                    @foreach (var tpn in Model.AssetTaxParcelNumbers)
                                    {
                                        <span>@tpn.TaxParcelNumber</span> <br />
                                    }
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <label>Year Orginally Built</label></td>
                                <td style="text-align: right;">@Model.YearBuilt</td>
                            </tr>
                            <tr>
                                <td>
                                    <label>Total Lot Size of Property</label></td>
                                <td style="text-align: right;">@Model.LotSize Acres</td>
                            </tr>
                            <tr>
                                <td>
                                    <label>Number of Buildings</label></td>
                                <td style="text-align: right;">@Model.BuildingsCount</td>
                            </tr>
                            <tr>
                                <td>
                                    <label>Electric Utility Metering</label></td>
                                <td style="text-align: right;">@Inview.Epi.EpiFund.Domain.Helpers.EnumHelper.GetEnumDescription(@mfAsset.ElectricMeterMethod)</td>
                            </tr>
                            <tr>
                                <td>
                                    <label>Gas Utility Metering</label></td>
                                <td style="text-align: right;">@Inview.Epi.EpiFund.Domain.Helpers.EnumHelper.GetEnumDescription(@mfAsset.GasMeterMethod)</td>
                            </tr>
                            <tr>
                                <td>
                                    <label>Number of Parking Spaces</label></td>
                                <td style="text-align: right;"><span class="pad">@mfAsset.ParkingSpaces</span></td>
                            </tr>
                            <tr>
                                <td>
                                    <label>Number of Covered Parking Spaces</label></td>
                                <td style="text-align: right;"><span class="pad">@mfAsset.CoveredParkingSpaces</span></td>
                            </tr>
                            <tr>
                                <td>
                                    <label>Property Operating Status</label></td>
                                <td style="text-align: right;">@Inview.Epi.EpiFund.Domain.Helpers.EnumHelper.GetEnumDescription(Model.OperatingStatus)</td>
                            </tr>
                            <tr>
                                <td>
                                    <label>List Agent Grade Classification of Prop:</label></td>
                                <td style="text-align: right;">@Model.GradeClassification</td>
                            </tr>
                            <tr>
                                <td>@Html.LabelFor(s => s.PropertyCondition)</td>
                                <td style="text-align: right;">@Inview.Epi.EpiFund.Domain.Helpers.EnumHelper.GetEnumDescription(Model.PropertyCondition)</td>
                            </tr>
                            @* <tr>
                        <td>
                            @Html.LabelFor(s => s.PropHoldTypeId)</td>
                        <td style="text-align: right;">@Model.PropHoldType</td>
                    </tr>*@
                            <tr>
                                <td>
                                    @Html.LabelFor(s => s.PropLastUpdatedYear)</td>
                                <td style="text-align: right;">@Model.PropLastUpdatedYear</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                @Html.DisplayFor(s => mfAsset.UnitSpecifications, "UnitSpecDisplayTemplate")
            </div>
     
            <hr />
            <h4>Adjusted Proforma Analysis: Deferred Maintenance Inclusion</h4>
    
            <div class="row">
                <div class="col-lg-6">
                    <table class="table table-striped asset-table">
                        <tbody>
                            <tr>
                                <td>
                                    <label>List Price + Est Def Maintenance</label></td>
                                <td style="text-align: right;"><span class="padmoney">@defTotalListing.ToString("C0")</span></td>
                            </tr>
                            <tr>
                                <td>
                                    <label>Adjusted <a title="Annualized Scheduled Gross Income">SGI</a> after Def Maintenance</label></td>
                                <td style="text-align: right;">@defProformaSGI.ToString("C0")</td>
                            </tr>

                            @*<tr>
                        <td>
                            <label>Base Monthly Rental Income Adjustment per Unit after Renovations</label></td>
                        <td style="text-align: right;"><span class="padmoney">@(mfAsset.EstDeferredMaintenance == 0 ? 0 : Model.AverageAdjustmentToBaseRentalIncomePerUnitAfterRenovations)</span></td>
                    </tr>*@
                            <tr>
                                <td>
                                    <label>EST Base Rent Adjustment After Def Maintenance Budget</label></td>
                                <td style="text-align: right;"><span class="padmoney">@defAnnualRevenueAdjustment</span></td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                <div class="col-lg-6">
                    <table class="table table-striped asset-table">
                        <tbody>
                            <tr>
                                <td>
                                    <label>Adjusted Unit Cost with Def Maintenance</label></td>
                                @if (mfAsset.AskingPrice > 0)
                                {
                                    <td style="text-align: right;"><span class="padmoney">@(((((mfAsset.AskingPrice + mfAsset.EstDeferredMaintenance) != 0 && mfAsset.TotalUnits != 0) ? Math.Round(((mfAsset.AskingPrice + mfAsset.EstDeferredMaintenance) / mfAsset.TotalUnits)) : 0)))</span></td>
                                }
                                else
                                {
                                    <td style="text-align: right;"><span class="padmoney">@(((((mfAsset.CurrentBpo + mfAsset.EstDeferredMaintenance) != 0 && mfAsset.TotalUnits != 0) ? Math.Round(((mfAsset.CurrentBpo + mfAsset.EstDeferredMaintenance) / mfAsset.TotalUnits)) : 0)))</span></td>
                                }
                            </tr>
                            <tr>
                                <td>
                                    <label>Adjusted Proforma Pre Tax NOI</label></td>
                                <td style="text-align: right;"><span class="padmoney">@defProformaNOI</span><input type="hidden" value="@defProformaNOI" id="hdnDefProformaNOI" /><input type="hidden" value="@defTotalListing" id="hdnDefTotalListing" /></td>
                            </tr>
                            <tr>
                                <td>
                                    <label>Adjusted CAP Rate Calculation</label></td>
                                <td style="text-align: right;"><span class="pad">@defCapRate</span>%</td>
                            </tr>
                            @*<tr>
                        <td colspan="2">
                            <em>“The comparative pricing analysis computes the differentials between the adjusted price points of [List Price + Deferred Maintenance Budget] and calculated Operating & Value Proforma subsequent Deferred Maintenance implementation.”</em>
                        </td>
                    </tr>*@
                        </tbody>
                    </table>
                </div>
            </div>
      
    
                                //if (mfAsset.EstDeferredMaintenance > 0)
                                //{
            <hr />
            <h4>Adjusted Preferred Cap Rate Analysis Calculator: Deferred Maintenance Inclusion</h4>
            <div class="row">
                <div class="col-lg-6">
                    <table class="table table-striped asset-table">
                        <tbody>
                            <tr>
                                <td style="line-height: 32px">
                                    <label>Enter Desired CAP Rate</label></td>
                                <td style="line-height: 32px; text-align: right;">
                                    <input type="text" id="defTxtBoxDesiredCapRate" style="width: 60px; text-align: right; margin-right: 5px; margin-bottom: 0" value="0.00%" /></td>
                            </tr>

                            <tr>
                                <td>
                                    <label>New Def Maintenance CAP Pricing Per Unit</label></td>
                                <td style="text-align: right;"><span id="defPricePerUnitPerCapRate">$0.00</span></td>
                            </tr>
                            <tr>
                                <td>
                                    <label>New CAP Pricing per Sq.Ft</label></td>
                                <td style="text-align: right;"><span id="defPricePerFootPerCapRate">$0.00</span></td>
                            </tr>
                            <tr>
                                <td>
                                    <label>Comparative % to Listed Pricing/<a title="[Calculated Market Value is based solely on either (1) comparable sales data provided by the Listing Agent or Seller in their Offering Memorandum, or, in the absence thereof, (2) calculated to the displayed CAP Rate only if the offering price for the asset is TBD by Market.]">CMV</a></label></td>
                                <td style="text-align: right;"><span id="defCompPercPerCapRate">0.00%</span></td>
                            </tr>
                        </tbody>
                    </table>
                </div>

                <div class="col-lg-6">
                    <table class="table table-striped asset-table">
                        <tbody>
                            <tr>
                                <td>
                                    <label>Calculated Price at your selected CAP</label></td>
                                <td style="text-align: right;"><span id="defCalculatedPricePerCapRate">$0.00</span></td>
                            </tr>
                            <tr>
                                <td>
                                    <b>Less DM/TI Budget of:</b><span style="padding: 5px" id="defLessDMBudget">$0.00</span>

                                    <b>Net Offering:</b><span style="padding: 5px" id="defNetOffering">$0.00</span></td>
                            </tr>
                            <tr>
                                <td>
                                    <label>Equity Adjustment to Selected CAP</label></td>
                                <td style="text-align: right;"><span id="defEquityAdjPerCapRate">$0.00</span></td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
    
            <div class="row">
                <div class="col-lg-12" style="text-align: center">
                    <input type="button" id="defBtnCapRateCalc" value="Calculate" />
                </div>
            </div>
                                //}
            <div class="modal fade" id="loginwarning" tabindex="-1" role="dialog" aria-labelledby="loginwarning-label" aria-hidden="true" data-backdrop="false">
                <form>
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                                <h4 class="modal-title" id="loginwarning-label">Estimated Deferred Maintenance Items</h4>
                            </div>
                            <div class="modal-body">
                                @if (@mfAsset.EstDeferredMaintenance == 0)
                                {
                                }
                                else
                                {
                                    <table class="tabled table-striped">
                                        <thead>
                                            <tr>
                                                <td style="width: 160px;">
                                                    <label>Item</label></td>
                                                <td>
                                                    <label>Unit Per Cost</label></td>
                                                <td>
                                                    <label>Number of Items</label></td>
                                                <td>
                                                    <label>Total Item Cost</label></td>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var item in Model.DeferredMaintenanceItems)
                                            {
                                                if (item.Selected)
                                                {
                                                <tr>
                                                    <td style="text-align: center;">@item.ItemTitle</td>
                                                    <td style="text-align: right;">@item.UnitCost.ToString("C0")</td>
                                                    <td style="text-align: center;">@(string.Format("{0} {1}", item.NumberOfUnits, item.UnitTypeLabel))</td>
                                                    <td style="text-align: right;">@((item.NumberOfUnits * item.UnitCost).ToString("C0"))</td>
                                                </tr>
                                                }
                                            }
                                        </tbody>
                                    </table>
                                }
                                <label>Total Cost:</label>@mfAsset.EstDeferredMaintenance.ToString("C0")
                            </div>
                            <div class="modal-footer">
                                <input type="button" class="btn" value="Close" data-dismiss="modal" />
                            </div>
                        </div>
                    </div>
                </form>
            </div>
        }
        @if (Model.AssetType == AssetType.MHP)
        {
          
            <hr />
            <h4>Preferred Cap Rate Analysis Calculator</h4>
            <div class="row">
                <div class="col-lg-6">
                    <table class="table table-striped asset-table">
                        <tbody>
                            <tr>
                                <td style="line-height: 32px">
                                    <label>Enter Desired CAP Rate</label></td>
                                <td style="line-height: 32px">
                                    <input type="text" id="txtBoxDesiredCapRate" style="width: 60px; text-align: right; margin-right: 5px; margin-bottom: 0" value="0.00%" /></td>
                            </tr>
                            <tr>
                                <td>
                                    <label>New <a title="Annual Capitalization Rate">CAP</a> Pricing Per Rentable Park Space</label></td>
                                <td style="text-align: right;"><span id="PricePerUnitPerCapRate">$0.00</span></td>
                            </tr>
                            <tr>
                                <td>
                                    <label>Comparative % to Listed Pricing/<a title="[Calculated Market Value is based solely on either (1) comparable sales data provided by the Listing Agent or Seller in their Offering Memorandum, or, in the absence thereof, (2) calculated to the displayed CAP Rate only if the offering price for the asset is TBD by Market.]">CMV</a></label></td>
                                <td style="text-align: right;"><span id="CompPercPerCapRate">0.00%</span></td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                <div class="col-lg-6">
                    <table class="table table-striped asset-table">
                        <tbody>
                            <tr>
                                <td>
                                    <label>Calculated Value at your selected <a title="Annual Capitalization Rate">CAP</a></label></td>
                                <td style="text-align: right;"><span id="CalculatedPricePerCapRate">$0.00</span>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <label>New <a title="Annual Capitalization Rate">CAP</a> Pricing Per Acreage Sq Foot</label></td>
                                <td style="text-align: right;"><span id="PricePerFootPerCapRate">$0.00</span></td>
                            </tr>
                            <tr>
                                <td>
                                    <label>Equity Adjustment to selected <a title="Annual Capitalization Rate">CAP</a></label></td>
                                <td style="text-align: right;"><span id="EquityAdjPerCapRate">$0.00</span></td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                <div class="col-lg-12" style="text-align: center">
                    <input type="button" id="BtnCapRateCalc" value="Calculate" />
                </div>
            </div>

            <h4>Property Data</h4>
            <div class="row">
                <div class="col-lg-6">
                    <table class="table table-striped asset-table">
                        <tbody>
                            <tr>
                                <td>
                                    <label>Property Type</label></td>
                                <td style="text-align: right;">
                                    @Inview.Epi.EpiFund.Domain.Helpers.EnumHelper.GetEnumDescription(Model.AssetType)
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <label>Number of Rentable Spaces</label></td>
                                <td style="text-align: right;">@Model.NumberRentableSpace
                                    <input id="mfAsset_TotalUnits" value="@mfAsset.TotalUnits" style="display:none;"/>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <label>Number of Non-Rentable Spaces</label></td>
                                <td style="text-align: right;">@Model.NumberNonRentableSpace
                                    <input id="mfAsset_TotalUnits" value="@mfAsset.TotalUnits" style="display:none;"/>
                                </td>
                            </tr>
                            @* <tr>
                        <td>
                            <label>Gross Rentable Sq. Ft.</label></td>
                        <td style="text-align: right;">
                            <span class="pad">@mfAsset.SquareFeet</span>
                            <input id="mfAsset_SquareFeet" value="@mfAsset.SquareFeet" style="display:none" />
                        </td>
                    </tr>*@
                            <tr>
                                <td>
                                    <label>Property Address</label>
                                </td>
                                <td style="text-align: right;">
                                    @Html.DisplayFor(s => s.PropertyAddress, new { @class = "control-label" })
                                    <a href="http://maps.google.com/maps?q=@Model.PropertyAddress @Model.City @Model.State">Click Here For Map</a>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <label>City, State, Zip</label></td>
                                <td style="text-align: right;">@(string.Format("{0}, {1} {2}", Model.City, Model.State, Model.Zip))</td>
                            </tr>
                            <tr>
                                <td>
                                    <label>County where Property Located</label>
                                </td>
                                <td style="text-align: right;">@Model.County</td>
                            </tr>
                            <tr>
                                <td style="width: 50%;">
                                    <label>Tax Assessor Number(s)</label>
                                <td style="width: 50%; text-align: right;">
                                    @foreach (var tpn in Model.AssetTaxParcelNumbers)
                                    {
                                        <span>@tpn.TaxParcelNumber</span> <br />
                                    }
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <label>Year Orginally Built</label></td>
                                <td style="text-align: right;">@Model.YearBuilt</td>
                            </tr>
                            <tr>
                                <td>
                                    <label>Total Lot Size of Property</label></td>
                                <td style="text-align: right;">@Model.LotSize Acres</td>
                            </tr>
                            <tr>
                                <td>
                                    <label>Number of Park Owned Mobile Homes</label></td>
                                <td style="text-align: right;">@Model.NumberParkOwnedMH</td>
                            </tr>
                            <tr>
                                <td>
                                    <label>Electric Utility Metering</label></td>
                                <td style="text-align: right;">@Inview.Epi.EpiFund.Domain.Helpers.EnumHelper.GetEnumDescription(@mfAsset.ElectricMeterMethod)</td>
                            </tr>
                            <tr>
                                <td>
                                    <label>Gas Utility Metering</label></td>
                                <td style="text-align: right;">@Inview.Epi.EpiFund.Domain.Helpers.EnumHelper.GetEnumDescription(@mfAsset.GasMeterMethod)</td>
                            </tr>
                            <tr>
                                <td>
                                    <label>Number of Parking Spaces</label></td>
                                <td style="text-align: right;"><span class="pad">@mfAsset.ParkingSpaces</span></td>
                            </tr>
                            <tr>
                                <td>
                                    <label>Number of Covered Parking Spaces</label></td>
                                <td style="text-align: right;"><span class="pad">@mfAsset.CoveredParkingSpaces</span></td>
                            </tr>
                            <tr>
                                <td>
                                    <label>Property Operating Status</label></td>
                                <td style="text-align: right;">@Inview.Epi.EpiFund.Domain.Helpers.EnumHelper.GetEnumDescription(Model.OperatingStatus)</td>
                            </tr>
                            <tr>
                                <td>
                                    <label>List Agent Grade Classification of Prop:</label></td>
                                <td style="text-align: right;">@Model.GradeClassification</td>
                            </tr>
                            <tr>
                                <td>@Html.LabelFor(s => s.PropertyCondition)</td>
                                <td style="text-align: right;">@Inview.Epi.EpiFund.Domain.Helpers.EnumHelper.GetEnumDescription(Model.PropertyCondition)</td>
                            </tr>
                            <tr>
                                <td>
                                    @Html.LabelFor(s => s.PropLastUpdatedYear)</td>
                                <td style="text-align: right;">@Model.PropLastUpdatedYear</td>
                            </tr>
                            <tr>
                                <td>
                                    @Html.LabelFor(s => s.PropHoldTypeId)</td>
                                <td style="text-align: right;">@Model.PropHoldType</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                @Html.DisplayFor(s => mfAsset.MHPUnitSpecifications, "MHPUnitSpecDisplayTemplate")
                @Html.DisplayFor(s => mfAsset.UnitSpecifications, "UnitSpecDisplayTemplate")
                <div class="col-lg-6">
                    <table class="table table-striped asset-table">
                        <tbody>
                            <tr>
                                <td>@Html.LabelFor(model => model.FloodPlainLocated)  </td>
                                @if (Model.FloodPlainLocated != null && (bool)Model.FloodPlainLocated == true)
                                {
                                    <td>Yes</td>
                                }
                                else
                                {
                                    <td>No</td>
                                }
                            </tr>
                            <tr>
                                <td>@Html.LabelFor(model => model.AccessRoadTypeId)</td>
                                @if (Model.AccessRoadTypeId != null)
                                {
                                    <td style="text-align: right;">@Inview.Epi.EpiFund.Domain.Helpers.EnumHelper.GetEnumDescription((Inview.Epi.EpiFund.Domain.ViewModel.AccessRoadType)Model.AccessRoadTypeId)</td>
                                }
                                else
                                {
                                    <td style="text-align: right;"></td>
                                }
                            </tr>
                            <tr>
                                <td>@Html.LabelFor(model => model.InteriorRoadTypeId)</td>
                                @if (Model.InteriorRoadTypeId != null)
                                {
                                    <td style="text-align: right;">@Inview.Epi.EpiFund.Domain.Helpers.EnumHelper.GetEnumDescription((Inview.Epi.EpiFund.Domain.ViewModel.AccessRoadType)Model.InteriorRoadTypeId)</td>
                                }
                                else
                                {
                                    <td style="text-align: right;"></td>
                                }
                            </tr>
                            <tr>
                                <td>@Html.LabelFor(model => model.WasteWaterTypeId)</td>
                                @if (Model.WasteWaterTypeId != null)
                                {
                                    <td style="text-align: right;">@Inview.Epi.EpiFund.Domain.Helpers.EnumHelper.GetEnumDescription((Inview.Epi.EpiFund.Domain.ViewModel.AccessRoadType)Model.WasteWaterTypeId)</td>
                                }
                                else
                                {
                                    <td style="text-align: right;"></td>
                                }
                            </tr>
                            <tr>
                                <td>@Html.LabelFor(model => model.WaterServTypeId)</td>
                                @if (Model.WaterServTypeId != null)
                                {
                                    <td style="text-align: right;">@Inview.Epi.EpiFund.Domain.Helpers.EnumHelper.GetEnumDescription((Inview.Epi.EpiFund.Domain.ViewModel.AccessRoadType)Model.WaterServTypeId)</td>
                                }
                                else
                                {
                                    <td style="text-align: right;"></td>
                                }
                            </tr>
                            <tr>
                                <td>@Html.LabelFor(model => model.MHPadTypeId)</td>
                                @if (Model.MHPadTypeId != null)
                                {
                                    <td style="text-align: right;">@Inview.Epi.EpiFund.Domain.Helpers.EnumHelper.GetEnumDescription((Inview.Epi.EpiFund.Domain.ViewModel.AccessRoadType)Model.MHPadTypeId)</td>
                                }
                                else
                                {
                                    <td style="text-align: right;"></td>
                                }
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
    
            <hr />
            <h4>Adjusted Proforma Analysis: Deferred Maintenance Inclusion</h4>
    
            <div class="row">
                <div class="col-lg-6">
                    <table class="table table-striped asset-table">
                        <tbody>
                            <tr>
                                <td>
                                    <label>List Price + Est Def Maintenance</label></td>
                                <td style="text-align: right;"><span class="padmoney">@defTotalListing.ToString("C0")</span></td>
                            </tr>
                            <tr>
                                <td>
                                    <label>Adjusted <a title="Annualized Scheduled Gross Income">SGI</a> after Def Maintenance</label></td>
                                <td style="text-align: right;">@defProformaSGI.ToString("C0")</td>
                            </tr>

                            @*<tr>
                        <td>
                            <label>Base Monthly Rental Income Adjustment per Unit after Renovations</label></td>
                        <td style="text-align: right;"><span class="padmoney">@(mfAsset.EstDeferredMaintenance == 0 ? 0 : Model.AverageAdjustmentToBaseRentalIncomePerUnitAfterRenovations)</span></td>
                    </tr>*@
                            <tr>
                                <td>
                                    <label>EST Base Rent Adjustment After Def Maintenance Budget</label></td>
                                <td style="text-align: right;"><span class="padmoney">@defAnnualRevenueAdjustment</span></td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                <div class="col-lg-6">
                    <table class="table table-striped asset-table">
                        <tbody>
                            <tr>
                                <td>
                                    <label>Adjusted Unit Cost with Def Maintenance</label></td>
                                @if (mfAsset.AskingPrice > 0)
                                {
                                    <td style="text-align: right;"><span class="padmoney">@(((((mfAsset.AskingPrice + mfAsset.EstDeferredMaintenance) != 0 && mfAsset.TotalUnits != 0) ? Math.Round(((mfAsset.AskingPrice + mfAsset.EstDeferredMaintenance) / mfAsset.TotalUnits)) : 0)))</span></td>
                                }
                                else
                                {
                                    <td style="text-align: right;"><span class="padmoney">@(((((mfAsset.CurrentBpo + mfAsset.EstDeferredMaintenance) != 0 && mfAsset.TotalUnits != 0) ? Math.Round(((mfAsset.CurrentBpo + mfAsset.EstDeferredMaintenance) / mfAsset.TotalUnits)) : 0)))</span></td>
                                }
                            </tr>
                            <tr>
                                <td>
                                    <label>Adjusted Proforma Pre Tax NOI</label></td>
                                <td style="text-align: right;"><span class="padmoney">@defProformaNOI</span><input type="hidden" value="@defProformaNOI" id="hdnDefProformaNOI" /><input type="hidden" value="@defTotalListing" id="hdnDefTotalListing" /></td>
                            </tr>
                            <tr>
                                <td>
                                    <label>Adjusted CAP Rate Calculation</label></td>
                                <td style="text-align: right;"><span class="pad">@defCapRate</span>%</td>
                            </tr>
                            @*<tr>
                        <td colspan="2">
                            <em>“The comparative pricing analysis computes the differentials between the adjusted price points of [List Price + Deferred Maintenance Budget] and calculated Operating & Value Proforma subsequent Deferred Maintenance implementation.”</em>
                        </td>
                    </tr>*@
                        </tbody>
                    </table>
                </div>
            </div>
      
    
                                //if (mfAsset.EstDeferredMaintenance > 0)
                                //{
            <hr />
            <hr />
            <h4>Adjusted Preferred Cap Rate Analysis Calculator: Deferred Maintenance Inclusion</h4>
            <div class="row">
                <div class="col-lg-6">
                    <table class="table table-striped asset-table">
                        <tbody>
                            <tr>
                                <td style="line-height: 32px">
                                    <label>Enter Desired CAP Rate</label></td>
                                <td style="line-height: 32px; text-align: right;">
                                    <input type="text" id="defTxtBoxDesiredCapRate" style="width: 60px; text-align: right; margin-right: 5px; margin-bottom: 0" value="0.00%" /></td>
                            </tr>

                            <tr>
                                <td>
                                    <label>New Def Maintenance CAP Pricing Per Park Space</label></td>
                                <td style="text-align: right;"><span id="defPricePerUnitPerCapRate">$0.00</span></td>
                            </tr>
                            <tr>
                                <td>
                                    <label>New Def Maintenance CAP Pricing per Sq.Ft</label></td>
                                <td style="text-align: right;"><span id="defPricePerFootPerCapRate">$0.00</span></td>
                            </tr>
                            <tr>
                                <td>
                                    <label>Comparative % to Listed Pricing/<a title="[Calculated Market Value is based solely on either (1) comparable sales data provided by the Listing Agent or Seller in their Offering Memorandum, or, in the absence thereof, (2) calculated to the displayed CAP Rate only if the offering price for the asset is TBD by Market.]">CMV</a></label></td>
                                <td style="text-align: right;"><span id="defCompPercPerCapRate">0.00%</span></td>
                            </tr>
                        </tbody>
                    </table>
                </div>

                <div class="col-lg-6">
                    <table class="table table-striped asset-table">
                        <tbody>
                            <tr>
                                <td>
                                    <label>Calculated Price at your selected CAP</label></td>
                                <td style="text-align: right;"><span id="defCalculatedPricePerCapRate">$0.00</span></td>
                            </tr>
                            <tr>
                                <td>
                                    <b>Less DM/TI Budget of:</b><span style="padding: 5px" id="defLessDMBudget">$0.00</span>
                                    <b>Net Offering:</b><span style="padding: 5px" id="defNetOffering">$0.00</span></td>
                            </tr>
                            <tr>
                                <td>
                                    <label>Equity Adjustment to Selected CAP</label></td>
                                <td style="text-align: right;"><span id="defEquityAdjPerCapRate">$0.00</span></td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
    
            <div class="row">
                <div class="col-lg-12" style="text-align: center">
                    <input type="button" id="defBtnCapRateCalc" value="Calculate" />
                </div>
            </div>
                                //}
            <div class="modal fade" id="loginwarning" tabindex="-1" role="dialog" aria-labelledby="loginwarning-label" aria-hidden="true" data-backdrop="false">
                <form>
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                                <h4 class="modal-title" id="loginwarning-label">Estimated Deferred Maintenance Items</h4>
                            </div>
                            <div class="modal-body">
                                @if (@mfAsset.EstDeferredMaintenance == 0 || !Model.HasDeferredMaintenance)
                                {
                                    <label>Total Cost: $0</label>
                                }
                                else
                                {
                                    <table class="tabled table-striped" style="width: 100%;">
                                        <thead>
                                            <tr>
                                                <th style="width: 160px;">Item</th>
                                                <th>Unit Per Cost</th>
                                                <th>Number of Items</th>
                                                <th style="text-align: right;">Total Item Cost</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var item in Model.DeferredMaintenanceItems)
                                            {
                                                if (item.Selected)
                                                {
                                                <tr>
                                                    <td style="text-align: center;">@item.ItemTitle</td>
                                                    <td style="text-align: right;">@item.UnitCost.ToString("C0")</td>
                                                    <td style="text-align: center;">@(string.Format("{0} {1}", item.NumberOfUnits, item.UnitTypeLabel))</td>
                                                    <td style="text-align: right;">@((item.NumberOfUnits * item.UnitCost).ToString("C0"))</td>
                                                </tr>
                                                }
                                            }
                                            <br />
                                            <tr>
                                                <td colspan="4" style="text-align: right;">
                                                    <label>Total Cost: </label>@mfAsset.EstDeferredMaintenance.ToString("C0")</td>
                                            </tr>
                                        </tbody>
                                    </table>
                        
                                    <label>Total Cost:</label>@mfAsset.EstDeferredMaintenance.ToString("C0")
                                }
                            </div>
                            <div class="modal-footer">
                                <input type="button" class="btn" value="Close" data-dismiss="modal" />
                            </div>
                        </div>
                    </div>
                </form>
            </div>
        }
        @if (@Model.IsPaper)
        {
            <div class="row">
                <div class="col-lg-6">
                    <table class="table table-striped asset-table">
                        <tbody>
                            <tr>
                                <td>@Html.LabelFor(s => s.Paper.MaturityDate, new { @class = "control-label" })</td>
                                <td>@Html.DisplayFor(s => s.Paper.MaturityDate, new { @class = "control-label" })</td>
                            </tr>
                            <tr>
                                <td>@Html.LabelFor(s => s.Paper.Current, new { @class = "control-label" })</td>
                                <td>@Html.DisplayFor(s => s.Paper.Current, new { @class = "control-label" })</td>
                            </tr>
                            <tr>
                                <td>@Html.LabelFor(s => s.AnnualPropertyTax, new { @class = "control-label" })</td>
                                <td>@Html.DisplayFor(s => s.AnnualPropertyTax, new { @class = "control-label" })</td>
                            </tr>
                            <tr>
                                <td>@Html.LabelFor(s => s.Paper.NextDueDate, new { @class = "control-label" })</td>
                                <td>@Html.DisplayFor(s => s.Paper.NextDueDate, new { @class = "control-label" })</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div> 
        }
        <hr />
        <h4>Property Features</h4>
        @if (Model.GetType() == typeof(MultiFamilyAssetViewModel))
        {
            @Html.DisplayFor(s => mfAsset.MFDetails, "MFPropertyDetailsDisplayTemplate")
        }

        @if (Model.GetType() == typeof(CommercialAssetViewModel))
        {
            @Html.DisplayFor(s => cAsset.PropertyDetails, "CPropertyDetailsDisplayTemplate") 
        }
        <hr />
        <h4>Asset Due Diligence Documents</h4>
        <ol>
            @for (int item = 0; item < Model.Documents.Count; item++)
            {
                if (Model.Documents[item].Viewable.HasValue)
                {
                    if (Model.Documents[item].Viewable.Value)
                    {
                <li>
                    <div class="docPreviewDiv">
                        <a target='_blank' href="@Url.Action("DownloadDocument", "Admin", new { fileName = Model.Documents[item].FileName, assetId = Model.AssetId, contentType = Model.Documents[item].ContentType, title = Model.Documents[item].Title })">@(Model.Documents[item].Title)</a>
                    </div>
                </li>   
                    }
                }
                else
                {
                <li>
                    <div class="docPreviewDiv">
                        <a target='_blank' href="@Url.Action("DownloadDocument", "Admin", new { fileName = Model.Documents[item].FileName, assetId = Model.AssetId, contentType = Model.Documents[item].ContentType, title = Model.Documents[item].Title })">@(Model.Documents[item].Title)</a>
                    </div>
                </li>   
                }
            }
        </ol>

        <div class="row">
            <div class="col-sm-12">
                <input type="button" class="btn btn-warning" onclick="if (confirm('If you click ok, you will lose all of the data you entered and be returned to the manage assets page.')) goBack()" value="Cancel" />
                <input type="button" class="btn btn-primary" onclick="nextTab($(this));" value="Next" />
            </div>
        </div>

    </div>
    </div>
    <div class="tab-pane" id="pics">
        @if (Model.Images != null)
        {
            <div id="asset-carousel" class="carousel slide" data-ride="carousel" data-interval="5000">

                <!-- Slides -->
                <div class="carousel-inner">
                    @for (int item = 0; item < Model.Images.Count; item++)
                    {

                        if (item == 0)
                        {   
                        <div class="item active" style="background-image: url('@Url.Action("GetImageSource", "Admin", new { fileName = Model.Images[item].FileName, assetId = Model.AssetId, contentType = Model.Images[item].ContentType })')">
                        </div>
                        }
                        else
                        {
                        <div class="item" style="background-image: url('@Url.Action("GetImageSource", "Admin", new { fileName = Model.Images[item].FileName, assetId = Model.AssetId, contentType = Model.Images[item].ContentType })')">
                        </div>
                        }
                    }
                </div>

                <!-- Controls -->
                <a class="left carousel-control" href="#asset-carousel" data-slide="prev">
                    <span class="glyphicon glyphicon-chevron-left"></span>
                </a>
                <a class="right carousel-control" href="#asset-carousel" data-slide="next">
                    <span class="glyphicon glyphicon-chevron-right"></span>
                </a>
            </div>

            <!-- Indicators -->
            <ol class="carousel-indicators">
                @for (int item = 0; item < Model.Images.Count; item++)
                {
                    if (item == 0)
                    {
                    <li data-target="#asset-carousel" data-slide-to="@item" class="active" style="background-image: url('@Url.Action("GetImageSource", "Admin", new { fileName = Model.Images[item].FileName, assetId = Model.AssetId, contentType = Model.Images[item].ContentType })')"></li>
                    }
                    else
                    {
                    <li data-target="#asset-carousel" data-slide-to="@item" style="background-image: url('@Url.Action("GetImageSource", "Admin", new { fileName = Model.Images[item].FileName, assetId = Model.AssetId, contentType = Model.Images[item].ContentType })')"></li>
                    }
                }
            </ol>
        
        
            <div class="input-group text-center" style="display: block; margin-top: -10px">
                <button class="btn btn-default btn-xs" id="carousel-pause">
                    <span class="glyphicon glyphicon-pause"></span>
                </button>
                <button class="btn btn-default btn-xs" id="carousel-play">
                    <span class="glyphicon glyphicon-play"></span>
                </button>
            </div>
        }

        <br />
        <input type="button" class="btn btn-warning" onclick="if (confirm('If you click ok, you will lose all of the data you entered and be returned to the manage assets page.')) goBack()" value="Cancel" />
        <input type="button" class="btn btn-default" onclick="backTab($(this));" value="Back" />
        <input type="button" class="btn btn-primary" onclick="nextTab($(this));" value="Next" />
    </div>
    <div class="tab-pane" id="videos">
        <em>You must have Internet Explorer 9+, Safari 5+, or Chrome 6+ in order to view these videos. If you do not have these supported browsers, you may use the option to download the video and view in your own media player.</em>
        <br />
        <br />
        @if (videoOptions != null)
        {

            for (int item = 0; item < videoOptions.Count; item++)
            {
            
            @Html.Video(videoOptions[item], new { @class = "video-responsive", id = "video" + item })
            <br />
@*@Html.Video(new VideoOptions()
              {
                  Mp4Url = @Url.Action("GetVideo", "Admin", new { id = Model.Videos[item].AssetId, filepath = Model.Videos[item].FilePath }),
                  HasPoster = false,
                  HasDownloadLink = true,
                  VideoNotSupported = "<p>No video playback capabilities, please download the video below</p>",
                  TrackEnable = false
              }, new { @class = "video-responsive", id = "video" + item })
                <br />*@
            }
        }

        <br />
        <input type="button" class="btn btn-warning" onclick="if (confirm('If you click ok, you will lose all of the data you entered and be returned to the manage assets page.')) goBack()" value="Cancel" />
        <input type="button" class="btn btn-default" onclick="backTab($(this));" value="Back" />
        <input type="button" class="btn btn-primary" onclick="nextTab($(this));" value="Next" />
    </div>

    <div class="tab-pane" id="documents">
        <h3>Documents</h3>
        <div id="uploadDocs" class="layer1" style="width: 100%; margin-bottom: 20px;">
            <h4 style="margin-top: 10px;">Upload Documents</h4>
            <div class="docSetup" id="uploadDiv" style="width: 100%; background-color: #f7f7f7; border: 1px solid #eee; padding: 15px;">
                <div class="row">
                    <div class="col-sm-12">
                        <label>Document Type</label>
                    </div>
                    <div class="col-sm-12">
                        @Html.DropDownListFor(model => model.SelectedDocumentType, Model.AssetDocumentTypes as IEnumerable<SelectListItem>, new { id = "AssetDocumentType" })
                        @*@Html.EnumDropDownList("AssetDocumentType", Model.AssetDocumentType, "---")*@
                    </div>
                    <div class="col-sm-12">
                        <label>Title</label>
                    </div>
                    <div class="col-sm-12">
                        <input type="text" id="docTitle" style="width: 250px;" value="" />
                    </div>
                    <div class="col-sm-12">
                        <label>Description</label>
                    </div>
                    <div class="col-sm-12">
                        <textarea cols="10" rows="4" id="docDescription"></textarea>
                    </div>
                    <div class="col-sm-6">
                        <input type="file" data-type="" id="docUpload" value="Upload" />
                    </div>
                    <div class="col-sm-6">
                        <div id="progressbar" class="progressbar">
                        </div>
                    </div>
                    <div class="col-sm-12">
                        <div style="color: #18904B; margin-top: 20px; display: none;" id="successDoc">
                            <i class="fa fa-check" style="color: #27ae60; margin-right: 3px; display: inline;"></i>
                            <span>The file has been uploaded successfully.</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div id="docManager" data-doccount="@Model.Documents.Count">
            <div id="PendingUploads" style="display: none; margin-bottom: 40px;">
                <h4 id="UploadQueueTitle">Pending Uploads</h4>
                <div id="uploadDocId" style="display: none;" class="document-item-expanded">
                    <div class="docSetup" style="width: 100%">
                        <div class="row">
                            <div class="col-sm-12">
                                <input type="hidden" id="uploadFileId" />
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            @if (Model.AvailableInsurance)
            {
                <div class="document-item">
                    <div id="linkIns">
                        <h4>CRE P&C Coverage Quote</h4>
                    </div>
                    <div id="insuranceDocs" class="document-item-expanded">
                        @for (int item = 0; item < Model.Documents.Count; item++)
                        {
                            if (Model.Documents[item].Type == (int)Inview.Epi.EpiFund.Domain.Enum.AssetDocumentType.Insurance)
                            {
                            <div class="docPreviewDiv row">
                                <div class="col-sm-10">
                                    <a target='_blank' href="@Url.Action("DownloadDocument", "Admin", new { fileName = Model.Documents[item].FileName, assetId = Model.AssetId, contentType = Model.Documents[item].ContentType, title = Model.Documents[item].Title })">@Model.Documents[item].Title</a>
                                    <p class="description">@Model.Documents[item].Description</p>
                                </div>
                                <div class="col-sm-2">
                                    @Html.HiddenFor(s => Model.Documents[item].Title)
                                    @Html.HiddenFor(s => Model.Documents[item].Description)
                                    @Html.HiddenFor(s => Model.Documents[item].Type)
                                    @Html.HiddenFor(s => Model.Documents[item].AssetDocumentId)
                                    @Html.HiddenFor(s => Model.Documents[item].Size)
                                    @Html.HiddenFor(s => Model.Documents[item].ContentType)
                                    @Html.HiddenFor(s => Model.Documents[item].AssetId)
                                    @Html.HiddenFor(x => Model.Documents[item].Viewable)
                                    @Html.HiddenFor(s => Model.Documents[item].FileName, new { @class = "docName" })
                                    <input type='button' class='deleteDocUpload delIns' value='Delete' data-id="#ins" data-button="@Model.Documents[item].FileName" onclick='docDelete(this, "#insuranceDocs", ".delIns", "#linkIns")'/>
                                </div>
                            </div>
                            }
                        }
                    </div>
                </div>
            }
            @if (Model.availableInsuranceOther)
            {
                <div class="document-item">
                    <div id="linkInsOther">
                        <h4>Other Insurance Coverage Related</h4>
                    </div>
                    <div id="insuranceOtherDocs" class="document-item-expanded">
                        @for (int item = 0; item < Model.Documents.Count; item++)
                        {
                            if (Model.Documents[item].Type == (int)Inview.Epi.EpiFund.Domain.Enum.AssetDocumentType.InsuranceOther)
                            {
                            <div class="docPreviewDiv row">
                                <div class="col-sm-10">
                                    <a target='_blank' href="@Url.Action("DownloadDocument", "Admin", new { fileName = Model.Documents[item].FileName, assetId = Model.AssetId, contentType = Model.Documents[item].ContentType, title = Model.Documents[item].Title })">@Model.Documents[item].Title</a>
                                    <p class="description">@Model.Documents[item].Description</p>
                                </div>
                                <div class="col-sm-2">
                                    @Html.HiddenFor(s => Model.Documents[item].Title)
                                    @Html.HiddenFor(s => Model.Documents[item].Description)
                                    @Html.HiddenFor(s => Model.Documents[item].Type)
                                    @Html.HiddenFor(s => Model.Documents[item].AssetDocumentId)
                                    @Html.HiddenFor(s => Model.Documents[item].Size)
                                    @Html.HiddenFor(s => Model.Documents[item].ContentType)
                                    @Html.HiddenFor(s => Model.Documents[item].AssetId)
                                    @Html.HiddenFor(x => Model.Documents[item].Viewable)
                                    @Html.HiddenFor(s => Model.Documents[item].FileName, new { @class = "docName" })
                                    <input type='button' class='deleteDocUpload delInsOther' value='Delete' data-id="#insOther" data-button="@Model.Documents[item].FileName" onclick='docDelete(this, "#insuranceOtherDocs", ".delInsOther", "#linkInsOther")'/>
                                </div>
                            </div>
                            }
                        }
                    </div>
                </div>
            }
            <div style="display: none;">
                @if (Model.availablecurrentRentRoll)
                {
                    <div class="document-item">
                        <div id="linkCRR">
                            <h4>Current Rent Roll</h4>
                        </div>
                        <div id="currentRentRollDocs" class="document-item-expanded">
                            @for (int item = 0; item < Model.Documents.Count; item++)
                            {
                                if (Model.Documents[item].Type == (int)Inview.Epi.EpiFund.Domain.Enum.AssetDocumentType.CurrentRentRoll)
                                {  
                                <div class="docPreviewDiv row">
                                    <div class="col-sm-10">
                                        <a target='_blank' href="@Url.Action("DownloadDocument", "Admin", new { fileName = Model.Documents[item].FileName, assetId = Model.AssetId, contentType = Model.Documents[item].ContentType, title = Model.Documents[item].Title })">@Model.Documents[item].Title</a>
                                        <p class="description">@Model.Documents[item].Description</p>
                                    </div>
                                    <div class="col-sm-2">
                                        @Html.HiddenFor(s => Model.Documents[item].Title)
                                        @Html.HiddenFor(s => Model.Documents[item].Description)
                                        @Html.HiddenFor(s => Model.Documents[item].AssetDocumentId)
                                        @Html.HiddenFor(s => Model.Documents[item].Size)
                                        @Html.HiddenFor(s => Model.Documents[item].ContentType)
                                        @Html.HiddenFor(s => Model.Documents[item].AssetId)
                                        @Html.HiddenFor(s => Model.Documents[item].Type)
                                        @Html.HiddenFor(x => Model.Documents[item].Viewable)
                                        @Html.HiddenFor(s => Model.Documents[item].FileName, new { @class = "docName" })
                                        <input type='button' class='deleteDocUpload delCRR' value='Delete' data-button="@Model.Documents[item].FileName" onclick='docDelete(this, "#currentRentRollDocs", ".delCRR", "#linkCRR")'/>
                                    </div>
                                </div>
                                }
                            }
                        </div>
                    </div>
                }
                @if (Model.availablecurrentOperatingReport)
                {
                    <div class="document-item">
                        <div id="linkCOR">
                            <h4>Current Operating Report</h4>
                        </div>
                        <div id="currentOperatingReportDocs" class="document-item-expanded">
                            @for (int item = 0; item < Model.Documents.Count; item++)
                            {
                                if (Model.Documents[item].Type == (int)Inview.Epi.EpiFund.Domain.Enum.AssetDocumentType.CurrentOperatingReport)
                                {
                                <div class="docPreviewDiv row">
                                    <div class="col-sm-10">
                                        <a target='_blank' href="@Url.Action("DownloadDocument", "Admin", new { fileName = Model.Documents[item].FileName, assetId = Model.AssetId, contentType = Model.Documents[item].ContentType, title = Model.Documents[item].Title })">@Model.Documents[item].Title</a>
                                        <p class="description">@Model.Documents[item].Description</p>
                                    </div>
                                    <div class="col-sm-2">
                                        @Html.HiddenFor(s => Model.Documents[item].Title)
                                        @Html.HiddenFor(s => Model.Documents[item].Description)
                                        @Html.HiddenFor(s => Model.Documents[item].Type)
                                        @Html.HiddenFor(s => Model.Documents[item].AssetDocumentId)
                                        @Html.HiddenFor(s => Model.Documents[item].Size)
                                        @Html.HiddenFor(s => Model.Documents[item].ContentType)
                                        @Html.HiddenFor(s => Model.Documents[item].AssetId)
                                        @Html.HiddenFor(x => Model.Documents[item].Viewable)
                                        @Html.HiddenFor(s => Model.Documents[item].FileName, new { @class = "docName" })
                                        <input type='button' class='deleteDocUpload delCOR' value='Delete' data-button="@Model.Documents[item].FileName" onclick='docDelete(this, "#currentOperatingReportDocs", ".delCOR", "#linkCOR")'/>
                                    </div>
                                </div>
                                }
                            }
                        </div>
                    </div>
                }
                @if (Model.availablepriorFiscalYearOperReport)
                {
                    <div class="document-item">
                        <div id="linkPFYOR">
                            <h4>Prior Fiscal Year Oper Report</h4>
                        </div>
                        <div id="priorFiscalYearOperReportDocs" class="document-item-expanded">
                            @for (int item = 0; item < Model.Documents.Count; item++)
                            {
                                if (Model.Documents[item].Type == (int)Inview.Epi.EpiFund.Domain.Enum.AssetDocumentType.PriorFiscalYearOperReport)
                                {
                                <div class="docPreviewDiv row">
                                    <div class="col-sm-10">
                                        <a target='_blank' href="@Url.Action("DownloadDocument", "Admin", new { fileName = Model.Documents[item].FileName, assetId = Model.AssetId, contentType = Model.Documents[item].ContentType, title = Model.Documents[item].Title })">@Model.Documents[item].Title</a>
                                        <p class="description">@Model.Documents[item].Description</p>
                                    </div>
                                    <div class="col-sm-2">
                                        @Html.HiddenFor(s => Model.Documents[item].Title)
                                        @Html.HiddenFor(s => Model.Documents[item].Description)
                                        @Html.HiddenFor(s => Model.Documents[item].Type)
                                        @Html.HiddenFor(s => Model.Documents[item].AssetDocumentId)
                                        @Html.HiddenFor(s => Model.Documents[item].Size)
                                        @Html.HiddenFor(s => Model.Documents[item].ContentType)
                                        @Html.HiddenFor(s => Model.Documents[item].AssetId)
                                        @Html.HiddenFor(x => Model.Documents[item].Viewable)
                                        @Html.HiddenFor(s => Model.Documents[item].FileName, new { @class = "docName" })
                                        <input type='button' class='deleteDocUpload delPFYOR' value='Delete' data-button="@Model.Documents[item].FileName" onclick='docDelete(this, "#priorFiscalYearOperReportDocs", ".delPFYOR", "#linkPFYOR")'/>
                                    </div>
                                </div>
                                }
                            }
                        </div>
                    </div>
                }
                @if (Model.availablepreliminaryTitleReport)
                {
                    <div class="document-item">
                        <div id="linkPTR">
                            <h4>Preliminary Title Report</h4>
                        </div>
                        <div id="preliminaryTitleReportDocs" class="document-item-expanded">
                            @for (int item = 0; item < Model.Documents.Count; item++)
                            {
                                if (Model.Documents[item].Type == (int)Inview.Epi.EpiFund.Domain.Enum.AssetDocumentType.PreliminaryTitleReport)
                                {
                                <div class="docPreviewDiv row">
                                    <div class="col-sm-10">
                                        <a target='_blank' href="@Url.Action("DownloadDocument", "Admin", new { fileName = Model.Documents[item].FileName, assetId = Model.AssetId, contentType = Model.Documents[item].ContentType, title = Model.Documents[item].Title })">@Model.Documents[item].Title</a>
                                        <p class="description">@Model.Documents[item].Description</p>
                                    </div>
                                    <div class="col-sm-2">

                                        @Html.HiddenFor(s => Model.Documents[item].Title)
                                        @Html.HiddenFor(s => Model.Documents[item].Description)
                                        @Html.HiddenFor(s => Model.Documents[item].Type)
                                        @Html.HiddenFor(s => Model.Documents[item].AssetDocumentId)
                                        @Html.HiddenFor(s => Model.Documents[item].Size)
                                        @Html.HiddenFor(s => Model.Documents[item].ContentType)
                                        @Html.HiddenFor(s => Model.Documents[item].AssetId)
                                        @Html.HiddenFor(x => Model.Documents[item].Viewable)
                                        @Html.HiddenFor(s => Model.Documents[item].FileName, new { @class = "docName" })
                                        <input type='button' class='deleteDocUpload delPTR' value='Delete' data-button="@Model.Documents[item].FileName" onclick='docDelete(this, "#preliminaryTitleReportDocs", ".delPTR", "#linkPTR")'/>
                                    </div>
                                </div>
                                }
                            }
                        </div>
                    </div>
                }
                @if (Model.availableplatMap)
                {
                    <div class="document-item">
                        <div id="linkPM">
                            <h4>Plat Map</h4>
                        </div>
                        <div id="platMapDocs" class="document-item-expanded">
                            @for (int item = 0; item < Model.Documents.Count; item++)
                            {
                                if (Model.Documents[item].Type == (int)Inview.Epi.EpiFund.Domain.Enum.AssetDocumentType.PlatMap)
                                {
                                <div class="docPreviewDiv row">
                                    <div class="col-sm-10">
                                        <a target='_blank' href="@Url.Action("DownloadDocument", "Admin", new { fileName = Model.Documents[item].FileName, assetId = Model.AssetId, contentType = Model.Documents[item].ContentType, title = Model.Documents[item].Title })">@Model.Documents[item].Title</a>
                                        <p class="description">@Model.Documents[item].Description</p>
                                    </div>
                                    <div class="col-sm-2">

                                        @Html.HiddenFor(s => Model.Documents[item].Title)
                                        @Html.HiddenFor(s => Model.Documents[item].Description)
                                        @Html.HiddenFor(s => Model.Documents[item].Type)
                                        @Html.HiddenFor(s => Model.Documents[item].AssetDocumentId)
                                        @Html.HiddenFor(s => Model.Documents[item].Size)
                                        @Html.HiddenFor(s => Model.Documents[item].ContentType)
                                        @Html.HiddenFor(s => Model.Documents[item].AssetId)
                                        @Html.HiddenFor(x => Model.Documents[item].Viewable)
                                        @Html.HiddenFor(s => Model.Documents[item].FileName, new { @class = "docName" })
                                        <input type='button' class='deleteDocUpload delPM' value='Delete' data-button="@Model.Documents[item].FileName" onclick='docDelete(this, "#platMapDocs", ".delPM", "#linkPM")'/>
                                    </div>
                                </div>
                                }
                            }
                        </div>
                    </div>
                }
                @if (Model.availablearialMap)
                {
                    <div class="document-item">
                        <div id="linkAM">
                            <h4>Aerial Map</h4>
                        </div>
                        <div id="arialMapDocs" class="document-item-expanded">
                            @for (int item = 0; item < Model.Documents.Count; item++)
                            {
                                if (Model.Documents[item].Type == (int)Inview.Epi.EpiFund.Domain.Enum.AssetDocumentType.ArialMap)
                                {
                                <div class="docPreviewDiv row">
                                    <div class="col-sm-10">
                                        <a target='_blank' href="@Url.Action("DownloadDocument", "Admin", new { fileName = Model.Documents[item].FileName, assetId = Model.AssetId, contentType = Model.Documents[item].ContentType, title = Model.Documents[item].Title })">@Model.Documents[item].Title</a>
                                        <p class="description">@Model.Documents[item].Description</p>
                                    </div>
                                    <div class="col-sm-2">
                                        @Html.HiddenFor(s => Model.Documents[item].Title)
                                        @Html.HiddenFor(s => Model.Documents[item].Type)
                                        @Html.HiddenFor(s => Model.Documents[item].Description)
                                        @Html.HiddenFor(x => Model.Documents[item].Viewable)
                                        @Html.HiddenFor(s => Model.Documents[item].AssetDocumentId)
                                        @Html.HiddenFor(s => Model.Documents[item].Size)
                                        @Html.HiddenFor(s => Model.Documents[item].ContentType)
                                        @Html.HiddenFor(s => Model.Documents[item].AssetId)
                                        @Html.HiddenFor(s => Model.Documents[item].FileName, new { @class = "docName" })
                                        <input type='button' class='deleteDocUpload delAM' value='Delete' data-button="@Model.Documents[item].FileName" onclick='docDelete(this, "#arialMapDocs", ".delAM", "#linkAM")'/>
                                    </div>
                                </div>
                                }
                            }
                        </div>
                    </div>
                }
                @if (Model.availableoriginalAppraisal)
                {
                    <div class="document-item">
                        <div id="linkAOA">
                            <h4>Original Appraisal/BPO</h4>
                        </div>
                        <div id="originalAppraisalDocs" class="document-item-expanded">
                            @for (int item = 0; item < Model.Documents.Count; item++)
                            {
                                if (Model.Documents[item].Type == (int)Inview.Epi.EpiFund.Domain.Enum.AssetDocumentType.OriginalAppraisal)
                                {
                                <div class="docPreviewDiv row">
                                    <div class="col-sm-10">
                                        <a target='_blank' href="@Url.Action("DownloadDocument", "Admin", new { fileName = Model.Documents[item].FileName, assetId = Model.AssetId, contentType = Model.Documents[item].ContentType, title = Model.Documents[item].Title })">@Model.Documents[item].Title</a>
                                        <p class="description">@Model.Documents[item].Description</p>
                                    </div>
                                    <div class="col-sm-2">
                                        @Html.HiddenFor(s => Model.Documents[item].Title)
                                        @Html.HiddenFor(s => Model.Documents[item].Description)
                                        @Html.HiddenFor(s => Model.Documents[item].Type)
                                        @Html.HiddenFor(s => Model.Documents[item].AssetDocumentId)
                                        @Html.HiddenFor(s => Model.Documents[item].Size)
                                        @Html.HiddenFor(s => Model.Documents[item].ContentType)
                                        @Html.HiddenFor(s => Model.Documents[item].AssetId)
                                        @Html.HiddenFor(x => Model.Documents[item].Viewable)
                                        @Html.HiddenFor(s => Model.Documents[item].FileName, new { @class = "docName" })
                                        <input type='button' class='deleteDocUpload delAOA' value='Delete' data-button="@Model.Documents[item].FileName" onclick='docDelete(this, "#originalAppraisalDocs", ".delAOA", "#linkAOA")'/>
                                    </div>
                                </div>
                                }
                            }
                        </div>
                    </div>
                }
                @if (Model.availablecurrentAppraisal)
                {
                    <div class="document-item">
                        <div id="linkCA">
                            <h4>Calculated Market Value/CMV</h4>
                        </div>
                        <div id="currentAppraisalDocs" class="document-item-expanded">
                            @for (int item = 0; item < Model.Documents.Count; item++)
                            {
                                if (Model.Documents[item].Type == (int)Inview.Epi.EpiFund.Domain.Enum.AssetDocumentType.CurrentAppraisal)
                                {
                                <div class="docPreviewDiv row">
                                    <div class="col-sm-10">
                                        <a target='_blank' href="@Url.Action("DownloadDocument", "Admin", new { fileName = Model.Documents[item].FileName, assetId = Model.AssetId, contentType = Model.Documents[item].ContentType, title = Model.Documents[item].Title })">@Model.Documents[item].Title</a>
                                        <p class="description">@Model.Documents[item].Description</p>
                                    </div>
                                    <div class="col-sm-2">
                                        @Html.HiddenFor(s => Model.Documents[item].Title)
                                        @Html.HiddenFor(s => Model.Documents[item].Description)
                                        @Html.HiddenFor(s => Model.Documents[item].Type)
                                        @Html.HiddenFor(s => Model.Documents[item].AssetDocumentId)
                                        @Html.HiddenFor(s => Model.Documents[item].Size)
                                        @Html.HiddenFor(s => Model.Documents[item].ContentType)
                                        @Html.HiddenFor(s => Model.Documents[item].AssetId)
                                        @Html.HiddenFor(x => Model.Documents[item].Viewable)
                                        @Html.HiddenFor(s => Model.Documents[item].FileName, new { @class = "docName" })
                                        <input type='button' class='deleteDocUpload delCA' value='Delete' data-button="@Model.Documents[item].FileName" onclick='docDelete(this, "#currentAppraisalDocs", ".delCA", "#linkCA")'/>
                                    </div>
                                </div>
                                }
                            }
                        </div>
                    </div>
                }
                @if (Model.availableListingAgentMarketingBrochure)
                {
                    <div class="document-item">
                        <div id="linkMB">
                            <h4>Marketing Brochure</h4>
                        </div>
                        <div id="marketingBrochureDocs" class="document-item-expanded">
                            @for (int item = 0; item < Model.Documents.Count; item++)
                            {
                                if (Model.Documents[item].Type == (int)Inview.Epi.EpiFund.Domain.Enum.AssetDocumentType.ListingAgentMarketingBrochure)
                                {
                                <div class="docPreviewDiv row">
                                    <div class="col-sm-10">
                                        <a target='_blank' href="@Url.Action("DownloadDocument", "Admin", new { fileName = Model.Documents[item].FileName, assetId = Model.AssetId, contentType = Model.Documents[item].ContentType, title = Model.Documents[item].Title })">@Model.Documents[item].Title</a>
                                        <p class="description">@Model.Documents[item].Description</p>
                                    </div>
                                    <div class="col-sm-2">
                                        @Html.HiddenFor(s => Model.Documents[item].Title)
                                        @Html.HiddenFor(s => Model.Documents[item].Description)
                                        @Html.HiddenFor(s => Model.Documents[item].Type)
                                        @Html.HiddenFor(s => Model.Documents[item].AssetDocumentId)
                                        @Html.HiddenFor(s => Model.Documents[item].Size)
                                        @Html.HiddenFor(s => Model.Documents[item].ContentType)
                                        @Html.HiddenFor(s => Model.Documents[item].AssetId)
                                        @Html.HiddenFor(x => Model.Documents[item].Viewable)
                                        @Html.HiddenFor(s => Model.Documents[item].FileName, new { @class = "docName" })
                                        <input type='button' class='deleteDocUpload delMB' value='Delete' data-button="@Model.Documents[item].FileName" onclick='docDelete(this, "#marketingBrochureDocs", ".delMB", "#linkMB")'/>
                                    </div>
                                </div>
                                }
                            }
                        </div>
                    </div>
                }
                @if (Model.availableOtherDocument)
                {
                    <div class="document-item">
                        <div id="linkOD">
                            <h4>Other</h4>
                        </div>
                        <div id="otherDocumentsDocs" class="document-item-expanded">
                            @for (int item = 0; item < Model.Documents.Count; item++)
                            {
                                if (Model.Documents[item].Type == (int)Inview.Epi.EpiFund.Domain.Enum.AssetDocumentType.Other)
                                {
                                <div class="docPreviewDiv row">
                                    <div class="col-sm-10">
                                        <a target='_blank' href="@Url.Action("DownloadDocument", "Admin", new { fileName = Model.Documents[item].FileName, assetId = Model.AssetId, contentType = Model.Documents[item].ContentType, title = Model.Documents[item].Title })">@Model.Documents[item].Title</a>
                                        <p class="description">@Model.Documents[item].Description</p>
                                    </div>
                                    <div class="col-sm-2">
                                        @Html.HiddenFor(s => Model.Documents[item].Title)
                                        @Html.HiddenFor(s => Model.Documents[item].Description)
                                        @Html.HiddenFor(s => Model.Documents[item].Type)
                                        @Html.HiddenFor(s => Model.Documents[item].AssetDocumentId)
                                        @Html.HiddenFor(s => Model.Documents[item].Size)
                                        @Html.HiddenFor(s => Model.Documents[item].ContentType)
                                        @Html.HiddenFor(s => Model.Documents[item].AssetId)
                                        @Html.HiddenFor(x => Model.Documents[item].Viewable)
                                        @Html.HiddenFor(s => Model.Documents[item].FileName, new { @class = "docName" })
                                        <input type='button' class='deleteDocUpload delOD' value='Delete' data-button="@Model.Documents[item].FileName" onclick='docDelete(this, "#otherDocumentsDocs", ".delOD", "#linkOD")'/>
                                    </div>
                                </div>
                                }
                            }
                        </div>
                    </div>
                }
                @if (Model.OrderStatus == Inview.Epi.EpiFund.Domain.Enum.OrderStatus.Completed)
                {
                    if (Model.availableMortgageInstrumentRecord)
                    {
                    <div class="document-item">
                        <div id="linkMIR">
                            <h4>Title Company Mortgage Instrument of Record</h4>
                        </div>
                        <div id="mgInstRecDocs" class="document-item-expanded">
                            @for (int item = 0; item < Model.Documents.Count; item++)
                            {
                                if (Model.Documents[item].Type == (int)Inview.Epi.EpiFund.Domain.Enum.AssetDocumentType.MortgageInstrumentOfRecord)
                                {
                                <div class="docPreviewDiv row">
                                    <div class="col-sm-10">
                                        <a target='_blank' href="@Url.Action("DownloadDocument", "Admin", new { fileName = Model.Documents[item].FileName, assetId = Model.AssetId, contentType = Model.Documents[item].ContentType, title = Model.Documents[item].Title })">@Model.Documents[item].Title</a>
                                        <p class="description">@Model.Documents[item].Description</p>
                                    </div>
                                    <div class="col-sm-2">
                                        @Html.HiddenFor(s => Model.Documents[item].Title)
                                        @Html.HiddenFor(s => Model.Documents[item].Description)
                                        @Html.HiddenFor(s => Model.Documents[item].AssetDocumentId)
                                        @Html.HiddenFor(s => Model.Documents[item].Size)
                                        @Html.HiddenFor(s => Model.Documents[item].ContentType)
                                        @Html.HiddenFor(s => Model.Documents[item].AssetId)
                                        @Html.HiddenFor(s => Model.Documents[item].Type)
                                        @Html.HiddenFor(x => Model.Documents[item].Viewable)
                                        @Html.HiddenFor(s => Model.Documents[item].FileName, new { @class = "docName" })
                                        <input type='button' class='deleteDocUpload delMIR' value='Delete' data-id="#instrumentRecord" data-button="@Model.Documents[item].FileName" onclick='docDelete(this, "#mgInstRecDocs", ".delMIR", "#linkMIR")'/>
                                    </div>
                                </div>
                                }
                            }
                        </div>
                    </div>
                    }
                    if (Model.availableRecordedLiens)
                    {
                    <div class="document-item">
                        <div id="linkRL">
                            <h4>Title Company Recorded Liens</h4>
                        </div>
                        <div id="recordedLiensDocs" class="document-item-expanded">
                            @for (int item = 0; item < Model.Documents.Count; item++)
                            {
                                if (Model.Documents[item].Type == (int)Inview.Epi.EpiFund.Domain.Enum.AssetDocumentType.RecordedLiens)
                                {
                                <div class="docPreviewDiv row">
                                    <div class="col-sm-10">
                                        <a target='_blank' href="@Url.Action("DownloadDocument", "Admin", new { fileName = Model.Documents[item].FileName, assetId = Model.AssetId, contentType = Model.Documents[item].ContentType, title = Model.Documents[item].Title })">@Model.Documents[item].Title</a>
                                        <p class="description">@Model.Documents[item].Description</p>
                                    </div>
                                    <div class="col-sm-2">
                                        @Html.HiddenFor(s => Model.Documents[item].Title)
                                        @Html.HiddenFor(s => Model.Documents[item].Description)
                                        @Html.HiddenFor(s => Model.Documents[item].AssetDocumentId)
                                        @Html.HiddenFor(s => Model.Documents[item].Size)
                                        @Html.HiddenFor(s => Model.Documents[item].ContentType)
                                        @Html.HiddenFor(s => Model.Documents[item].AssetId)
                                        @Html.HiddenFor(s => Model.Documents[item].Type)
                                        @Html.HiddenFor(x => Model.Documents[item].Viewable)
                                        @Html.HiddenFor(s => Model.Documents[item].FileName, new { @class = "docName" })
                                        <input type='button' class='deleteDocUpload delRL' value='Delete' data-id="#recLiens" data-button="@Model.Documents[item].FileName" onclick='docDelete(this, "#recordedLiensDocs", ".delRL", "#linkRL")'/>
                                    </div>
                                </div>
                                }
                            }
                        </div>
                    </div>
                    }
                    if (Model.availableTaxLiens)
                    {
                    <div class="document-item">
                        <div id="linkTL">
                            <h4>Title Company Assessor's Annual Tax Billing Statement</h4>
                        </div>
                        <div id="taxLiensDocs" class="document-item-expanded">
                            @for (int item = 0; item < Model.Documents.Count; item++)
                            {
                                if (Model.Documents[item].Type == (int)Inview.Epi.EpiFund.Domain.Enum.AssetDocumentType.TaxLiens)
                                {
                                <div class="docPreviewDiv row">
                                    <div class="col-sm-10">
                                        <a target='_blank' href="@Url.Action("DownloadDocument", "Admin", new { fileName = Model.Documents[item].FileName, assetId = Model.AssetId, contentType = Model.Documents[item].ContentType, title = Model.Documents[item].Title })">@Model.Documents[item].Title</a>
                                        <p class="description">@Model.Documents[item].Description</p>
                                    </div>
                                    <div class="col-sm-2">
                                        @Html.HiddenFor(s => Model.Documents[item].Title)
                                        @Html.HiddenFor(s => Model.Documents[item].Description)
                                        @Html.HiddenFor(s => Model.Documents[item].Type)
                                        @Html.HiddenFor(s => Model.Documents[item].AssetDocumentId)
                                        @Html.HiddenFor(s => Model.Documents[item].Size)
                                        @Html.HiddenFor(s => Model.Documents[item].ContentType)
                                        @Html.HiddenFor(s => Model.Documents[item].AssetId)
                                        @Html.HiddenFor(x => Model.Documents[item].Viewable)
                                        @Html.HiddenFor(s => Model.Documents[item].FileName, new { @class = "docName" })
                                        <input type='button' class='deleteDocUpload delTL' value='Delete' data-id="#txLiens" data-button="@Model.Documents[item].FileName" onclick='docDelete(this, "#taxLiensDocs", ".delTL", "#linkTL")'/>
                                    </div>
                                </div>
                                }
                            }
                        </div>
                    </div>
                    }
                    if (Model.availableBKRelated)
                    {
                    <div class="document-item">
                        <div id="linkBKR">
                            <h4>Title Company BK Related Filings</h4>
                        </div>
                        <div id="bkRelatedDocs" class="document-item-expanded">
                            @for (int item = 0; item < Model.Documents.Count; item++)
                            {
                                if (Model.Documents[item].Type == (int)Inview.Epi.EpiFund.Domain.Enum.AssetDocumentType.BKRelated)
                                {
                                <div class="docPreviewDiv row">
                                    <div class="col-sm-10">
                                        <a target='_blank' href="@Url.Action("DownloadDocument", "Admin", new { fileName = Model.Documents[item].FileName, assetId = Model.AssetId, contentType = Model.Documents[item].ContentType, title = Model.Documents[item].Title })">@Model.Documents[item].Title</a>
                                        <p class="description">@Model.Documents[item].Description</p>
                                    </div>
                                    <div class="col-sm-2">
                                        @Html.HiddenFor(s => Model.Documents[item].Title)
                                        @Html.HiddenFor(s => Model.Documents[item].Description)
                                        @Html.HiddenFor(s => Model.Documents[item].Type)
                                        @Html.HiddenFor(s => Model.Documents[item].AssetDocumentId)
                                        @Html.HiddenFor(s => Model.Documents[item].Size)
                                        @Html.HiddenFor(s => Model.Documents[item].ContentType)
                                        @Html.HiddenFor(s => Model.Documents[item].AssetId)
                                        @Html.HiddenFor(x => Model.Documents[item].Viewable)
                                        @Html.HiddenFor(s => Model.Documents[item].FileName, new { @class = "docName" })
                                        <input type='button' class='deleteDocUpload delBKR' value='Delete' data-id="#related" data-button="@Model.Documents[item].FileName" onclick='docDelete(this, "#bkRelatedDocs", ".delBKR", "#linkBKR")'/>
                                    </div>
                                </div>
                                }
                            }
                        </div>
                    </div>
                    }
                    if (Model.availablePreliminaryTitleReportTitle)
                    {
                    <div class="document-item">
                        <div id="linkPTRT">
                            <h4>Title Company Preliminary Title Report</h4>
                        </div>
                        <div id="preliminaryTitleReportTitleDocs" class="document-item-expanded">
                            @for (int item = 0; item < Model.Documents.Count; item++)
                            {
                                if (Model.Documents[item].Type == (int)Inview.Epi.EpiFund.Domain.Enum.AssetDocumentType.PreliminaryTitleReportTitle)
                                {
                                <div class="docPreviewDiv row">
                                    <div class="col-sm-10">
                                        <a target='_blank' href="@Url.Action("DownloadDocument", "Admin", new { fileName = Model.Documents[item].FileName, assetId = Model.AssetId, contentType = Model.Documents[item].ContentType, title = Model.Documents[item].Title })">@Model.Documents[item].Title</a>
                                        <p class="description">@Model.Documents[item].Description</p>
                                    </div>
                                    <div class="col-sm-2">
                                        @Html.HiddenFor(s => Model.Documents[item].Title)
                                        @Html.HiddenFor(s => Model.Documents[item].Description)
                                        @Html.HiddenFor(s => Model.Documents[item].Type)
                                        @Html.HiddenFor(s => Model.Documents[item].AssetDocumentId)
                                        @Html.HiddenFor(s => Model.Documents[item].Size)
                                        @Html.HiddenFor(s => Model.Documents[item].ContentType)
                                        @Html.HiddenFor(s => Model.Documents[item].AssetId)
                                        @Html.HiddenFor(x => Model.Documents[item].Viewable)
                                        @Html.HiddenFor(s => Model.Documents[item].FileName, new { @class = "docName" })
                                        <input type='button' class='deleteDocUpload delPTRT' value='Delete' data-id="#ptrTitle" data-button="@Model.Documents[item].FileName" onclick='docDelete(this, "#preliminaryTitleReportTitleDocs", ".delPTRT", "#linkPTRT")'/>
                                    </div>
                                </div>
                                }
                            }
                        </div>
                    </div>
                    }
                    if (Model.availableDOTMTG)
                    {
                    <div class="document-item">
                        <div id="linkDOTMG">
                            <h4>Title Company Recorded DOTs & MTGs</h4>
                        </div>
                        <div id="recDOTMTGDocs" class="document-item-expanded">
                            @for (int item = 0; item < Model.Documents.Count; item++)
                            {
                                if (Model.Documents[item].Type == (int)Inview.Epi.EpiFund.Domain.Enum.AssetDocumentType.DOTMTG)
                                {
                                <div class="docPreviewDiv row">
                                    <div class="col-sm-10">
                                        <a target='_blank' href="@Url.Action("DownloadDocument", "Admin", new { fileName = Model.Documents[item].FileName, assetId = Model.AssetId, contentType = Model.Documents[item].ContentType, title = Model.Documents[item].Title })">@Model.Documents[item].Title</a>
                                        <p class="description">@Model.Documents[item].Description</p>
                                    </div>
                                    <div class="col-sm-2">
                                        @Html.HiddenFor(s => Model.Documents[item].Title)
                                        @Html.HiddenFor(s => Model.Documents[item].Description)
                                        @Html.HiddenFor(s => Model.Documents[item].Type)
                                        @Html.HiddenFor(s => Model.Documents[item].AssetDocumentId)
                                        @Html.HiddenFor(s => Model.Documents[item].Size)
                                        @Html.HiddenFor(s => Model.Documents[item].ContentType)
                                        @Html.HiddenFor(s => Model.Documents[item].AssetId)
                                        @Html.HiddenFor(x => Model.Documents[item].Viewable)
                                        @Html.HiddenFor(s => Model.Documents[item].FileName, new { @class = "docName" })
                                        <input type='button' class='deleteDocUpload delDOTMTG' value='Delete' data-id="#dotMG" data-button="@Model.Documents[item].FileName" onclick='docDelete(this, "#recDOTMTGDocs", ".delDOTMTG", "#linkDOTMG")'/>
                                    </div>
                                </div>
                                }
                            }
                        </div>
                    </div>
                    }
                    if (Model.availableOtherTitle)
                    {
                    <div class="document-item">
                        <div id="linkODT">
                            <h4>Title Company Other</h4>
                        </div>
                        <div id="otherDocumentsTitleDocs" class="document-item-expanded">
                            @for (int item = 0; item < Model.Documents.Count; item++)
                            {
                                if (Model.Documents[item].Type == (int)Inview.Epi.EpiFund.Domain.Enum.AssetDocumentType.OtherTitle)
                                {
                                <div class="docPreviewDiv row">
                                    <div class="col-sm-10">
                                        <a target='_blank' href="@Url.Action("DownloadDocument", "Admin", new { fileName = Model.Documents[item].FileName, assetId = Model.AssetId, contentType = Model.Documents[item].ContentType, title = Model.Documents[item].Title })">@Model.Documents[item].Title</a>
                                        <p class="description">@Model.Documents[item].Description</p>
                                    </div>
                                    <div class="col-sm-2">
                                        @Html.HiddenFor(s => Model.Documents[item].Title)
                                        @Html.HiddenFor(s => Model.Documents[item].Description)
                                        @Html.HiddenFor(s => Model.Documents[item].Type)
                                        @Html.HiddenFor(s => Model.Documents[item].AssetDocumentId)
                                        @Html.HiddenFor(s => Model.Documents[item].Size)
                                        @Html.HiddenFor(s => Model.Documents[item].ContentType)
                                        @Html.HiddenFor(s => Model.Documents[item].AssetId)
                                        @Html.HiddenFor(x => Model.Documents[item].Viewable)
                                        @Html.HiddenFor(s => Model.Documents[item].FileName, new { @class = "docName" })
                                        <input type='button' class='deleteDocUpload delODT' value='Delete' data-id="#othTitle" data-button="@Model.Documents[item].FileName" onclick='docDelete(this, "#otherDocumentsTitleDocs", ".delODT", "#linkODT")'/>
                                    </div>
                                </div>
                                }
                            }
                        </div>
                    </div>
                    }
                }
            </div>
        </div>
        <br />
        <input type="button" class="btn btn-warning" onclick="if (confirm('If you click ok, you will lose all of the data you entered and be returned to the manage assets page.')) goBack()" value="Cancel" />
        <input type="button" class="btn btn-default" onclick="backTab($(this));" value="Back" />
        <input type="button" class="btn btn-primary" onclick="nextTab($(this));" value="Next" />
    </div>


    <div class="tab-pane" id="finish">
        <h3>End</h3>
        @*<hr />*@
        <h5>Once you submit, all data will be sent to the CORP admins and your title company can no longer access this asset</h5>
        <br />
        <input type="button" class="btn btn-warning" onclick="if (confirm('If you click ok, you will lose all of the data you entered and be returned to the access assets page.')) goBack()" value="Cancel" />
        <input type="button" class="btn btn-default" onclick="backTab($(this));" value="Back" />
        <input type="submit" class="btn btn-primary" onclick="fixNumbers()" name="SubmitAsset" value="Save Asset">
        <input type="submit" class="btn btn-primary" onclick="fixNumbers()" name="SubmitAsset" value="Save & Submit to Corp Admin">
        @Html.HiddenFor(s => s.CreationDate)
        @Html.HiddenFor(s => s.IsActive)
        @Html.HiddenFor(s => s.ListedByUserId)
        @Html.HiddenFor(s => s.AssetNumber)
        <input type="hidden" value="@(Model.AssetId)" data-asset="@(Model.AssetId)" id="AssetId" name="AssetId"/>
        <input type="hidden" value="@(Model.GetType())" name="TypeOfAsset"/>

    </div>

</div>



<script>
    function addCommasToInputAndCalculate(control, index) {
        $(control).val(addCommas($(control).val(), false));
        calculateEstimatedDeferredMaintenance(index);
    };

    function fixNumbers() {
        $("input.formatNumber").each(function (index) {
            $(this).val($(this).val().replace(/,/g, ""));
        });
        $("input.formatMaint").each(function (index) {
            $(this).val($(this).val().replace(/,/g, ""));
        });
    };

    $('#myTab a').click(function (e) {
        e.preventDefault()
        $(this).tab('show')
    })

    $("[name = 'rbIsPaperAsset']").change(togglePaperTab);

    function togglePaperTab() {
        $("#tabPaper").toggle();
    }

    function goBack() {
        window.location.href = "/Insurance/ManageAssets";
    }

    function nextTab(button) {
        $('.nav li.active').removeClass('active');
        var currentId = button.closest('.tab-pane');
        var nextId = button.closest('.tab-pane').next('.tab-pane');
        currentId.removeClass('active');
        nextId.addClass('active');
        var tabLink = '#' + nextId.attr('id');
        $("[href = '" + tabLink + "']").closest('li').addClass('active');
    }

    function backTab(button) {
        $('.nav li.active').removeClass('active');
        var currentId = button.closest('.tab-pane');
        var prevId = button.closest('.tab-pane').prev('.tab-pane');
        currentId.removeClass('active');
        prevId.addClass('active');
        var tabLink = '#' + prevId.attr('id');
        $("[href = '" + tabLink + "']").closest('li').addClass('active');
    }

    function onlyOneCheckbox(cb) {
        if (cb.checked) {
            $("input:checkbox[class='mainflyer']").not(cb).removeAttr("checked");
        }
    }

    $("#AssetDocumentType").change(function () {
        //$('#successDoc').hide();
        //var selected = $("#AssetDocumentType option:selected").text();
        //$("#docTitle").val(selected);
        loadDocTitle();
    });

    function loadDocTitle() {
        $('#successDoc').hide();
        var selected = $("#AssetDocumentType option:selected").text();
        $("#docTitle").val(selected);
    }

    $("#docUpload").change(function () {
        var path = $(this).val();
        var selDocType = $("#AssetDocumentType").val();
        var type = $("#docUpload").attr('data-type');
        var description = $('#docDescription').val();
        var docId = null;
        var fileID = null;
        switch (selDocType) {
            case 'CurrentRentRoll':
                $("docUpload").attr("data-type", 0); type = 0;
                //docId = '#currentRentRoll'; fileID =  "#rentRoll"
                break;
            case 'CurrentOperatingReport':
                $("docUpload").attr("data-type", 1); type = 1;
                //docId = '#currentOperatingReport'; fileID =  "#cor"
                break;
            case "PriorFiscalYearOperReport":
                $("docUpload").attr("data-type", 2); type = 2;
                //docId = '#priorFiscalYearOperReport'; fileID =  "#pfyor"
                break;
            case "PreliminaryTitleReport":
                $("docUpload").attr("data-type", 3); type = 3;
                //docId = '#preliminaryTitleReport'; fileID =  "#ptr"
                break;
            case "PlatMap":
                $("docUpload").attr("data-type", 4); type = 4;
                //docId = '#platMap'; fileID =  "#pm"
                break;
            case "ArialMap":
                $("docUpload").attr("data-type", 5); type = 5;
                //docId = '#arialMap'; fileID =  "#am"
                break;
            case "OriginalAppraisal":
                $("docUpload").attr("data-type", 6); type = 6;
                //docId = '#originalAppraisal'; fileID =  "#oa"
                break;
            case "CurrentAppraisal":
                $("docUpload").attr("data-type", 7); type = 7;
                // docId = '#currentAppraisal'; fileID =  "#ca"
                break;
            case "ListingAgentMarketingBrochure":
                $("docUpload").attr("data-type", 8); type = 8;
                //docId = '#marketingBrochure'; fileID =  "#mb"
                break;
            case "Other":
                $("docUpload").attr("data-type", 9); type = 9;
                //docId = '#otherDocuments'; fileID =  "#od"
                break;
            case "MortgageInstrumentOfRecord":
                $("docUpload").attr("data-type", 10); type = 10;
                //docId = '#mgInstRec'; fileID =  "#instrumentRecord"
                break;
            case "RecordedLiens":
                $("docUpload").attr("data-type", 11); type = 11;
                //docId = '#recordedLiens'; fileID =  "#recLiens"
                break;
            case "TaxLiens":
                $("docUpload").attr("data-type", 12); type = 12;
                //docId = '#taxLiens'; fileID =  "#txLiens"
                break;
            case "BKRelated":
                $("docUpload").attr("data-type", 13); type = 13;
                //docId = '#bkRelated'; fileID =  "#related"
                break;
            case "PreliminaryTitleReportTitle":
                $("docUpload").attr("data-type", 14); type = 14;
                //docId = '#preliminaryTitleReportTitle'; fileID =  "#ptrTitle"
                break;
            case "DOTMTG":
                $("docUpload").attr("data-type", 15); type = 15;
                //docId = '#recDOTMTG'; fileID =  "#dotMG"
                break;
            case "OtherTitle":
                $("docUpload").attr("data-type", 16); type = 16;
                //docId = '#otherDocumentsTitle'; fileID =  "#othTitle"
                break;
            case "Insurance":
                $("docUpload").attr("data-type", 17); type = 17;
                break;
            case "InsuranceOther":
                $("docUpload").attr("data-type", 18); type = 18;
                break;
        }
        var title = $('#docTitle').val();
        var description = $('#docDescription').val();
        docId = '#uploadDocId'; fileID = "#uploadFileId"
        var fileName = path.match(/[^\/\\]+$/);
        readDOC(this, fileName, title, description, type, docId, fileID);
    });

    function readDOC(input, fileName, title, description, type, id, fileUploadId) {

        if (input.files && input.files[0]) {
            var xhr = new XMLHttpRequest();
            var fd = new FormData();
            fd.append("file", input.files[0]);
            fd.append("assetId", $('#AssetId').attr('data-asset'));
            fd.append("title", title);
            xhr.addEventListener("progress", function (event) {
                if (event.lengthComputable) {
                    var progress = Math.round(event.loaded * 100 / event.total);
                    $('#progressbar').show();
                    $("#progressbar").progressbar("value", progress);
                }
            }, false);
            xhr.open("POST", "@Url.Action("DocumentUpload", "Admin")", true);
            xhr.send(fd);
            $("#progressbar").progressbar({
                max: 100,
                change: function (event, ui) {
                    $("#progresslabel").text($("#progressbar").progressbar("value") + "%");
                },
                complete: function (event, ui) {
                    $("#progresslabel").text("The file has been uploaded successfully");
                }
            });
            xhr.addEventListener("load", function (event) {
                var response = JSON.parse(event.target.response);
                var success = response["message"];
                var contentType = response["contentType"];
                var newFilename = response["filename"];
                var size = response["size"];
                var downloadUrl = response["downloadUrl"];
                if (success.toLowerCase() == "true") {
                    var reader = new FileReader();
                    reader.onload = function (e) {
                        if (isNaN(docCount)) {
                            docCount = 0;
                        }
                        show(id.substring(1));
                        jQuery(".detailsContent").hide();
                        $(id).append("<div class='docPreviewDiv row'><div class='col-sm-10'><a class='spaceLab' target='_blank' href=" + downloadUrl + ">" + title + "</a><label class='description' name='Documents[" + docCount + "].Description'>" + description + "</label></div><div class='col-sm-2'><input type='hidden' class='docTitle' name='Documents[" + docCount + "].Title' value='" + title + "'><input type='hidden' class='docDescription' name='Documents[" + docCount + "].Description' value='" + description + "'><input type='hidden' class='docName' name='Documents[" + docCount + "].FileName' value=" + newFilename + "><input type='hidden' name='Documents[" + docCount + "].Size' value=" + size + "> <input type='hidden' name='Documents[" + docCount + "].ContentType' value=" + contentType + "> <input type='hidden' name='Documents[" + docCount + "].AssetId' value='@Model.AssetId'> <input type='hidden' name='Documents[" + docCount + "].Type' value='" + type + "'><input type='button' class='deleteDocUpload' value='Delete' data-id=" + fileUploadId + " data-button=" + newFilename + " onclick='docDelete(this)'></div></div>");
                        $('#successDoc').show();
                        $('#PendingUploads').show();
                        $("#progressbar").delay(1200).fadeOut(300);
                        document.getElementById('docUpload').value = '';
                    };
                    reader.readAsDataURL(input.files[0]);
                    docCount++;
                }
                else {
                    alert("This document already exists on the server for this asset and this document. Please change the filename of the file before uploading.");
                    $('#docsPreviewer').append("<div>" + success + " for " + fileName + "</div>")
                }
            }, false);
        }
    }

    function docDelete(param, enclosingDiv, classType, linkDiv) {
        var deleteDoc = confirm('Are you sure you want to delete?');
        if (deleteDoc) {
            var input = $($(param).attr('data-id'));
            var xhr = new XMLHttpRequest();
            var fd = new FormData();
            fd.append("docId", param.getAttribute("data-button"));
            fd.append("assetId", $('#AssetId').attr('data-asset'));
            xhr.open("POST", "@Url.Action("DocumentDelete", "Admin")", true);
            xhr.send(fd);
            xhr.addEventListener("load", function (event) {
                var response = JSON.parse(event.target.response);
                var success = response["message"];
                if (success == "true") {
                    $(param).closest('.docPreviewDiv').hide();
                    $(param).closest('.docPreviewDiv').find('.docName').val('');
                    var numItems = $(classType).length;
                    if (numItems < 2) {
                        $(enclosingDiv).hide();
                        $(linkDiv).hide();
                    }
                    //$(input).wrap('<form>').closest('form').get(0).reset();
                    $(input).unwrap();
                }
                else {
                    //alert("Data Saved: " + response["message"]);
                    $(param).closest('.docPreviewDiv').hide();
                    $(param).closest('.docPreviewDiv').find('.docName').val('');
                    //$(input).wrap('<form>').closest('form').get(0).reset();
                    $(input).unwrap();
                }
            }, false);
        }
    }

    var docCount = 0;

    $(document).ready(function () {

        docCount = 0;
        docCount = $('#docManager').attr('data-doccount');
        docCount--;

        jQuery(function ($) {
            $(document).on('nested:fieldRemoved', function (event) {
                $('[required]', event.field).removeAttr('required');
            });
        });
        loadDocTitle();
        $("input.formatNumber").each(function (index) {
            $(this).val(addCommas($(this).val(), true));
            $(this).on("input", null, null, function () {
                $(this).val(addCommas($(this).val(), true));
            });
        });
        $("input.formatMaint").each(function (index) {
            $(this).val(addCommas($(this).val(), true));
        });
        $("span.formatNumber").each(function (index) {
            $(this).text(addCommas($(this).text(), false));
        });

        //Setup Calendar UI
        $(function () {
            $(".datepicker").datepicker();
        });
        $('.pad').each(function (index) {
            padCommas(this, false);
        });
        $('.padmoney').each(function (index) {
            padCommas(this, true);
        });
        $("#txtBoxDesiredCapRate").on('input', function () {
            if ($(this).val() != "") {
                $("#BtnCapRateCalc").removeAttr("disabled");
            } else {
                $("#BtnCapRateCalc").attr("disabled", "true");
            }
        });
    });


    function show(id) {
        $('#' + id).show();
    }
    function hide(id) {
        $('#' + id).hide();
    }
</script>
