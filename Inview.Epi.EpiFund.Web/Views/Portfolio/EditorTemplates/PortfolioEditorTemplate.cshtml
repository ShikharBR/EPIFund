@model PortfolioViewModel
@using MVCVideo
@using Inview.Epi.EpiFund.Domain.Helpers
@using Inview.Epi.EpiFund.Domain.Entity
@using Inview.Epi.EpiFund.Domain.ViewModel
@using Inview.Epi.EpiFund.Domain.Enum
@using Newtonsoft.Json
<style>
    .field-validation-error {
        color: red;
        font-weight: bold;
    }

    .detailsHeading {
        margin: 1px;
        color: #fff;
        padding: 3px 10px;
        cursor: pointer;
        position: relative;
        background-color: #428bca;
    }

    .layer1 {
        margin: 0;
        padding: 0;
        width: 300px;
    }

    .detailsContent {
        padding: 5px 10px;
        background-color: #fafafa;
    }

    #uploadDiv #AssetDocumentType, #uploadDiv #docTitle {
        border: 1px solid #ccc;
    }

    #documents .deleteDocUpload {
        background-color: transparent;
        border: 0;
        font-size: 10px;
        color: #428bca;
        padding: 0;
        margin: 0;
    }

        #documents .deleteDocUpload:hover, #docManager .deleteDocUpload:focus {
            color: #2a6496;
        }

    #documents a {
        display: block;
    }

    #documents .description {
        color: #888;
        font-weight: normal;
        font-style: italic;
        font-size: 10px;
        display: block;
        margin: 0;
    }

    #documents .docPreviewDiv.row {
        background-color: #f7f7f7;
        width: 100%;
        margin-left: 0px;
        padding: 10px 0;
        margin-bottom: 5px;
        border: 1px solid #eee;
        border-radius: 4px;
    }

        #documents .docPreviewDiv.row .col-sm-2 {
            text-align: right;
        }

    #documents .document-item {
        background-color: #fff;
        border: 0;
        padding: 0;
    }

    #documents .document-item-expanded {
        background-color: transparent;
        border: 0;
        padding: 0;
        margin: 0;
    }

    #PendingUploads .docPreviewDiv.row {
        background-color: #F1FBED;
        border-color: #d6e9c6;
    }

    #documents h4 {
        margin-bottom: 5px;
    }

    .progressbar {
        width: 300px;
        height: 20px;
        background-color: transparent;
    }

    .progressbarlabel {
        width: 300px;
        height: 20px;
        position: absolute;
        text-align: center;
        font-size: smaller;
    }

    .ui-progressbar .ui-progressbar-value {
        height: 20px;
    }

    select {
        width: 155px;
    }

    .AssetName {
        display: inline-block;
        width: 50px;
        white-space: nowrap;
        overflow: hidden !important;
        text-overflow: ellipsis;
    }

    .tab-content {
        padding-left: 0px !important;
        padding-right: 0px !important;
    }

    .table > thead > tr > th, .table > tbody > tr > th, .table > tfoot > tr > th, .table > thead > tr > td, .table > tbody > tr > td, .table > tfoot > tr > td {
        padding: 6px;
        text-align: left;
    }
</style>
<!-- Nav tabs -->
<ul class="nav nav-pills">
    <li class="active"><a href="#basic" data-toggle="pill">Primary Info</a></li>
    <li><a href="#assets" data-toggle="tab">Manage Assets</a></li>
</ul>

<!-- Tab panes -->
<div id="mainDiv" class="tab-content">
    <div class="tab-pane active" id="basic" style="padding-left:15px;">
        <h3>Portfolio Information</h3>
        <div class="row">
            <div class="col-sm-6 text-right">
                <div class="input-group">
                    @Html.LabelFor(model => model.PortfolioName) <span style="color: red;">*</span>
                </div>
            </div>
            <div class="col-sm-6">
                <div class="input-group" style="padding-top: 10px">
                    @Html.EditorFor(model => model.PortfolioName)
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.LabelFor(model => model.LastReportedOccupancyDate)
                </div>
            </div>
            <div class="col-sm-3">
                <div class="input-group">
                    @Html.TextBoxFor(model => model.LastReportedOccupancyDate, "{0:MM/dd/yyyy}", new { @class = "datepicker" })
                    @Html.ValidationMessageFor(model => model.LastReportedOccupancyDate)
                </div>
            </div>
            <div class="col-sm-3">
                <div class="input-group" style="float:left">
                    <em>MM/dd/yyyy</em>

                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-5">
                <div class="input-group">
                    @Html.LabelFor(model => model.MustPortfolioAssetsInclusive) <span style="color: red;">*</span>
                </div>
            </div>
            <div class="col-sm-6">
                <div class="input-group rdMandatory divMustPortfolioAssetsInclusive" style=" margin-left: 66px;">
                    @Html.RadioButtonFor(model => model.MustPortfolioAssetsInclusive, "true") Yes
                    @Html.RadioButtonFor(model => model.MustPortfolioAssetsInclusive, "false") No

                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.LabelFor(model => model.SellerTerms)<span style="color: red;">*</span>
                </div>
            </div>
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.EnumDropDownList("SellerTerms", Model.SellerTerms, "---")
                </div>
            </div>
        </div>

        <div class="row divSellerTermsOther" style="display:@(Model.SellerTerms.ToString()=="Other" ? "block":"none")">
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.LabelFor(model => model.SellerTermsOther)<span style="color: red;">*</span>
                </div>
            </div>
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.EditorFor(model => model.SellerTermsOther)
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.LabelFor(model => model.ListingStatus) <span style="color: red;">*</span>
                </div>
            </div>
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.EnumDropDownList("ListingStatus", Model.ListingStatus, "---")

                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.LabelFor(model => model.PricingDisplayOption)<span style="color: red;">*</span>
                </div>
            </div>
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.EnumDropDownList("PricingDisplayOption", Model.PricingDisplayOption, "---")
                </div>
            </div>
        </div>

        <div class="row CapRate" style="display:@(Model.PricingDisplayOption.ToString()=="Cmv" ? "block":"none")">
            <div class="col-sm-6">
                <div class="input-group ">
                    @Html.LabelFor(model => model.CapRate) <span style="color: red;">*</span>
                </div>
            </div>
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.EditorFor(model => model.CapRate, new { @style = "width:50%", @class = "control-label" }) %
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-sm-5">
                <div class="input-group">
                    @Html.LabelFor(model => model.IsTBDMarket) <span style="color: red;">*</span>
                </div>
            </div>
            <div class="col-sm-6">
                <div class="input-group rdMandatory divisSubjectToAuction" style=" margin-left: 66px;">
                    @Html.RadioButtonFor(model => model.IsTBDMarket, "true", new { onchange = "isAuctionCall()" }) Yes
                    @Html.RadioButtonFor(model => model.IsTBDMarket, "false", new { onchange = "isAuctionCall()" }) No

                </div>

            </div>
        </div>
        <div class="row">
            <div class="col-sm-5">
                <div class="input-group">
                    @Html.LabelFor(model => model.IsCallOffersDate) <span style="color: red;">*</span>
                </div>
            </div>
            <div class="col-sm-6">
                <div class="input-group rdMandatory divIsCallOffersDate" style=" margin-left: 66px;">
                    @Html.RadioButtonFor(model => model.IsCallOffersDate, "true", new { onchange = "isAuctionCall()" }) Yes
                    @Html.RadioButtonFor(model => model.IsCallOffersDate, "false", new { onchange = "isAuctionCall()" }) No

                </div>
            </div>
        </div>
        <div class="row divCallforOfferDate">
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.LabelFor(model => model.CallforOfferDate)
                </div>
            </div>
            <div class="col-sm-3">
                <div class="input-group">
                    @Html.TextBoxFor(model => model.CallforOfferDate, "{0:MM/dd/yyyy}", new { @class = "datepicker" })
                    @Html.ValidationMessageFor(model => model.CallforOfferDate)
                </div>
            </div>
            <div class="col-sm-3">
                <div class="input-group" style="float:left">
                    <em>MM/dd/yyyy</em>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-12">
                <input type="button" class="btn btn-warning" onclick="if (confirm('If you click ok, you will lose all of the data you entered and be returned to the manage portfolios page.')) goBack()" value="Cancel" />
                <input type="button" class="btn btn-primary" onclick="nextTab($(this));" value="Next" />
            </div>
        </div>

    </div>

    <div class="tab-pane" id="assets">
        <h3>Manage Assets</h3>
        <div class="panel panel-default" style="border: 1px solid #B1A795;">
            <div class="panel-heading" style="background-color: #428bca">
                <span style="font-weight: bold;">@Model.PortfolioAssetList.Count() Properties are in this Portfolio</span>
            </div>
            @if (Model.PortfolioAssetList.Count() > 0)
            {
                <div class="overflow short-xs">

                    <table class="table table-striped" id="tbAssets" cellpadding="1" cellspacing="1"
                           style="font-size: 10px !important; padding: 1px; vertical-align: middle;">
                        <thead>
                            <tr>
                                <th><b>Asset<br />ID#</b></th>
                                <th><b>City/<br />State</b></th>
                                <th><b>Asset<br />Type</b></th>
                                <th><b>#Units<br />Sq.Ft</b></th>
                                <th><b>Asset<br />Name</b></th>
                                <th><b>Occ%<br />Mo/Year</b></th>
                                <th><b>Proforma<br /><a title="Annualized Scheduled Gross Income">SGI</a></b></th>
                                <th><b>Proforma<br /><a title="Annualized Net Operating Income">NOI</a></b></th>
                                <th><b><a title="Annual Capitalization Rate"> CAP%</a></b></th>
                                <th><b>Assm<br />Fin</b></th>
                                <th><b>Pricing:LP<br />CMA/<a title="[Calculated Market Value is based solely on either (1) comparable sales data provided by the Listing Agent or Seller in their Offering Memorandum, or, in the absence thereof, (2) calculated to the displayed CAP Rate only if the offering price for the asset is TBD by Market.]">CMV</a></b></th>

                                <th><span class="glyphicon glyphicon-book" title="Portfolio"></span></th>
                                <th title="Chain of Title"><img style="width:12px;" src="~/Content/images/tringle.png" /></th>
                                <th><span class="glyphicon glyphicon-user" title="Users"></span></th>
                                <th><span class="glyphicon glyphicon-retweet" title="Availability Status"></span></th>
                                <th title="Who’s Driving the Bus"><img style="height:16px;" src="~/Content/images/bus.png" /></th>
                                <th>Manage</th>
                            </tr>
                        </thead>
                        <tbody>
                            @for (int i = 0; i < @Model.PortfolioAssetList.Count; i++)
                            {
                                string username = string.Empty;
                                string email = string.Empty;
                                if (!string.IsNullOrEmpty(Model.PortfolioAssetList[i].CreatedBy))
                                {
                                    username = Model.PortfolioAssetList[i].CreatedBy.Split('~')[0];
                                    email = Model.PortfolioAssetList[i].CreatedBy.Split('~')[1];
                                }
                                <tr id="@Model.PortfolioAssetList[i].AssetId">
                                    <td>
                                        <a href="@Url.Action("ViewAsset", "DataPortal", new { id = Model.PortfolioAssetList[i].AssetId, fromManageAssets = true })">
                                            @Model.PortfolioAssetList[i].AssetNumber
                                        </a>
                                    </td>
                                    <td style="word-wrap: break-word;">
                                        <div style="margin-bottom: -3px !important;" class="AssetName" title="@Model.PortfolioAssetList[i].City"> @Model.PortfolioAssetList[i].City</div><br />@Model.PortfolioAssetList[i].State
                                    </td>
                                    <td>
                                        @if (Model.PortfolioAssetList[i].IsPaper)
                                        {
                                            @Html.Raw("Note(" + Model.PortfolioAssetList[i].Type + ")")
                                        }
                                        else
                                        {
                                            @Model.PortfolioAssetList[i].Type
                                        }
                                    </td>
                                    <td>
                                        <span class="padNumber">@(Model.PortfolioAssetList[i].SquareFeet > 0 ? Model.PortfolioAssetList[i].SquareFeet.ToString() : Model.PortfolioAssetList[i].NumberOfUnits.ToString())</span>
                                    </td>
                                    <td style="word-wrap: break-word;">
                                        <span class="AssetName" title="@Model.PortfolioAssetList[i].AssetName">@Model.PortfolioAssetList[i].AssetName</span>
                                    </td>
                                    <td style="word-wrap: break-word;">
                                        @(((100 - Model.PortfolioAssetList[i].CurrentVacancyFac) / 100).ToString("P"))
                                        <br />@(Model.PortfolioAssetList[i].LastReportedOccupancyDate.HasValue ? Model.PortfolioAssetList[i].LastReportedOccupancyDate.Value.ToString("MM/yyyy") :
                                                    Model.PortfolioAssetList[i].OccupancyDate.HasValue? Model.PortfolioAssetList[i].OccupancyDate.Value.ToString("MM/yyyy"):"")
                                    </td>
                                    <td>
                                        <span class="padmoney">@Model.PortfolioAssetList[i].ProformaAnnualIncome.ToString("C0")</span>
                                    </td>
                                    <td>
                                        <span class="padmoney">@Model.PortfolioAssetList[i].ProformaNOI.ToString("C0")</span>
                                    </td>
                                    <td>
                                        @if (Model.PortfolioAssetList[i].AskingPrice > 0)
                                        {
                                            @((Model.PortfolioAssetList[i].CashInvestmentApy / 100).ToString("P2"))
                                        }
                                        else
                                        {
                                            @((Model.PortfolioAssetList[i].capRate / 100).ToString("P2"))
                                        }
                                    </td>
                                    <td>
                                        @Model.PortfolioAssetList[i].AssmFin
                                    </td>
                                    <td>
                                        @*askingPrice stand for LP and CurrentBpo stand for Calculated Market Value(CMV)*@
                                        @{
                                            if (Model.PortfolioAssetList[i].AskingPrice > 0)
                                            {
                                                @Model.PortfolioAssetList[i].AskingPrice.ToString("C0")
                                                <br /> @Html.Raw("LP")
                                            }
                                            else
                                            {
                                                @Model.PortfolioAssetList[i].CurrentBpo.ToString("C0")
                                                <br /> @Html.Raw("CMV")
                                            }
                                        }
                                    </td>
                                    <td>
                                        @if (Model.PortfolioAssetList[i].Portfolio)
                                        {
                                            <span class="glyphicon glyphicon-book" title="Portfolio" style="cursor:pointer" onclick="Viewportfolio('@Model.PortfolioAssetList[i].AssetId.ToString()',this)"></span>
                                        }
                                        else
                                        {
                                            @Html.Raw("--")
                                        }
                                    </td>
                                    <td>
                                        <span style="cursor:pointer" title="Chain Of Title" onclick="ViewChainOfTitle('@Model.PortfolioAssetList[i].AssetId.ToString()')">
                                            <img title="Chain of Title" style="width:12px;" src="~/Content/images/tringle.png" />
                                        </span>
                                    </td>
                                    <td>
                                        @{
                                            var uType = "";
                                            if (Model.PortfolioAssetList[i].UserType == Inview.Epi.EpiFund.Domain.Enum.UserType.ICAdmin)
                                            {
                                                uType = "ICA";
                                            }
                                            else if (Model.PortfolioAssetList[i].UserType == Inview.Epi.EpiFund.Domain.Enum.UserType.CorpAdmin)
                                            {
                                                uType = "CA";
                                            }
                                            else if (Model.PortfolioAssetList[i].UserType == Inview.Epi.EpiFund.Domain.Enum.UserType.Investor)
                                            {
                                                uType = "PI";
                                            }
                                            else if (Model.PortfolioAssetList[i].UserType == Inview.Epi.EpiFund.Domain.Enum.UserType.ListingAgent)
                                            {
                                                uType = "LA";
                                            }
                                            else
                                            {
                                                uType = "--";
                                            }
                                            @Html.Raw(uType)
                                        }
                                    </td>
                                    <td>
                                        @{
                                            var lstStatus = "";
                                            if (Model.PortfolioAssetList[i].ListingStatus == Inview.Epi.EpiFund.Domain.Enum.ListingStatus.Available)
                                            {
                                                lstStatus = "A";
                                            }
                                            else if (Model.PortfolioAssetList[i].ListingStatus == Inview.Epi.EpiFund.Domain.Enum.ListingStatus.Pending)
                                            {
                                                lstStatus = "P";
                                            }
                                            else if (Model.PortfolioAssetList[i].ListingStatus == Inview.Epi.EpiFund.Domain.Enum.ListingStatus.SoldNotClosed
                                                   || Model.PortfolioAssetList[i].ListingStatus == Inview.Epi.EpiFund.Domain.Enum.ListingStatus.SoldAndClosed
                                                   || Model.PortfolioAssetList[i].ListingStatus == Inview.Epi.EpiFund.Domain.Enum.ListingStatus.Withdrawn)
                                            {
                                                lstStatus = "U";
                                            }
                                            @Html.Raw(lstStatus)
                                        }
                                    </td>
                                    <td title="Who’s Driving the Bus">
                                        @if (Model.PortfolioAssetList[i].BusDriver == "SUS")
                                        {
                                            <span class="red">@Model.PortfolioAssetList[i].BusDriver</span>
                                        }
                                        else
                                        {
                                            <span>@Model.PortfolioAssetList[i].BusDriver</span>
                                        }
                                    </td>
                                    <td>
                                        [<a onclick="EditAsset('@Model.PortfolioAssetList[i].AssetId')" style="cursor:pointer" title="edit">
                                            <span class="glyphicon glyphicon-pencil"></span>
                                        </a>
                                        <a href="@Url.Action("AssetEscrowProcess", "Admin", new { id = Model.PortfolioAssetList[i].AssetId })" title="accounting">
                                            <span class="glyphicon glyphicon-usd"></span>
                                        </a>
                                        @if (Model.PortfolioAssetList[i].Show == "Yes")
                                        {
                                            <a href="@Url.Action("UnPublishAsset", "Admin", new { id = Model.PortfolioAssetList[i].AssetId })" title="unpublish" onclick="return confirm('Are you sure you wish to unpublish this asset?');">
                                                <span class="fa fa-lock" style="font-size: 13px; margin-top: 1px;"></span>
                                            </a>
                                        }
                                        else
                                        {
                                            if (Model.PortfolioAssetList[i].IsActive)
                                            {
                                                <a href="@Url.Action("PublishAsset", "Admin", new { id = Model.PortfolioAssetList[i].AssetId })" title="publish" onclick="return confirm('Are you sure you wish to publish this asset?');">
                                                    <span class="glyphicon glyphicon-globe"></span>
                                                </a>
                                            }
                                            else
                                            {
                                                <spane style="cursor:pointer;" title="publish" onclick="alert('You need to active this asset first.');">
                                                    <span class="glyphicon glyphicon-globe"></span>
                                                </spane>
                                            }
                                        }
                                        @if (Model.PortfolioAssetList[i].IsActive)
                                        {
                                            <a href="@Url.Action("DeActivateAsset", "Admin", new { id = Model.PortfolioAssetList[i].AssetId })" title="deactive asset" onclick="return confirm('Are you sure you wish to make this asset deactive?');">
                                                <span class="glyphicon glyphicon-arrow-up" style="font-size: 12px; color:blue"></span>
                                            </a>
                                        }
                                        else
                                        {
                                            <a href="@Url.Action("ActivateAsset", "Admin", new { id = Model.PortfolioAssetList[i].AssetId })" title="active asset" onclick="return confirm('Are you sure you wish to make this asset active?');">
                                                <span class="glyphicon glyphicon-arrow-down" style="font-size: 12px; color:red"></span>
                                            </a>
                                        }
                                        <a href="@Url.Action("DeactivateAssetfromPortfolio", "Portfolio", new { id = @Model.PortfolioAssetList[i].AssetId, pfId = @Model.PortfolioId })" title="Remove from Portfolio" onclick="return confirm('Are you sure you want to remove the Asset from this Portfolio?');">
                                            <span class="glyphicon glyphicon-remove"></span>
                                        </a>
                                        ]
                                    </td>
                                </tr>

                            }
                        </tbody>
                    </table>
                </div>

            }

            <div class="panel-group" id="accordion">
                <div class="panel panel-default">
                    <div class="panel-heading" style="background-color: #428bca">
                        <a data-toggle="collapse" data-parent="#accordion" href="#searchbox">
                            <button class="btn btn-default btn-xs" style="border: 1px solid #888">
                                Search & Add Assets
                            </button>
                        </a>
                    </div>
                    <div id="searchbox" class="panel-collapse collapse">
                        <div id="searchData" class="panel-body" style="background-color: white">
                            <div class="row asset-list-form">
                                <div class="col-sm-3">
                                    <div class="input-group text-right">
                                        @Html.LabelFor(s => s.AssetNumber, new { @style = "line-height: 32px;" })
                                    </div>
                                </div>
                                <div class="col-sm-3">
                                    <div class="input-group">
                                        @Html.TextBoxFor(s => s.AssetNumber)
                                    </div>
                                </div>
                                <div class="col-sm-3">
                                    <div class="input-group text-right">
                                        @Html.LabelFor(s => s.SelectedAssetType, new { @style = "line-height: 32px;" })
                                    </div>
                                </div>
                                <div class="col-sm-3">
                                    <div class="input-group">
                                        @Html.DropDownListFor(s => s.SelectedAssetType, @Model.AssetTypes, new { @style = "width: 100%" })
                                    </div>
                                </div>
                            </div>
                            <div class="row asset-list-form">
                                <div class="col-sm-3">
                                    <div class="input-group text-right">
                                        @Html.LabelFor(s => s.AddressLine1, new { @style = "line-height: 32px;" })
                                    </div>
                                </div>
                                <div class="col-sm-3">
                                    <div class="input-group">
                                        @Html.TextBoxFor(s => s.AddressLine1)
                                    </div>
                                </div>

                                <div class="col-sm-3">
                                    <div class="input-group text-right">
                                        @Html.LabelFor(s => s.City, new { @style = "line-height: 32px;" })
                                    </div>
                                </div>
                                <div class="col-sm-3">
                                    <div class="input-group">
                                        @Html.TextBoxFor(s => s.City, new { @style = "width: 100%" })
                                    </div>
                                </div>
                            </div>
                            <div class="row asset-list-form">
                                <div class="col-sm-3">
                                    <div class="input-group text-right">
                                        @Html.LabelFor(s => s.State, new { @style = "line-height: 32px;" })
                                    </div>
                                </div>
                                <div class="col-sm-3">
                                    <div class="input-group">
                                        @Html.DropDownListFor(s => s.State, @Model.States)
                                    </div>
                                </div>
                                <div class="col-sm-3">
                                    <div class="input-group text-right">
                                        @Html.LabelFor(s => s.ZipCode, new { @style = "line-height: 32px;" })
                                    </div>
                                </div>
                                <div class="col-sm-3">
                                    <div class="input-group">
                                        @Html.TextBoxFor(s => s.ZipCode, new { @style = "width: 100%" })
                                    </div>
                                </div>
                            </div>
                            <div class="row asset-list-form">
                                <div class="col-sm-3">
                                    <div class="input-group text-right">
                                        @Html.LabelFor(s => s.StartDate, new { @style = "line-height: 32px; margin:0" })
                                    </div>
                                </div>
                                <div class="col-sm-3">
                                    <div class="input-group">
                                        @Html.TextBoxFor(s => s.StartDate, new { @style = "width: 100%", @class = "datepicker" }) <em>MM/dd/yyyy</em>
                                    </div>
                                </div>
                                <div class="col-sm-3">
                                    <div class="input-group text-right">
                                        @Html.LabelFor(s => s.EndDate, new { @style = "line-height: 32px; margin:0" })
                                    </div>
                                </div>
                                <div class="col-sm-3">
                                    <div class="input-group">
                                        @Html.TextBoxFor(s => s.EndDate, new { @style = "width: 100%", @class = "datepicker" }) <em>MM/dd/yyyy</em>
                                    </div>
                                </div>
                            </div>
                            <div class="row asset-list-form">
                                <div class="col-sm-3">
                                    <div class="input-group text-right">
                                        @Html.LabelFor(s => s.AssetName, new { @style = "line-height: 32px; margin:0" })
                                    </div>
                                </div>
                                <div class="col-sm-3">
                                    <div class="input-group">
                                        @Html.TextBoxFor(s => s.AssetName, new { @style = "width: 100%" })
                                    </div>
                                </div>
                                <div class="col-sm-3">
                                    <div class="input-group text-right">
                                    </div>
                                </div>
                                <div class="col-sm-3">
                                    <div class="input-group">
                                    </div>
                                </div>
                            </div>
                            <div class="row asset-list-form">

                                <div class="col-sm-3">
                                    <div class="input-group">
                                    </div>
                                </div>
                                <div class="col-sm-12 text-center">
                                    <div class="input-group">
                                        @Html.HiddenFor(model => Model.Page)
                                        @Html.HiddenFor(model => Model.SortOrder)
                                        @Html.HiddenFor(model => Model.RowCount)
                                        <input type="button" value="Search" class="btn btn-primary proceed" style="width: 200px; margin: 30px auto; background-color: #428bca" onclick="searchAssets()" />
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            @{ Html.RenderPartial("_SearchAssetListView", Model.Assets); }


        </div>

        <div id="divError" style="display:none;color:red;font-weight:bold;" class="validation-summary-errors" data-valmsg-summary="true">

        </div>
        <br />

        <div class="row">
            <div class="col-sm-12">
                <input type="button" class="btn btn-warning" onclick="if (confirm('If you click ok, you will lose all of the data you entered and be returned to the manage portfolios page.')) goBack()" value="Cancel" />
                
                <input type="submit" id="btnSubmit" class="btn btn-primary" value="Save Portfolio">
            </div>
        </div>

    </div>
</div>
@Html.HiddenFor(model => model.PortfolioName)
@Html.HiddenFor(s => s.CallforOfferDate)
@Html.HiddenFor(model => Model.EstDeferredMaintenance)
@Html.HiddenFor(model => Model.HasDeferredMaintenance)
@Html.HiddenFor(model => Model.hasOffersDate)
@Html.HiddenFor(model => Model.IsTBDMarket)
@Html.HiddenFor(s => s.LastReportedOccupancyDate)
@Html.HiddenFor(model => Model.NumberofAssets)
@Html.HiddenFor(model => Model.PortfolioId)
@Html.HiddenFor(model => Model.UserId)
@Html.HiddenFor(model => Model.Assets)
@Html.HiddenFor(model => Model.Assets, new { id = "hdnAssetList" })
@Html.HiddenFor(model => Model.hasOffersDate)

<input type="hidden" value="@(Model.PortfolioId)" data-asset="@(Model.PortfolioId)" id="PortfolioId" name="PortfolioId" />
<input type="hidden" value="@(Model.GetType())" name="TypeOfAsset" />

<div class="modal fade" id="portfholioAssets" role="dialog" data-keyboard="false" style="top:10%;" data-backdrop="static">
    <div class="modal-dialog" style="padding:10%;text-align:center; width:1100px;">
        <!-- Modal content-->
        <div class="modal-content" id="divAssetViewPortfolio">

        </div>
    </div>
</div>

<div class="modal fade" id="chainOfTitleAssets" role="dialog" data-keyboard="false" style="top:10%;" data-backdrop="static">
    <div class="modal-dialog" style="padding:10%;text-align:center; width:1100px;">
        <!-- Modal content-->
        <div class="modal-content" id="divAssetViewchainOfTitle"></div>
    </div>
</div>

<script>
    var isValidForm = true;
    var valErrorMSg = '';
    function onInputBlur(ctrl) {
        $("#" + ctrl).blur(x => {
            if ($(x.target.id).val() === '') {
                $("#" + x.target.id).attr('style', 'border-color:red')
            }
            else {
                $("#" + x.target.id).attr('style', 'border-color:none')
            }
        });
    }

    $('#btnSubmit').click(function (e) {
        let isSuccess = formValidation('Primary Info');
        if (!isSuccess) {
            e.preventDefault();
            $('#divError').show();
        }
    });

    function formValidation(tabText) {
        valErrorMSg = '';
        $('#divError').html('');
        $('#divError').hide();
        let input = document.getElementsByTagName('input');
        let select = document.getElementsByTagName('select');
        $('.rdMandatory').css("border", "none");
        isValidForm = true;
        $(input).css("borderColor", "#B1A795");
        $(select).css("borderColor", "#B1A795");

        if (tabText === 'Primary Info') {

            if ($('#PortfolioName').val() === '') {
                $('#PortfolioName').css("borderColor", "red");
                valErrorMSg += $("label[for='" + $('#PortfolioName').attr('id') + "']").text() + ' is required <br/>';
                isValidForm = false;
                onInputBlur("PortfolioName");
            }



            if ($('#SellerTerms').val() === '---') {
                $('#SellerTerms').css("borderColor", "red");
                valErrorMSg += $("label[for='" + $('#SellerTerms').attr('id') + "']").text() + ' is required <br/>';
                isValidForm = false;
                onInputBlur("SellerTerms");
            }

            if ($('#SellerTerms').val() === 'Other' && $('#SellerTermsOther').val() == '') {
                $('#SellerTermsOther').css("borderColor", "red");
                valErrorMSg += $("label[for='" + $('#SellerTermsOther').attr('id') + "']").text() + ' is required <br/>';
                isValidForm = false;
                onInputBlur("SellerTermsOther");
            }

            if ($('#ListingStatusall').val() === '---') {
                $('#ListingStatusall').css("borderColor", "red");
                valErrorMSg += $("label[for='" + $('#ListingStatusall').attr('id') + "']").text() + ' is required <br/>';
                isValidForm = false;
                onInputBlur("ListingStatusall");
            }

            if ($('#PricingDisplayOption').val() === '---') {
                $('#PricingDisplayOption').css("borderColor", "red");
                valErrorMSg += $("label[for='" + $('#PricingDisplayOption').attr('id') + "']").text() + ' is required <br/>';
                isValidForm = false;
                onInputBlur("PricingDisplayOption");
            }

            if ($('#PricingDisplayOption').val() === 'Cmv' && $('#CapRate').val() === '') {
                $('#CapRate').css("borderColor", "red");
                valErrorMSg += $("label[for='" + $('#CapRate').attr('id') + "']").text() + ' is required <br/>';
                isValidForm = false;
                onInputBlur("CapRate");
            }

            if ($('input[name=MustPortfolioAssetsInclusive]:checked').length <= 0) {
                $('.divMustPortfolioAssetsInclusive').css("border", "1px solid red");
                valErrorMSg += $("label[for='" + $('#MustPortfolioAssetsInclusive').attr('id') + "']").text() + ' is required <br/>';
                isValidForm = false;
                onInputBlur("MustPortfolioAssetsInclusive");
            }

            if ($('input[name=IsCallOffersDate]:checked').length <= 0) {
                $('.divIsCallOffersDate').css("border", "1px solid red");
                valErrorMSg += $("label[for='" + $('#IsCallOffersDate').attr('id') + "']").text() + ' is required <br/>';
                isValidForm = false;
                onInputBlur("IsCallOffersDate");
            }

            if ($('input[name=IsTBDMarket]:checked').length <= 0) {
                $('.divisSubjectToAuction').css("border", "1px solid red");
                valErrorMSg += $("label[for='" + $('#IsTBDMarket').attr('id') + "']").text() + ' is required <br/>';
                isValidForm = false;
                onInputBlur("IsTBDMarket");
            }
            $('#divError').html(valErrorMSg);
        }
        return isValidForm;
    }

    window.setInterval(function () {
        getAssetList();
    }, 500);

    function serializeAnything(element) {
        var toReturn = [];
        var els = $(element).find(':input').get();
        $.each(els, function () {
            if (element.name && !element.disabled && (element.checked || /select|textarea/i.test(element.nodeName) || /text|hidden|password/i.test(element.type))) {
                var val = $(element).val();
                toReturn.push(encodeURIComponent(element.name) + "=" + encodeURIComponent(val));
            }
        });
        return toReturn.join("&").replace(/%20/g, "+");
    }

    function updateAssets() {
        //var myJavaScripVar = '<%=Model.Assets %>';
        //$('#hdnAssetList').val('@Model.Assets');
    }

    function addCommasToInputAndCalculate(control, index) {
        $(control).val(addCommas($(control).val(), false));
        calculateEstimatedDeferredMaintenance(index);
    };

    function SaveAsset(method) {
        $('#Method').val(method);
        fixNumbers();
    }

    function fixNumbers() {
        $("input.formatNumber").each(function (index) {
            $(this).val($(this).val().replace(/,/g, ""));
        });
        $("input.formatMaint").each(function (index) {
            $(this).val($(this).val().replace(/,/g, ""));
        });
    };

    function goBack() {
        window.location.href = "/Portfolio/ManagePortfolios";
    }


    $(document).ready(function () {
        if (location.hash.substr(0, 2) == "#!") {
            $("a[href='#" + location.hash.substr(2) + "']").tab("show");
        }
        $("a[data-toggle='tab']").on("shown.bs.tab", function (e) {
            var hash = $(e.target).attr("href");
            if (hash.substr(0, 1) == "#") {
                location.replace("#!" + hash.substr(1));
            }
        });
    });

    $('#PricingDisplayOption').change(function () {
        if ($(this).val() === 'Cmv') {
            $('.CapRate').show();
        }
        else {
            $('.CapRate').hide();
        }
    });

    $('#SellerTerms').change(function () {
        if ($(this).val() === 'Other') {
            $('.divSellerTermsOther').show();
        }
        else {
            $('.divSellerTermsOther').hide();
        }
    });

    function nextTab(button) {
        if (formValidation($('.nav li.active').text())) {
            $('.nav li.active').removeClass('active');
            var currentId = button.closest('.tab-pane');
            var nextId = button.closest('.tab-pane').next('.tab-pane');
            currentId.removeClass('active');
            nextId.addClass('active');
            var tabLink = '#' + nextId.attr('id');

            $("[href = '" + tabLink + "']").closest('li').addClass('active');
        }
    }

    function backTab(button) {
        $('.nav li.active').removeClass('active');
        var currentId = button.closest('.tab-pane');
        var prevId = button.closest('.tab-pane').prev('.tab-pane');
        currentId.removeClass('active');
        prevId.addClass('active');
        var tabLink = '#' + prevId.attr('id');
        $("[href = '" + tabLink + "']").closest('li').addClass('active');
    }

    function toggleWRAP(show) {
        if (show) {
            $("#wrapFields").show();
        } else {
            $("#wrapFields").hide();
        }
    }

    $("#imgUploader").change(function () {
        var path = $(this).val();
        var fileName = path.match(/[^\/\\]+$/);
        readIMG(this, fileName);
    });

    $('#CapRate').on('blur', function () {

        var val = parseFloat($(this).val());
        if (val > 100) {
            $(this).val('');
        }
        else if ($(this).val() == '' || val == 0) {
            $(this).val('');
        }
        else if ($(this).val() == '100') {
        }
        else {
            $(this).val(parseFloat($(this).val()).toFixed(2))
        }

    });

    function fillUserInformation() {
        $.ajax({
            type: "POST",
            url: "/Admin/GetUserInformation/",
            data: JSON.stringify({ userId: $("#ProposedBuyer").val() }),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            async: false,
            cache: false,
            success: function (response) {
                $("#ProposedBuyerContact").val(response.PrincipalContact);
                $("#ProposedBuyerAddress").val(response.BuyerAddress);
            },
            error: function (jqXHR, exception) {
            },
            failure: function (response) {
            }
        });
    }

    function searchAssets() {
        var tab = $("ul.nav li.active a").text();
        $('#searchbox').collapse("hide");
        if (tab != "Images" && tab != "Documents" && tab != "Videos" && tab != "Finish") {
            var form = $('#searchData :input').serialize();
            $.ajax({
                type: "POST",
                url: "/Portfolio/SearchAssets/",
                data: form,
                async: false,
                cache: false,
                success: function (response) {
                    $('#assetPartial').html(response);
                },
                error: function (jqXHR, exception) {
                },
                failure: function (response) {
                }
            });
        }
    }

    function storeSelection() {

        var form = $('#assetPartial :input').serialize();// serializeAnything($('#assetPartial'));
        $.ajax({
            type: "POST",
            url: "/Portfolio/AssetsList/",
            data: form,
            async: false,
            cache: false,
            success: function (response) {
                ("#hdnAssetList").value = response;
            },
            error: function (jqXHR, exception) {
            },
            failure: function (response) {
            }
        });

    }

    function sortResults(SortOrder) {
        var tab = $("ul.nav li.active a").text();
        var form = $('#searchData :input').serialize();
        $.ajax({
                type: "POST",
                url: "/Portfolio/SortSearchAssets/",
                data: {
                    stringModel: form,
                    sortOrder: SortOrder
                },
                async: false,
                cache: false,
                success: function (response) {
                    $('#assetPartial').html(response);
                },
                error: function (jqXHR, exception) {
                },
                failure: function (response) {
                }
            });
        }

    function getAssetList() {
        var tab = $("ul.nav li.active a").text();
        if (tab != "Images" && tab != "Documents" && tab != "Videos" && tab != "Finish") {
            var form = $('#assetPartial :input').serialize();
            $.ajax({
                type: "POST",
                url: "/Portfolio/AssetsList/",
                data: form,
                async: false,
                cache: false,
                success: function (response) {
                    ("#hdnAssetList").value = response;
                },
                error: function (jqXHR, exception) {
                },
                failure: function (response) {
                }
            });
        }
    }

    //Prepare Image and Document index
    $(document).ready(function () {


        jQuery(".detailsContent").hide();
        //toggle the componenet with class msg_body
        jQuery(".detailsHeading").click(function () {
            jQuery(this).next(".detailsContent").slideToggle(500);
            $('#AssetDocumentType').val('---');
            $("#docTitle").val('');
            $('#docDescription').val('');
        });

        jQuery(function ($) {
            $(document).on('nested:fieldRemoved', function (event) {
                $('[required]', event.field).removeAttr('required');
            });
        });

        $("input.formatNumber").each(function (index) {
            $(this).val(addCommas($(this).val(), true));
            $(this).on("input", null, null, function () {
                $(this).val(addCommas($(this).val(), true));
            });
        });
        $("input.formatMaint").each(function (index) {
            $(this).val(addCommas($(this).val(), true));
        });
        $("span.formatNumber").each(function (index) {
            $(this).text(addCommas($(this).text(), false));
        });



        //Setup Calendar UI
        $(function () {
            $(".datepicker").datepicker();
        });

        //CapRate
        var val = parseFloat($('#CapRate').val());
        if (val > 100) {
            $('#CapRate').val('');
        }
        else if ($('#CapRate').val() == '' || val == 0) {
            $('#CapRate').val('');
        }
        else if ($('#CapRate').val() == '100') {
        }
        else {
            $('#CapRate').val(parseFloat($('#CapRate').val()).toFixed(2))
        }

    });

    function show(id) {
        $('#' + id).show();
    }

    function hide(id) {
        $('#' + id).hide();
    }

    function checkText(field) {
        if (field.value.length < 1) {
            alert("Please provide a description for the Other item");
        }
    }

    function EditAsset(aId) {
        $.ajax({
            type: "POST",
            url: "/Admin/EditAsset/",
            data: JSON.stringify({ assetId: aId }),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            async: false,
            cache: false,
            success: function (response) {
                if (response["Status"] == "unlocked") {
                    window.location.href = '@Url.Action("UpdateAsset", "Admin")' + '/' + aId;
                }
                else if (response["Status"] == "locked") {
                    alert('The asset is currently being edited at the moment. Please try again someday.');
                }
                else {
                    // admin
                    if (confirm('The asset is currently locked. Would you like to edit the asset anyway?')) {
                        $.post('@Url.Action("UnlockAsset", "Admin")', { assetId: aId }, function () {
                            window.location.href = '/Admin/UpdateAsset/' + aId;
                        });
                    }
                }
            },
            error: function (jqXHR, exception) {
            },
            failure: function (response) {
            }
        });
    }

    function isAuctionCall() {

        var valisSubjectToAuction = $("input[name='IsTBDMarket']:checked").val()
        var valIsCallOffersDate = $("input[name='IsCallOffersDate']:checked").val()

        debugger;

        if (valisSubjectToAuction === "false" && valIsCallOffersDate === "false") {
            $(".divCallforOfferDate").hide();
            $("#CallforOfferDate").val('');
        }
        else {
            $(".divCallforOfferDate").show();
        }
    }


        function padCommas(element, addDollarSign) {
        // asumming element is span, not input
        if (element) {
            if (element.innerHTML.length != 0 && element.innerHTML != null) {
                var sign = (addDollarSign) ? '$' : '';
                num = getNumberFromNonInput(element);
                if (num == null) {
                    return;
                }

                str = num.toString();
                sig = str.split('.');

                tmp = '';
                len = sig[0].length;
                for (var i = len, j = 1; i > 0; i--, j++) {
                    var t = sig[0].substring(i, i - 1);
                    tmp = t + tmp;
                    if ((j % 3 == 0) && j != len) {
                        tmp = ',' + tmp;
                    }
                }

                if (sig.length > 1 && sig[1].length) {
                    tmp += '.' + sig[1].substr(0, 1);
                    var t = sig[1].substr(1, 1);
                    if (t) {
                        tmp += t;
                    } else {
                        tmp += '0';
                    }
                }
                str = sign + tmp;
                element.innerHTML = str;
            }
        }
    }

    function Viewportfolio(assetId, curretntSpan) {
        if ($("#" + assetId + "_portfolio").length) {
            $("#" + assetId + "_portfolio").remove();
        }
        else {
            $.ajax({
                url: "@Url.Action("GetRelatedPortfolio", "Admin")",
                data: { assetId: assetId },
                async: false,
                success: function (data) {
                    $(curretntSpan).closest('tr').after("<tr id='" + assetId + "_portfolio' >" + data + "</tr>");
                    //add comma
                    $('.padNumber').each(function (index) {
                        padCommas(this, false);
                    });
                }
            });
        }
    }

    function Viewportfolio_ChainOfTitle(assetId, curretntSpan) {
        if ($("#" + assetId + "_portfolio").length) {
            $("#" + assetId + "_portfolio").remove();
        }
        else {
            $.ajax({
                url: "@Url.Action("GetRelatedPortfolio", "Admin")",
                data: { assetId: assetId },
                success: function (data) {
                    $(curretntSpan).closest('tr').parent().closest('tr').after("<tr id='" + assetId + "_portfolio' >" + data + "</tr>");
                    //add comma
                    $('.padNumber').each(function (index) {
                        padCommas(this, false);
                    });
                }
            });
        }
    }

    function ViewRelatedAssets(PortfolioId, curretntSpan) {
        //alert(PortfolioId);
        /*show model popup
         bind data as per the assets list*/
        $.ajax({
            url: "@Url.Action("GetAssetsbyPortfolioId", "Admin")",
            data: { portfolioId: PortfolioId },
            success: function (data) {

                debugger;
                if ($("#divAssetViewchainOfTitle").html().length > 0) {
                    debugger;
                    var ID = $(curretntSpan).closest('tr').parent().closest('tr').attr("id");

                    if ($('#' + PortfolioId + '_AssetsinPortfolio').length) {
                        $('#' + PortfolioId + '_AssetsinPortfolio').remove();
                    }
                    else {
                        data = data.replace("<button", "<button style='display:none;'")
                        $('#' + ID).after("<tr id='" + PortfolioId + "_AssetsinPortfolio'> <td colspan='18'>" + data + "</td></tr>");
                    }

                } else {
                    $("#divAssetViewPortfolio").html(data);
                    $("#portfholioAssets").modal();
                }
                //add comma
                $('.padNumber').each(function (index) {
                    padCommas(this, false);
                });
            }
        });
    }
    function ViewChainOfTitle(assetId) {
        $.ajax({
            url: "@Url.Action("GetChainOfTitle", "Admin")",
            data: { assetId: assetId },
            success: function (data) {
                $("#divAssetViewchainOfTitle").html(data);
                $("#chainOfTitleAssets").modal();

                //add comma
                $('.padNumber').each(function (index) {
                    padCommas(this, false);
                });
            }
        });
    }

</script>
