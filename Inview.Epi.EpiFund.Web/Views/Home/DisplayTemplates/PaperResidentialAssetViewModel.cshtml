@model Inview.Epi.EpiFund.Domain.ViewModel.PaperResidentialAssetViewModel
@using MVCVideo

<div class="row">
    <div class="col-lg-6">
        <div class="input-group">
            @Html.LabelFor(s => s.BeneficiaryName, new { @class = "control-label" })
        </div>
    </div>
    <div class="col-lg-6">
        <div class="input-group">
            @Html.DisplayFor(s=>s.BeneficiaryName, new { @class = "control-label" })
        </div>
    </div>
</div>
<div class="row">
    <div class="col-lg-6">
        <div class="input-group">
            @Html.LabelFor(s => s.BeneficiaryFullName, new { @class = "control-label" })
        </div>
    </div>
    <div class="col-lg-6">
        <div class="input-group">
            @Html.DisplayFor(s=>s.BeneficiaryFullName, new { @class = "control-label" })
        </div>
    </div>
</div>
<div class="row">
    <div class="col-lg-6">
        <div class="input-group">
            @Html.LabelFor(s => s.BeneficiaryContactAddress, new { @class = "control-label" })
        </div>
    </div>
    <div class="col-lg-6">
        <div class="input-group">
            @Html.DisplayFor(s=>s.BeneficiaryContactAddress, new { @class = "control-label" })
        </div>
    </div>
</div>
<div class="row">
    <div class="col-lg-6">
        <div class="input-group">
            @Html.LabelFor(s => s.BeneficiaryCity, new { @class = "control-label" })
        </div>
    </div>
    <div class="col-lg-6">
        <div class="input-group">
            @Html.DisplayFor(s=>s.BeneficiaryCity, new { @class = "control-label" })
        </div>
    </div>
</div>
<div class="row">
    <div class="col-lg-6">
        <div class="input-group">
            @Html.LabelFor(s => s.BeneficiaryState, new { @class = "control-label" })
        </div>
    </div>
    <div class="col-lg-6">
        <div class="input-group">
            @Html.DisplayFor(s=>s.BeneficiaryState, new { @class = "control-label" })
        </div>
    </div>
</div>
<div class="row">
    <div class="col-lg-6">
        <div class="input-group">
            @Html.LabelFor(s => s.BeneficiaryZip, new { @class = "control-label" })
        </div>
    </div>
    <div class="col-lg-6">
        <div class="input-group">
            @Html.DisplayFor(s=>s.BeneficiaryZip, new { @class = "control-label" })
        </div>
    </div>
</div>
<div class="row">
    <div class="col-lg-6">
        <div class="input-group">
            @Html.LabelFor(s => s.BeneficiaryPhoneHome, new { @class = "control-label" })
        </div>
    </div>
    <div class="col-lg-6">
        <div class="input-group">
            @Html.DisplayFor(s=>s.BeneficiaryPhoneHome, new { @class = "control-label" })
        </div>
    </div>
</div>
<div class="row">
    <div class="col-lg-6">
        <div class="input-group">
            @Html.LabelFor(s => s.BeneficiaryPhoneCell, new { @class = "control-label" })
        </div>
    </div>
    <div class="col-lg-6">
        <div class="input-group">
            @Html.DisplayFor(s=>s.BeneficiaryPhoneCell, new { @class = "control-label" })
        </div>
    </div>
</div>
<div class="row">
    <div class="col-lg-6">
        <div class="input-group">
            @Html.LabelFor(s => s.BeneficiaryPhoneWork, new { @class = "control-label" })
        </div>
    </div>
    <div class="col-lg-6">
        <div class="input-group">
            @Html.DisplayFor(s=>s.BeneficiaryPhoneWork, new { @class = "control-label" })
        </div>
    </div>
</div>
<div class="row">
    <div class="col-lg-6">
        <div class="input-group">
            @Html.LabelFor(s => s.BeneficiaryFax, new { @class = "control-label" })
        </div>
    </div>
    <div class="col-lg-6">
        <div class="input-group">
            @Html.DisplayFor(s=>s.BeneficiaryFax, new { @class = "control-label" })
        </div>
    </div>
</div>
<div class="row">
    <div class="col-lg-6">
        <div class="input-group">
            @Html.LabelFor(s => s.BeneficiaryEmail, new { @class = "control-label" })
        </div>
    </div>
    <div class="col-lg-6">
        <div class="input-group">
            @Html.DisplayFor(s=>s.BeneficiaryEmail, new { @class = "control-label" })
        </div>
    </div>
</div>
<div class="row">
    <div class="col-lg-6">
        <div class="input-group">
            @Html.LabelFor(s => s.BeneficiaryAccountNumber, new { @class = "control-label" })
        </div>
    </div>
    <div class="col-lg-6">
        <div class="input-group">
            @Html.DisplayFor(s=>s.BeneficiaryAccountNumber, new { @class = "control-label" })
        </div>
    </div>
</div>

<hr />

<div class="row">
    <div class="col-lg-6">
        <div class="input-group">
            @Html.LabelFor(s => s.NotePayerName, new { @class = "control-label" })
        </div>
    </div>
    <div class="col-lg-6">
        <div class="input-group">
            @Html.DisplayFor(s=>s.NotePayerName, new { @class = "control-label" })
        </div>
    </div>
</div>
<div class="row">
    <div class="col-lg-6">
        <div class="input-group">
            @Html.LabelFor(s => s.NotePayerFullName, new { @class = "control-label" })
        </div>
    </div>
    <div class="col-lg-6">
        <div class="input-group">
            @Html.DisplayFor(s=>s.NotePayerFullName, new { @class = "control-label" })
        </div>
    </div>
</div>
<div class="row">
    <div class="col-lg-6">
        <div class="input-group">
            @Html.LabelFor(s => s.NotePayerContactAddress, new { @class = "control-label" })
        </div>
    </div>
    <div class="col-lg-6">
        <div class="input-group">
            @Html.DisplayFor(s=>s.NotePayerContactAddress, new { @class = "control-label" })
        </div>
    </div>
</div>
<div class="row">
    <div class="col-lg-6">
        <div class="input-group">
            @Html.LabelFor(s => s.NotePayerCity, new { @class = "control-label" })
        </div>
    </div>
    <div class="col-lg-6">
        <div class="input-group">
            @Html.DisplayFor(s=>s.NotePayerCity, new { @class = "control-label" })
        </div>
    </div>
</div>
<div class="row">
    <div class="col-lg-6">
        <div class="input-group">
            @Html.LabelFor(s => s.NotePayerState, new { @class = "control-label" })
        </div>
    </div>
    <div class="col-lg-6">
        <div class="input-group">
            @Html.DisplayFor(s => s.NotePayerState, new { @class = "control-label" })
        </div>
    </div>
</div>
<div class="row">
    <div class="col-lg-6">
        <div class="input-group">
            @Html.LabelFor(s => s.NotePayerZip, new { @class = "control-label" })
        </div>
    </div>
    <div class="col-lg-6">
        <div class="input-group">
            @Html.DisplayFor(s=>s.NotePayerZip, new { @class = "control-label" })
        </div>
    </div>
</div>
<div class="row">
    <div class="col-lg-6">
        <div class="input-group">
            @Html.LabelFor(s => s.NotePayerPhoneHome, new { @class = "control-label" })
        </div>
    </div>
    <div class="col-lg-6">
        <div class="input-group">
            @Html.DisplayFor(s=>s.NotePayerPhoneHome, new { @class = "control-label" })
        </div>
    </div>
</div>
<div class="row">
    <div class="col-lg-6">
        <div class="input-group">
            @Html.LabelFor(s => s.NotePayerPhoneCell, new { @class = "control-label" })
        </div>
    </div>
    <div class="col-lg-6">
        <div class="input-group">
            @Html.DisplayFor(s=>s.NotePayerPhoneCell, new { @class = "control-label" })
        </div>
    </div>
</div>
<div class="row">
    <div class="col-lg-6">
        <div class="input-group">
            @Html.LabelFor(s => s.NotePayerPhoneWork, new { @class = "control-label" })
        </div>
    </div>
    <div class="col-lg-6">
        <div class="input-group">
            @Html.DisplayFor(s=>s.NotePayerPhoneWork, new { @class = "control-label" })
        </div>
    </div>
</div>
<div class="row">
    <div class="col-lg-6">
        <div class="input-group">
            @Html.LabelFor(s => s.NotePayerFax, new { @class = "control-label" })
        </div>
    </div>
    <div class="col-lg-6">
        <div class="input-group">
            @Html.DisplayFor(s=>s.NotePayerFax, new { @class = "control-label" })
        </div>
    </div>
</div>
<div class="row">
    <div class="col-lg-6">
        <div class="input-group">
            @Html.LabelFor(s => s.NotePayerEmail, new { @class = "control-label" })
        </div>
    </div>
    <div class="col-lg-6">
        <div class="input-group">
            @Html.DisplayFor(s=>s.NotePayerEmail, new { @class = "control-label" })
        </div>
    </div>
</div>
<div class="row">
    <div class="col-lg-6">
        <div class="input-group">
            @Html.LabelFor(s => s.NotePayerSSNOrTIN, new { @class = "control-label" })
        </div>
    </div>
    <div class="col-lg-6">
        <div class="input-group">
            @Html.DisplayFor(s=>s.NotePayerSSNOrTIN, new { @class = "control-label" })
        </div>
    </div>
</div>
<div class="row">
    <div class="col-lg-6">
        <div class="input-group">
            @Html.LabelFor(s => s.NotePayerFICO, new { @class = "control-label" })
        </div>
    </div>
    <div class="col-lg-6">
        <div class="input-group">
            @Html.DisplayFor(s=>s.NotePayerFICO, new { @class = "control-label" })
        </div>
    </div>
</div>

<hr />

<div class="row">
    <div class="col-lg-6">
        <div class="input-group">
            @Html.LabelFor(s => s.SecuringPropertyAddress, new { @class = "control-label" })
        </div>
    </div>
    <div class="col-lg-6">
        <div class="input-group">
            @Html.DisplayFor(s=>s.SecuringPropertyAddress, new { @class = "control-label" })
        </div>
    </div>
</div>
<div class="row">
    <div class="col-lg-6">
        <div class="input-group">
            @Html.LabelFor(s => s.SecuringPropertyCity, new { @class = "control-label" })
        </div>
    </div>
    <div class="col-lg-6">
        <div class="input-group">
            @Html.DisplayFor(s=>s.SecuringPropertyCity, new { @class = "control-label" })
        </div>
    </div>
</div>
<div class="row">
    <div class="col-lg-6">
        <div class="input-group">
            @Html.LabelFor(s => s.SecuringPropertyState, new { @class = "control-label" })
        </div>
    </div>
    <div class="col-lg-6">
        <div class="input-group">
            @Html.DisplayFor(s=>s.SecuringPropertyState, new { @class = "control-label" })
        </div>
    </div>
</div>
<div class="row">
    <div class="col-lg-6">
        <div class="input-group">
            @Html.LabelFor(s => s.SecuringPropertyZip, new { @class = "control-label" })
        </div>
    </div>
    <div class="col-lg-6">
        <div class="input-group">
            @Html.DisplayFor(s=>s.SecuringPropertyZip, new { @class = "control-label" })
        </div>
    </div>
</div>
<div class="row">
    <div class="col-lg-6">
        <div class="input-group">
            @Html.LabelFor(s => s.TypeOfProperty, new { @class = "control-label" })
        </div>
    </div>
    <div class="col-lg-6">
        <div class="input-group">
            @Html.DisplayFor(s=>s.TypeOfProperty, new { @class = "control-label" })
        </div>
    </div>
</div>
<div class="row">
    <div class="col-lg-6">
        <div class="input-group">
            @Html.LabelFor(s => s.Bedrooms, new { @class = "control-label" })
        </div>
    </div>
    <div class="col-lg-6">
        <div class="input-group">
            @Html.DisplayFor(s=>s.Bedrooms, new { @class = "control-label" })
        </div>
    </div>
</div>
<div class="row">
    <div class="col-lg-6">
        <div class="input-group">
            @Html.LabelFor(s => s.Bathrooms, new { @class = "control-label" })
        </div>
    </div>
    <div class="col-lg-6">
        <div class="input-group">
            @Html.DisplayFor(s=>s.Bathrooms, new { @class = "control-label" })
        </div>
    </div>
</div>
<div class="row">
    <div class="col-lg-6">
        <div class="input-group">
            @Html.LabelFor(s => s.Year, new { @class = "control-label" })
        </div>
    </div>
    <div class="col-lg-6">
        <div class="input-group">
            @Html.DisplayFor(s=>s.Year, new { @class = "control-label" })
        </div>
    </div>
</div>
<div class="row">
    <div class="col-lg-6">
        <div class="input-group">
            @Html.LabelFor(s => s.TypeOfContruction, new { @class = "control-label" })
        </div>
    </div>
    <div class="col-lg-6">
        <div class="input-group">
            @Html.DisplayFor(s=>s.TypeOfContruction, new { @class = "control-label" })
        </div>
    </div>
</div>
<div class="row">
    <div class="col-lg-6">
        <div class="input-group">
            @Html.LabelFor(s => s.LotSize, new { @class = "control-label" })
        </div>
    </div>
    <div class="col-lg-6">
        <div class="input-group">
            @Html.DisplayFor(s=>s.LotSize, new { @class = "control-label" })
        </div>
    </div>
</div>
<div class="row">
    <div class="col-lg-6">
        <div class="input-group">
            @Html.LabelFor(s => s.Parking, new { @class = "control-label" })
        </div>
    </div>
    <div class="col-lg-6">
        <div class="input-group">
            @Html.DisplayFor(s=>s.LotSize, new { @class = "control-label" })
        </div>
    </div>
</div>
<div class="row">
    <div class="col-lg-6">
        <div class="input-group">
            @Html.LabelFor(s => s.WaterService, new { @class = "control-label" })
        </div>
    </div>
    <div class="col-lg-6">
        <div class="input-group">
            @Html.DisplayFor(s=>s.WaterService, new { @class = "control-label" })
        </div>
    </div>
</div>
<div class="row">
    <div class="col-lg-6">
        <div class="input-group">
            @Html.LabelFor(s => s.SewerService, new { @class = "control-label" })
        </div>
    </div>
    <div class="col-lg-6">
        <div class="input-group">
            @Html.DisplayFor(s=>s.SewerService, new { @class = "control-label" })
        </div>
    </div>
</div>
<div class="row">
    <div class="col-lg-6">
        <div class="input-group">
            @Html.LabelFor(s => s.PowerService, new { @class = "control-label" })
        </div>
    </div>
    <div class="col-lg-6">
        <div class="input-group">
            @Html.DisplayFor(s=>s.PowerService, new { @class = "control-label" })
        </div>
    </div>
</div>
<div class="row">
    <div class="col-lg-6">
        <div class="input-group">
            @Html.LabelFor(s => s.PropertyAccess, new { @class = "control-label" })
        </div>
    </div>
    <div class="col-lg-6">
        <div class="input-group">
            @Html.DisplayFor(s=>s.PropertyAccess, new { @class = "control-label" })
        </div>
    </div>
</div>
<div class="row">
    <div class="col-lg-6">
        <div class="input-group">
            @Html.LabelFor(s => s.NoteOriginationDate, new { @class = "control-label" })
        </div>
    </div>
    <div class="col-lg-6">
        <div class="input-group">
            @Html.DisplayFor(s=>s.NoteOriginationDate, new { @class = "control-label" })
        </div>
    </div>
</div>
<div class="row">
    <div class="col-lg-6">
        <div class="input-group">
            @Html.LabelFor(s => s.OriginalNotePrincipal, new { @class = "control-label" })
        </div>
    </div>
    <div class="col-lg-6">
        <div class="input-group">
            @Html.DisplayFor(s=>s.OriginalNotePrincipal, new { @class = "control-label" })
        </div>
    </div>
</div>
<div class="row">
    <div class="col-lg-6">
        <div class="input-group">
            @Html.LabelFor(s => s.BPOOfProperty, new { @class = "control-label" })
        </div>
    </div>
    <div class="col-lg-6">
        <div class="input-group">
            @Html.DisplayFor(s=>s.BPOOfProperty, new { @class = "control-label" })
        </div>
    </div>
</div>
<div class="row">
    <div class="col-lg-6">
        <div class="input-group">
            @Html.LabelFor(s => s.CurrentNotePrincipal, new { @class = "control-label" })
        </div>
    </div>
    <div class="col-lg-6">
        <div class="input-group">
            @Html.DisplayFor(s=>s.CurrentNotePrincipal, new { @class = "control-label" })
        </div>
    </div>
</div>
<div class="row">
    <div class="col-lg-6">
        <div class="input-group">
            @Html.LabelFor(s => s.HasCopyOfAppraisal, new { @class = "control-label" })
        </div>
    </div>
    <div class="col-lg-6">
        <div class="input-group">
            @Html.DisplayFor(s=>s.HasCopyOfAppraisal, new { @class = "control-label" })
        </div>
    </div>
</div>
<div class="row">
    <div class="col-lg-6">
        <div class="input-group">
            @Html.LabelFor(s => s.MethodOfAppraisal, new { @class = "control-label" })
        </div>
    </div>
    <div class="col-lg-6">
        <div class="input-group">
            @Html.DisplayFor(s=>s.MethodOfAppraisal, new { @class = "control-label" })
        </div>
    </div>
</div>
<div class="row">
    <div class="col-lg-6">
        <div class="input-group">
            @Html.LabelFor(s => s.TypeOfNote, new { @class = "control-label" })
        </div>
    </div>
    <div class="col-lg-6">
        <div class="input-group">
            @Html.DisplayFor(s=>s.TypeOfNote, new { @class = "control-label" })
        </div>
    </div>
</div>
<div class="row">
    <div class="col-lg-6">
        <div class="input-group">
            @Html.LabelFor(s => s.NoteInterestRate, new { @class = "control-label" })
        </div>
    </div>
    <div class="col-lg-6">
        <div class="input-group">
            @Html.DisplayFor(s=>s.NoteInterestRate, new { @class = "control-label" })
        </div>
    </div>
</div>
<div class="row">
    <div class="col-lg-6">
        <div class="input-group">
            @Html.LabelFor(s => s.PaymentAmount, new { @class = "control-label" })
        </div>
    </div>
    <div class="col-lg-6">
        <div class="input-group">
            @Html.DisplayFor(s=>s.PaymentAmount, new { @class = "control-label" })
        </div>
    </div>
</div>
<div class="row">
    <div class="col-lg-6">
        <div class="input-group">
            @Html.LabelFor(s => s.PaymentFrequency, new { @class = "control-label" })
        </div>
    </div>
    <div class="col-lg-6">
        <div class="input-group">
            @Html.DisplayFor(s=>s.PaymentFrequency, new { @class = "control-label" })
        </div>
    </div>
</div>
<div class="row">
    <div class="col-lg-6">
        <div class="input-group">
            @Html.LabelFor(s => s.BalloonDateOfNote, new { @class = "control-label" })
        </div>
    </div>
    <div class="col-lg-6">
        <div class="input-group">
            @Html.DisplayFor(s=>s.BalloonDateOfNote, new { @class = "control-label" })
        </div>
    </div>
</div>
<div class="row">
    <div class="col-lg-6">
        <div class="input-group">
            @Html.LabelFor(s => s.BalloonDueAmount, new { @class = "control-label" })
        </div>
    </div>
    <div class="col-lg-6">
        <div class="input-group">
            @Html.DisplayFor(s=>s.BalloonDueAmount, new { @class = "control-label" })
        </div>
    </div>
</div>
<div class="row">
    <div class="col-lg-6">
        <div class="input-group">
            @Html.LabelFor(s => s.TypeOfMTGInstrument, new { @class = "control-label" })
        </div>
    </div>
    <div class="col-lg-6">
        <div class="input-group">
            @Html.DisplayFor(s=>s.TypeOfMTGInstrument, new { @class = "control-label" })
        </div>
    </div>
</div>
<div class="row">
    <div class="col-lg-6">
        <div class="input-group">
            @Html.LabelFor(s => s.AmortType, new { @class = "control-label" })
        </div>
    </div>
    <div class="col-lg-6">
        <div class="input-group">
            @Html.DisplayFor(s=>s.AmortType, new { @class = "control-label" })
        </div>
    </div>
</div>
<div class="row">
    <div class="col-lg-6">
        <div class="input-group">
            @Html.LabelFor(s => s.PaymentsMadeOnNote, new { @class = "control-label" })
        </div>
    </div>
    <div class="col-lg-6">
        <div class="input-group">
            @Html.DisplayFor(s=>s.PaymentsMadeOnNote, new { @class = "control-label" })
        </div>
    </div>
</div>
<div class="row">
    <div class="col-lg-6">
        <div class="input-group">
            @Html.LabelFor(s => s.PaymentsRemainingOnNote, new { @class = "control-label" })
        </div>
    </div>
    <div class="col-lg-6">
        <div class="input-group">
            @Html.DisplayFor(s=>s.PaymentsRemainingOnNote, new { @class = "control-label" })
        </div>
    </div>
</div>
<div class="row">
    <div class="col-lg-6">
        <div class="input-group">
            @Html.LabelFor(s => s.IsNoteCurrent, new { @class = "control-label" })
        </div>
    </div>
    <div class="col-lg-6">
        <div class="input-group">
            @if (Model.IsNoteCurrent != null)
            {
                @(Model.IsNoteCurrent.GetValueOrDefault(false) ? "Yes" : "No")
            }
        </div>
    </div>
</div>
<div class="row">
    <div class="col-lg-6">
        <div class="input-group">
            @Html.LabelFor(s => s.LastPaymentRecievedOnNote, new { @class = "control-label" })
        </div>
    </div>
    <div class="col-lg-6">
        <div class="input-group">
            @Html.DisplayFor(s=>s.LastPaymentRecievedOnNote, new { @class = "control-label" })
        </div>
    </div>
</div>
<div class="row">
    <div class="col-lg-6">
        <div class="input-group">
            @Html.LabelFor(s => s.NextPaymentOnNote, new { @class = "control-label" })
        </div>
    </div>
    <div class="col-lg-6">
        <div class="input-group">
            @Html.DisplayFor(s=>s.NextPaymentOnNote, new { @class = "control-label" })
        </div>
    </div>
</div>
<div class="row">
    <div class="col-lg-6">
        <div class="input-group">
            @Html.LabelFor(s => s.SecuringPropertyAppraisal, new { @class = "control-label" })
        </div>
    </div>
    <div class="col-lg-6">
        <div class="input-group">
            @Html.DisplayFor(s=>s.SecuringPropertyAppraisal, new { @class = "control-label" })
        </div>
    </div>
</div>
<div class="row">
    <div class="col-lg-6">
        <div class="input-group">
            @Html.LabelFor(s => s.PaymentHistory, new { @class = "control-label" })
        </div>
    </div>
    <div class="col-lg-6">
        <div class="input-group">
            @Html.DisplayFor(s=>s.PaymentHistory, new { @class = "control-label" })
        </div>
    </div>
</div>
<div class="row">
    <div class="col-lg-6">
        <div class="input-group">
            @Html.LabelFor(s => s.SellerCarryNoteSalesDate, new { @class = "control-label" })
        </div>
    </div>
    <div class="col-lg-6">
        <div class="input-group">
            @Html.DisplayFor(s=>s.SellerCarryNoteSalesDate, new { @class = "control-label" })
        </div>
    </div>
</div>
<div class="row">
    <div class="col-lg-6">
        <div class="input-group">
            @Html.LabelFor(s => s.SellerCarryNotePrice, new { @class = "control-label" })
        </div>
    </div>
    <div class="col-lg-6">
        <div class="input-group">
            @Html.DisplayFor(s=>s.SellerCarryNotePrice, new { @class = "control-label" })
        </div>
    </div>
</div>
<div class="row">
    <div class="col-lg-6">
        <div class="input-group">
            @Html.LabelFor(s => s.SellerCarryNoteCashDown, new { @class = "control-label" })
        </div>
    </div>
    <div class="col-lg-6">
        <div class="input-group">
            @Html.DisplayFor(s=>s.SellerCarryNoteCashDown, new { @class = "control-label" })
        </div>
    </div>
</div>

<div class="row">
    <div class="col-lg-6">
        <div class="input-group">
            @Html.LabelFor(s => s.OriginalPrincipalBalanceWRAP, new { @class = "control-label" })
        </div>
    </div>
    <div class="col-lg-6">
        <div class="input-group">
            @Html.DisplayFor(s=>s.OriginalPrincipalBalanceWRAP, new { @class = "control-label" })
        </div>
    </div>
</div>

<div class="row">
    <div class="col-lg-6">
        <div class="input-group">
            @Html.LabelFor(s => s.TotalMonthlyPaymentWRAP, new { @class = "control-label" })
        </div>
    </div>
    <div class="col-lg-6">
        <div class="input-group">
            @Html.DisplayFor(s=>s.TotalMonthlyPaymentWRAP, new { @class = "control-label" })
        </div>
    </div>
</div>
<div class="row">
    <div class="col-lg-6">
        <div class="input-group">
            @Html.LabelFor(s => s.FirstmortgageBalanceWRAP, new { @class = "control-label" })
        </div>
    </div>
    <div class="col-lg-6">
        <div class="input-group">
            @Html.DisplayFor(s=>s.FirstmortgageBalanceWRAP, new { @class = "control-label" })
        </div>
    </div>
</div>
<div class="row">
    <div class="col-lg-6">
        <div class="input-group">
            @Html.LabelFor(s => s.FirstInterestRateWRAP, new { @class = "control-label" })
        </div>
    </div>
    <div class="col-lg-6">
        <div class="input-group">
            @Html.DisplayFor(s=>s.FirstInterestRateWRAP, new { @class = "control-label" })
        </div>
    </div>
</div>
<div class="row">
    <div class="col-lg-6">
        <div class="input-group">
            @Html.LabelFor(s => s.FirstMortgagePaymentWRAP, new { @class = "control-label" })
        </div>
    </div>
    <div class="col-lg-6">
        <div class="input-group">
            @Html.DisplayFor(s=>s.FirstMortgagePaymentWRAP, new { @class = "control-label" })
        </div>
    </div>
</div>
<div class="row">
    <div class="col-lg-6">
        <div class="input-group">
            @Html.LabelFor(s => s.SecondMortgageBalanceWRAP, new { @class = "control-label" })
        </div>
    </div>
    <div class="col-lg-6">
        <div class="input-group">
            @Html.DisplayFor(s=>s.SecondMortgageBalanceWRAP, new { @class = "control-label" })
        </div>
    </div>
</div>
<div class="row">
    <div class="col-lg-6">
        <div class="input-group">
            @Html.LabelFor(s => s.SecondInterestRateWRAP, new { @class = "control-label" })
        </div>
    </div>
    <div class="col-lg-6">
        <div class="input-group">
            @Html.DisplayFor(s=>s.SecondInterestRateWRAP, new { @class = "control-label" })
        </div>
    </div>
</div>
<div class="row">
    <div class="col-lg-6">
        <div class="input-group">
            @Html.LabelFor(s => s.SecondMortgagePaymentWRAP, new { @class = "control-label" })
        </div>
    </div>
    <div class="col-lg-6">
        <div class="input-group">
            @Html.DisplayFor(s=>s.SecondMortgagePaymentWRAP, new { @class = "control-label" })
        </div>
    </div>
</div>
<div class="row">
    <div class="col-lg-6">
        <div class="input-group">
            @Html.LabelFor(s => s.NoteServicedByAgent, new { @class = "control-label" })
        </div>
    </div>
    <div class="col-lg-6">
        <div class="input-group">
            @if (Model.NoteServicedByAgent != null)
            {
                @(Model.NoteServicedByAgent.GetValueOrDefault(false) ? "Yes" : "No")
            }
        </div>
    </div>
</div>
<div class="row">
    <div class="col-lg-6">
        <div class="input-group">
            @Html.LabelFor(s => s.AgentName, new { @class = "control-label" })
        </div>
    </div>
    <div class="col-lg-6">
        <div class="input-group">
            @Html.DisplayFor(s=>s.AgentName, new { @class = "control-label" })
        </div>
    </div>
</div>
<div class="row">
    <div class="col-lg-6">
        <div class="input-group">
            @Html.LabelFor(s => s.AgentPhone, new { @class = "control-label" })
        </div>
    </div>
    <div class="col-lg-6">
        <div class="input-group">
            @Html.DisplayFor(s=>s.AgentPhone, new { @class = "control-label" })
        </div>
    </div>
</div>
<div class="row">
    <div class="col-lg-6">
        <div class="input-group">
            @Html.LabelFor(s => s.AgentEmail, new { @class = "control-label" })
        </div>
    </div>
    <div class="col-lg-6">
        <div class="input-group">
            @Html.DisplayFor(s=>s.AgentEmail, new { @class = "control-label" })
        </div>
    </div>
</div>
<div class="row">
    <div class="col-lg-6">
        <div class="input-group">
            @Html.LabelFor(s => s.AgentAccountNumber, new { @class = "control-label" })
        </div>
    </div>
    <div class="col-lg-6">
        <div class="input-group">
            @Html.DisplayFor(s=>s.AgentAccountNumber, new { @class = "control-label" })
        </div>
    </div>
</div>
<div class="row">
    <div class="col-lg-6">
        <div class="input-group">
            @Html.LabelFor(s => s.AgentContactPerson, new { @class = "control-label" })
        </div>
    </div>
    <div class="col-lg-6">
        <div class="input-group">
            @Html.DisplayFor(s=>s.AgentContactPerson, new { @class = "control-label" })
        </div>
    </div>
</div>
<div class="row">
    <div class="col-lg-6">
        <div class="input-group">
            @Html.LabelFor(s => s.AuthorizeForwardPaymentHistory, new { @class = "control-label" })
        </div>
    </div>
    <div class="col-lg-6">
        <div class="input-group">
            @if (Model.AuthorizeForwardPaymentHistory != null)
            {
                @(Model.AuthorizeForwardPaymentHistory.GetValueOrDefault(false) ? "Yes" : "No")
            }
        </div>
    </div>
</div>

<div class="row">
    <div class="col-lg-6">
        <div class="input-group">
            @Html.LabelFor(s => s.AgentAddress, new { @class = "control-label" })
        </div>
    </div>
    <div class="col-lg-6">
        <div class="input-group">
            @Html.DisplayFor(s=>s.AgentAddress, new { @class = "control-label" })
        </div>
    </div>
</div>
<div class="row">
    <div class="col-lg-6">
        <div class="input-group">
            @Html.LabelFor(s => s.AgentCity, new { @class = "control-label" })
        </div>
    </div>
    <div class="col-lg-6">
        <div class="input-group">
            @Html.DisplayFor(s=>s.AgentCity, new { @class = "control-label" })
        </div>
    </div>
</div>
<div class="row">
    <div class="col-lg-6">
        <div class="input-group">
            @Html.LabelFor(s => s.AgentState, new { @class = "control-label" })
        </div>
    </div>
    <div class="col-lg-6">
        <div class="input-group">
            @Html.DisplayFor(s=>s.AgentState, new { @class = "control-label" })
        </div>
    </div>
</div>
<div class="row">
    <div class="col-lg-6">
        <div class="input-group">
            @Html.LabelFor(s => s.AgentZip, new { @class = "control-label" })
        </div>
    </div>
    <div class="col-lg-6">
        <div class="input-group">
            @Html.DisplayFor(s=>s.AgentZip, new { @class = "control-label" })
        </div>
    </div>
</div>

<hr />

<div class="row">
    <div class="col-lg-6">
        <div class="input-group">
            @Html.LabelFor(s => s.HasPicturesOfProperty, new { @class = "control-label" })
        </div>
    </div>
    <div class="col-lg-6">
        <div class="input-group">
            @if (Model.HasPicturesOfProperty != null)
            {
                @(Model.HasPicturesOfProperty.GetValueOrDefault(false) ? "Yes" : "No")
            }
        </div>
    </div>
</div>
<div class="row">
    <div class="col-lg-6">
        <div class="input-group">
            @Html.LabelFor(s => s.GeneralComments, new { @class = "control-label" })
        </div>
    </div>
    <div class="col-lg-6">
        <div class="input-group">
            @Html.DisplayFor(s=>s.GeneralComments, new { @class = "control-label" })
        </div>
    </div>
</div>
<div class="row">
    <div class="col-lg-6">
        <div class="input-group">
            @Html.LabelFor(s => s.SellingReason, new { @class = "control-label" })
        </div>
    </div>
    <div class="col-lg-6">
        <div class="input-group">
            @Html.DisplayFor(s=>s.SellingReason, new { @class = "control-label" })
        </div>
    </div>
</div>
<div class="row">
    <div class="col-lg-6">
        <div class="input-group">
            @Html.LabelFor(s => s.HasTitleInsurance, new { @class = "control-label" })
        </div>
    </div>
    <div class="col-lg-6">
        <div class="input-group">
            @if (Model.HasTitleInsurance != null)
            {
                @(Model.HasTitleInsurance.GetValueOrDefault(false) ? "Yes" : "No")
            }
        </div>
    </div>
</div>
<div class="row">
    <div class="col-lg-6">
        <div class="input-group">
            @Html.LabelFor(s => s.HomeownerInsurance, new { @class = "control-label" })
        </div>
    </div>
    <div class="col-lg-6">
        <div class="input-group">
            @Html.DisplayFor(s=>s.HomeownerInsurance, new { @class = "control-label" })
        </div>
    </div>
</div>
<div class="row">
    <div class="col-lg-6">
        <div class="input-group">
            @Html.LabelFor(s => s.OwnerOccupied, new { @class = "control-label" })
        </div>
    </div>
    <div class="col-lg-6">
        <div class="input-group">
            @if (Model.OwnerOccupied != null)
            {
                @(Model.OwnerOccupied.GetValueOrDefault(false) ? "Yes" : "No")
            }
        </div>
    </div>
</div>
<div class="row">
    <div class="col-lg-6">
        <div class="input-group">
            @Html.LabelFor(s => s.IsPropertyRental, new { @class = "control-label" })
        </div>
    </div>
    <div class="col-lg-6">
        <div class="input-group">
            @if (Model.IsPropertyRental != null)
            {
                @(Model.IsPropertyRental.GetValueOrDefault(false) ? "Yes" : "No")
            }
        </div>
    </div>
</div>
<div class="row">
    <div class="col-lg-6">
        <div class="input-group">
            @Html.LabelFor(s => s.MonthlyRentRate, new { @class = "control-label" })
        </div>
    </div>
    <div class="col-lg-6">
        <div class="input-group">
            @Html.DisplayFor(s=>s.MonthlyRentRate, new { @class = "control-label" })
        </div>
    </div>
</div>
<div class="row">
    <div class="col-lg-6">
        <div class="input-group">
            @Html.LabelFor(s => s.HasEnvironmentalIssues, new { @class = "control-label" })
        </div>
    </div>
    <div class="col-lg-6">
        <div class="input-group">
            @if (Model.HasEnvironmentalIssues != null)
            {
                @(Model.HasEnvironmentalIssues.GetValueOrDefault(false) ? "Yes" : "No")
            }
        </div>
    </div>
</div>
<div class="row">
    <div class="col-lg-6">
        <div class="input-group">
            @Html.LabelFor(s => s.EnvironmentalIssues, new { @class = "control-label" })
        </div>
    </div>
    <div class="col-lg-6">
        <div class="input-group">
            @Html.DisplayFor(s=>s.EnvironmentalIssues, new { @class = "control-label" })
        </div>
    </div>
</div>
<div class="row">
    <div class="col-lg-6">
        <div class="input-group">
            @Html.LabelFor(s => s.AskingPrice, new { @class = "control-label" })
        </div>
    </div>
    <div class="col-lg-6">
        <div class="input-group">
            @Html.DisplayFor(s=>s.AskingPrice, new { @class = "control-label" })
        </div>
    </div>
</div>

<div id="imgsPreviewer" data-imgcount="@Model.Images.Count">
        @for (int item = 0; item < Model.Images.Count; item++)
        {       
            <div class="imgPreviewDiv" style="display: inline-block;">
                <div class="imgPreviewImg" style="background-image: url('@Url.Action("GetImageSource", "Admin", new { fileName = Model.Images[item].FileName, assetId = Model.GuidId, contentType = Model.Images[item].ContentType })');"></div>
                <br />
                @Html.HiddenFor(s => Model.Images[item].TempAssetImageId)
                @Html.HiddenFor(s => Model.Images[item].ContentType)
                @Html.HiddenFor(s => Model.Images[item].FileName, new { @class = "imgName" })
                @Html.HiddenFor(s => Model.Images[item].GuidId)
            </div>
        }
    </div>
    <br />
    <hr />
    <div class="tab-pane" id="documents">
        <h3>Documents</h3>
        <div id="docManager" data-doccount="@Model.Documents.Count">
            <div class="document-item">
                <span style="width: 40%; float: left;">Current Rent Roll:</span>
                @Html.RadioButtonFor(s => s.availablecurrentRentRoll, "false", new { onchange = "hide('currentRentRoll')" })
                Not Available without LOI
                @Html.RadioButtonFor(s => s.availablecurrentRentRoll, "true", new { onchange = "show('currentRentRoll')" })
                Available
                @if (Model.availablecurrentRentRoll)
                {
                    <a onclick="show('currentRentRoll')" style="margin-left: 15px;">View Document(s)</a>
                }
                <div id="currentRentRoll" style="display: none;" class="document-item-expanded">
                    @for (int item = 0; item < Model.Documents.Count; item++)
                    {
                        if (Model.Documents[item].Type == (int)Inview.Epi.EpiFund.Domain.Enum.AssetDocumentType.CurrentRentRoll)
                        {
                        <div class="docPreviewDiv">
                            <a target='_blank' href="@Url.Action("DownloadDocument", "Admin", new { fileName = Model.Documents[item].FileName, assetId = Model.GuidId, contentType = Model.Documents[item].ContentType, title = Model.Documents[item].Title })">Click here to download file</a>
                            <br />
                            <div class="row">
                                <div class="col-lg-12">
                                    <label style="font-weight: bold;">Title</label>
                                </div>
                                <div class="col-lg-12">
                                    @Html.TextBoxFor(s => Model.Documents[item].Title)
                                </div>
                                <div class="col-lg-12">
                                    <label style="font-weight: bold;">Description</label>
                                </div>
                                <div class="col-lg-12">
                                    @Html.TextAreaFor(s => Model.Documents[item].Description, 4, 10, null)
                                </div>
                            </div>
                            @Html.HiddenFor(s => Model.Documents[item].TempAssetDocumentId)
                            @Html.HiddenFor(s => Model.Documents[item].Size)
                            @Html.HiddenFor(s => Model.Documents[item].ContentType)
                            @Html.HiddenFor(s => Model.Documents[item].GuidId)
                            @Html.HiddenFor(s => Model.Documents[item].Type)
                            @Html.HiddenFor(s => Model.Documents[item].FileName, new { @class = "docName" })
                        </div>
                        }
                    }
                </div>
            </div>
            <div class="document-item">
                <span style="width: 40%; float: left;">Current Operating Report:</span>
                @Html.RadioButtonFor(s => s.availablecurrentOperatingReport, "false", new { onchange = "hide('currentOperatingReport')" })
                Not Available without LOI
                @Html.RadioButtonFor(s => s.availablecurrentOperatingReport, "true", new { onchange = "show('currentOperatingReport')" })
                Available
                @if (Model.availablecurrentOperatingReport)
                {
                    <a onclick="show('currentOperatingReport')" style="margin-left: 15px;">View Document(s)</a>
                }
                <div id="currentOperatingReport" style="display: none;" class="document-item-expanded">
                    @for (int item = 0; item < Model.Documents.Count; item++)
                    {
                        if (Model.Documents[item].Type == (int)Inview.Epi.EpiFund.Domain.Enum.AssetDocumentType.CurrentOperatingReport)
                        {
                        <div class="docPreviewDiv">
                            <a target='_blank' href="@Url.Action("DownloadDocument", "Admin", new { fileName = Model.Documents[item].FileName, assetId = Model.GuidId, contentType = Model.Documents[item].ContentType, title = Model.Documents[item].Title })">Click here to download file</a>
                            <br />
                            <div class="row">
                                <div class="col-lg-12">
                                    <label style="font-weight: bold;">Title</label>
                                </div>
                                <div class="col-lg-12">
                                    @Html.TextBoxFor(s => Model.Documents[item].Title)
                                </div>
                                <div class="col-lg-12">
                                    <label style="font-weight: bold;">Description</label>
                                </div>
                                <div class="col-lg-12">
                                    @Html.TextAreaFor(s => Model.Documents[item].Description, 4, 10, null)
                                </div>
                            </div>
                            @Html.HiddenFor(s => Model.Documents[item].Type)
                            @Html.HiddenFor(s => Model.Documents[item].TempAssetDocumentId)
                            @Html.HiddenFor(s => Model.Documents[item].Size)
                            @Html.HiddenFor(s => Model.Documents[item].ContentType)
                            @Html.HiddenFor(s => Model.Documents[item].GuidId)
                            @Html.HiddenFor(s => Model.Documents[item].FileName, new { @class = "docName" })
                        </div>
                        }
                    }
                </div>
            </div>
            <div class="document-item">
                <span style="width: 40%; float: left;">Prior Fiscal Year Oper Report:</span>
                @Html.RadioButtonFor(s => s.availablepriorFiscalYearOperReport, "false", new { onchange = "hide('priorFiscalYearOperReport')" })
                Not Available without LOI
                @Html.RadioButtonFor(s => s.availablepriorFiscalYearOperReport, "true", new { onchange = "show('priorFiscalYearOperReport')" })
                Available
                @if (Model.availablepriorFiscalYearOperReport)
                {
                    <a onclick="show('priorFiscalYearOperReport')" style="margin-left: 15px;">View Document(s)</a>
                }
                <div id="priorFiscalYearOperReport" style="display: none;" class="document-item-expanded">
                    @for (int item = 0; item < Model.Documents.Count; item++)
                    {
                        if (Model.Documents[item].Type == (int)Inview.Epi.EpiFund.Domain.Enum.AssetDocumentType.PriorFiscalYearOperReport)
                        {
                        <div class="docPreviewDiv">
                            <a target='_blank' href="@Url.Action("DownloadDocument", "Admin", new { fileName = Model.Documents[item].FileName, assetId = Model.GuidId, contentType = Model.Documents[item].ContentType, title = Model.Documents[item].Title })">Click here to download file</a>
                            <br />
                            <div class="row">
                                <div class="col-lg-12">
                                    <label style="font-weight: bold;">Title</label>
                                </div>
                                <div class="col-lg-12">
                                    @Html.TextBoxFor(s => Model.Documents[item].Title)
                                </div>
                                <div class="col-lg-12">
                                    <label style="font-weight: bold;">Description</label>
                                </div>
                                <div class="col-lg-12">
                                    @Html.TextAreaFor(s => Model.Documents[item].Description, 4, 10, null)
                                </div>
                            </div>
                            @Html.HiddenFor(s => Model.Documents[item].Type)
                            @Html.HiddenFor(s => Model.Documents[item].TempAssetDocumentId)
                            @Html.HiddenFor(s => Model.Documents[item].Size)
                            @Html.HiddenFor(s => Model.Documents[item].ContentType)
                            @Html.HiddenFor(s => Model.Documents[item].GuidId)
                            @Html.HiddenFor(s => Model.Documents[item].FileName, new { @class = "docName" })
                        </div>
                        }
                    }
                </div>
            </div>
            <div class="document-item">
                <span style="width: 40%; float: left;">Preliminary Title Report:</span>
                @Html.RadioButtonFor(s => s.availablepreliminaryTitleReport, "false", new { onchange = "hide('preliminaryTitleReport')" })
                Not Available without LOI
                @Html.RadioButtonFor(s => s.availablepreliminaryTitleReport, "true", new { onchange = "show('preliminaryTitleReport')" })
                Available
                @if (Model.availablepreliminaryTitleReport)
                {
                    <a onclick="show('preliminaryTitleReport')" style="margin-left: 15px;">View Document(s)</a>
                }
                <div id="preliminaryTitleReport" style="display: none;" class="document-item-expanded">
                    @for (int item = 0; item < Model.Documents.Count; item++)
                    {
                        if (Model.Documents[item].Type == (int)Inview.Epi.EpiFund.Domain.Enum.AssetDocumentType.PreliminaryTitleReport)
                        {
                        <div class="docPreviewDiv">
                            <a target='_blank' href="@Url.Action("DownloadDocument", "Admin", new { fileName = Model.Documents[item].FileName, assetId = Model.GuidId, contentType = Model.Documents[item].ContentType, title = Model.Documents[item].Title })">Click here to download file</a>
                            <br />
                            <div class="row">
                                <div class="col-lg-12">
                                    <label style="font-weight: bold;">Title</label>
                                </div>
                                <div class="col-lg-12">
                                    @Html.TextBoxFor(s => Model.Documents[item].Title)
                                </div>
                                <div class="col-lg-12">
                                    <label style="font-weight: bold;">Description</label>
                                </div>
                                <div class="col-lg-12">
                                    @Html.TextAreaFor(s => Model.Documents[item].Description, 4, 10, null)
                                </div>
                            </div>
                            @Html.HiddenFor(s => Model.Documents[item].Type)
                            @Html.HiddenFor(s => Model.Documents[item].TempAssetDocumentId)
                            @Html.HiddenFor(s => Model.Documents[item].Size)
                            @Html.HiddenFor(s => Model.Documents[item].ContentType)
                            @Html.HiddenFor(s => Model.Documents[item].GuidId)
                            @Html.HiddenFor(s => Model.Documents[item].FileName, new { @class = "docName" })
                        </div>
                        }
                    }
                </div>
            </div>
            <div class="document-item">
                <span style="width: 40%; float: left;">Plat Map:</span>
                @Html.RadioButtonFor(s => s.availableplatMap, "false", new { onchange = "hide('platMap')" })
                Not Available without LOI
                @Html.RadioButtonFor(s => s.availableplatMap, "true", new { onchange = "show('platMap')" })
                Available
                @if (Model.availableplatMap)
                {
                    <a onclick="show('platMap')" style="margin-left: 15px;">View Document(s)</a>
                }
                <div id="platMap" style="display: none;" class="document-item-expanded">
                    @for (int item = 0; item < Model.Documents.Count; item++)
                    {
                        if (Model.Documents[item].Type == (int)Inview.Epi.EpiFund.Domain.Enum.AssetDocumentType.PlatMap)
                        {
                        <div class="docPreviewDiv">
                            <a target='_blank' href="@Url.Action("DownloadDocument", "Admin", new { fileName = Model.Documents[item].FileName, assetId = Model.GuidId, contentType = Model.Documents[item].ContentType, title = Model.Documents[item].Title })">Click here to download file</a>
                            <br />
                            <div class="row">
                                <div class="col-lg-12">
                                    <label style="font-weight: bold;">Title</label>
                                </div>
                                <div class="col-lg-12">
                                    @Html.TextBoxFor(s => Model.Documents[item].Title)
                                </div>
                                <div class="col-lg-12">
                                    <label style="font-weight: bold;">Description</label>
                                </div>
                                <div class="col-lg-12">
                                    @Html.TextAreaFor(s => Model.Documents[item].Description, 4, 10, null)
                                </div>
                            </div>
                            @Html.HiddenFor(s => Model.Documents[item].Type)
                            @Html.HiddenFor(s => Model.Documents[item].TempAssetDocumentId)
                            @Html.HiddenFor(s => Model.Documents[item].Size)
                            @Html.HiddenFor(s => Model.Documents[item].ContentType)
                            @Html.HiddenFor(s => Model.Documents[item].GuidId)
                            @Html.HiddenFor(s => Model.Documents[item].FileName, new { @class = "docName" })
                        </div>
                        }
                    }
                </div>
            </div>
            <div class="document-item">
                <span style="width: 40%; float: left;">Aerial Map:</span>
                @Html.RadioButtonFor(s => s.availablearialMap, "false", new { onchange = "hide('arialMap')" })
                Not Available without LOI
                @Html.RadioButtonFor(s => s.availablearialMap, "true", new { onchange = "show('arialMap')" })
                Available
                @if (Model.availablearialMap)
                {
                    <a onclick="show('arialMap')" style="margin-left: 15px;">View Document(s)</a>
                }
                <div id="arialMap" style="display: none;" class="document-item-expanded">
                    @for (int item = 0; item < Model.Documents.Count; item++)
                    {
                        if (Model.Documents[item].Type == (int)Inview.Epi.EpiFund.Domain.Enum.AssetDocumentType.ArialMap)
                        {
                        <div class="docPreviewDiv">
                            <a target='_blank' href="@Url.Action("DownloadDocument", "Admin", new { fileName = Model.Documents[item].FileName, assetId = Model.GuidId, contentType = Model.Documents[item].ContentType, title = Model.Documents[item].Title })">Click here to download file</a>
                            <br />
                            <div class="row">
                                <div class="col-lg-12">
                                    <label style="font-weight: bold;">Title</label>
                                </div>
                                <div class="col-lg-12">
                                    @Html.TextBoxFor(s => Model.Documents[item].Title)
                                </div>
                                <div class="col-lg-12">
                                    <label style="font-weight: bold;">Description</label>
                                </div>
                                <div class="col-lg-12">
                                    @Html.TextAreaFor(s => Model.Documents[item].Description, 4, 10, null)
                                </div>
                            </div>
                            @Html.HiddenFor(s => Model.Documents[item].Type)
                            @Html.HiddenFor(s => Model.Documents[item].TempAssetDocumentId)
                            @Html.HiddenFor(s => Model.Documents[item].Size)
                            @Html.HiddenFor(s => Model.Documents[item].ContentType)
                            @Html.HiddenFor(s => Model.Documents[item].GuidId)
                            @Html.HiddenFor(s => Model.Documents[item].FileName, new { @class = "docName" })
                        </div>
                        }
                    }
                </div>
            </div>
            <div class="document-item">
                <span style="width: 40%; float: left;">Original Appraisal:</span>
                @Html.RadioButtonFor(s => s.availableoriginalAppraisal, "false", new { onchange = "hide('originalAppraisal')" })
                Not Available without LOI
                @Html.RadioButtonFor(s => s.availableoriginalAppraisal, "true", new { onchange = "show('originalAppraisal')" })
                Available
                @if (Model.availableoriginalAppraisal)
                {
                    <a onclick="show('originalAppraisal')" style="margin-left: 15px;">View Document(s)</a>
                }
                <div id="originalAppraisal" style="display: none;" class="document-item-expanded">
                    @for (int item = 0; item < Model.Documents.Count; item++)
                    {
                        if (Model.Documents[item].Type == (int)Inview.Epi.EpiFund.Domain.Enum.AssetDocumentType.OriginalAppraisal)
                        {
                        <div class="docPreviewDiv">
                            <a target='_blank' href="@Url.Action("DownloadDocument", "Admin", new { fileName = Model.Documents[item].FileName, assetId = Model.GuidId, contentType = Model.Documents[item].ContentType, title = Model.Documents[item].Title })">Click here to download file</a>
                            <br />
                            <div class="row">
                                <div class="col-lg-12">
                                    <label style="font-weight: bold;">Title</label>
                                </div>
                                <div class="col-lg-12">
                                    @Html.TextBoxFor(s => Model.Documents[item].Title)
                                </div>
                                <div class="col-lg-12">
                                    <label style="font-weight: bold;">Description</label>
                                </div>
                                <div class="col-lg-12">
                                    @Html.TextAreaFor(s => Model.Documents[item].Description, 4, 10, null)
                                </div>
                            </div>
                            @Html.HiddenFor(s => Model.Documents[item].Type)
                            @Html.HiddenFor(s => Model.Documents[item].TempAssetDocumentId)
                            @Html.HiddenFor(s => Model.Documents[item].Size)
                            @Html.HiddenFor(s => Model.Documents[item].ContentType)
                            @Html.HiddenFor(s => Model.Documents[item].GuidId)
                            @Html.HiddenFor(s => Model.Documents[item].FileName, new { @class = "docName" })
                        </div>
                        }
                    }
                </div>
            </div>
            <div class="document-item">
                <span style="width: 40%; float: left;">Current Appraisal:</span>
                @Html.RadioButtonFor(s => s.availablecurrentAppraisal, "false", new { onchange = "hide('currentAppraisal')" })
                Not Available without LOI
                @Html.RadioButtonFor(s => s.availablecurrentAppraisal, "true", new { onchange = "show('currentAppraisal')" })
                Available
                @if (Model.availablecurrentAppraisal)
                {
                    <a onclick="show('currentAppraisal')" style="margin-left: 15px;">View Document(s)</a>
                }
                <div id="currentAppraisal" style="display: none;" class="document-item-expanded">
                    @for (int item = 0; item < Model.Documents.Count; item++)
                    {
                        if (Model.Documents[item].Type == (int)Inview.Epi.EpiFund.Domain.Enum.AssetDocumentType.CurrentAppraisal)
                        {
                        <div class="docPreviewDiv">
                            <a target='_blank' href="@Url.Action("DownloadDocument", "Admin", new { fileName = Model.Documents[item].FileName, assetId = Model.GuidId, contentType = Model.Documents[item].ContentType, title = Model.Documents[item].Title })">Click here to download file</a>
                            <br />
                            <div class="row">
                                <div class="col-lg-12">
                                    <label style="font-weight: bold;">Title</label>
                                </div>
                                <div class="col-lg-12">
                                    @Html.TextBoxFor(s => Model.Documents[item].Title)
                                </div>
                                <div class="col-lg-12">
                                    <label style="font-weight: bold;">Description</label>
                                </div>
                                <div class="col-lg-12">
                                    @Html.TextAreaFor(s => Model.Documents[item].Description, 4, 10, null)
                                </div>
                            </div>
                            @Html.HiddenFor(s => Model.Documents[item].Type)
                            @Html.HiddenFor(s => Model.Documents[item].TempAssetDocumentId)
                            @Html.HiddenFor(s => Model.Documents[item].Size)
                            @Html.HiddenFor(s => Model.Documents[item].ContentType)
                            @Html.HiddenFor(s => Model.Documents[item].GuidId)
                            @Html.HiddenFor(s => Model.Documents[item].FileName, new { @class = "docName" })
                        </div>
                        }
                    }
                </div>
            </div>
            <div class="document-item">
                <span style="width: 40%; float: left;">Marketing Brochure:</span>
                @Html.RadioButtonFor(s => s.availableListingAgentMarketingBrochure, "false", new { onchange = "hide('marketingBrochure')" })
                Not Available without LOI
                @Html.RadioButtonFor(s => s.availableListingAgentMarketingBrochure, "true", new { onchange = "show('marketingBrochure')" })
                Available
                @if (Model.availableListingAgentMarketingBrochure)
                {
                    <a onclick="show('marketingBrochure')" style="margin-left: 15px;">View Document(s)</a>
                }
                <div id="marketingBrochure" style="display: none;" class="document-item-expanded">
                    @for (int item = 0; item < Model.Documents.Count; item++)
                    {
                        if (Model.Documents[item].Type == (int)Inview.Epi.EpiFund.Domain.Enum.AssetDocumentType.ListingAgentMarketingBrochure)
                        {
                        <div class="docPreviewDiv">
                            <a target='_blank' href="@Url.Action("DownloadDocument", "Admin", new { fileName = Model.Documents[item].FileName, assetId = Model.GuidId, contentType = Model.Documents[item].ContentType, title = Model.Documents[item].Title })">Click here to download file</a>
                            <br />
                            <div class="row">
                                <div class="col-lg-12">
                                    <label style="font-weight: bold;">Title</label>
                                </div>
                                <div class="col-lg-12">
                                    @Html.TextBoxFor(s => Model.Documents[item].Title)
                                </div>
                                <div class="col-lg-12">
                                    <label style="font-weight: bold;">Description</label>
                                </div>
                                <div class="col-lg-12">
                                    @Html.TextAreaFor(s => Model.Documents[item].Description, 4, 10, null)
                                </div>
                            </div>
                            @Html.HiddenFor(s => Model.Documents[item].Type)
                            @Html.HiddenFor(s => Model.Documents[item].TempAssetDocumentId)
                            @Html.HiddenFor(s => Model.Documents[item].Size)
                            @Html.HiddenFor(s => Model.Documents[item].ContentType)
                            @Html.HiddenFor(s => Model.Documents[item].GuidId)
                            @Html.HiddenFor(s => Model.Documents[item].FileName, new { @class = "docName" })
                        </div>
                        }
                    }
                </div>
            </div>
            <div class="document-item">
                <span style="width: 40%; float: left;">Other:</span>
                @Html.RadioButtonFor(s => s.availableOtherDocument, "false", new { onchange = "hide('otherDocuments')" })
                Not Available without LOI
                @Html.RadioButtonFor(s => s.availableOtherDocument, "true", new { onchange = "show('otherDocuments')" })
                Available
                @if (Model.availableOtherDocument)
                {
                    <a onclick="show('otherDocuments')" style="margin-left: 15px;">View Document(s)</a>
                }
                <div id="otherDocuments" style="display: none;" class="document-item-expanded">
                    @for (int item = 0; item < Model.Documents.Count; item++)
                    {
                        if (Model.Documents[item].Type == (int)Inview.Epi.EpiFund.Domain.Enum.AssetDocumentType.Other)
                        {
                        <div class="docPreviewDiv">
                            <a target='_blank' href="@Url.Action("DownloadDocument", "Admin", new { fileName = Model.Documents[item].FileName, assetId = Model.GuidId, contentType = Model.Documents[item].ContentType, title = Model.Documents[item].Title })">Click here to download file</a>
                            <br />
                            <div class="row">
                                <div class="col-lg-12">
                                    <label style="font-weight: bold;">Title</label>
                                </div>
                                <div class="col-lg-12">
                                    @Html.TextBoxFor(s => Model.Documents[item].Title)
                                </div>
                                <div class="col-lg-12">
                                    <label style="font-weight: bold;">Description</label>
                                </div>
                                <div class="col-lg-12">
                                    @Html.TextAreaFor(s => Model.Documents[item].Description, 4, 10, null)
                                </div>
                            </div>
                            @Html.HiddenFor(s => Model.Documents[item].Type)
                            @Html.HiddenFor(s => Model.Documents[item].TempAssetDocumentId)
                            @Html.HiddenFor(s => Model.Documents[item].Size)
                            @Html.HiddenFor(s => Model.Documents[item].ContentType)
                            @Html.HiddenFor(s => Model.Documents[item].GuidId)
                            @Html.HiddenFor(s => Model.Documents[item].FileName, new { @class = "docName" })
                        </div>
                        }
                    }
                </div>
            </div>
        </div>
    </div>
    <hr />
    <h3>Videos</h3>
        <br />
        <div id="videosPreviewer" data-videocount="@Model.Videos.Count">
            @for (int item = 0; item < Model.Videos.Count; item++)
            {       
                <div class="videoPreviewDiv" style="display: inline-block;">
                    @Html.Video(new VideoOptions()
               {
                   Mp4Url = @Url.Action("GetVideo", new { id = Model.Videos[item].GuidId, filepath = Model.Videos[item].FilePath }),
                   HasPoster = false,
                   HasDownloadLink = true,
                   VideoNotSupported = "<p>No video playback capabilities, please download the video below</p>",
                   TrackEnable = false
               }, new { @class = "video-responsive", id = "video" + item })
                    @Html.HiddenFor(s => Model.Videos[item].FilePath, new { @class = "videoName" })
                    @Html.HiddenFor(s => Model.Videos[item].GuidId)
                </div>
                <hr />
                <br />
            }
            <br />
        </div>
    <hr />

@Html.Partial("_NoteJavascript")