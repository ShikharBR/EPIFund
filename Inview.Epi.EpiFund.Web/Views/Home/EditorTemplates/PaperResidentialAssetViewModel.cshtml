@model Inview.Epi.EpiFund.Domain.ViewModel.PaperResidentialAssetViewModel
@using MVCVideo

<div class="paper-residential-asset">

    @using (Html.BeginForm("EpiFundBuysPaperR", "Home", FormMethod.Post))
    {
        <div class="row">
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.LabelFor(s => s.BeneficiaryName, new { @class = "control-label" })
                </div>
            </div>
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.TextBoxFor(s => s.BeneficiaryName, new { @class = "control-label" })
                    @Html.ValidationMessageFor(model => model.BeneficiaryName)
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.LabelFor(s => s.BeneficiaryFullName, new { @class = "control-label" })
                </div>
            </div>
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.TextBoxFor(s => s.BeneficiaryFullName, new { @class = "control-label" })
                    @Html.ValidationMessageFor(model => model.BeneficiaryFullName)
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.LabelFor(s => s.BeneficiaryContactAddress, new { @class = "control-label" })
                </div>
            </div>
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.TextBoxFor(s => s.BeneficiaryContactAddress, new { @class = "control-label" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.LabelFor(s => s.BeneficiaryCity, new { @class = "control-label" })
                </div>
            </div>
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.TextBoxFor(s => s.BeneficiaryCity, new { @class = "control-label" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.LabelFor(s => s.BeneficiaryState, new { @class = "control-label" })
                </div>
            </div>
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.DropDownListFor(model => model.BeneficiaryState, Model.States as IEnumerable<SelectListItem>, "---")
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.LabelFor(s => s.BeneficiaryZip, new { @class = "control-label" })
                </div>
            </div>
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.TextBoxFor(s => s.BeneficiaryZip, new { @class = "control-label" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.LabelFor(s => s.BeneficiaryPhoneHome, new { @class = "control-label" })
                </div>
            </div>
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.TextBoxFor(s => s.BeneficiaryPhoneHome, new { @class = "control-label" })
                    @Html.ValidationMessageFor(model => model.BeneficiaryPhoneHome)
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.LabelFor(s => s.BeneficiaryPhoneCell, new { @class = "control-label" })
                </div>
            </div>
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.TextBoxFor(s => s.BeneficiaryPhoneCell, new { @class = "control-label" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.LabelFor(s => s.BeneficiaryPhoneWork, new { @class = "control-label" })
                </div>
            </div>
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.TextBoxFor(s => s.BeneficiaryPhoneWork, new { @class = "control-label" })
                    @Html.ValidationMessageFor(model => model.BeneficiaryPhoneWork)
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.LabelFor(s => s.BeneficiaryFax, new { @class = "control-label" })
                </div>
            </div>
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.TextBoxFor(s => s.BeneficiaryFax, new { @class = "control-label" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.LabelFor(s => s.BeneficiaryEmail, new { @class = "control-label" })
                </div>
            </div>
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.TextBoxFor(s => s.BeneficiaryEmail, new { @class = "control-label" })
                    @Html.ValidationMessageFor(model => model.BeneficiaryEmail)
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.LabelFor(s => s.BeneficiaryAccountNumber, new { @class = "control-label" })
                </div>
            </div>
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.TextBoxFor(s => s.BeneficiaryAccountNumber, new { @class = "control-label" })
                </div>
            </div>
        </div>

        <hr />

        <div class="row">
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.LabelFor(s => s.NotePayerName, new { @class = "control-label" })
                </div>
            </div>
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.TextBoxFor(s => s.NotePayerName, new { @class = "control-label" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.LabelFor(s => s.NotePayerFullName, new { @class = "control-label" })
                </div>
            </div>
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.TextBoxFor(s => s.NotePayerFullName, new { @class = "control-label" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.LabelFor(s => s.NotePayerContactAddress, new { @class = "control-label" })
                </div>
            </div>
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.TextBoxFor(s => s.NotePayerContactAddress, new { @class = "control-label" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.LabelFor(s => s.NotePayerCity, new { @class = "control-label" })
                </div>
            </div>
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.TextBoxFor(s => s.NotePayerCity, new { @class = "control-label" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.LabelFor(s => s.NotePayerState, new { @class = "control-label" })
                </div>
            </div>
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.DropDownListFor(model => model.NotePayerState, Model.States as IEnumerable<SelectListItem>, "---")
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.LabelFor(s => s.NotePayerZip, new { @class = "control-label" })
                </div>
            </div>
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.TextBoxFor(s => s.NotePayerZip, new { @class = "control-label" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.LabelFor(s => s.NotePayerPhoneHome, new { @class = "control-label" })
                </div>
            </div>
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.TextBoxFor(s => s.NotePayerPhoneHome, new { @class = "control-label" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.LabelFor(s => s.NotePayerPhoneCell, new { @class = "control-label" })
                </div>
            </div>
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.TextBoxFor(s => s.NotePayerPhoneCell, new { @class = "control-label" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.LabelFor(s => s.NotePayerPhoneWork, new { @class = "control-label" })
                </div>
            </div>
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.TextBoxFor(s => s.NotePayerPhoneWork, new { @class = "control-label" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.LabelFor(s => s.NotePayerFax, new { @class = "control-label" })
                </div>
            </div>
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.TextBoxFor(s => s.NotePayerFax, new { @class = "control-label" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.LabelFor(s => s.NotePayerEmail, new { @class = "control-label" })
                </div>
            </div>
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.TextBoxFor(s => s.NotePayerEmail, new { @class = "control-label" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.LabelFor(s => s.NotePayerSSNOrTIN, new { @class = "control-label" })
                </div>
            </div>
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.TextBoxFor(s => s.NotePayerSSNOrTIN, new { @class = "control-label" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.LabelFor(s => s.NotePayerFICO, new { @class = "control-label" })
                </div>
            </div>
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.TextBoxFor(s => s.NotePayerFICO, new { @class = "control-label" })
                </div>
            </div>
        </div>

        <hr />
         <div style="background-color: lightgrey; border: 1px solid #000; padding: 5px; margin-bottom: 5px;">
            <em>This CRE Mortgage Note Asset File database questionnaire is for privately held Mortgage Notes secured by Commercial Investment Real Property in the United States (e.g., Multi-Family, Retail Centers, Office Buildings and Complexes, Industrial, MHP, Medical Office, Mixed Use, Single Tenant, Commercial Service/Fuel Centers, Mini-Storage Facilities, etc.).  Portfolios of privately held Mortgage Notes secured by Single Family Residential assets are inventory not included in the questionnaire. 

                <br />
                If you have more than one CRE Mortgage Note Asset you wish to create a USC Data File on, simply
                click
                the “Portfolio” button at the beginning of the questionnaire.
            </em>
                </div>
        <div class="row">
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.LabelFor(s => s.SecuringPropertyAddress, new { @class = "control-label" })<span style="color: red;">*</span>
                </div>
            </div>
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.TextBoxFor(s => s.SecuringPropertyAddress, new { @class = "control-label" })
                    @Html.ValidationMessageFor(model => model.SecuringPropertyAddress)
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.LabelFor(s => s.SecuringPropertyCity, new { @class = "control-label" })<span style="color: red;">*</span>
                </div>
            </div>
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.TextBoxFor(s => s.SecuringPropertyCity, new { @class = "control-label" })
                    @Html.ValidationMessageFor(model => model.SecuringPropertyCity)
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.LabelFor(s => s.SecuringPropertyState, new { @class = "control-label" })<span style="color: red;">*</span>
                </div>
            </div>
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.DropDownListFor(model => model.SecuringPropertyState, Model.States as IEnumerable<SelectListItem>, "---")
                    @Html.ValidationMessageFor(model => model.SecuringPropertyState)
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.LabelFor(s => s.SecuringPropertyZip, new { @class = "control-label" })<span style="color: red;">*</span>
                </div>
            </div>
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.TextBoxFor(s => s.SecuringPropertyZip, new { @class = "control-label" })
                    @Html.ValidationMessageFor(model => model.SecuringPropertyZip)
                </div>
            </div>
        </div>

             <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.PropHoldType, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.TextBoxFor(s => s.PropHoldType, new { @class = "control-label" })
                    </div>
                </div>
            </div>

        <div class="row">
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.LabelFor(s => s.TypeOfProperty, new { @class = "control-label" })
                </div>
            </div>
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.DropDownListFor(model => model.TypeOfProperty, Model.PropertyTypes as IEnumerable<SelectListItem>, "---")
                    @Html.ValidationMessageFor(model => model.TypeOfProperty)
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.LabelFor(s => s.Bedrooms, new { @class = "control-label" })
                </div>
            </div>
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.TextBoxFor(s => s.Bedrooms, new { @class = "control-label" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.LabelFor(s => s.Bathrooms, new { @class = "control-label" })
                </div>
            </div>
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.TextBoxFor(s => s.Bathrooms, new { @class = "control-label" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.LabelFor(s => s.Year, new { @class = "control-label" })
                </div>
            </div>
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.TextBoxFor(s => s.Year, new { @class = "control-label" })
                </div>
            </div>
        </div>
        <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(model => model.PropLastUpdated)
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.EditorFor(model => model.PropLastUpdated)
                    </div>
                </div>
            </div>       
        <div class="row">
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.LabelFor(s => s.TypeOfContruction, new { @class = "control-label" })
                </div>
            </div>
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.DropDownListFor(model => model.TypeOfContruction, Model.ConstructionTypes as IEnumerable<SelectListItem>, "---")
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.LabelFor(s => s.LotSize, new { @class = "control-label" })
                </div>
            </div>
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.DropDownListFor(model => model.LotSize, Model.LotSizes as IEnumerable<SelectListItem>, "---")
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.LabelFor(s => s.Parking, new { @class = "control-label" })
                </div>
            </div>
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.DropDownListFor(model => model.Parking, Model.ParkingTypes as IEnumerable<SelectListItem>)
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.LabelFor(s => s.WaterService, new { @class = "control-label" })
                </div>
            </div>
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.DropDownListFor(model => model.WaterService, Model.WaterServices as IEnumerable<SelectListItem>, "---")
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.LabelFor(s => s.SewerService, new { @class = "control-label" })
                </div>
            </div>
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.DropDownListFor(model => model.SewerService, Model.SewerServices as IEnumerable<SelectListItem>, "---")
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.LabelFor(s => s.PowerService, new { @class = "control-label" })
                </div>
            </div>
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.DropDownListFor(model => model.PowerService, Model.PowerServices as IEnumerable<SelectListItem>, "---")
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.LabelFor(s => s.PropertyAccess, new { @class = "control-label" })
                </div>
            </div>
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.DropDownListFor(model => model.PropertyAccess, Model.PropertyAccessTypes as IEnumerable<SelectListItem>, "---")
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.LabelFor(s => s.NoteOriginationDate, new { @class = "control-label" })
                </div>
            </div>
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.TextBoxFor(s => s.NoteOriginationDate, new { @class = "control-label" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.LabelFor(s => s.OriginalNotePrincipal, new { @class = "control-label" })
                </div>
            </div>
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.TextBoxFor(s => s.OriginalNotePrincipal, new { @class = "control-label" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.LabelFor(s => s.BPOOfProperty, new { @class = "control-label" })
                </div>
            </div>
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.TextBoxFor(s => s.BPOOfProperty, new { @class = "control-label" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.LabelFor(s => s.CurrentNotePrincipal, new { @class = "control-label" })
                </div>
            </div>
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.TextBoxFor(s => s.CurrentNotePrincipal, new { @class = "control-label" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.LabelFor(s => s.HasCopyOfAppraisal, new { @class = "control-label" })
                </div>
            </div>
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.DropDownListFor(model => model.HasCopyOfAppraisal, Model.PropertyAppraisals as IEnumerable<SelectListItem>, "---")
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.LabelFor(s => s.MethodOfAppraisal, new { @class = "control-label" })
                </div>
            </div>
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.DropDownListFor(model => model.MethodOfAppraisal, Model.AppraisalMethods as IEnumerable<SelectListItem>, "---")
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.LabelFor(s => s.TypeOfNote, new { @class = "control-label" })
                </div>
            </div>
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.TextBoxFor(s => s.TypeOfNote, new { @class = "control-label" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.LabelFor(s => s.NoteInterestRate, new { @class = "control-label" })
                </div>
            </div>
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.TextBoxFor(s => s.NoteInterestRate, new { @class = "control-label" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.LabelFor(s => s.PaymentAmount, new { @class = "control-label" })
                </div>
            </div>
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.TextBoxFor(s => s.PaymentAmount, new { @class = "control-label" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.LabelFor(s => s.PaymentFrequency, new { @class = "control-label" })
                </div>
            </div>
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.DropDownListFor(model => model.PaymentFrequency, Model.PaymentFrequencies as IEnumerable<SelectListItem>, "---")
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.LabelFor(s => s.BalloonDateOfNote, new { @class = "control-label" })
                </div>
            </div>
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.TextBoxFor(s => s.BalloonDateOfNote, new { @class = "control-label" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.LabelFor(s => s.BalloonDueAmount, new { @class = "control-label" })
                </div>
            </div>
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.TextBoxFor(s => s.BalloonDueAmount, new { @class = "control-label" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.LabelFor(s => s.TypeOfMTGInstrument, new { @class = "control-label" })
                </div>
            </div>
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.DropDownListFor(model => model.TypeOfMTGInstrument, Model.MortgageInstruments as IEnumerable<SelectListItem>, "---")
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.LabelFor(s => s.AmortType, new { @class = "control-label" })
                </div>
            </div>
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.DropDownListFor(model => model.AmortType, Model.AmortTypes as IEnumerable<SelectListItem>, "---")
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.LabelFor(s => s.PaymentsMadeOnNote, new { @class = "control-label" })
                </div>
            </div>
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.TextBoxFor(s => s.PaymentsMadeOnNote, new { @class = "control-label" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.LabelFor(s => s.PaymentsRemainingOnNote, new { @class = "control-label" })
                </div>
            </div>
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.TextBoxFor(s => s.PaymentsRemainingOnNote, new { @class = "control-label" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.LabelFor(s => s.IsNoteCurrent, new { @class = "control-label" })
                </div>
            </div>
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.RadioButtonFor(s => s.IsNoteCurrent, "true") Yes
            @Html.RadioButtonFor(s => s.IsNoteCurrent, "false") No
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.LabelFor(s => s.LastPaymentRecievedOnNote, new { @class = "control-label" })
                </div>
            </div>
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.TextBoxFor(s => s.LastPaymentRecievedOnNote, new { @class = "control-label" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.LabelFor(s => s.NextPaymentOnNote, new { @class = "control-label" })
                </div>
            </div>
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.TextBoxFor(s => s.NextPaymentOnNote, new { @class = "control-label" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.LabelFor(s => s.SecuringPropertyAppraisal, new { @class = "control-label" })
                </div>
            </div>
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.TextBoxFor(s => s.SecuringPropertyAppraisal, new { @class = "control-label" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.LabelFor(s => s.PaymentHistory, new { @class = "control-label" })
                </div>
            </div>
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.DropDownListFor(model => model.PaymentHistory, Model.PaymentHistories as IEnumerable<SelectListItem>, "---")
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.LabelFor(s => s.SellerCarryNoteSalesDate, new { @class = "control-label" })
                </div>
            </div>
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.TextBoxFor(s => s.SellerCarryNoteSalesDate, new { @class = "control-label" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.LabelFor(s => s.SellerCarryNotePrice, new { @class = "control-label" })
                </div>
            </div>
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.TextBoxFor(s => s.SellerCarryNotePrice, new { @class = "control-label" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.LabelFor(s => s.SellerCarryNoteCashDown, new { @class = "control-label" })
                </div>
            </div>
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.TextBoxFor(s => s.SellerCarryNoteCashDown, new { @class = "control-label" })
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.LabelFor(s => s.OriginalPrincipalBalanceWRAP, new { @class = "control-label" })
                </div>
            </div>
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.TextBoxFor(s => s.OriginalPrincipalBalanceWRAP, new { @class = "control-label" })
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.LabelFor(s => s.TotalMonthlyPaymentWRAP, new { @class = "control-label" })
                </div>
            </div>
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.TextBoxFor(s => s.TotalMonthlyPaymentWRAP, new { @class = "control-label" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.LabelFor(s => s.FirstmortgageBalanceWRAP, new { @class = "control-label" })
                </div>
            </div>
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.TextBoxFor(s => s.FirstmortgageBalanceWRAP, new { @class = "control-label" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.LabelFor(s => s.FirstInterestRateWRAP, new { @class = "control-label" })
                </div>
            </div>
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.TextBoxFor(s => s.FirstInterestRateWRAP, new { @class = "control-label" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.LabelFor(s => s.FirstMortgagePaymentWRAP, new { @class = "control-label" })
                </div>
            </div>
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.TextBoxFor(s => s.FirstMortgagePaymentWRAP, new { @class = "control-label" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.LabelFor(s => s.SecondMortgageBalanceWRAP, new { @class = "control-label" })
                </div>
            </div>
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.TextBoxFor(s => s.SecondMortgageBalanceWRAP, new { @class = "control-label" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.LabelFor(s => s.SecondInterestRateWRAP, new { @class = "control-label" })
                </div>
            </div>
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.TextBoxFor(s => s.SecondInterestRateWRAP, new { @class = "control-label" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.LabelFor(s => s.SecondMortgagePaymentWRAP, new { @class = "control-label" })
                </div>
            </div>
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.TextBoxFor(s => s.SecondMortgagePaymentWRAP, new { @class = "control-label" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.LabelFor(s => s.NoteServicedByAgent, new { @class = "control-label" })
                </div>
            </div>
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.RadioButtonFor(s => s.NoteServicedByAgent, "true") Yes
            @Html.RadioButtonFor(s => s.NoteServicedByAgent, "false") No
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.LabelFor(s => s.AgentName, new { @class = "control-label" })
                </div>
            </div>
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.TextBoxFor(s => s.AgentName, new { @class = "control-label" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.LabelFor(s => s.AgentPhone, new { @class = "control-label" })
                </div>
            </div>
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.TextBoxFor(s => s.AgentPhone, new { @class = "control-label" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.LabelFor(s => s.AgentEmail, new { @class = "control-label" })
                </div>
            </div>
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.TextBoxFor(s => s.AgentEmail, new { @class = "control-label" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.LabelFor(s => s.AgentAccountNumber, new { @class = "control-label" })
                </div>
            </div>
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.TextBoxFor(s => s.AgentAccountNumber, new { @class = "control-label" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.LabelFor(s => s.AgentContactPerson, new { @class = "control-label" })
                </div>
            </div>
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.TextBoxFor(s => s.AgentContactPerson, new { @class = "control-label" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.LabelFor(s => s.AuthorizeForwardPaymentHistory, new { @class = "control-label" })
                </div>
            </div>
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.RadioButtonFor(s => s.AuthorizeForwardPaymentHistory, "true") Yes
            @Html.RadioButtonFor(s => s.AuthorizeForwardPaymentHistory, "false") No
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.LabelFor(s => s.AgentAddress, new { @class = "control-label" })
                </div>
            </div>
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.TextBoxFor(s => s.AgentAddress, new { @class = "control-label" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.LabelFor(s => s.AgentCity, new { @class = "control-label" })
                </div>
            </div>
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.TextBoxFor(s => s.AgentCity, new { @class = "control-label" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.LabelFor(s => s.AgentState, new { @class = "control-label" })
                </div>
            </div>
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.TextBoxFor(s => s.AgentState, new { @class = "control-label" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.LabelFor(s => s.AgentZip, new { @class = "control-label" })
                </div>
            </div>
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.TextBoxFor(s => s.AgentZip, new { @class = "control-label" })
                </div>
            </div>
        </div>

        <hr />

        <div class="row">
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.LabelFor(s => s.HasPicturesOfProperty, new { @class = "control-label" })
                </div>
            </div>
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.RadioButtonFor(s => s.HasPicturesOfProperty, "true") Yes
            @Html.RadioButtonFor(s => s.HasPicturesOfProperty, "false") No
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.LabelFor(s => s.GeneralComments, new { @class = "control-label" })
                </div>
            </div>
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.TextBoxFor(s => s.GeneralComments, new { @class = "control-label" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.LabelFor(s => s.SellingReason, new { @class = "control-label" })
                </div>
            </div>
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.TextBoxFor(s => s.SellingReason, new { @class = "control-label" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.LabelFor(s => s.HasTitleInsurance, new { @class = "control-label" })
                </div>
            </div>
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.RadioButtonFor(s => s.HasTitleInsurance, "true") Yes
            @Html.RadioButtonFor(s => s.HasTitleInsurance, "false") No
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.LabelFor(s => s.HomeownerInsurance, new { @class = "control-label" })
                </div>
            </div>
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.TextBoxFor(s => s.HomeownerInsurance, new { @class = "control-label" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.LabelFor(s => s.OwnerOccupied, new { @class = "control-label" })
                </div>
            </div>
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.RadioButtonFor(s => s.OwnerOccupied, "true") Yes
            @Html.RadioButtonFor(s => s.OwnerOccupied, "false") No
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.LabelFor(s => s.IsPropertyRental, new { @class = "control-label" })
                </div>
            </div>
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.RadioButtonFor(s => s.IsPropertyRental, "true") Yes
            @Html.RadioButtonFor(s => s.IsPropertyRental, "false") No
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.LabelFor(s => s.MonthlyRentRate, new { @class = "control-label" })
                </div>
            </div>
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.TextBoxFor(s => s.MonthlyRentRate, new { @class = "control-label" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.LabelFor(s => s.HasEnvironmentalIssues, new { @class = "control-label" })
                </div>
            </div>
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.RadioButtonFor(s => s.HasEnvironmentalIssues, "true") Yes
            @Html.RadioButtonFor(s => s.HasEnvironmentalIssues, "false") No
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.LabelFor(s => s.EnvironmentalIssues, new { @class = "control-label" })
                </div>
            </div>
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.TextBoxFor(s => s.EnvironmentalIssues, new { @class = "control-label" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.LabelFor(s => s.AskingPrice, new { @class = "control-label" })
                </div>
            </div>
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.TextBoxFor(s => s.AskingPrice, new { @class = "control-label" })
                </div>
            </div>
        </div>
     <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.RenovatedByOwner, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.RadioButtonFor(s => s.RenovatedByOwner, "true", new { onchange = "toggleRenovationsSection(true)" }) Yes
                        @Html.RadioButtonFor(s => s.RenovatedByOwner, "false", new { onchange = "toggleRenovationsSection(false)" }) No
                    </div>
                </div>
            </div>
            <div id="renovationsDetails" style="display: none;">
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.RenovationYear, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.DropDownListFor(model => model.RenovationYear, Model.RenovationYears as IEnumerable<SelectListItem>, "---")
                    </div>
                </div>
            </div>
			<div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.RenovationBudget, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.TextBoxFor(s => s.RenovationBudget, new { @class = "control-label" })
                    </div>
                </div>
            </div>
			<div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.RecentUpgradesRenovations, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.TextBoxFor(s => s.RecentUpgradesRenovations, new { @class = "control-label" })
                    </div>
                </div>
            </div>
                </div>
        <hr />
        <div id="maintainance">
            <h3>Deferred Maintenance</h3>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(model => model.HasDeferredMaintenance)
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.RadioButtonFor(model => model.HasDeferredMaintenance, "true", new { style = "margin-top: 10px;", onclick = "toggleDeferredMaintenanceDetails(true)" }) Yes
                        @Html.RadioButtonFor(model => model.HasDeferredMaintenance, "false", new { style = "margin-top: 10px;", onclick = "toggleDeferredMaintenanceDetails(false)" }) No
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.ValidationMessageFor(model => model.HasDeferredMaintenance)
                    </div>
                </div>
            </div>
            <div id="deferredMaintenanaceDetails" style="display: none;">
                <div class="row">
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.LabelFor(s => s.AverageAdjustmentToBaseRentalIncomePerUnitAfterRenovations)
                        </div>
                    </div>
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.TextBoxFor(s => s.AverageAdjustmentToBaseRentalIncomePerUnitAfterRenovations, new { @class = "formatNumber", onchange = "addCommasToInput(this)" })
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.LabelFor(model => model.EstDeferredMaintenance)
                        </div>
                    </div>
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.TextBoxFor(s => s.EstDeferredMaintenance, new { @class = "formatNumber", onchange = "addCommasToInput(this)" })
                            @*<input type="text" name="EstDeferredMaintenance" id="EstDeferredMaintenance" class="formatNumber" value="@((Model as MultiFamilyAssetViewModel).EstDeferredMaintenance)" readonly />*@
                        </div>
                    </div>
                    <div class="col-lg-6">
                        <div class="input-group">
                        </div>
                    </div>
                </div>
                @for (int i = 0; i < Model.DeferredMaintenanceItems.Count; i++)
                {
                    <div class="document-item">
                        <div class="row">
                            <div class="col-lg-5">
                                @Html.CheckBoxFor(s => Model.DeferredMaintenanceItems[i].Selected, new { onchange = "calculateEstimatedDeferredMaintenance()" })
                                <label>@Model.DeferredMaintenanceItems[i].ItemTitle</label>
                            </div>
                            <div class="col-lg-7" style="text-align: right;">
                                <label>Unit Cost:</label>
                                @Html.TextBoxFor(s => Model.DeferredMaintenanceItems[i].UnitCost, new { @class = "formatMaint", style = "width: 60px; margin-right:5px;", onchange = "addCommasToInputAndCalculate(this)" })
                                @if (Model.DeferredMaintenanceItems[i].UnitTypeLabel != null)
                                {
                                    <label>Number of @Model.DeferredMaintenanceItems[i].UnitTypeLabel:</label>
                                    @Html.TextBoxFor(s => Model.DeferredMaintenanceItems[i].NumberOfUnits, new { @class = "formatMaint", style = "margin-left: 5px; width: 60px;", onchange = "addCommasToInputAndCalculate(this)" })
                                }
                            </div>
                        </div>
                        @Html.HiddenFor(s => Model.DeferredMaintenanceItems[i].MaintenanceDetail)
                        @Html.HiddenFor(s => Model.DeferredMaintenanceItems[i].UnitCost)
                        @Html.HiddenFor(s => Model.DeferredMaintenanceItems[i].UnitTypeLabel)
                        @Html.HiddenFor(s => Model.DeferredMaintenanceItems[i].NumberOfUnits)
                        @Html.HiddenFor(s => Model.DeferredMaintenanceItems[i].ItemTitle)
                    </div>
                }
            </div>
        </div>
        <h3>Images</h3>
        <div class="row">
            <div class="col-lg-6">
                <label for="imgUploader">Upload Image:</label>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-12">
                <input type="file" name="file" id="imgUploader" style="width: 100%;" />
            </div>
            <hr />
        </div>

        <div id="imgsPreviewer" data-imgcount="@Model.Images.Count">
            @for (int item = 0; item < Model.Images.Count; item++)
            {       
                <div class="imgPreviewDiv" style="display: inline-block;">
                    <div class="imgPreviewImg" style="background-image: url('@Url.Action("GetImageSource", "Admin", new { fileName = Model.Images[item].FileName, assetId = Model.GuidId, contentType = Model.Images[item].ContentType })');"></div>
                    <br />
                    @Html.HiddenFor(s => Model.Images[item].TempAssetImageId)
                    @Html.HiddenFor(s => Model.Images[item].ContentType)
                    @Html.HiddenFor(s => Model.Images[item].FileName, new { @class = "imgName" })
                    @Html.HiddenFor(s => Model.Images[item].GuidId)
                    <input type='button' class='deleteImgUpload' value='Delete' data-button="@Model.Images[item].FileName" onclick='imgDelete(this)'/>
                </div>
            }
        </div>
        <br />
        <hr />
        <div class="tab-pane" id="documents">
            <h3>Documents</h3>
            <div id="docManager" data-doccount="@Model.Documents.Count">
                <div class="document-item">
                    <span style="width: 40%; float: left;">Current Rent Roll:</span>
                    @Html.RadioButtonFor(s => s.availablecurrentRentRoll, "false", new { onchange = "hide('currentRentRoll')" })
                    Not Available without LOI
                @Html.RadioButtonFor(s => s.availablecurrentRentRoll, "true", new { onchange = "show('currentRentRoll')" })
                    Available
                @if (Model.availablecurrentRentRoll)
                {
                    <a onclick="show('currentRentRoll')" style="margin-left: 15px;">View Document(s)</a>
                }
                    <div id="currentRentRoll" style="display: none;" class="document-item-expanded">
                        <div class="docSetup" style="width: 100%">
                            <a onclick="hide('currentRentRoll')" style="text-align: right; margin-left: 550px;"><span class="glyphicon glyphicon-remove"></span></a>
                            <h4 style="margin-top: 0px;">Upload New Document</h4>
                            <div class="row">
                                <div class="col-lg-12">
                                    <label>Title</label>
                                </div>
                                <div class="col-lg-12">
                                    <input type="text" id="rentRollTitle" value="Current Rent Roll" />
                                </div>
                                <div class="col-lg-12">
                                    <label>Description</label>
                                </div>
                                <div class="col-lg-12">
                                    <textarea cols="10" rows="4" id="rentRollDescription"></textarea>
                                </div>
                                <div class="col-lg-12">
                                    <input type="file" data-type="@((int)Inview.Epi.EpiFund.Domain.Enum.AssetDocumentType.CurrentRentRoll)" id="rentRoll" />
                                </div>
                            </div>
                        </div>
                        @for (int item = 0; item < Model.Documents.Count; item++)
                        {
                            if (Model.Documents[item].Type == (int)Inview.Epi.EpiFund.Domain.Enum.AssetDocumentType.CurrentRentRoll)
                            {
                            <div class="docPreviewDiv">
                                <a target='_blank' href="@Url.Action("DownloadDocument", "Admin", new { fileName = Model.Documents[item].FileName, assetId = Model.GuidId, contentType = Model.Documents[item].ContentType, title = Model.Documents[item].Title })">Click here to download file</a>
                                <br />
                                <div class="row">
                                    <div class="col-lg-12">
                                        <label style="font-weight: bold;">Title</label>
                                    </div>
                                    <div class="col-lg-12">
                                        @Html.TextBoxFor(s => Model.Documents[item].Title)
                                    </div>
                                    <div class="col-lg-12">
                                        <label style="font-weight: bold;">Description</label>
                                    </div>
                                    <div class="col-lg-12">
                                        @Html.TextAreaFor(s => Model.Documents[item].Description, 4, 10, null)
                                    </div>
                                </div>
                                @Html.HiddenFor(s => Model.Documents[item].TempAssetDocumentId)
                                @Html.HiddenFor(s => Model.Documents[item].Size)
                                @Html.HiddenFor(s => Model.Documents[item].ContentType)
                                @Html.HiddenFor(s => Model.Documents[item].GuidId)
                                @Html.HiddenFor(s => Model.Documents[item].Type)
                                @Html.HiddenFor(s => Model.Documents[item].FileName, new { @class = "docName" })
                                <input type='button' class='deleteDocUpload' value='Delete' data-button="@Model.Documents[item].FileName" onclick='docDelete(this)'/>
                            </div>
                            }
                        }
                    </div>
                </div>
                <div class="document-item">
                    <span style="width: 40%; float: left;">Current Operating Report:</span>
                    @Html.RadioButtonFor(s => s.availablecurrentOperatingReport, "false", new { onchange = "hide('currentOperatingReport')" })
                    Not Available without LOI
                @Html.RadioButtonFor(s => s.availablecurrentOperatingReport, "true", new { onchange = "show('currentOperatingReport')" })
                    Available
                @if (Model.availablecurrentOperatingReport)
                {
                    <a onclick="show('currentOperatingReport')" style="margin-left: 15px;">View Document(s)</a>
                }
                    <div id="currentOperatingReport" style="display: none;" class="document-item-expanded">
                        <div class="docSetup" style="width: 100%">
                            <a onclick="hide('currentOperatingReport')" style="text-align: right; margin-left: 550px;"><span class="glyphicon glyphicon-remove"></span></a>
                            <h4 style="margin-top: 0px;">Upload New Document</h4>
                            <div class="row">
                                <div class="col-lg-12">
                                    <label>Title</label>
                                </div>
                                <div class="col-lg-12">
                                    <input type="text" id="corTitle" value="Current Operating Report" />
                                </div>
                                <div class="col-lg-12">
                                    <label>Description</label>
                                </div>
                                <div class="col-lg-12">
                                    <textarea cols="10" rows="4" id="corDescription"></textarea>
                                </div>
                                <div class="col-lg-12">
                                    <input type="file" data-type="@((int)Inview.Epi.EpiFund.Domain.Enum.AssetDocumentType.CurrentOperatingReport)" id="cor" />
                                </div>
                            </div>
                        </div>
                        @for (int item = 0; item < Model.Documents.Count; item++)
                        {
                            if (Model.Documents[item].Type == (int)Inview.Epi.EpiFund.Domain.Enum.AssetDocumentType.CurrentOperatingReport)
                            {
                            <div class="docPreviewDiv">
                                <a target='_blank' href="@Url.Action("DownloadDocument", "Admin", new { fileName = Model.Documents[item].FileName, assetId = Model.GuidId, contentType = Model.Documents[item].ContentType, title = Model.Documents[item].Title })">Click here to download file</a>
                                <br />
                                <div class="row">
                                    <div class="col-lg-12">
                                        <label style="font-weight: bold;">Title</label>
                                    </div>
                                    <div class="col-lg-12">
                                        @Html.TextBoxFor(s => Model.Documents[item].Title)
                                    </div>
                                    <div class="col-lg-12">
                                        <label style="font-weight: bold;">Description</label>
                                    </div>
                                    <div class="col-lg-12">
                                        @Html.TextAreaFor(s => Model.Documents[item].Description, 4, 10, null)
                                    </div>
                                </div>
                                @Html.HiddenFor(s => Model.Documents[item].Type)
                                @Html.HiddenFor(s => Model.Documents[item].TempAssetDocumentId)
                                @Html.HiddenFor(s => Model.Documents[item].Size)
                                @Html.HiddenFor(s => Model.Documents[item].ContentType)
                                @Html.HiddenFor(s => Model.Documents[item].GuidId)
                                @Html.HiddenFor(s => Model.Documents[item].FileName, new { @class = "docName" })
                                <input type='button' class='deleteDocUpload' value='Delete' data-button="@Model.Documents[item].FileName" onclick='docDelete(this)'/>
                            </div>
                            }
                        }
                    </div>
                </div>
                <div class="document-item">
                    <span style="width: 40%; float: left;">Prior Fiscal Year Oper Report:</span>
                    @Html.RadioButtonFor(s => s.availablepriorFiscalYearOperReport, "false", new { onchange = "hide('priorFiscalYearOperReport')" })
                    Not Available without LOI
                @Html.RadioButtonFor(s => s.availablepriorFiscalYearOperReport, "true", new { onchange = "show('priorFiscalYearOperReport')" })
                    Available
                @if (Model.availablepriorFiscalYearOperReport)
                {
                    <a onclick="show('priorFiscalYearOperReport')" style="margin-left: 15px;">View Document(s)</a>
                }
                    <div id="priorFiscalYearOperReport" style="display: none;" class="document-item-expanded">
                        <div class="docSetup" style="width: 100%">
                            <a onclick="hide('priorFiscalYearOperReport')" style="text-align: right; margin-left: 550px;"><span class="glyphicon glyphicon-remove"></span></a>
                            <h4 style="margin-top: 0px;">Upload New Document</h4>
                            <div class="row">
                                <div class="col-lg-12">
                                    <label>Title</label>
                                </div>
                                <div class="col-lg-12">
                                    <input type="text" id="pfyorTitle" value="Prior Fiscal Year Oper Report" />
                                </div>
                                <div class="col-lg-12">
                                    <label>Description</label>
                                </div>
                                <div class="col-lg-12">
                                    <textarea cols="10" rows="4" id="pfyorDescription"></textarea>
                                </div>
                                <div class="col-lg-12">
                                    <input type="file" data-type="@((int)Inview.Epi.EpiFund.Domain.Enum.AssetDocumentType.PriorFiscalYearOperReport)" id="pfyor" />
                                </div>
                            </div>
                        </div>
                        @for (int item = 0; item < Model.Documents.Count; item++)
                        {
                            if (Model.Documents[item].Type == (int)Inview.Epi.EpiFund.Domain.Enum.AssetDocumentType.PriorFiscalYearOperReport)
                            {
                            <div class="docPreviewDiv">
                                <a target='_blank' href="@Url.Action("DownloadDocument", "Admin", new { fileName = Model.Documents[item].FileName, assetId = Model.GuidId, contentType = Model.Documents[item].ContentType, title = Model.Documents[item].Title })">Click here to download file</a>
                                <br />
                                <div class="row">
                                    <div class="col-lg-12">
                                        <label style="font-weight: bold;">Title</label>
                                    </div>
                                    <div class="col-lg-12">
                                        @Html.TextBoxFor(s => Model.Documents[item].Title)
                                    </div>
                                    <div class="col-lg-12">
                                        <label style="font-weight: bold;">Description</label>
                                    </div>
                                    <div class="col-lg-12">
                                        @Html.TextAreaFor(s => Model.Documents[item].Description, 4, 10, null)
                                    </div>
                                </div>
                                @Html.HiddenFor(s => Model.Documents[item].Type)
                                @Html.HiddenFor(s => Model.Documents[item].TempAssetDocumentId)
                                @Html.HiddenFor(s => Model.Documents[item].Size)
                                @Html.HiddenFor(s => Model.Documents[item].ContentType)
                                @Html.HiddenFor(s => Model.Documents[item].GuidId)
                                @Html.HiddenFor(s => Model.Documents[item].FileName, new { @class = "docName" })
                                <input type='button' class='deleteDocUpload' value='Delete' data-button="@Model.Documents[item].FileName" onclick='docDelete(this)'/>
                            </div>
                            }
                        }
                    </div>
                </div>
                <div class="document-item">
                    <span style="width: 40%; float: left;">Preliminary Title Report:</span>
                    @Html.RadioButtonFor(s => s.availablepreliminaryTitleReport, "false", new { onchange = "hide('preliminaryTitleReport')" })
                    Not Available without LOI
                @Html.RadioButtonFor(s => s.availablepreliminaryTitleReport, "true", new { onchange = "show('preliminaryTitleReport')" })
                    Available
                @if (Model.availablepreliminaryTitleReport)
                {
                    <a onclick="show('preliminaryTitleReport')" style="margin-left: 15px;">View Document(s)</a>
                }
                    <div id="preliminaryTitleReport" style="display: none;" class="document-item-expanded">
                        <div class="docSetup" style="width: 100%">
                            <a onclick="hide('preliminaryTitleReport')" style="text-align: right; margin-left: 550px;"><span class="glyphicon glyphicon-remove"></span></a>
                            <h4 style="margin-top: 0px;">Upload New Document</h4>
                            <div class="row">
                                <div class="col-lg-12">
                                    <label>Title</label>
                                </div>
                                <div class="col-lg-12">
                                    <input type="text" id="ptrTitle" value="Preliminary Title Report" />
                                </div>
                                <div class="col-lg-12">
                                    <label>Description</label>
                                </div>
                                <div class="col-lg-12">
                                    <textarea cols="10" rows="4" id="ptrDescription"></textarea>
                                </div>
                                <div class="col-lg-12">
                                    <input type="file" data-type="@((int)Inview.Epi.EpiFund.Domain.Enum.AssetDocumentType.PreliminaryTitleReport)" id="ptr" />
                                </div>
                            </div>
                        </div>
                        @for (int item = 0; item < Model.Documents.Count; item++)
                        {
                            if (Model.Documents[item].Type == (int)Inview.Epi.EpiFund.Domain.Enum.AssetDocumentType.PreliminaryTitleReport)
                            {
                            <div class="docPreviewDiv">
                                <a target='_blank' href="@Url.Action("DownloadDocument", "Admin", new { fileName = Model.Documents[item].FileName, assetId = Model.GuidId, contentType = Model.Documents[item].ContentType, title = Model.Documents[item].Title })">Click here to download file</a>
                                <br />
                                <div class="row">
                                    <div class="col-lg-12">
                                        <label style="font-weight: bold;">Title</label>
                                    </div>
                                    <div class="col-lg-12">
                                        @Html.TextBoxFor(s => Model.Documents[item].Title)
                                    </div>
                                    <div class="col-lg-12">
                                        <label style="font-weight: bold;">Description</label>
                                    </div>
                                    <div class="col-lg-12">
                                        @Html.TextAreaFor(s => Model.Documents[item].Description, 4, 10, null)
                                    </div>
                                </div>
                                @Html.HiddenFor(s => Model.Documents[item].Type)
                                @Html.HiddenFor(s => Model.Documents[item].TempAssetDocumentId)
                                @Html.HiddenFor(s => Model.Documents[item].Size)
                                @Html.HiddenFor(s => Model.Documents[item].ContentType)
                                @Html.HiddenFor(s => Model.Documents[item].GuidId)
                                @Html.HiddenFor(s => Model.Documents[item].FileName, new { @class = "docName" })
                                <input type='button' class='deleteDocUpload' value='Delete' data-button="@Model.Documents[item].FileName" onclick='docDelete(this)'/>
                            </div>
                            }
                        }
                    </div>
                </div>
                <div class="document-item">
                    <span style="width: 40%; float: left;">Plat Map:</span>
                    @Html.RadioButtonFor(s => s.availableplatMap, "false", new { onchange = "hide('platMap')" })
                    Not Available without LOI
                @Html.RadioButtonFor(s => s.availableplatMap, "true", new { onchange = "show('platMap')" })
                    Available
                @if (Model.availableplatMap)
                {
                    <a onclick="show('platMap')" style="margin-left: 15px;">View Document(s)</a>
                }
                    <div id="platMap" style="display: none;" class="document-item-expanded">
                        <div class="docSetup" style="width: 100%">
                            <a onclick="hide('platMap')" style="text-align: right; margin-left: 550px;"><span class="glyphicon glyphicon-remove"></span></a>
                            <h4 style="margin-top: 0px;">Upload New Document</h4>
                            <div class="row">
                                <div class="col-lg-12">
                                    <label>Title</label>
                                </div>
                                <div class="col-lg-12">
                                    <input type="text" id="pmTitle" value="Plat Map" />
                                </div>
                                <div class="col-lg-12">
                                    <label>Description</label>
                                </div>
                                <div class="col-lg-12">
                                    <textarea cols="10" rows="4" id="pmDescription"></textarea>
                                </div>
                                <div class="col-lg-12">
                                    <input type="file" data-type="@((int)Inview.Epi.EpiFund.Domain.Enum.AssetDocumentType.PlatMap)" id="pm" />
                                </div>
                            </div>
                        </div>
                        @for (int item = 0; item < Model.Documents.Count; item++)
                        {
                            if (Model.Documents[item].Type == (int)Inview.Epi.EpiFund.Domain.Enum.AssetDocumentType.PlatMap)
                            {
                            <div class="docPreviewDiv">
                                <a target='_blank' href="@Url.Action("DownloadDocument", "Admin", new { fileName = Model.Documents[item].FileName, assetId = Model.GuidId, contentType = Model.Documents[item].ContentType, title = Model.Documents[item].Title })">Click here to download file</a>
                                <br />
                                <div class="row">
                                    <div class="col-lg-12">
                                        <label style="font-weight: bold;">Title</label>
                                    </div>
                                    <div class="col-lg-12">
                                        @Html.TextBoxFor(s => Model.Documents[item].Title)
                                    </div>
                                    <div class="col-lg-12">
                                        <label style="font-weight: bold;">Description</label>
                                    </div>
                                    <div class="col-lg-12">
                                        @Html.TextAreaFor(s => Model.Documents[item].Description, 4, 10, null)
                                    </div>
                                </div>
                                @Html.HiddenFor(s => Model.Documents[item].Type)
                                @Html.HiddenFor(s => Model.Documents[item].TempAssetDocumentId)
                                @Html.HiddenFor(s => Model.Documents[item].Size)
                                @Html.HiddenFor(s => Model.Documents[item].ContentType)
                                @Html.HiddenFor(s => Model.Documents[item].GuidId)
                                @Html.HiddenFor(s => Model.Documents[item].FileName, new { @class = "docName" })
                                <input type='button' class='deleteDocUpload' value='Delete' data-button="@Model.Documents[item].FileName" onclick='docDelete(this)'/>
                            </div>
                            }
                        }
                    </div>
                </div>
                <div class="document-item">
                    <span style="width: 40%; float: left;">Aerial Map:</span>
                    @Html.RadioButtonFor(s => s.availablearialMap, "false", new { onchange = "hide('arialMap')" })
                    Not Available without LOI
                @Html.RadioButtonFor(s => s.availablearialMap, "true", new { onchange = "show('arialMap')" })
                    Available
                @if (Model.availablearialMap)
                {
                    <a onclick="show('arialMap')" style="margin-left: 15px;">View Document(s)</a>
                }
                    <div id="arialMap" style="display: none;" class="document-item-expanded">
                        <div class="docSetup" style="width: 100%">
                            <a onclick="hide('arialMap')" style="text-align: right; margin-left: 550px;"><span class="glyphicon glyphicon-remove"></span></a>
                            <h4 style="margin-top: 0px;">Upload New Document</h4>
                            <div class="row">
                                <div class="col-lg-12">
                                    <label>Title</label>
                                </div>
                                <div class="col-lg-12">
                                    <input type="text" id="amTitle" value="Aerial Map" />
                                </div>
                                <div class="col-lg-12">
                                    <label>Description</label>
                                </div>
                                <div class="col-lg-12">
                                    <textarea cols="10" rows="4" id="amDescription"></textarea>
                                </div>
                                <div class="col-lg-12">
                                    <input type="file" data-type="@((int)Inview.Epi.EpiFund.Domain.Enum.AssetDocumentType.ArialMap)" id="am" />
                                </div>
                            </div>
                        </div>
                        @for (int item = 0; item < Model.Documents.Count; item++)
                        {
                            if (Model.Documents[item].Type == (int)Inview.Epi.EpiFund.Domain.Enum.AssetDocumentType.ArialMap)
                            {
                            <div class="docPreviewDiv">
                                <a target='_blank' href="@Url.Action("DownloadDocument", "Admin", new { fileName = Model.Documents[item].FileName, assetId = Model.GuidId, contentType = Model.Documents[item].ContentType, title = Model.Documents[item].Title })">Click here to download file</a>
                                <br />
                                <div class="row">
                                    <div class="col-lg-12">
                                        <label style="font-weight: bold;">Title</label>
                                    </div>
                                    <div class="col-lg-12">
                                        @Html.TextBoxFor(s => Model.Documents[item].Title)
                                    </div>
                                    <div class="col-lg-12">
                                        <label style="font-weight: bold;">Description</label>
                                    </div>
                                    <div class="col-lg-12">
                                        @Html.TextAreaFor(s => Model.Documents[item].Description, 4, 10, null)
                                    </div>
                                </div>
                                @Html.HiddenFor(s => Model.Documents[item].Type)
                                @Html.HiddenFor(s => Model.Documents[item].TempAssetDocumentId)
                                @Html.HiddenFor(s => Model.Documents[item].Size)
                                @Html.HiddenFor(s => Model.Documents[item].ContentType)
                                @Html.HiddenFor(s => Model.Documents[item].GuidId)
                                @Html.HiddenFor(s => Model.Documents[item].FileName, new { @class = "docName" })
                                <input type='button' class='deleteDocUpload' value='Delete' data-button="@Model.Documents[item].FileName" onclick='docDelete(this)'/>
                            </div>
                            }
                        }
                    </div>
                </div>
                <div class="document-item">
                    <span style="width: 40%; float: left;">Original Appraisal:</span>
                    @Html.RadioButtonFor(s => s.availableoriginalAppraisal, "false", new { onchange = "hide('originalAppraisal')" })
                    Not Available without LOI
                @Html.RadioButtonFor(s => s.availableoriginalAppraisal, "true", new { onchange = "show('originalAppraisal')" })
                    Available
                @if (Model.availableoriginalAppraisal)
                {
                    <a onclick="show('originalAppraisal')" style="margin-left: 15px;">View Document(s)</a>
                }
                    <div id="originalAppraisal" style="display: none;" class="document-item-expanded">
                        <div class="docSetup" style="width: 100%">
                            <a onclick="hide('originalAppraisal')" style="text-align: right; margin-left: 550px;"><span class="glyphicon glyphicon-remove"></span></a>
                            <h4 style="margin-top: 0px;">Upload New Document</h4>
                            <div class="row">
                                <div class="col-lg-12">
                                    <label>Title</label>
                                </div>
                                <div class="col-lg-12">
                                    <input type="text" id="oaTitle" value="Original Appraisal" />
                                </div>
                                <div class="col-lg-12">
                                    <label>Description</label>
                                </div>
                                <div class="col-lg-12">
                                    <textarea cols="10" rows="4" id="oaDescription"></textarea>
                                </div>
                                <div class="col-lg-12">
                                    <input type="file" data-type="@((int)Inview.Epi.EpiFund.Domain.Enum.AssetDocumentType.OriginalAppraisal)" id="oa" />
                                </div>
                            </div>
                        </div>
                        @for (int item = 0; item < Model.Documents.Count; item++)
                        {
                            if (Model.Documents[item].Type == (int)Inview.Epi.EpiFund.Domain.Enum.AssetDocumentType.OriginalAppraisal)
                            {
                            <div class="docPreviewDiv">
                                <a target='_blank' href="@Url.Action("DownloadDocument", "Admin", new { fileName = Model.Documents[item].FileName, assetId = Model.GuidId, contentType = Model.Documents[item].ContentType, title = Model.Documents[item].Title })">Click here to download file</a>
                                <br />
                                <div class="row">
                                    <div class="col-lg-12">
                                        <label style="font-weight: bold;">Title</label>
                                    </div>
                                    <div class="col-lg-12">
                                        @Html.TextBoxFor(s => Model.Documents[item].Title)
                                    </div>
                                    <div class="col-lg-12">
                                        <label style="font-weight: bold;">Description</label>
                                    </div>
                                    <div class="col-lg-12">
                                        @Html.TextAreaFor(s => Model.Documents[item].Description, 4, 10, null)
                                    </div>
                                </div>
                                @Html.HiddenFor(s => Model.Documents[item].Type)
                                @Html.HiddenFor(s => Model.Documents[item].TempAssetDocumentId)
                                @Html.HiddenFor(s => Model.Documents[item].Size)
                                @Html.HiddenFor(s => Model.Documents[item].ContentType)
                                @Html.HiddenFor(s => Model.Documents[item].GuidId)
                                @Html.HiddenFor(s => Model.Documents[item].FileName, new { @class = "docName" })
                                <input type='button' class='deleteDocUpload' value='Delete' data-button="@Model.Documents[item].FileName" onclick='docDelete(this)'/>
                            </div>
                            }
                        }
                    </div>
                </div>
                <div class="document-item">
                    <span style="width: 40%; float: left;">Current Appraisal:</span>
                    @Html.RadioButtonFor(s => s.availablecurrentAppraisal, "false", new { onchange = "hide('currentAppraisal')" })
                    Not Available without LOI
                @Html.RadioButtonFor(s => s.availablecurrentAppraisal, "true", new { onchange = "show('currentAppraisal')" })
                    Available
                @if (Model.availablecurrentAppraisal)
                {
                    <a onclick="show('currentAppraisal')" style="margin-left: 15px;">View Document(s)</a>
                }
                    <div id="currentAppraisal" style="display: none;" class="document-item-expanded">
                        <div class="docSetup" style="width: 100%">
                            <a onclick="hide('currentAppraisal')" style="text-align: right; margin-left: 550px;"><span class="glyphicon glyphicon-remove"></span></a>
                            <h4 style="margin-top: 0px;">Upload New Document</h4>
                            <div class="row">
                                <div class="col-lg-12">
                                    <label>Title</label>
                                </div>
                                <div class="col-lg-12">
                                    <input type="text" id="caTitle" value="Current Appraisal" />
                                </div>
                                <div class="col-lg-12">
                                    <label>Description</label>
                                </div>
                                <div class="col-lg-12">
                                    <textarea cols="10" rows="4" id="caDescription"></textarea>
                                </div>
                                <div class="col-lg-12">
                                    <input type="file" data-type="@((int)Inview.Epi.EpiFund.Domain.Enum.AssetDocumentType.CurrentAppraisal)" id="ca" />
                                </div>
                            </div>
                        </div>
                        @for (int item = 0; item < Model.Documents.Count; item++)
                        {
                            if (Model.Documents[item].Type == (int)Inview.Epi.EpiFund.Domain.Enum.AssetDocumentType.CurrentAppraisal)
                            {
                            <div class="docPreviewDiv">
                                <a target='_blank' href="@Url.Action("DownloadDocument", "Admin", new { fileName = Model.Documents[item].FileName, assetId = Model.GuidId, contentType = Model.Documents[item].ContentType, title = Model.Documents[item].Title })">Click here to download file</a>
                                <br />
                                <div class="row">
                                    <div class="col-lg-12">
                                        <label style="font-weight: bold;">Title</label>
                                    </div>
                                    <div class="col-lg-12">
                                        @Html.TextBoxFor(s => Model.Documents[item].Title)
                                    </div>
                                    <div class="col-lg-12">
                                        <label style="font-weight: bold;">Description</label>
                                    </div>
                                    <div class="col-lg-12">
                                        @Html.TextAreaFor(s => Model.Documents[item].Description, 4, 10, null)
                                    </div>
                                </div>
                                @Html.HiddenFor(s => Model.Documents[item].Type)
                                @Html.HiddenFor(s => Model.Documents[item].TempAssetDocumentId)
                                @Html.HiddenFor(s => Model.Documents[item].Size)
                                @Html.HiddenFor(s => Model.Documents[item].ContentType)
                                @Html.HiddenFor(s => Model.Documents[item].GuidId)
                                @Html.HiddenFor(s => Model.Documents[item].FileName, new { @class = "docName" })
                                <input type='button' class='deleteDocUpload' value='Delete' data-button="@Model.Documents[item].FileName" onclick='docDelete(this)'/>
                            </div>
                            }
                        }
                    </div>
                </div>
                <div class="document-item">
                    <span style="width: 40%; float: left;">Marketing Brochure:</span>
                    @Html.RadioButtonFor(s => s.availableListingAgentMarketingBrochure, "false", new { onchange = "hide('marketingBrochure')" })
                    Not Available without LOI
                @Html.RadioButtonFor(s => s.availableListingAgentMarketingBrochure, "true", new { onchange = "show('marketingBrochure')" })
                    Available
                @if (Model.availableListingAgentMarketingBrochure)
                {
                    <a onclick="show('marketingBrochure')" style="margin-left: 15px;">View Document(s)</a>
                }
                    <div id="marketingBrochure" style="display: none;" class="document-item-expanded">
                        <div class="docSetup" style="width: 100%">
                            <a onclick="hide('currentAppraisal')" style="text-align: right; margin-left: 550px;"><span class="glyphicon glyphicon-remove"></span></a>
                            <h4 style="margin-top: 0px;">Upload New Document</h4>
                            <div class="row">
                                <div class="col-lg-12">
                                    <label>Title</label>
                                </div>
                                <div class="col-lg-12">
                                    <input type="text" id="mbTitle" value="Listing Agent Marketing Brochure" />
                                </div>
                                <div class="col-lg-12">
                                    <label>Description</label>
                                </div>
                                <div class="col-lg-12">
                                    <textarea cols="10" rows="4" id="mbDescription"></textarea>
                                </div>
                                <div class="col-lg-12">
                                    <input type="file" data-type="@((int)Inview.Epi.EpiFund.Domain.Enum.AssetDocumentType.ListingAgentMarketingBrochure)" id="mb" />
                                </div>
                            </div>
                        </div>
                        @for (int item = 0; item < Model.Documents.Count; item++)
                        {
                            if (Model.Documents[item].Type == (int)Inview.Epi.EpiFund.Domain.Enum.AssetDocumentType.ListingAgentMarketingBrochure)
                            {
                            <div class="docPreviewDiv">
                                <a target='_blank' href="@Url.Action("DownloadDocument", "Admin", new { fileName = Model.Documents[item].FileName, assetId = Model.GuidId, contentType = Model.Documents[item].ContentType, title = Model.Documents[item].Title })">Click here to download file</a>
                                <br />
                                <div class="row">
                                    <div class="col-lg-12">
                                        <label style="font-weight: bold;">Title</label>
                                    </div>
                                    <div class="col-lg-12">
                                        @Html.TextBoxFor(s => Model.Documents[item].Title)
                                    </div>
                                    <div class="col-lg-12">
                                        <label style="font-weight: bold;">Description</label>
                                    </div>
                                    <div class="col-lg-12">
                                        @Html.TextAreaFor(s => Model.Documents[item].Description, 4, 10, null)
                                    </div>
                                </div>
                                @Html.HiddenFor(s => Model.Documents[item].Type)
                                @Html.HiddenFor(s => Model.Documents[item].TempAssetDocumentId)
                                @Html.HiddenFor(s => Model.Documents[item].Size)
                                @Html.HiddenFor(s => Model.Documents[item].ContentType)
                                @Html.HiddenFor(s => Model.Documents[item].GuidId)
                                @Html.HiddenFor(s => Model.Documents[item].FileName, new { @class = "docName" })
                                <input type='button' class='deleteDocUpload' value='Delete' data-button="@Model.Documents[item].FileName" onclick='docDelete(this)'/>
                            </div>
                            }
                        }
                    </div>
                </div>
                <div class="document-item">
                    <span style="width: 40%; float: left;">Other:</span>
                    @Html.RadioButtonFor(s => s.availableOtherDocument, "false", new { onchange = "hide('otherDocuments')" })
                    Not Available without LOI
                @Html.RadioButtonFor(s => s.availableOtherDocument, "true", new { onchange = "show('otherDocuments')" })
                    Available
                @if (Model.availableOtherDocument)
                {
                    <a onclick="show('otherDocuments')" style="margin-left: 15px;">View Document(s)</a>
                }
                    <div id="otherDocuments" style="display: none;" class="document-item-expanded">
                        <div class="docSetup" style="width: 100%">
                            <a onclick="hide('currentAppraisal')" style="text-align: right; margin-left: 550px;"><span class="glyphicon glyphicon-remove"></span></a>
                            <h4 style="margin-top: 0px;">Upload New Document</h4>
                            <div class="row">
                                <div class="col-lg-12">
                                    <label>Title</label>
                                </div>
                                <div class="col-lg-12">
                                    <input type="text" id="odTitle" value="Other Document" />
                                </div>
                                <div class="col-lg-12">
                                    <label>Description</label>
                                </div>
                                <div class="col-lg-12">
                                    <textarea cols="10" rows="4" id="odDescription"></textarea>
                                </div>
                                <div class="col-lg-12">
                                    <input type="file" data-type="@((int)Inview.Epi.EpiFund.Domain.Enum.AssetDocumentType.Other)" id="od" />
                                </div>
                            </div>
                        </div>
                        @for (int item = 0; item < Model.Documents.Count; item++)
                        {
                            if (Model.Documents[item].Type == (int)Inview.Epi.EpiFund.Domain.Enum.AssetDocumentType.Other)
                            {
                            <div class="docPreviewDiv">
                                <a target='_blank' href="@Url.Action("DownloadDocument", "Admin", new { fileName = Model.Documents[item].FileName, assetId = Model.GuidId, contentType = Model.Documents[item].ContentType, title = Model.Documents[item].Title })">Click here to download file</a>
                                <br />
                                <div class="row">
                                    <div class="col-lg-12">
                                        <label style="font-weight: bold;">Title</label>
                                    </div>
                                    <div class="col-lg-12">
                                        @Html.TextBoxFor(s => Model.Documents[item].Title)
                                    </div>
                                    <div class="col-lg-12">
                                        <label style="font-weight: bold;">Description</label>
                                    </div>
                                    <div class="col-lg-12">
                                        @Html.TextAreaFor(s => Model.Documents[item].Description, 4, 10, null)
                                    </div>
                                </div>
                                @Html.HiddenFor(s => Model.Documents[item].Type)
                                @Html.HiddenFor(s => Model.Documents[item].TempAssetDocumentId)
                                @Html.HiddenFor(s => Model.Documents[item].Size)
                                @Html.HiddenFor(s => Model.Documents[item].ContentType)
                                @Html.HiddenFor(s => Model.Documents[item].GuidId)
                                @Html.HiddenFor(s => Model.Documents[item].FileName, new { @class = "docName" })
                                <input type='button' class='deleteDocUpload' value='Delete' data-button="@Model.Documents[item].FileName" onclick='docDelete(this)'/>
                            </div>
                            }
                        }
                    </div>
                </div>
            </div>
        </div>
        <hr />
        <h3>Videos</h3>
        <div class="row">
            <div class="col-lg-12">
                <label for="videoUploader">Upload Video:</label>
                <br />
                <em>Video must be in .mp4 format and must not exceed 100MB in size. Note: Only browsers with Internet Explorer 9+, Chrome 6+, Safari 5+ will be able to view these videos.</em>
                <br />
                <br />
            </div>
        </div>
        <div class="row">
            <div class="col-lg-12">
                <input type="file" name="videoFile" id="videoUploader" style="width: 100%;" />
            </div>
            <hr />
        </div>
        <br />
        <div id="videosPreviewer" data-videocount="@Model.Videos.Count">
            @for (int item = 0; item < Model.Videos.Count; item++)
            {       
                <div class="videoPreviewDiv" style="display: inline-block;">
                    @Html.Video(new VideoOptions()
               {
                   Mp4Url = @Url.Action("GetVideo", new { id = Model.Videos[item].GuidId, filepath = Model.Videos[item].FilePath }),
                   HasPoster = false,
                   HasDownloadLink = true,
                   VideoNotSupported = "<p>No video playback capabilities, please download the video below</p>",
                   TrackEnable = false
               }, new { @class = "video-responsive", id = "video" + item })
                    @Html.HiddenFor(s => Model.Videos[item].FilePath, new { @class = "videoName" })
                    @Html.HiddenFor(s => Model.Videos[item].GuidId)
                    <input type='button' class='deleteImgUpload' value='Delete' data-button="@Model.Videos[item].FilePath" onclick='videoDelete(this)'/>
                </div>
                <hr />
                <br />
            }
            <br />
        </div>
        <hr />
    
        <input type="submit" class="btn btn-primary" value="Submit">
        @Html.DropDownListFor(s => s.PagePropertyTypes, Model.PagePropertyTypes as IEnumerable<SelectListItem>, new { style = "display:none;" })
        <input type="hidden" value="@(Model.GuidId)" data-asset="@(Model.GuidId)" id="GuidId" name="GuidId"/>
    }

</div>

@Html.Partial("_NoteJavascript")

<script>

    $(document).ready(function () {
        $("input.formatNumber").each(function (index) {
            $(this).val(addCommas($(this).val(), true));
            $(this).on("input", null, null, function () {
                $(this).val(addCommas($(this).val(), true));
            });
        });
    });
</script>
