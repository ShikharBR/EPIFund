@model Inview.Epi.EpiFund.Domain.ViewModel.PaperCommercialAssetViewModel
@using MVCVideo
@using Inview.Epi.EpiFund.Domain.Enum
@using Inview.Epi.EpiFund.Domain.Helpers

<style>
    .field-validation-error
    {
        color: red;
        font-weight: bold;
    }

    .layer1
    {
        margin: 0;
        padding: 0;
        width: 300px;
    }

    .detailsHeading
    {
        margin: 1px;
        color: #000;
        padding: 3px 10px;
        cursor: pointer;
        position: relative;
        background-color: #E2DDD2;
    }

    .detailsContent
    {
        padding: 5px 10px;
        background-color: #fafafa;
    }

    .progressbar
    {
        width: 300px;
        height: 20px;
        background-color: #F1FBED;
    }

    .progressbarlabel
    {
        width: 300px;
        height: 20px;
        position: absolute;
        text-align: center;
        font-size: smaller;
    }

    .ui-progressbar .ui-progressbar-value
    {
        height: 20px;
    }

    #documents .document-item-expanded
    {
        background-color: transparent;
        border: 0;
        padding: 0;
        margin: 0;
    }

    #documents .docPreviewDiv.row
    {
        background-color: #f7f7f7;
        width: 100%;
        margin-left: 0px;
        padding: 10px 0;
        margin-bottom: 5px;
        border: 1px solid #eee;
        border-radius: 4px;
    }

    #uploadDocId .docPreviewDiv.row
    {
        background-color: #F1FBED;
        border-color: #d6e9c6;
        margin-top: 20px;
    }

    #documents .docPreviewDiv.row .col-sm-2
    {
        text-align: right;
    }

    #documents .deleteDocUpload
    {
        background-color: transparent;
        border: 0;
        font-size: 10px;
        color: #428bca;
        padding: 0;
        margin: 0;
        width: auto;
    }

        #documents .deleteDocUpload:hover, #docManager .deleteDocUpload:focus
        {
            color: #2a6496;
        }

    #documents a
    {
        display: block;
    }

    #documents .description
    {
        color: #888;
        font-weight: normal;
        font-style: italic;
        font-size: 10px;
        display: block;
        margin: 0;
    }

    .smallerEditor
    {
        width: 100px !important;
    }

    .input-disabled
    {
        background-color: #EBEBE4;
        border: 1px solid #ABADB3;
        padding: 2px 1px;
    }
    .spaceLab
    {
        margin-right: 10px;
    }

    .spaceText
    {
        margin-left: 10px;
    }

</style>

<div class="paper-commercial-asset">

    @using (Html.BeginForm("EpiFundBuysPaper", "Home", FormMethod.Post))
    {
        <div id="section1">
            <h3>Contact/Registration Information</h3>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.NameOfPrincipal, new { @class = "control-label" })
                        <span style="color: red;">*</span>
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.TextBoxFor(s => s.NameOfPrincipal, new { @class = "control-label", @onchange = "updateFullName()" })
                        @Html.ValidationMessageFor(model => model.NameOfPrincipal)
                    </div>
                </div>
            </div>
            <div class="row"> 
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.NameOfCoPrincipal, new { @class = "control-label" })<span style="color: red;">*</span> 
                    </div> 
                </div> 
                <div class="col-lg-6">   
                    <div class="input-group">
                        @Html.TextBoxFor(s => s.NameOfCoPrincipal, new { @class = "control-label", @onchange = "updateFullName()" })  
                        @Html.ValidationMessageFor(model => model.NameOfCoPrincipal)     
                    </div>   
                </div>    
            </div>  
            <div class="row">  
                <div class="col-lg-6">   
                    <div class="input-group"> 
                        @Html.LabelFor(s => s.CorporateName, new { @class = "control-label" })<span style="color: red;">*</span>
                        <i>This data field is for the Corporate Entity Name of Record that holds title to the Asset.  Please include the type of incorporation to the name (e.g., ABC Holdings LLC).</i>
                    </div> 
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.TextBoxFor(s => s.CorporateName, new { @class = "control-label" })
                        @Html.ValidationMessageFor(model => model.CorporateName)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.SelectedCorporateEntityType, new { @class = "control-label" })<span style="color: red;">*</span>
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.DropDownListFor(model => model.SelectedCorporateEntityType, Model.CorporateEntityTypes as IEnumerable<SelectListItem>, "---")
                        @Html.ValidationMessageFor(model => model.SelectedCorporateEntityType)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.CorporateTitle, new { @class = "control-label" })<span style="color: red;">*</span>
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.DropDownListFor(model => model.CorporateTitle, Model.CorporateTitles as IEnumerable<SelectListItem>, "---")
                        @Html.ValidationMessageFor(model => model.CorporateTitle)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.AcronymForCorporateEntity, new { @class = "control-label" })<span style="color: red;">*</span>
                        <i>Example: Acronym for US CRE online LLC is USC</i>
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.TextBoxFor(s => s.AcronymForCorporateEntity, new { @class = "control-label" })
                        @Html.ValidationMessageFor(model => model.AcronymForCorporateEntity)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.StateOfOriginCorporateEntity, new { @class = "control-label" })<span style="color: red;">*</span>
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.DropDownListFor(model => model.StateOfOriginCorporateEntity, Model.States as IEnumerable<SelectListItem>, "---")
                        @Html.ValidationMessageFor(model => model.StateOfOriginCorporateEntity)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.IsCertificateOfGoodStandingAvailable, new { @class = "control-label" })<span style="color: red;">*</span>
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.RadioButtonFor(s => s.IsCertificateOfGoodStandingAvailable, "true") Yes
                        @Html.RadioButtonFor(s => s.IsCertificateOfGoodStandingAvailable, "false") No
                        @Html.ValidationMessageFor(model => model.IsCertificateOfGoodStandingAvailable)
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(model => model.CorporateOwnershipOfficer)
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.EditorFor(model => model.CorporateOwnershipOfficer)
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.CorporateAddress1, new { @class = "control-label" })<span style="color: red;">*</span>
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.TextBoxFor(s => s.CorporateAddress1, new { @class = "control-label" })
                        @Html.ValidationMessageFor(model => model.CorporateAddress1)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.CorporateAddress2, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.TextBoxFor(s => s.CorporateAddress2, new { @class = "control-label" }) <br />
                        <em>(e.g., Suite 100, 10th Floor, Bldg 2, etc.)</em>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.City, new { @class = "control-label" })<span style="color: red;">*</span>
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.TextBoxFor(s => s.City, new { @class = "control-label" })
                        @Html.ValidationMessageFor(model => model.City)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.SelectedState, new { @class = "control-label" })<span style="color: red;">*</span>
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.DropDownListFor(model => model.SelectedState, Model.States as IEnumerable<SelectListItem>, "---")
                        @Html.ValidationMessageFor(model => model.SelectedState)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.Zip, new { @class = "control-label" })<span style="color: red;">*</span>
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.TextBoxFor(s => s.Zip, new { @class = "control-label" })
                        @Html.ValidationMessageFor(model => model.Zip)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.WorkPhone, new { @class = "control-label" })@*<span style="color: red;">*</span>*@
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.TextBoxFor(s => s.WorkPhone, new { @class = "control-label" })
                        @Html.ValidationMessageFor(model => model.WorkPhone)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.CellPhone, new { @class = "control-label" })<span style="color: red;">*</span>
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.TextBoxFor(s => s.CellPhone, new { @class = "control-label" })
                        @Html.ValidationMessageFor(model => model.CellPhone)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.Fax, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.TextBoxFor(s => s.Fax, new { @class = "control-label" })
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.EmailAddress, new { @class = "control-label" })<span style="color: red;">*</span>
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.TextBoxFor(s => s.EmailAddress, new { @class = "control-label" })
                        @Html.ValidationMessageFor(model => model.EmailAddress)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.SelectedPreferredMethods, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.ListBoxFor(model => model.SelectedPreferredMethods, Model.PreferredMethods as IEnumerable<SelectListItem>, "---")
                        <em>To make multiple selections hold down your CONTROL key as you click a selection.</em>
                    </div>
                </div>
            </div>
            <div class="row" style="border: 0;">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.SelectedPreferredContactTime, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.ListBoxFor(model => model.SelectedPreferredContactTime, Model.PreferredContactTimes as IEnumerable<SelectListItem>, "---")
                        <em>To make multiple selections hold down your CONTROL key as you click a selection.</em>
                    </div>
                </div>
            </div>
            <hr />
        </div>
        
        <div id="section2">
            <h3>General Securing Property Information</h3>
            <div style="background-color: lightgrey; border: 1px solid #000; padding: 5px; margin-bottom: 5px;">
                <em>This CRE Mortgage Note Asset File database questionnaire is for privately held Mortgage Notes secured by Commercial Investment Real Property in the United States (e.g., Multi-Family, Retail Centers, Office Buildings and Complexes, Industrial, MHP, Medical Office, Mixed Use, Single Tenant, Commercial Service/Fuel Centers, Mini-Storage Facilities, etc.).  Portfolios of privately held Mortgage Notes secured by Single Family Residential assets are inventory not included in the questionnaire. 

                <br />
                    If you have more than one CRE Mortgage Note Asset you wish to create a USC Data File on, simply <<a>click</a>>
                the “Portfolio” button immediately below.
                </em>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.isPartofPort, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-lg-6"> 
                    <div class="input-group">
                        @Html.RadioButtonFor(model => model.isPartofPort, "true", new { onchange = "togglePortfolioSec(true)" }) Yes
                            @Html.RadioButtonFor(model => model.isPartofPort, "false", new { onchange = "togglePortfolioSec(false)" }) No
                    </div>
                </div>
            </div>
            
            <div id="portfolioDiv" style="display: none">
                <div class="row">
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.Label("Select from existing Portfolios")
                        </div>
                    </div>
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.DropDownListFor(model => model.ExistingPFName,(ViewBag.PortfolioList as IEnumerable<SelectListItem>), "---")
                        </div>
                    </div>

                </div>

                <br />
                @Html.CheckBox("isNewPF", new { @onclick = "OnChangeNewPF (this)" }) Create a new Portfolio?
                            <div id="newPFDiv" style="display: none">
                                <div class="row">
                                    <div class="col-lg-6">
                                        <div class="input-group">
                                            @Html.Label("Portfolio Name")
                                        </div>
                                    </div>
                                    <div class="col-lg-6">
                                        <div class="input-group">
                                            @Html.TextBoxFor(s => s.NewPfName, new { @class = "control-label"})
                                            <em id="errorMsg" style="display: none">This Portfolio already exists</em>
                                        </div>
                                    </div>

                                </div>
                            </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.TypeOfProperty, new { @class = "control-label" })<span style="color: red;">*</span>
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.DropDownListFor(model => model.TypeOfProperty, Model.PropertyTypes as IEnumerable<SelectListItem>, "---")
                        @Html.ValidationMessageFor(model => model.TypeOfProperty)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.PropertyCounty, new { @class = "control-label" })<span style="color: red;">*</span>
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.TextBoxFor(s => s.PropertyCounty, new { @class = "control-label" })
                        @Html.ValidationMessageFor(model => model.PropertyCounty)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.TaxAssessorNumber, new { @class = "control-label" })<span style="color: red;">*</span>
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.TextBoxFor(s => s.TaxAssessorNumber, new { @class = "control-label" })
                        @Html.ValidationMessageFor(model => model.TaxAssessorNumber)
                    </div>
                </div>
            </div>
            <input type="button" id="addTaxAssessorNumber" value="Add Tax Assessor Number" />
            <input type="button" id="remTaxAssessorNumber" value="Remove Tax Assessor Number" />
            <div class="row" id="additionalAssessor" style="display: none;">
                <div class="row">
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.LabelFor(s => s.TaxAssessorNumberOther, new { @class = "control-label" })
                        </div>
                    </div>
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.TextBoxFor(s => s.TaxAssessorNumberOther, new { @class = "control-label" })
                            @Html.ValidationMessageFor(s => s.TaxAssessorNumberOther)
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(model => model.OccupancyType) <span style="color: red;">*</span>
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.EnumDropDownList("OccupancyType", Model.OccupancyType, "---")
                        @Html.ValidationMessageFor(model => model.OccupancyType)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(model => model.YearBuilt) <span style="color: red;">*</span>
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.EditorFor(model => model.YearBuilt, new { htmlAttributes = new { @class = "smallerEditor" } })  <span style="color: red; font-size: smaller; font-style: italic">Must be 1700 or higher</span>
                        @Html.ValidationMessageFor(model => model.YearBuilt)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(model => model.PropLastUpdated) <span style="color: red;">*</span>
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                         @if(Model.isPropUpdateUnknown)
                        {
                            @Html.EditorFor(model => model.PropLastUpdated, new { htmlAttributes = new { @class = "smallerEditor input-disabled", @style="margin-right: 10px;" } })
                            @Html.CheckBoxFor(m => m.isPropUpdateUnknown, new { @checked = "checked", @id ="chkUpdUnk", @class="input-disabled" });<label>Unknown</label>
                        }
                        else
                        {
                            @Html.EditorFor(model => model.PropLastUpdated, new { htmlAttributes = new { @class = "smallerEditor" , @style="margin-right: 10px;"} })
                            @Html.CheckBoxFor(m => m.isPropUpdateUnknown, new { @id = "chkUpdUnk" });<label>Unknown</label>
                        }
                        @Html.ValidationMessageFor(model => model.PropLastUpdated)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.RenovatedByOwner, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.RadioButtonFor(s => s.RenovatedByOwner, "true", new { onchange = "toggleRenovationsSection(true)" }) Yes
                        @Html.RadioButtonFor(s => s.RenovatedByOwner, "false", new { onchange = "toggleRenovationsSection(false)" }) No
                    </div>
                </div>
            </div>
            <div id="renovationsDetails" style="display: none;">
                <div class="row">
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.LabelFor(s => s.RenovationYear, new { @class = "control-label" })
                        </div>
                    </div>
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.DropDownListFor(model => model.RenovationYear, Model.RenovationYears as IEnumerable<SelectListItem>, "---")
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.LabelFor(s => s.RenovationBudget, new { @class = "control-label" })
                        </div>
                    </div>
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.TextBoxFor(s => s.RenovationBudget, new { @class = "control-label formatNumber" }) <br />
                            <em>Please enter a number for the allocated budget (e.g., 100000, 1000000, 1500000, etc.).</em>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.LabelFor(s => s.RecentUpgradesRenovations, new { @class = "control-label" })
                        </div>
                    </div>
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.TextBoxFor(s => s.RecentUpgradesRenovations, new { @class = "control-label" })
                        </div>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(model => model.BuildingsCount)
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.TextBoxFor(model => model.BuildingsCount, new { @class = "formatNumber" })
                        @Html.ValidationMessageFor(model => model.BuildingsCount)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(model => model.ProjectName) <span style="color: red;">*</span>
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @if (Model.isPropUpdateUnknown)
                        {
                            @Html.TextBoxFor(s => s.ProjectName, new { @class = "input-disabled" , @style="margin-right: 10px;"})
                            @Html.CheckBoxFor(m => m.isProjNameUnknown, new { @checked = "checked", @id = "chkNameNone", @class = "input-disabled" });<label>None</label>
                        }
                        else
                        {
                            @Html.TextBoxFor(s => s.ProjectName, new { @style="margin-right: 10px;" })
                            @Html.CheckBoxFor(m => m.isProjNameUnknown, new { @id = "chkNameNone" });<label>None</label>
                        }
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.PropertyAddress, new { @class = "control-label" })<span style="color: red;">*</span>
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.TextBoxFor(s => s.PropertyAddress, new { @class = "control-label" })
                        @Html.ValidationMessageFor(model => model.PropertyAddress)
                    </div>
                </div>
            </div>
        @*    <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.PropertyAddress2, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.TextBoxFor(s => s.PropertyAddress2, new { @class = "control-label" })
                        <br />
                        <em>Some Property will have multiple street address (e.g., 4500, 4600, & 4700 East Mountain Avenue).  Enter the 1st or Main or Mailing Address in [Property Address 1] (e.g., 4500 E. Mountain Ave), and the additional Property Addresses in [Property Address 2] (e.g., 4600 & 4700 E. Mountain Ave).</em>
                        @Html.ValidationMessageFor(model => model.PropertyAddress2)
                    </div>
                </div>
            </div>*@
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.PropertyCity, new { @class = "control-label" })<span style="color: red;">*</span>
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.TextBoxFor(s => s.PropertyCity, new { @class = "control-label" })
                        @Html.ValidationMessageFor(model => model.PropertyCity)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.PropertyState, new { @class = "control-label" })<span style="color: red;">*</span>
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.DropDownListFor(model => model.PropertyState, Model.States as IEnumerable<SelectListItem>, "---")
                        @Html.ValidationMessageFor(model => model.PropertyState)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.PropertyZip, new { @class = "control-label" })<span style="color: red;">*</span>
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.TextBoxFor(s => s.PropertyZip, new { @class = "control-label" })
                        @Html.ValidationMessageFor(model => model.PropertyZip)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.PropHoldTypeId, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.DropDownListFor(model => model.PropHoldTypeId, Model.PropHoldTypes as IEnumerable<SelectListItem>)
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(model => model.LotNumber)
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.EditorFor(model => model.LotNumber)
                        @Html.ValidationMessageFor(model => model.LotNumber)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(model => model.Subdivision)
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        
                        @Html.EditorFor(model => model.Subdivision, new { @style="margin-right: 10px;" })
                        <input type="checkbox" id="chkSubDiv" name="chkSubDiv" title="Metes & Bounds"  style="margin-left: 10px" />Meters & Bounds
                        @Html.ValidationMessageFor(model => model.Subdivision)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(model => model.TaxBookMap)
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.EditorFor(model => model.TaxBookMap)
                        @Html.ValidationMessageFor(model => model.TaxBookMap)
                    </div> 
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.LotSize, new { @class = "control-label" }) <span style="color: red;">*</span>
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.TextBoxFor(s => s.LotSize, new { @class = "control-label formatNumber" }) acres
                        @Html.ValidationMessageFor(model => model.LotSize)
                        <br />
                        <em>Enter data with two decimal points as follows: (ex) 1.23.  If the property’s lot size is less than one acre, enter as (ex) 0.23.</em>
                    </div>
                </div>
            </div>
            <hr />
        </div>
        
        <div id="propDetails">
            <h3>Property Details</h3>
            <div class="mfDiv">
                <div class="row">
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.LabelFor(model => Model.MFDetails)
                        </div>
                    </div>
                    <div class="col-lg-6">
                        <div class="input-group layer1">
                            @if (@ViewBag.MFArchCnt > 0)
                            {
                                <p class="detailsHeading"><b>MF Architecture</b>  @ViewBag.MFArchSel/@ViewBag.MFArchCnt <a style="float: right; color: black; font-size: medium">-</a> <a style="float: right; color: black; font-size: medium">/</a> <a style="float: right; color: black; font-size: medium">+</a></p>
                                <div class="detailsContent">@Html.CheckBoxList("MFDetails", ViewBag.MFArchPropertyDetails as IEnumerable<SelectListItem>)
                                </div> }
                            @if (@ViewBag.MFFComplCnt > 0)
                            {
                                <p class="detailsHeading"><b>Complex Features</b>  @ViewBag.MFComplSel/@ViewBag.MFFComplCnt <a style="float: right; color: black; font-size: medium">-</a> <a style="float: right; color: black; font-size: medium">/</a> <a style="float: right; color: black; font-size: medium">+</a></p>
                                <div class="detailsContent">@Html.CheckBoxList("MFDetails", ViewBag.MFComplPropertyDetails as IEnumerable<SelectListItem>)
                                </div> }
                            @if (@ViewBag.MFGenCnt > 0)
                            {
                                <p class="detailsHeading"><b>General Features</b>  @ViewBag.MFGenSel/@ViewBag.MFGenCnt <a style="float: right; color: black; font-size: medium">-</a> <a style="float: right; color: black; font-size: medium">/</a> <a style="float: right; color: black; font-size: medium">+</a></p>
                                <div class="detailsContent">@Html.CheckBoxList("MFDetails", ViewBag.MFGenPropertyDetails as IEnumerable<SelectListItem>)
                                </div> }
                            @if (@ViewBag.MFSecuCnt > 0)
                            {
                                <p class="detailsHeading"><b>Security Features</b> @ViewBag.MFSecuSel/@ViewBag.MFSecuCnt <a style="float: right; color: black; font-size: medium">-</a> <a style="float: right; color: black; font-size: medium">/</a> <a style="float: right; color: black; font-size: medium">+</a></p>
                                <div class="detailsContent">@Html.CheckBoxList("MFDetails", ViewBag.MFSecuPropertyDetails as IEnumerable<SelectListItem>)
                                </div> }
                            @if (@ViewBag.MFParkCnt > 0)
                            {
                                <p class="detailsHeading"><b>Parking Features</b>  @ViewBag.MFParkSel/@ViewBag.MFParkCnt <a style="float: right; color: black; font-size: medium">-</a> <a style="float: right; color: black; font-size: medium">/</a> <a style="float: right; color: black; font-size: medium">+</a></p>
                                <div class="detailsContent">@Html.CheckBoxList("MFDetails", ViewBag.MFParkingPropertyDetails as IEnumerable<SelectListItem>)
                                </div> }
                            @if (@ViewBag.MFConstCnt > 0)
                            {
                                <p class="detailsHeading"><b>Construction</b>  @ViewBag.MFConstSel/@ViewBag.MFConstCnt <a style="float: right; color: black; font-size: medium">-</a> <a style="float: right; color: black; font-size: medium">/</a> <a style="float: right; color: black; font-size: medium">+</a></p>
                                <div class="detailsContent">@Html.CheckBoxList("MFDetails", ViewBag.MFConstPropertyDetails as IEnumerable<SelectListItem>)
                                </div> }
                            @if (@ViewBag.MFHVACCnt > 0)
                            {
                                <p class="detailsHeading"><b>HVAC</b>  @ViewBag.MFHVACSel/@ViewBag.MFHVACCnt <a style="float: right; color: black; font-size: medium">-</a> <a style="float: right; color: black; font-size: medium">/</a> <a style="float: right; color: black; font-size: medium">+</a></p>
                                <div class="detailsContent">@Html.CheckBoxList("MFDetails", ViewBag.MFHVACPropertyDetails as IEnumerable<SelectListItem>)
                                </div> }
                            @if (@ViewBag.MFPropCnt > 0)
                            {
                                <p class="detailsHeading"><b>Property Updates</b>   @ViewBag.MFPropSel/@ViewBag.MFPropCnt <a style="float: right; color: black; font-size: medium">-</a> <a style="float: right; color: black; font-size: medium">/</a> <a style="float: right; color: black; font-size: medium">+</a></p>
                                <div class="detailsContent">@Html.CheckBoxList("MFDetails", ViewBag.MFPropPropertyDetails as IEnumerable<SelectListItem>)
                                </div>  }
                            @if (@ViewBag.MFRoofCnt > 0)
                            {
                                <p class="detailsHeading"><b>Roofing</b>   @ViewBag.MFRoofSel/@ViewBag.MFRoofCnt <a style="float: right; color: black; font-size: medium">-</a> <a style="float: right; color: black; font-size: medium">/</a> <a style="float: right; color: black; font-size: medium">+</a></p>
                                <div class="detailsContent">@Html.CheckBoxList("MFDetails", ViewBag.MFRoofPropertyDetails as IEnumerable<SelectListItem>)
                                </div> }
                            @if (@ViewBag.MFMFCnt > 0)
                            {
                                <p class="detailsHeading"><b>MF Unit</b>  @ViewBag.MFMFlSel/@ViewBag.MFMFCnt <a style="float: right; color: black; font-size: medium">-</a> <a style="float: right; color: black; font-size: medium">/</a> <a style="float: right; color: black; font-size: medium">+</a></p>
                                <div class="detailsContent">@Html.CheckBoxList("MFDetails", ViewBag.MFMFPropertyDetails as IEnumerable<SelectListItem>)
                                </div> }
                            @if (@ViewBag.MFKitcCnt > 0)
                            {
                                <p class="detailsHeading"><b>Kitchen Features</b>  @ViewBag.MFKitcSel/@ViewBag.MFKitcCnt <a style="float: right; color: black; font-size: medium">-</a> <a style="float: right; color: black; font-size: medium">/</a> <a style="float: right; color: black; font-size: medium">+</a></p>
                                <div class="detailsContent">@Html.CheckBoxList("MFDetails", ViewBag.MFKitcPropertyDetails as IEnumerable<SelectListItem>)
                                </div> }
                            @if (@ViewBag.MFIntCnt > 0)
                            {
                                <p class="detailsHeading"><b>Interior Upgrades</b>   @ViewBag.MFIntSel/@ViewBag.MFIntCnt <a style="float: right; color: black; font-size: medium">-</a> <a style="float: right; color: black; font-size: medium">/</a> <a style="float: right; color: black; font-size: medium">+</a></p>
                                <div class="detailsContent">@Html.CheckBoxList("MFDetails", ViewBag.MFIntPropertyDetails as IEnumerable<SelectListItem>)
                                </div> }
                            @if (@ViewBag.MFExtCnt > 0)
                            {
                                <p class="detailsHeading"><b>Exterior Upgrades</b>   @ViewBag.MFExtlSel/@ViewBag.MFExtCnt <a style="float: right; color: black; font-size: medium">-</a> <a style="float: right; color: black; font-size: medium">/</a> <a style="float: right; color: black; font-size: medium">+</a></p>
                                <div class="detailsContent">@Html.CheckBoxList("MFDetails", ViewBag.MFExtPropertyDetails as IEnumerable<SelectListItem>)
                                </div> }
                            @if (@ViewBag.MFTechCnt > 0)
                            {
                                <p class="detailsHeading"><b>Tech Features</b>  @ViewBag.MFTechSel/@ViewBag.MFTechCnt <a style="float: right; color: black; font-size: medium">-</a> <a style="float: right; color: black; font-size: medium">/</a> <a style="float: right; color: black; font-size: medium">+</a></p>
                                <div class="detailsContent">@Html.CheckBoxList("MFDetails", ViewBag.MFTechPropertyDetails as IEnumerable<SelectListItem>)
                                </div> }

                        </div>

                    </div>
                </div>
            </div>
            <div class="mhpDiv">
                <div class="row">
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.LabelFor(model => Model.MFDetails)
                        </div>
                    </div>
                    <div class="col-lg-6">
                        <div class="input-group layer1">
                            @if (@ViewBag.MHPMHPCnt > 0)
                            {
                                <p class="detailsHeading"><b>MHP</b> @ViewBag.MHPMHPSel/@ViewBag.MHPMHPCnt <a style="float: right; color: black; font-size: medium">-</a> <a style="float: right; color: black; font-size: medium">/</a> <a style="float: right; color: black; font-size: medium">+</a></p>
                                <div class="detailsContent">@Html.CheckBoxList("MHPDetails", ViewBag.MHPMHPPropertyDetails as IEnumerable<SelectListItem>)
                                </div> }
                            @if (@ViewBag.MHPArchCnt1 > 0)
                            {
                                <p class="detailsHeading"><b>MHP Architecture</b> @ViewBag.MHPArchSel1/@ViewBag.MHPArchCnt1 <a style="float: right; color: black; font-size: medium">-</a> <a style="float: right; color: black; font-size: medium">/</a> <a style="float: right; color: black; font-size: medium">+</a></p>
                                <div class="detailsContent">@Html.CheckBoxList("MHPDetails", ViewBag.MHPArchPropertyDetails1 as IEnumerable<SelectListItem>)
                                </div> }
@* @if(@ViewBag.MHPArchCnt > 0) 
                        {
                        <p class="detailsHeading"><b>MF Architecture</b>  @ViewBag.MHPArchSel/@ViewBag.MHPArchCnt <a style="float:right;color:black;font-size:medium">-</a> <a style="float:right;color:black;font-size:medium">/</a> <a style="float:right; color:black;font-size:medium">+</a></p>
                        <div class="detailsContent">@Html.CheckBoxList("MFDetails", ViewBag.MHPArchPropertyDetails as IEnumerable<SelectListItem>)
                        </div> }*@
                            @if (@ViewBag.MHPFComplCnt > 0)
                            {
                                <p class="detailsHeading"><b>Complex Features</b> @ViewBag.MHPComplSel/@ViewBag.MHPFComplCnt <a style="float: right; color: black; font-size: medium">-</a> <a style="float: right; color: black; font-size: medium">/</a> <a style="float: right; color: black; font-size: medium">+</a></p>
                                <div class="detailsContent">@Html.CheckBoxList("MHPDetails", ViewBag.MHPComplPropertyDetails as IEnumerable<SelectListItem>)
                                </div> }
                            @if (@ViewBag.MHPGenCnt > 0)
                            {
                                <p class="detailsHeading"><b>General Features</b> @ViewBag.MHPGenSel/@ViewBag.MHPGenCnt <a style="float: right; color: black; font-size: medium">-</a> <a style="float: right; color: black; font-size: medium">/</a> <a style="float: right; color: black; font-size: medium">+</a></p>
                                <div class="detailsContent">@Html.CheckBoxList("MHPDetails", ViewBag.MHPGenPropertyDetails as IEnumerable<SelectListItem>)
                                </div> }
                            @if (@ViewBag.MHPSecuCnt > 0)
                            {
                                <p class="detailsHeading"><b>Security Features</b> @ViewBag.MHPSecuSel/@ViewBag.MHPSecuCnt <a style="float: right; color: black; font-size: medium">-</a> <a style="float: right; color: black; font-size: medium">/</a> <a style="float: right; color: black; font-size: medium">+</a></p>
                                <div class="detailsContent">@Html.CheckBoxList("MHPDetails", ViewBag.MHPSecuPropertyDetails as IEnumerable<SelectListItem>)
                                </div> }
                            @if (@ViewBag.MHPParkCnt > 0)
                            {
                                <p class="detailsHeading"><b>Parking Features</b> @ViewBag.MHPParkSel/@ViewBag.MHPParkCnt <a style="float: right; color: black; font-size: medium">-</a> <a style="float: right; color: black; font-size: medium">/</a> <a style="float: right; color: black; font-size: medium">+</a></p>
                                <div class="detailsContent">@Html.CheckBoxList("MHPDetails", ViewBag.MHPParkingPropertyDetails as IEnumerable<SelectListItem>)
                                </div> }
                            @if (@ViewBag.MHPConstCnt > 0)
                            {
                                <p class="detailsHeading"><b>Construction</b>  @ViewBag.MHPConstSel/@ViewBag.MHPConstCnt <a style="float: right; color: black; font-size: medium">-</a> <a style="float: right; color: black; font-size: medium">/</a> <a style="float: right; color: black; font-size: medium">+</a></p>
                                <div class="detailsContent">@Html.CheckBoxList("MHPDetails", ViewBag.MHPConstPropertyDetails as IEnumerable<SelectListItem>)
                                </div> }
                            @if (@ViewBag.MHPHVACCnt > 0)
                            {
                                <p class="detailsHeading"><b>HVAC</b>  @ViewBag.MHPHVACSel/@ViewBag.MHPHVACCnt <a style="float: right; color: black; font-size: medium">-</a> <a style="float: right; color: black; font-size: medium">/</a> <a style="float: right; color: black; font-size: medium">+</a></p>
                                <div class="detailsContent">@Html.CheckBoxList("MHPDetails", ViewBag.MHPHVACPropertyDetails as IEnumerable<SelectListItem>)
                                </div> }
                            @if (@ViewBag.MHPPropCnt > 0)
                            {
                                <p class="detailsHeading"><b>Property Updates</b>  @ViewBag.MHPPropSel/@ViewBag.MHPPropCnt <a style="float: right; color: black; font-size: medium">-</a> <a style="float: right; color: black; font-size: medium">/</a> <a style="float: right; color: black; font-size: medium">+</a></p>
                                <div class="detailsContent">@Html.CheckBoxList("MHPDetails", ViewBag.MHPPropPropertyDetails as IEnumerable<SelectListItem>)
                                </div> }
                            @if (@ViewBag.MHPRoofCnt > 0)
                            {
                                <p class="detailsHeading"><b>Roofing</b> @ViewBag.MHPRoofSel/@ViewBag.MHPRoofCnt <a style="float: right; color: black; font-size: medium">-</a> <a style="float: right; color: black; font-size: medium">/</a> <a style="float: right; color: black; font-size: medium">+</a></p>
                                <div class="detailsContent">@Html.CheckBoxList("MHPDetails", ViewBag.MHPRoofPropertyDetails as IEnumerable<SelectListItem>)
                                </div> }
                            @if (@ViewBag.MHPMFCnt > 0)
                            {
                                <p class="detailsHeading"><b>MF Unit</b> @ViewBag.MHPMFlSel/@ViewBag.MHPMFCnt <a style="float: right; color: black; font-size: medium">-</a> <a style="float: right; color: black; font-size: medium">/</a> <a style="float: right; color: black; font-size: medium">+</a></p>
                                <div class="detailsContent">@Html.CheckBoxList("MHPDetails", ViewBag.MHPMFPropertyDetails as IEnumerable<SelectListItem>)
                                </div> }
                            @if (@ViewBag.MHPKitcCnt > 0)
                            {
                                <p class="detailsHeading"><b>Kitchen Features</b> @ViewBag.MHPKitcSel/@ViewBag.MHPKitcCnt <a style="float: right; color: black; font-size: medium">-</a> <a style="float: right; color: black; font-size: medium">/</a> <a style="float: right; color: black; font-size: medium">+</a></p>
                                <div class="detailsContent">@Html.CheckBoxList("MHPDetails", ViewBag.MHPKitcPropertyDetails as IEnumerable<SelectListItem>)
                                </div> }
                            @if (@ViewBag.MHPIntCnt > 0)
                            {
                                <p class="detailsHeading"><b>Interior Upgrades</b> @ViewBag.MHPIntSel/@ViewBag.MHPIntCnt <a style="float: right; color: black; font-size: medium">-</a> <a style="float: right; color: black; font-size: medium">/</a> <a style="float: right; color: black; font-size: medium">+</a></p>
                                <div class="detailsContent">@Html.CheckBoxList("MHPDetails", ViewBag.MHPIntPropertyDetails as IEnumerable<SelectListItem>)
                                </div> }
                            @if (@ViewBag.MHPExtCnt > 0)
                            {
                                <p class="detailsHeading"><b>Exterior Upgrades</b>  @ViewBag.MHPExtlSel/@ViewBag.MHPExtCnt <a style="float: right; color: black; font-size: medium">-</a> <a style="float: right; color: black; font-size: medium">/</a> <a style="float: right; color: black; font-size: medium">+</a></p> 
                                <div class="detailsContent">@Html.CheckBoxList("MHPDetails", ViewBag.MHPExtPropertyDetails as IEnumerable<SelectListItem>)
                                </div>}
                            @if (@ViewBag.MHPTechCnt > 0)
                            {
                                <p class="detailsHeading"><b>Tech Features</b>  @ViewBag.MHPTechSel/@ViewBag.MHPExtCnt <a style="float: right; color: black; font-size: medium">-</a> <a style="float: right; color: black; font-size: medium">/</a> <a style="float: right; color: black; font-size: medium">+</a></p>
                                <div class="detailsContent">@Html.CheckBoxList("MHPDetails", ViewBag.MHPTechPropertyDetails as IEnumerable<SelectListItem>)
                                </div> }

                        </div>

                    </div>
                </div>
            </div>
            <div class="commercialDiv1">
                <div class="row">
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.LabelFor(model => Model.PropertyDetails)
                        </div>
                    </div>
                    <div class="col-lg-6">
                        <div class="input-group layer1">
                            @if (@ViewBag.CommArchCnt > 0)
                            {
                                <p class="detailsHeading"><b>Architecture</b> @ViewBag.CommArchSel/@ViewBag.CommArchCnt <a style="float: right; color: black; font-size: medium">-</a> <a style="float: right; color: black; font-size: medium">/</a> <a style="float: right; color: black; font-size: medium">+</a></p>
                                <div class="detailsContent">@Html.CheckBoxList("PropertyDetails", ViewBag.CommArchPropertyDetails as IEnumerable<SelectListItem>)
                                </div>
                            }
                            @if (@ViewBag.CommComplCnt > 0)
                            {
                                <p class="detailsHeading"><b>Complex Features</b>  @ViewBag.CommComplSel/@ViewBag.CommComplCnt <a style="float: right; color: black; font-size: medium">-</a> <a style="float: right; color: black; font-size: medium">/</a> <a style="float: right; color: black; font-size: medium">+</a></p>
                                <div class="detailsContent">@Html.CheckBoxList("PropertyDetails", ViewBag.CommComplPropertyDetails as IEnumerable<SelectListItem>)
                                </div>
                            }
                            @if (@ViewBag.CommGenCnt > 0)
                            {
                                <p class="detailsHeading"><b>General Features</b>  @ViewBag.CommGenSel/@ViewBag.CommGenCnt <a style="float: right; color: black; font-size: medium">-</a> <a style="float: right; color: black; font-size: medium">/</a> <a style="float: right; color: black; font-size: medium">+</a></p>
                                <div class="detailsContent">@Html.CheckBoxList("PropertyDetails", ViewBag.CommGenPropertyDetails as IEnumerable<SelectListItem>)
                                </div> }
                            @if (@ViewBag.CommSecuCnt > 0)
                            {
                                <p class="detailsHeading"><b>Security Features</b> @ViewBag.CommSecuSel/@ViewBag.CommSecuCnt <a style="float: right; color: black; font-size: medium">-</a> <a style="float: right; color: black; font-size: medium">/</a> <a style="float: right; color: black; font-size: medium">+</a></p>
                                <div class="detailsContent">@Html.CheckBoxList("PropertyDetails", ViewBag.CommSecuPropertyDetails as IEnumerable<SelectListItem>)
                                </div> }
                            @if (@ViewBag.CommParkCnt > 0)
                            {
                                <p class="detailsHeading"><b>Parking Features</b>  @ViewBag.CommParkSel/@ViewBag.CommParkCnt <a style="float: right; color: black; font-size: medium">-</a> <a style="float: right; color: black; font-size: medium">/</a> <a style="float: right; color: black; font-size: medium">+</a></p>
                                <div class="detailsContent">@Html.CheckBoxList("PropertyDetails", ViewBag.CommParkingPropertyDetails as IEnumerable<SelectListItem>)
                                </div> }
                            @if (@ViewBag.CommConstCnt > 0)
                            {
                                <p class="detailsHeading"><b>Construction</b> @ViewBag.CommConstSel@ViewBag.CommConstCnt <a style="float: right; color: black; font-size: medium">-</a> <a style="float: right; color: black; font-size: medium">/</a> <a style="float: right; color: black; font-size: medium">+</a></p>
                                <div class="detailsContent">@Html.CheckBoxList("PropertyDetails", ViewBag.CommConstPropertyDetails as IEnumerable<SelectListItem>)
                                </div> }
                            @if (@ViewBag.CommHVACCnt > 0)
                            {
                                <p class="detailsHeading"><b>HVAC</b>  @ViewBag.CommHVACSel/@ViewBag.CommHVACCnt <a style="float: right; color: black; font-size: medium">-</a> <a style="float: right; color: black; font-size: medium">/</a> <a style="float: right; color: black; font-size: medium">+</a></p>
                                <div class="detailsContent">@Html.CheckBoxList("PropertyDetails", ViewBag.CommHVACPropertyDetails as IEnumerable<SelectListItem>)
                                </div> }
                            @if (@ViewBag.CommPropCnt > 0)
                            {
                                <p class="detailsHeading"><b>Property Updates</b>  @ViewBag.CommPropSel/@ViewBag.CommPropCnt <a style="float: right; color: black; font-size: medium">-</a> <a style="float: right; color: black; font-size: medium">/</a> <a style="float: right; color: black; font-size: medium">+</a></p>
                                <div class="detailsContent">@Html.CheckBoxList("PropertyDetails", ViewBag.CommPropPropertyDetails as IEnumerable<SelectListItem>)
                                </div> }
                            @if (@ViewBag.CommRoofCnt > 0)
                            {
                                <p class="detailsHeading"><b>Roofing</b>   @ViewBag.CommRoofSel/@ViewBag.CommRoofCnt <a style="float: right; color: black; font-size: medium">-</a> <a style="float: right; color: black; font-size: medium">/</a> <a style="float: right; color: black; font-size: medium">+</a></p>
                                <div class="detailsContent">@Html.CheckBoxList("PropertyDetails", ViewBag.CommRoofPropertyDetails as IEnumerable<SelectListItem>)
                                </div> }
                            @if (@ViewBag.CommMFCnt > 0)
                            {
                                <p class="detailsHeading"><b>MF Unit</b>  @ViewBag.CommMFlSel/@ViewBag.CommMFCnt <a style="float: right; color: black; font-size: medium">-</a> <a style="float: right; color: black; font-size: medium">/</a> <a style="float: right; color: black; font-size: medium">+</a></p>
                                <div class="detailsContent">@Html.CheckBoxList("PropertyDetails", ViewBag.CommMFPropertyDetails as IEnumerable<SelectListItem>)
                                </div>
                            }
                            @if (@ViewBag.CommKitcCnt > 0)
                            {
                                <p class="detailsHeading"><b>Kitchen Features</b>   @ViewBag.CommKitcSel/@ViewBag.CommKitcCnt <a style="float: right; color: black; font-size: medium">-</a> <a style="float: right; color: black; font-size: medium">/</a> <a style="float: right; color: black; font-size: medium">+</a></p>
                                <div class="detailsContent">@Html.CheckBoxList("PropertyDetails", ViewBag.CommKitcPropertyDetails as IEnumerable<SelectListItem>)
                                </div> }
                            @if (@ViewBag.CommIntCnt > 0)
                            {
                                <p class="detailsHeading"><b>Interior Upgrades</b>  @ViewBag.CommIntSel/@ViewBag.CommIntCnt <a style="float: right; color: black; font-size: medium">-</a> <a style="float: right; color: black; font-size: medium">/</a> <a style="float: right; color: black; font-size: medium">+</a></p>
                                <div class="detailsContent">@Html.CheckBoxList("PropertyDetails", ViewBag.CommIntPropertyDetails as IEnumerable<SelectListItem>)
                                </div> }
                            @if (@ViewBag.CommExtCnt > 0)
                            {
                                <p class="detailsHeading"><b>Exterior Upgrades</b>   @ViewBag.CommExtlSel/@ViewBag.CommExtCnt <a style="float: right; color: black; font-size: medium">-</a> <a style="float: right; color: black; font-size: medium">/</a> <a style="float: right; color: black; font-size: medium">+</a></p>
                                <div class="detailsContent">@Html.CheckBoxList("PropertyDetails", ViewBag.CommExtPropertyDetails as IEnumerable<SelectListItem>)
                                </div> }
                            @if (@ViewBag.CommTechCnt > 0)
                            {
                                <p class="detailsHeading"><b>Tech Features</b>   @ViewBag.CommTechSel/@ViewBag.CommTechCnt <a style="float: right; color: black; font-size: medium">-</a> <a style="float: right; color: black; font-size: medium">/</a> <a style="float: right; color: black; font-size: medium">+</a></p>
                                <div class="detailsContent">@Html.CheckBoxList("PropertyDetails", ViewBag.CommTechPropertyDetails as IEnumerable<SelectListItem>)
                                </div> }

                        </div>
                    </div>
                </div>
            </div>

        </div>
        
        <div id="section3">
            <h3>Detailed Securing Property Data</h3>
            <div style="background-color: lightgrey; border: 1px solid #000; padding: 5px; margin-bottom: 5px;">
                <em>You are encouraged to continuously update the Operating Data (as may be available) for each CRE Mortgage Note Asset in your Portfolio (e.g., Quarterly, Semi-Annual, etc.).  USC Asset Views on each of your respective Assets, and the Asset View on your Portfolio of Assets display the equivalent of a real time offering memorandum on your Portfolio to all USC Registered PI’s; and by having your data regularly updated you will be able to market (“<a title="Publishing a Vested or Represented CRE Asset is a one click protocol that results in notifying the full USC Community of Accredited Principals of the availability of said Asset or Portfolio.">Publish</a>”) your selected Portfolio to 100,000’s of CRE Industry Participants through USC… without the need for further preparation… with just one <<a>click</a>>.  
                </em>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(model => model.OperatingStatus) <span style="color: red;">*</span>
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.EnumDropDownList("OperatingStatus", Model.OperatingStatus, "---")
                        @Html.ValidationMessageFor(model => model.OperatingStatus)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(model => model.GradeClassification) <span style="color: red;">*</span>
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.DropDownListFor(s => s.GradeClassification, @Model.Grades)
                        @Html.ValidationMessageFor(model => model.OperatingStatus)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(model => model.PropertyCondition) <span style="color: red;">*</span>
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.EnumDropDownList("PropertyCondition", Model.PropertyCondition, "---")
                        @Html.ValidationMessageFor(model => model.PropertyCondition)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.RentableSquareFeet, new { @class = "control-label" }) <span style="color: red;">*</span>
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.TextBoxFor(s => s.RentableSquareFeet, new { @class = "control-label formatNumber" }) <br />
                        <em>It is critical that this data is accurate.  You may leave the data field blank and edit/enter later through your “My USC Page”</em>
                        @* @Html.ValidationMessageFor(model => model.RentableSquareFeet)*@
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.MajorTenant, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.TextBoxFor(s => s.MajorTenant, new { @class = "control-label" })
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(model => model.IsMajorTenantAAARated)
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group" style="padding-top: 5px">
                        @Html.RadioButtonFor(model => model.IsMajorTenantAAARated, "true") Yes
                                @Html.RadioButtonFor(model => model.IsMajorTenantAAARated, "false") No
                                @Html.ValidationMessageFor(model => model.IsMajorTenantAAARated)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(model => model.LeasedSquareFootageByMajorTenant)
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.TextBoxFor(model => model.LeasedSquareFootageByMajorTenant, new { @class = "formatNumber" })
                        @Html.ValidationMessageFor(model => model.LeasedSquareFootageByMajorTenant)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(model => model.BaseRentPerSqFtMajorTenant)
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.TextBoxFor(model => model.BaseRentPerSqFtMajorTenant, new { @class = "formatNumber" })
                        @Html.ValidationMessageFor(model => model.BaseRentPerSqFtMajorTenant)
                    </div>
                </div>
            </div>
            <div class="row">
                    <div class="col-sm-6">
                        <div class="input-group">
                            @Html.LabelFor(model => model.CurrentMarkerRentPerSqFt)
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="input-group">
                            @Html.TextBoxFor(model => model.CurrentMarkerRentPerSqFt, new { @class = "formatNumber" })
                            @Html.ValidationMessageFor(model => model.CurrentMarkerRentPerSqFt)
                        </div>
                    </div>
                </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        <label class="mfLabel">Number of Parking Spaces</label>
                        <label class="mhpLabel">If Property is a MHP, enter total number of Rentable Park Spaces</label>
                        <label class="defaultLabel">Number of Parking Spaces</label>
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.TextBoxFor(model => model.ParkingSpaces, new { @class = "formatNumber" })
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.ValidationMessageFor(model => model.ParkingSpaces)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        <label>Number of Covered Parking Spaces</label>
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.TextBoxFor(model => model.CoveredParkingSpaces, new { @class = "formatNumber" })
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.ValidationMessageFor(model => model.CoveredParkingSpaces)
                    </div>
                </div>
            </div>
            <div class="mfDiv">
                <div class="row">
                    <div class="col-sm-6">
                        <div class="input-group">
                            <label class="mfLabel">If Property is Multi-Family, enter total number of Units</label>
                            <label class="mhpLabel">Total Number of Tenants Currently Occupying Property</label>
                            <label class="defaultLabel">Total Number of Tenants Currently Occupying Property</label>
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="input-group">
                            @Html.TextBoxFor(model => model.TotalUnits, new { @class = "formatNumber" })
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="input-group">
                            @Html.ValidationMessageFor(model => model.TotalUnits)
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-6">
                        <div class="input-group">
                            @Html.LabelFor(model => model.OccupancyPercentage)
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="input-group">
                            @Html.EditorFor(model => model.OccupancyPercentage)<div style="margin-left: 5px; display: inline">%</div>
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="input-group">
                            @Html.ValidationMessageFor(model => model.OccupancyPercentage)
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-6">
                        <div class="input-group">
                            @Html.LabelFor(model => model.LastReportedDateMF)
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="input-group">
                            @Html.TextBoxFor(model => model.LastReportedDateMF, new { @class = "datepicker" }) <em>MM/dd/yyyy</em>
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="input-group">
                            @Html.ValidationMessageFor(model => model.LastReportedDateMF)
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-6">
                        <div class="input-group">
                            <label>Electric Meter Method</label>
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="input-group">
                            @Html.EnumDropDownList("ElectricMeterMethod", Model.ElectricMeterMethod)
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="input-group">
                            @Html.ValidationMessageFor(model => model.ElectricMeterMethod)
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-6">
                        <div class="input-group">
                            @Html.LabelFor(model => model.GasMeterMethod)
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="input-group">
                            @Html.EnumDropDownList("GasMeterMethod", Model.GasMeterMethod)
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="input-group">
                            @Html.ValidationMessageFor(model => model.GasMeterMethod)
                        </div>
                    </div>
                </div>
                <div>
                    <em>All multi-family properties have a variety (mix) of unit types.  You have opportunity below to enter the quantity of each Unit Type and their respective square footage and current or proforma rents for your property. After you have entered the first Unit Type data (e.g., 50 two bd two ba units, base rent 800, square feet 1000), simply &lt;click&gt; the [Add a Unit Specification] button to enter the remaining Unit Mix data that is applicable for your property.</em>
                    <br />
                    Unit Mix:
            
                <div id="unitSpecList" data-unitcount="@(Model.UnitSpecifications.Count)">
                    @for (int item = 0; item < Model.UnitSpecifications.Count(); item++)
                    {
                        <div class="row">
                            <div class="col-lg-6">
                                <div class="input-group">
                                    @Html.LabelFor(model => model.UnitSpecifications[item].CountOfUnits)
                                </div>
                            </div>
                            <div class="col-lg-6">
                                <div class="input-group">
                                    @Html.TextBoxFor(model => model.UnitSpecifications[item].CountOfUnits, new { @class = "formatNumber" })
                                    @Html.ValidationMessageFor(model => model.UnitSpecifications[item].CountOfUnits)
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-lg-6">
                                <div class="input-group">
                                    @Html.LabelFor(model => model.UnitSpecifications[item].BedCount)
                                </div>
                            </div>
                            <div class="col-lg-6">
                                <div class="input-group">
                                    @Html.EnumDropDownList("UnitSpecifications[" + item + "].BedCount", Model.UnitSpecifications[item].BedCount)
                                    @Html.ValidationMessageFor(model => model.UnitSpecifications[item].BedCount)
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-lg-6">
                                <div class="input-group">
                                    @Html.LabelFor(model => model.UnitSpecifications[item].BathCount)
                                </div>
                            </div>
                            <div class="col-lg-6">
                                <div class="input-group">
                                    @Html.EnumDropDownList("UnitSpecifications[" + item + "].BathCount", Model.UnitSpecifications[item].BathCount)
                                    @Html.ValidationMessageFor(model => model.UnitSpecifications[item].BathCount)
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-lg-6">
                                <div class="input-group">
                                    @Html.LabelFor(model => model.UnitSpecifications[item].UnitBaseRent)
                                </div>
                            </div>
                            <div class="col-lg-6">
                                <div class="input-group">
                                    @Html.TextBoxFor(model => model.UnitSpecifications[item].UnitBaseRent, new { onchange = "addCommasToInput(this)", @class = "formatNumber" })
                                    @Html.ValidationMessageFor(model => model.UnitSpecifications[item].UnitBaseRent)
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-lg-6">
                                <div class="input-group">
                                    @Html.LabelFor(model => model.UnitSpecifications[item].UnitSquareFeet)
                                </div>
                            </div>
                            <div class="col-lg-6">
                                <div class="input-group">
                                    @Html.TextBoxFor(model => model.UnitSpecifications[item].UnitSquareFeet, new { onchange = "addCommasToInput(this)", @class = "formatNumber" })
                                    @Html.ValidationMessageFor(model => model.UnitSpecifications[item].UnitSquareFeet)
                                </div>
                            </div>
                        </div>
                        <hr />
                    }
                </div>
                    <br />
                    <input type="button" id="addUnitSpecs" value="Add a Unit Specification" />
                    <input type="button" id="removeUnitSpecs" value="Remove Last" />
                    <hr />
                </div>
            </div>
            <div class="mhpDiv">
                <div class="row">
                    <div class="col-sm-6">
                        <div class="input-group">
                            <label class="mfLabel">If Property is Mobile Home, enter total number of Units</label>
                            <label class="mhpLabel">Total Number of Tenants Currently Occupying Property</label>
                            <label class="defaultLabel">Total Number of Tenants Currently Occupying Property</label>
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="input-group">
                            @Html.TextBoxFor(model => model.TotalUnits, new { @class = "formatNumber" })
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="input-group">
                            @Html.ValidationMessageFor(model => model.TotalUnits)
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-6">
                        <div class="input-group">
                            @Html.LabelFor(model => model.OccupancyPercentage)
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="input-group">
                            @Html.EditorFor(model => model.OccupancyPercentage)<div style="margin-left: 5px; display: inline">%</div>
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="input-group">
                            @Html.ValidationMessageFor(model => model.OccupancyPercentage)
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-6">
                        <div class="input-group">
                            @Html.LabelFor(model => model.LastReportedDateMF)
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="input-group">
                            @Html.TextBoxFor(model => model.LastReportedDateMF, new { @class = "datepicker" }) <em>MM/dd/yyyy</em>
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="input-group">
                            @Html.ValidationMessageFor(model => model.LastReportedDateMF)
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-6">
                        <div class="input-group">
                            <label>Electric Meter Method</label>
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="input-group">
                            @Html.EnumDropDownList("ElectricMeterMethod", Model.ElectricMeterMethod)
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="input-group">
                            @Html.ValidationMessageFor(model => model.ElectricMeterMethod)
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-6">
                        <div class="input-group">
                            @Html.LabelFor(model => model.GasMeterMethod)
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="input-group">
                            @Html.EnumDropDownList("GasMeterMethod", Model.GasMeterMethod)
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="input-group">
                            @Html.ValidationMessageFor(model => model.GasMeterMethod)
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-6">
                        <div class="input-group">
                            @Html.LabelFor(model => model.NumberRentableSpace)
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="input-group">
                            @Html.EditorFor(model => model.NumberRentableSpace, new { @class = "formatNumber" })
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-6">
                        <div class="input-group">
                            @Html.LabelFor(model => model.NumberNonRentableSpace)
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="input-group">
                            @Html.EditorFor(model => model.NumberNonRentableSpace, new { @class = "formatNumber" })
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-6">
                        <div class="input-group">
                            @Html.LabelFor(model => model.NumberParkOwnedMH)
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="input-group">
                            @Html.EditorFor(model => model.NumberParkOwnedMH, new { @class = "formatNumber" })
                        </div>
                    </div>
                </div>
                <div>
                    <em>All mobile homes properties have a variety (mix) of unit types.  You have opportunity below to enter the quantity of each Unit Type and their respective square footage and current or proforma rents for your property. After you have entered the first Unit Type data (e.g., 50 two bd two ba units, base rent 800, square feet 1000), simply &lt;click&gt; the [Add a Unit Specification] button to enter the remaining Unit Mix data that is applicable for your property.</em>
                    <br />
                    <h4>MHP Space Rental Mix:</h4>

                    <div id="mhpUnitSpecList" data-unitcount="@( Model.MHPUnitSpecifications.Count)">
                        @for (int item = 0; item < Model.MHPUnitSpecifications.Count(); item++)
                        {
                            <div class="unitSpecDiv" id="mhpUnitSpecDivSingle">
                                <div class="row">
                                    <div class="col-sm-6">
                                        <div class="input-group">
                                            @Html.LabelFor(model => model.MHPUnitSpecifications[item].NumberSingleWide)
                                        </div>
                                    </div>
                                    <div class="col-sm-6">
                                        <div class="input-group">
                                            @Html.TextBoxFor(model => model.MHPUnitSpecifications[item].NumberSingleWide, new { @class = "formatNumber" })
                                            @Html.ValidationMessageFor(model => model.MHPUnitSpecifications[item].NumberSingleWide)
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-sm-6">
                                        <div class="input-group">
                                            @Html.LabelFor(model => model.MHPUnitSpecifications[item].CurrentSingleBaseRent)
                                        </div>
                                    </div>
                                    <div class="col-sm-6">
                                        <div class="input-group">
                                            @Html.TextBoxFor(model => model.MHPUnitSpecifications[item].CurrentSingleBaseRent, new { onchange = "addCommasToInput(this)", @class = "formatNumber" })
                                            @Html.ValidationMessageFor(model => model.MHPUnitSpecifications[item].CurrentSingleBaseRent)
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-sm-6">
                                        <div class="input-group">
                                            @Html.LabelFor(model => model.MHPUnitSpecifications[item].NumberSingleWideOwned)
                                        </div>
                                    </div>
                                    <div class="col-sm-6">
                                        <div class="input-group">
                                            @Html.TextBoxFor(model => model.MHPUnitSpecifications[item].NumberSingleWideOwned, new { onchange = "addCommasToInput(this)", @class = "formatNumber" })
                                            @Html.ValidationMessageFor(model => model.MHPUnitSpecifications[item].NumberSingleWideOwned)
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-sm-6">
                                        <div class="input-group">
                                            @Html.LabelFor(model => model.MHPUnitSpecifications[item].CurrentSingleOwnedBaseRent)
                                        </div>
                                    </div>
                                    <div class="col-sm-6">
                                        <div class="input-group">
                                            @Html.TextBoxFor(model => model.MHPUnitSpecifications[item].CurrentSingleOwnedBaseRent, new { onchange = "addCommasToInput(this)", @class = "formatNumber" })
                                            @Html.ValidationMessageFor(model => model.MHPUnitSpecifications[item].CurrentSingleOwnedBaseRent)
                                        </div>
                                    </div>
                                </div>
                                <hr />
                            </div>
                    
                            <div class="unitSpecDiv" id="mhpUnitSpecDivDouble" style="display: none">
                                <div class="row">
                                    <div class="col-sm-6">
                                        <div class="input-group">
                                            @Html.LabelFor(model => model.MHPUnitSpecifications[item].NumberDoubleWide)
                                        </div>
                                    </div>
                                    <div class="col-sm-6">
                                        <div class="input-group">
                                            @Html.TextBoxFor(model => model.MHPUnitSpecifications[item].NumberDoubleWide, new { @class = "formatNumber" })
                                            @Html.ValidationMessageFor(model => model.MHPUnitSpecifications[item].NumberDoubleWide)
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-sm-6">
                                        <div class="input-group">
                                            @Html.LabelFor(model => model.MHPUnitSpecifications[item].CurrentDoubleBaseRent)
                                        </div>
                                    </div>
                                    <div class="col-sm-6">
                                        <div class="input-group">
                                            @Html.TextBoxFor(model => model.MHPUnitSpecifications[item].CurrentDoubleBaseRent, new { onchange = "addCommasToInput(this)", @class = "formatNumber" })
                                            @Html.ValidationMessageFor(model => model.MHPUnitSpecifications[item].CurrentDoubleBaseRent)
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-sm-6">
                                        <div class="input-group">
                                            @Html.LabelFor(model => model.MHPUnitSpecifications[item].NumberDoubleWideOwned)
                                        </div>
                                    </div>
                                    <div class="col-sm-6">
                                        <div class="input-group">
                                            @Html.TextBoxFor(model => model.MHPUnitSpecifications[item].NumberSingleWideOwned, new { onchange = "addCommasToInput(this)", @class = "formatNumber" })
                                            @Html.ValidationMessageFor(model => model.MHPUnitSpecifications[item].NumberDoubleWideOwned)
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-sm-6">
                                        <div class="input-group">
                                            @Html.LabelFor(model => model.MHPUnitSpecifications[item].CurrentDoubleOwnedBaseRent)
                                        </div>
                                    </div>
                                    <div class="col-sm-6">
                                        <div class="input-group">
                                            @Html.TextBoxFor(model => model.MHPUnitSpecifications[item].CurrentDoubleOwnedBaseRent, new { onchange = "addCommasToInput(this)", @class = "formatNumber" })
                                            @Html.ValidationMessageFor(model => model.MHPUnitSpecifications[item].CurrentDoubleOwnedBaseRent)
                                        </div>
                                    </div>
                                </div>
                                <hr />
                            </div>
                            <input type="button" id="removeDoubleSpecs" value="Remove Double Space Spec" style="display: none" />
                            <div class="unitSpecDiv" id="mhpUnitSpecDivTriple" style="display: none">
                                <div class="row">
                                    <div class="col-sm-6">
                                        <div class="input-group">
                                            @Html.LabelFor(model => model.MHPUnitSpecifications[item].NumberTripleWide)
                                        </div>
                                    </div>
                                    <div class="col-sm-6">
                                        <div class="input-group">
                                            @Html.TextBoxFor(model => model.MHPUnitSpecifications[item].NumberTripleWide, new { @class = "formatNumber" })
                                            @Html.ValidationMessageFor(model => model.MHPUnitSpecifications[item].NumberTripleWide)
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-sm-6">
                                        <div class="input-group">
                                            @Html.LabelFor(model => model.MHPUnitSpecifications[item].CurrentTripleBaseRent)
                                        </div>
                                    </div>
                                    <div class="col-sm-6">
                                        <div class="input-group">
                                            @Html.TextBoxFor(model => model.MHPUnitSpecifications[item].CurrentTripleBaseRent, new { onchange = "addCommasToInput(this)", @class = "formatNumber" })
                                            @Html.ValidationMessageFor(model => model.MHPUnitSpecifications[item].CurrentTripleBaseRent)
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-sm-6">
                                        <div class="input-group">
                                            @Html.LabelFor(model => model.MHPUnitSpecifications[item].NumberTripleWideOwned)
                                        </div>
                                    </div>
                                    <div class="col-sm-6">
                                        <div class="input-group">
                                            @Html.TextBoxFor(model => model.MHPUnitSpecifications[item].NumberSingleWideOwned, new { onchange = "addCommasToInput(this)", @class = "formatNumber" })
                                            @Html.ValidationMessageFor(model => model.MHPUnitSpecifications[item].NumberTripleWideOwned)
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-sm-6">
                                        <div class="input-group">
                                            @Html.LabelFor(model => model.MHPUnitSpecifications[item].CurrentTripleOwnedBaseRent)
                                        </div>
                                    </div>
                                    <div class="col-sm-6">
                                        <div class="input-group">
                                            @Html.TextBoxFor(model => model.MHPUnitSpecifications[item].CurrentTripleOwnedBaseRent, new { onchange = "addCommasToInput(this)", @class = "formatNumber" })
                                            @Html.ValidationMessageFor(model => model.MHPUnitSpecifications[item].CurrentTripleOwnedBaseRent)
                                        </div>
                                    </div>
                                </div>
                                <hr />
                            </div>
                            <input type="button" id="removeTripleSpecs" value="Remove Triple Space Spec" style="display: none" />
                            <br />
                            <input type="button" id="addDoubleSpecs" value="Add a Double Space Spec" />
                            <input type="button" id="addTripleSpecs" value="Add a Triple Space Spec" />
                            <br />
                            <br />
                        }
                    </div>
                    <label>Unit Mix:</label>

                    <div id="unitSpecList" data-unitcount="@(Model.UnitSpecifications.Count)">
                        @for (int item = 0; item < Model.UnitSpecifications.Count(); item++)
                        {
                            <div class="row">
                                <div class="col-lg-6">
                                    <div class="input-group">
                                        @Html.LabelFor(model => model.UnitSpecifications[item].CountOfUnits)
                                    </div>
                                </div>
                                <div class="col-lg-6">
                                    <div class="input-group">
                                        @Html.TextBoxFor(model => model.UnitSpecifications[item].CountOfUnits, new { @class = "formatNumber" })
                                        @Html.ValidationMessageFor(model => model.UnitSpecifications[item].CountOfUnits)
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-lg-6">
                                    <div class="input-group">
                                        @Html.LabelFor(model => model.UnitSpecifications[item].BedCount)
                                    </div>
                                </div>
                                <div class="col-lg-6">
                                    <div class="input-group">
                                        @Html.EnumDropDownList("UnitSpecifications[" + item + "].BedCount", Model.UnitSpecifications[item].BedCount)
                                        @Html.ValidationMessageFor(model => model.UnitSpecifications[item].BedCount)
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-lg-6">
                                    <div class="input-group">
                                        @Html.LabelFor(model => model.UnitSpecifications[item].BathCount)
                                    </div>
                                </div>
                                <div class="col-lg-6">
                                    <div class="input-group">
                                        @Html.EnumDropDownList("UnitSpecifications[" + item + "].BathCount", Model.UnitSpecifications[item].BathCount)
                                        @Html.ValidationMessageFor(model => model.UnitSpecifications[item].BathCount)
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-lg-6">
                                    <div class="input-group">
                                        @Html.LabelFor(model => model.UnitSpecifications[item].UnitBaseRent)
                                    </div>
                                </div>
                                <div class="col-lg-6">
                                    <div class="input-group">
                                        @Html.TextBoxFor(model => model.UnitSpecifications[item].UnitBaseRent, new { onchange = "addCommasToInput(this)", @class = "formatNumber" })
                                        @Html.ValidationMessageFor(model => model.UnitSpecifications[item].UnitBaseRent)
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-lg-6">
                                    <div class="input-group">
                                        @Html.LabelFor(model => model.UnitSpecifications[item].UnitSquareFeet)
                                    </div>
                                </div>
                                <div class="col-lg-6">
                                    <div class="input-group">
                                        @Html.TextBoxFor(model => model.UnitSpecifications[item].UnitSquareFeet, new { onchange = "addCommasToInput(this)", @class = "formatNumber" })
                                        @Html.ValidationMessageFor(model => model.UnitSpecifications[item].UnitSquareFeet)
                                    </div>
                                </div>
                            </div>
                            <hr />
                        }
                    </div>
                    <br />
                    <input type="button" id="addUnitSpecs" value="Add a Unit Specification" />
                    <input type="button" id="removeUnitSpecs" value="Remove Last" />
                    <hr />
                </div>
            </div>
            <div class="commercialDiv">
                <div class="row">
                    <div class="col-sm-6">
                        <div class="input-group">
                            @Html.LabelFor(model => model.Type)
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="input-group">
                            @Html.EnumDropDownList("Type", Model.Type)
                            @Html.ValidationMessageFor(model => model.Type)
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-6">
                        <div class="input-group">
                            @Html.LabelFor(model => model.HasAAARatedMajorTenant)
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="input-group" style="padding-top: 5px">
                            @Html.RadioButtonFor(model => model.HasAAARatedMajorTenant, "true", new { onclick = "toggleMajorTenant(true)" }) Yes
                            @Html.RadioButtonFor(model => model.HasAAARatedMajorTenant, "false", new { onclick = "toggleMajorTenant(false)" }) No
                            @Html.ValidationMessageFor(model => model.HasAAARatedMajorTenant)
                        </div>
                    </div>
                </div>
                <div id="majorTenant">
                    <div class="row">
                        <div class="col-sm-6">
                            <div class="input-group">
                                @Html.LabelFor(model => model.NameOfAAARatedMajorTenant)
                            </div>
                        </div>
                        <div class="col-sm-6">
                            <div class="input-group">
                                @Html.EditorFor(model => model.NameOfAAARatedMajorTenant)
                                @Html.ValidationMessageFor(model => model.NameOfAAARatedMajorTenant)
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-sm-6">
                            <div class="input-group">
                                @Html.LabelFor(model => model.IsMajorTenantAAARated)
                            </div>
                        </div>
                        <div class="col-sm-6">
                            <div class="input-group" style="padding-top: 5px">
                                @Html.RadioButtonFor(model => model.IsMajorTenantAAARated, "true") Yes
                                @Html.RadioButtonFor(model => model.IsMajorTenantAAARated, "false") No
                                @Html.ValidationMessageFor(model => model.IsMajorTenantAAARated)
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-sm-6">
                            <div class="input-group">
                                @Html.LabelFor(model => model.LeasedSquareFootageByMajorTenant)
                            </div>
                        </div>
                        <div class="col-sm-6">
                            <div class="input-group">
                                @Html.TextBoxFor(model => model.LeasedSquareFootageByMajorTenant, new { @class = "formatNumber" })
                                @Html.ValidationMessageFor(model => model.LeasedSquareFootageByMajorTenant)
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-sm-6">
                            <div class="input-group">
                                @Html.LabelFor(model => model.BaseRentPerSqFtMajorTenant)
                            </div>
                        </div>
                        <div class="col-sm-6">
                            <div class="input-group">
                                @Html.TextBoxFor(model => model.BaseRentPerSqFtMajorTenant, new { @class = "formatNumber" })
                                @Html.ValidationMessageFor(model => model.BaseRentPerSqFtMajorTenant)
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-6">
                        <div class="input-group">
                            @Html.LabelFor(model => model.CurrentMarkerRentPerSqFt)
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="input-group">
                            @Html.TextBoxFor(model => model.CurrentMarkerRentPerSqFt, new { @class = "formatNumber" })
                            @Html.ValidationMessageFor(model => model.CurrentMarkerRentPerSqFt)
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-6">
                        <div class="input-group">
                            @Html.LabelFor(model => model.NumberofSuites)
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="input-group">
                            @Html.TextBoxFor(model => model.NumberofSuites, new { @class = "formatNumber" })
                            @Html.ValidationMessageFor(model => model.NumberofSuites)
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-6">
                        <div class="input-group">
                            @Html.LabelFor(model => model.NumberOfRentableSuites)
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="input-group">
                            @Html.TextBoxFor(model => model.NumberOfRentableSuites, new { @class = "formatNumber" })
                            @Html.ValidationMessageFor(model => model.NumberOfRentableSuites)
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-6">
                        <div class="input-group">
                            @Html.LabelFor(model => model.VacantSuites)
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="input-group">
                            @Html.EnumDropDownList("VacantSuites", Model.VacantSuites)
                            @Html.ValidationMessageFor(model => model.VacantSuites)
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-6">
                        <div class="input-group">
                            @Html.LabelFor(model => model.LastReportedDateCommercial)
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="input-group">
                            @Html.TextBoxFor(model => model.LastReportedDateCommercial, new { @class = "datepicker" }) <em>MM/dd/yyyy</em>
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="input-group">
                            @Html.ValidationMessageFor(model => model.LastReportedDateCommercial)
                        </div>
                    </div>
                </div>
            </div>


            <div class="row">
                <h3>Securing Property Operating Data</h3>
                <div class="col-sm-6">
                    <div class="input-group">
                        <label>Does this property produce income?</label>
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group" style="padding-top: 5px">
                        @Html.RadioButtonFor(s => s.HasIncome, "true", new { onclick = "toggleIncomeReason(false)" }) Yes
                    @Html.RadioButtonFor(s => s.HasIncome, "false", new { onclick = "toggleIncomeReason(true)" }) No                    
                    @Html.ValidationMessageFor(model => model.HasIncome)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        <label>Current Fiscal Operating Year <a title=" Annualized Scheduled Gross Income">SGI</a></label>
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                       @Html.TextBoxFor(s => s.CurrentAnnualIncome, new { @onblur = "calcMonthlyIncome(this, 'calculateProformaMonthlyIncome', 'CurrentMI')",@class = "control-label formatNumber" }) <br />
                        <em>(Do not enter comma’s. They will be auto filled.)</em>
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.ValidationMessageFor(model => model.CurrentAnnualIncome)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        <label>Current Fiscal Operating Year <a title=" Miscellaneous Income">MI</a> / <a title="Common Area Maintenance">CAM</a> </label>
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.TextBoxFor(model => model.CurrentMI, new { @class = "formatNumber" })
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.ValidationMessageFor(model => model.CurrentMI)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        <label>Current Fiscal Operating Year<a title="Vacancy Factor">VF</a> , Concessions, & Misc Offsets</label>
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                         @Html.TextBoxFor(s => s.CurrentVacancyFactor, new { @class = "control-label formatNumber" }) %
                        <em>(ex: 5.00, 8.33, 10.25)</em>
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.ValidationMessageFor(model => model.CurrentVacancyFactor)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        <label>As a Percentage of Rentable Sq.Ft. or Number of Units </label>
                    </div>
                </div>
                <div class="col-sm-6">
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        <label>Current Fiscal Operating Year<a title="Annualized Operating Expense">AOE</a></label>
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.TextBoxFor(model => model.CurrentAnnualOperatingExepenses, new { @class = "formatNumber" })
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.ValidationMessageFor(model => model.CurrentAnnualOperatingExepenses)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        <label>Proforma (Next Fiscal Operating Year)<a title="Gross Operating Income">GOI</a></label>
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.TextBoxFor(model => model.ProformaAnnualIncome, new { @onblur = "calcMonthlyIncome(this, 'calculateProformaMonthlyIncome', 'ProformaMonthlyIncome')", @class = "formatNumber" })
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.ValidationMessageFor(model => model.ProformaAnnualIncome)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        <label>Proforma (Next Fiscal Operating Year)<a title="Monthly Gross Income">MGI</a></label>
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group" style="line-height: 34px">
                        <span id="calculateProformaMonthlyIncome" class="pad formatNumber">@Model.ProformaMonthlyIncome</span>
                        @Html.HiddenFor(s => s.ProformaMonthlyIncome)
                        @Html.ValidationMessageFor(model => model.ProformaMonthlyIncome)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        <label>Proforma (Next Fiscal Operating Year)<a title=" Miscellaneous Income">MI</a> / <a title="Common Area Maintenance">CAM</a> </label>
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.TextBoxFor(model => model.ProformaMiscIncome, new { @class = "formatNumber" })
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.ValidationMessageFor(model => model.ProformaMiscIncome)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        <label>Proforma (Next Fiscal Operating Year)<a title="Vacancy Factor">VF</a> , Concessions, & Misc Offsets</label>
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.TextBoxFor(model => model.ProformaVacancyFac, new { @onblur = "calcCapRate()", @class = "formatNumber" }) %
                        <em>(ex: 5.00, 8.33, 10.25)</em>
                        @Html.ValidationMessageFor(model => model.ProformaVacancyFac)
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.ValidationMessageFor(model => model.ProformaVacancyFac)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        <label>Proforma (Next Fiscal Operating Year)<a title="Annualized Operating Expense">AOE</a></label>
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                       @Html.TextBoxFor(model => model.ProformaAnnualOperExpenses, new { @onblur = "calcProformaSGI()", @class = "formatNumber" })
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.ValidationMessageFor(model => model.ProformaAnnualOperExpenses)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        <label> Current Scheduled Annual Property Taxes</label>
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.TextBoxFor(s => s.AnnualPropertyTaxes, new { @class = "control-label formatNumber" })
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.ValidationMessageFor(model => model.AnnualPropertyTaxes)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        <label>Calculated Market Value/<a title="[Calculated Market Value is based solely on either (1) comparable sales data provided by the Listing Agent or Seller in their Offering Memorandum, or, in the absence thereof, (2) calculated to the displayed CAP Rate only if the offering price for the asset is TBD by Market.]">CMV</a>:</label>
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.TextBoxFor(model => model.CurrentBpo, new { @class = "formatNumber" })
                        @Html.ValidationMessageFor(model => model.CurrentBpo)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        <label>Does this securing property currently produce income?</label>
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group" style="padding-top: 5px">
                        @Html.RadioButtonFor(s => s.HasIncome, "true", new { onclick = "toggleIncomeReason(false)" }) Yes
                        @Html.RadioButtonFor(s => s.HasIncome, "false", new { onclick = "toggleIncomeReason(true)" }) No                    
                        @Html.ValidationMessageFor(model => model.HasIncome)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.WasteWaterTypeId, new { @class = "control-label" }) <span style="color: red;">*</span>

                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.DropDownListFor(model => model.WasteWaterTypeId, Model.WaterServices as IEnumerable<SelectListItem>)
                        @Html.ValidationMessageFor(model => model.WaterService)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.WaterServTypeId, new { @class = "control-label" }) <span style="color: red;">*</span>

                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.DropDownListFor(model => model.WaterServTypeId, Model.SewerServices as IEnumerable<SelectListItem>)
                        @Html.ValidationMessageFor(model => model.WaterServTypeId)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.PowerService, new { @class = "control-label" })<span style="color: red;">*</span>

                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.DropDownListFor(model => model.PowerService, Model.PowerServices as IEnumerable<SelectListItem>, "---")
                        @Html.ValidationMessageFor(model => model.PowerService)
                    </div>
                </div>
            </div>
            <div class="mhpDiv">
                <div class="row">
                    <div class="col-sm-6">
                        <div class="input-group">
                            @Html.LabelFor(model => model.AccessRoadTypeId)
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="input-group">
                            @Html.DropDownListFor(model => model.AccessRoadTypeId, Model.AccessRoadTypes as IEnumerable<SelectListItem>)
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-6">
                        <div class="input-group">
                            @Html.LabelFor(model => model.InteriorRoadTypeId)
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="input-group">
                            @Html.DropDownListFor(model => model.InteriorRoadTypeId, Model.InteriorRoadTypes as IEnumerable<SelectListItem>)
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-6">
                        <div class="input-group">
                            @Html.LabelFor(model => model.MHPadTypeId)
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="input-group">
                            @Html.DropDownListFor(model => model.MHPadTypeId, Model.MHPadTypes as IEnumerable<SelectListItem>)
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.LabelFor(s => s.Spaces, new { @class = "control-label" })
                        </div>
                    </div>
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.TextBoxFor(s => s.Spaces, new { @class = "control-label formatNumber" })
                        </div>
                    </div>
                </div>

            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.HasProformaInformation, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.RadioButtonFor(s => s.HasProformaInformation, "true", new { onclick = "toggleProformaInformation(true)" }) Yes
                        @Html.RadioButtonFor(s => s.HasProformaInformation, "false", new { onclick = "toggleProformaInformation(false)" }) No
                    </div>
                </div>
            </div>
            <div id="proformaInfo">
                <div class="row">
                    <div class="col-lg-6">
                        <div class="input-group">
                            Proforma
                            <label style="color: blue; text-decoration: underline" title="Property’s Current Annual Gross Operating Income">GOI</label>
                            of Property for the next Fiscal Operating Year
                        </div>
                    </div>
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.TextBoxFor(s => s.PropertyGOI, new { @class = "control-label formatNumber", @title = "Property’s Current Annual Gross Operating Income" })
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-6">
                        <div class="input-group">
                            Proforma
                            <label style="color: blue; text-decoration: underline" title="Property’s Current Annual Gross Operating Expenses">AOE</label>
                            of Property for the next Fiscal Operating Year
                        </div>
                    </div>
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.TextBoxFor(s => s.PropertyGOE, new { @class = "control-label formatNumber" })
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-6">
                        <div class="input-group">
                            Proforma
                            <label style="color: blue; text-decoration: underline" title="Property’s Current Vacancy Factor as a % of GOI">VF</label>
                            of Property for the next Fiscal Operating Year
                        </div>
                    </div>
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.TextBoxFor(s => s.PropertyVF, new { @class = "control-label formatNumber" })
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-6">
                        <div class="input-group">
                            Proforma
                            <label style="color: blue; text-decoration: underline" title="Property’s Current Net Operating Income after offset for AOE and VF">NOI</label>
                            of Property for the next Fiscal Operating Year
                        </div>
                    </div>
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.TextBoxFor(s => s.AnnualNOI, new { @class = "control-label formatNumber" })
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.SecuringPropertyAddress, new { @class = "control-label" })<span style="color: red;">*</span>
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.TextBoxFor(s => s.SecuringPropertyAddress, new { @class = "control-label" })
                        @Html.ValidationMessageFor(model => model.SecuringPropertyAddress)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.SecuringPropertyAddress2, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.TextBoxFor(s => s.SecuringPropertyAddress2, new { @class = "control-label" })
                        <br />
                        <em>Some Property will have multiple street address (e.g., 4500, 4600, & 4700 East Mountain Avenue).  Enter the 1st or Main or Mailing Address in [Property Address 1] (e.g., 4500 E. Mountain Ave), and the additional Property Addresses in [Property Address 2] (e.g., 4600 & 4700 E. Mountain Ave).</em>
                        @Html.ValidationMessageFor(model => model.SecuringPropertyAddress2)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.SecuringPropertyCity, new { @class = "control-label" })<span style="color: red;">*</span>
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.TextBoxFor(s => s.SecuringPropertyCity, new { @class = "control-label" })
                        @Html.ValidationMessageFor(model => model.SecuringPropertyCity)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.SecuringPropertyState, new { @class = "control-label" })<span style="color: red;">*</span>
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.DropDownListFor(model => model.SecuringPropertyState, Model.States as IEnumerable<SelectListItem>, "---")
                        @Html.ValidationMessageFor(model => model.SecuringPropertyState)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.SecuringPropertyZip, new { @class = "control-label" })<span style="color: red;">*</span>
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.TextBoxFor(s => s.SecuringPropertyZip, new { @class = "control-label" })
                        @Html.ValidationMessageFor(model => model.SecuringPropertyZip)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.SecuringPropertyCounty, new { @class = "control-label" })  <span style="color: red;">*</span>
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.TextBoxFor(s => s.SecuringPropertyCounty, new { @class = "control-label" })
                        @Html.ValidationMessageFor(model => model.SecuringPropertyCounty)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.PropertySquareFeet, new { @class = "control-label" })  <span style="color: red;">*</span>
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.TextBoxFor(s => s.PropertySquareFeet, new { @class = "control-label formatNumber" })
                        @Html.ValidationMessageFor(model => model.PropertySquareFeet)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.PropertyAccess, new { @class = "control-label" })  <span style="color: red;">*</span>
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.DropDownListFor(model => model.PropertyAccess, Model.PropertyAccessTypes as IEnumerable<SelectListItem>, "---")
                        @Html.ValidationMessageFor(model => model.PropertyAccess)
                    </div>
                </div>
            </div>

            <hr />
        </div>
        
        <div id="section4">

            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.AdditionalInformation, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.TextBoxFor(s => s.AdditionalInformation, new { @class = "control-label" })
                    </div>
                </div>
            </div>
            <hr />
        </div>
        
        <div id="section5">
            <h3>General CRE Note Information</h3>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.TypeOfNote, new { @class = "control-label" })  <span style="color: red;">*</span>
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.DropDownListFor(model => model.TypeOfNote, Model.NoteTypes as IEnumerable<SelectListItem>, "---")
                        @Html.ValidationMessageFor(model => model.TypeOfNote)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.NoteOrigination, new { @class = "control-label" })  <span style="color: red;">*</span>
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.TextBoxFor(s => s.NoteOrigination, new { @class = "control-label datepicker" }) <em>MM/dd/yyyy</em>
                        @Html.ValidationMessageFor(model => model.NoteOrigination)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.NotePrincipal, new { @class = "control-label" })  <span style="color: red;">*</span>
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.TextBoxFor(s => s.NotePrincipal, new { @class = "control-label formatNumber" })
                        @Html.ValidationMessageFor(model => model.NotePrincipal)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.CurrentNotePrincipal, new { @class = "control-label" })  <span style="color: red;">*</span>
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.TextBoxFor(s => s.CurrentNotePrincipal, new { @class = "control-label formatNumber" })
                        @Html.ValidationMessageFor(model => model.CurrentNotePrincipal)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        <label><span class="control-label" style="color: blue; text-decoration: underline;" title="Broker Price Opinion">BPO</span> of Property at Note Origination (if available)</label>
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.TextBoxFor(s => s.BPOOfProperty, new { @class = "control-label formatNumber" })
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.HasCopyOfAppraisal, new { @class = "control-label" })  <span style="color: red;">*</span>
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.DropDownListFor(model => model.HasCopyOfAppraisal, Model.PropertyAppraisals as IEnumerable<SelectListItem>, "---")
                        @Html.ValidationMessageFor(model => model.HasCopyOfAppraisal)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.MethodOfAppraisal, new { @class = "control-label" })  <span style="color: red;">*</span>
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.DropDownListFor(model => model.MethodOfAppraisal, Model.AppraisalMethods as IEnumerable<SelectListItem>, "---")
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.NoteInterestRate, new { @class = "control-label" })  <span style="color: red;">*</span>
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.TextBoxFor(s => s.NoteInterestRate, new { @class = "control-label" }) %
                        @Html.ValidationMessageFor(model => model.NoteInterestRate)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.PaymentAmount, new { @class = "control-label" })  <span style="color: red;">*</span>
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.TextBoxFor(s => s.PaymentAmount, new { @class = "control-label formatNumber" })
                        @Html.ValidationMessageFor(model => model.PaymentAmount)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.PaymentFrequency, new { @class = "control-label" })  <span style="color: red;">*</span>
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.DropDownListFor(model => model.PaymentFrequency, Model.PaymentFrequencies as IEnumerable<SelectListItem>, "---")
                        @Html.ValidationMessageFor(model => model.PaymentFrequency)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.TypeOfMTGInstrument, new { @class = "control-label" })  <span style="color: red;">*</span>
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.DropDownListFor(model => model.TypeOfMTGInstrument, Model.MortgageInstruments as IEnumerable<SelectListItem>, "---")
                        @Html.ValidationMessageFor(model => model.TypeOfMTGInstrument)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.AmortType, new { @class = "control-label" })  <span style="color: red;">*</span>
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.DropDownListFor(model => model.AmortType, Model.AmortTypes as IEnumerable<SelectListItem>, "---")
                        @Html.ValidationMessageFor(model => model.AmortType)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.PaymentsMadeOnNote, new { @class = "control-label" })  <span style="color: red;">*</span>
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.TextBoxFor(s => s.PaymentsMadeOnNote, new { @class = "control-label formatNumber" })
                        @Html.ValidationMessageFor(model => model.PaymentsMadeOnNote)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.PaymentsRemainingOnNote, new { @class = "control-label" })  <span style="color: red;">*</span>
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.TextBoxFor(s => s.PaymentsRemainingOnNote, new { @class = "control-label formatNumber" })
                        @Html.ValidationMessageFor(model => model.PaymentsRemainingOnNote)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.IsNoteCurrent, new { @class = "control-label" })  <span style="color: red;">*</span>
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.RadioButtonFor(s => s.IsNoteCurrent, "true") Yes
                    @Html.RadioButtonFor(s => s.IsNoteCurrent, "false") No
                        @Html.ValidationMessageFor(model => model.IsNoteCurrent)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.LastPaymentRecievedOnNote, new { @class = "control-label" })  <span style="color: red;">*</span>
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.TextBoxFor(s => s.LastPaymentRecievedOnNote, new { @class = "control-label datepicker" }) <em>MM/dd/yyyy</em>
                        @Html.ValidationMessageFor(model => model.LastPaymentRecievedOnNote)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.NextPaymentOnNote, new { @class = "control-label" })  <span style="color: red;">*</span>
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.TextBoxFor(s => s.NextPaymentOnNote, new { @class = "control-label datepicker" }) <em>MM/dd/yyyy</em>
                        @Html.ValidationMessageFor(model => model.NextPaymentOnNote)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.BalloonDateForPayoffOfNote, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.TextBoxFor(s => s.BalloonDateForPayoffOfNote, new { @class = "control-label datepicker" }) <em>MM/dd/yyyy</em>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.SecuringPropertyAppraisal, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.TextBoxFor(s => s.SecuringPropertyAppraisal, new { @class = "control-label formatNumber" })
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.WasPropertyDistressed, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.RadioButtonFor(s => s.WasPropertyDistressed, "true") Yes
                    @Html.RadioButtonFor(s => s.WasPropertyDistressed, "false") No
                        @Html.RadioButtonFor(s => s.WasPropertyDistressed, "false") Unknown
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.PaymentHistory, new { @class = "control-label" })  <span style="color: red;">*</span>
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.DropDownListFor(model => model.PaymentHistory, Model.PaymentHistories as IEnumerable<SelectListItem>, "---")
                        @Html.ValidationMessageFor(model => model.PaymentHistory)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.SellerCarryNoteSalesDate, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.TextBoxFor(s => s.SellerCarryNoteSalesDate, new { @class = "control-label datepicker" }) <em>MM/dd/yyyy</em>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.SellerCarryNotePrice, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.TextBoxFor(s => s.SellerCarryNotePrice, new { @class = "control-label formatNumber" })
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.SellerCarryNoteCashDown, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.TextBoxFor(s => s.SellerCarryNoteCashDown, new { @class = "control-label formatNumber" })
                    </div>
                </div>
            </div>
            <hr />
        </div>
        
        <div id="section6">
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.IsNoteWRAP, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group" style="padding-top: 5px">
                        @Html.RadioButtonFor(s => s.IsNoteWRAP, "true", new { onclick = "toggleWRAP(true)" }) Yes
                        @Html.RadioButtonFor(s => s.IsNoteWRAP, "false", new { onclick = "toggleWRAP(false)" }) No                    
                        @Html.ValidationMessageFor(model => model.IsNoteWRAP)
                    </div>
                </div>
            </div>
            <div id="wrapFields">
                <div class="row">
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.LabelFor(s => s.OriginalPrincipalBalanceWRAP, new { @class = "control-label" })
                        </div>
                    </div>
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.TextBoxFor(s => s.OriginalPrincipalBalanceWRAP, new { @class = "control-label formatNumber" })
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.LabelFor(s => s.TotalMonthlyPaymentWRAP, new { @class = "control-label" })
                        </div>
                    </div>
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.TextBoxFor(s => s.TotalMonthlyPaymentWRAP, new { @class = "control-label formatNumber" })
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.LabelFor(s => s.FirstmortgageBalanceWRAP, new { @class = "control-label" })
                        </div>
                    </div>
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.TextBoxFor(s => s.FirstmortgageBalanceWRAP, new { @class = "control-label formatNumber" })
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.LabelFor(s => s.FirstInterestRateWRAP, new { @class = "control-label" })
                        </div>
                    </div>
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.TextBoxFor(s => s.FirstInterestRateWRAP, new { @class = "control-label formatNumber" })
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.LabelFor(s => s.FirstMortgagePaymentWRAP, new { @class = "control-label" })
                        </div>
                    </div>
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.TextBoxFor(s => s.FirstMortgagePaymentWRAP, new { @class = "control-label formatNumber" })
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.LabelFor(s => s.SecondMortgageBalanceWRAP, new { @class = "control-label" })
                        </div>
                    </div>
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.TextBoxFor(s => s.SecondMortgageBalanceWRAP, new { @class = "control-label formatNumber" })
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.LabelFor(s => s.SecondInterestRateWRAP, new { @class = "control-label" })
                        </div>
                    </div>
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.TextBoxFor(s => s.SecondInterestRateWRAP, new { @class = "control-label formatNumber" })
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.LabelFor(s => s.SecondMortgagePaymentWRAP, new { @class = "control-label" })
                        </div>
                    </div>
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.TextBoxFor(s => s.SecondMortgagePaymentWRAP, new { @class = "control-label formatNumber" })
                        </div>
                    </div>
                </div>
            </div>
            <hr />
        </div>
        
        <div id="section7">
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.NoteServicedByAgent, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.RadioButtonFor(s => s.NoteServicedByAgent, "true", new { onclick = "toggleServicingAgent(true)" }) Yes
                    @Html.RadioButtonFor(s => s.NoteServicedByAgent, "false", new { onclick = "toggleServicingAgent(false)" }) No
                    </div>
                </div>
            </div>
            <div id="ServingAgentDiv">
                <div class="row">
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.LabelFor(s => s.AgentName, new { @class = "control-label" })
                        </div>
                    </div>
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.TextBoxFor(s => s.AgentName, new { @class = "control-label" })
                            @Html.ValidationMessageFor(model => model.AgentName)

                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.LabelFor(s => s.AgentPhone, new { @class = "control-label" })
                        </div>
                    </div>
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.TextBoxFor(s => s.AgentPhone, new { @class = "control-label" })
                            @Html.ValidationMessageFor(model => model.AgentPhone)
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.LabelFor(s => s.AgentEmail, new { @class = "control-label" })
                        </div>
                    </div>
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.TextBoxFor(s => s.AgentEmail, new { @class = "control-label" })
                            @Html.ValidationMessageFor(model => model.AgentEmail)
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.LabelFor(s => s.AgentAccountNumber, new { @class = "control-label" })
                        </div>
                    </div>
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.TextBoxFor(s => s.AgentAccountNumber, new { @class = "control-label" })
                            @Html.ValidationMessageFor(model => model.AgentAccountNumber)
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.LabelFor(s => s.AgentContactPerson, new { @class = "control-label" })
                        </div>
                    </div>
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.TextBoxFor(s => s.AgentContactPerson, new { @class = "control-label" })
                            @Html.ValidationMessageFor(model => model.AgentContactPerson)
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.LabelFor(s => s.AuthorizeForwardPaymentHistory, new { @class = "control-label" })
                        </div>
                    </div>
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.RadioButtonFor(s => s.AuthorizeForwardPaymentHistory, "true") Yes
                        @Html.RadioButtonFor(s => s.AuthorizeForwardPaymentHistory, "false") No
                            @Html.ValidationMessageFor(model => model.AuthorizeForwardPaymentHistory)
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.LabelFor(s => s.AgentAddress, new { @class = "control-label" })
                        </div>
                    </div>
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.TextBoxFor(s => s.AgentAddress, new { @class = "control-label" })
                            @Html.ValidationMessageFor(model => model.AgentAddress)
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.LabelFor(s => s.AgentCity, new { @class = "control-label" })
                        </div>
                    </div>
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.TextBoxFor(s => s.AgentCity, new { @class = "control-label" })
                            @Html.ValidationMessageFor(model => model.AgentCity)
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.LabelFor(s => s.AgentState, new { @class = "control-label" })
                        </div>
                    </div>
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.TextBoxFor(s => s.AgentState, new { @class = "control-label" })
                            @Html.ValidationMessageFor(model => model.AgentState)
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.LabelFor(s => s.AgentZip, new { @class = "control-label" })
                        </div>
                    </div>
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.TextBoxFor(s => s.AgentZip, new { @class = "control-label" })
                            @Html.ValidationMessageFor(model => model.AgentZip)
                        </div>
                    </div>
                </div>
            </div>
            <hr />
        </div>
        
        <div id="section8">
            <h3>CRE Note Pricing and Terms</h3>
            <div style="background-color: lightgrey; border: 1px solid #000; padding: 5px; margin-bottom: 5px;">
                <em>
                    You are encouraged to continuously update your CRE Note Pricing and Terms Data for each CRE Mortgage Note Asset in your Portfolio (e.g., Quarterly, Semi-Annual, etc.).  USC Asset Views on each of your Note Assets, and the Asset View on your Portfolio of Note Assets display the equivalent of a real time offering memorandum on your Portfolio to all USC Registered PI’s; and by having your data regularly updated you will be able to market (“Publish”) your selected Portfolio to Millions of CRE Industry Participants through USC… without the need for further preparation… with just one click.
                </em>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.AskingSalePrice, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.TextBoxFor(s => s.AskingSalePrice, new { @class = "control-label formatNumber" })
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.OfferingPriceDeterminedByMarketBidding, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.RadioButtonFor(s => s.OfferingPriceDeterminedByMarketBidding, "true", new { onchange = "toggleBidsSection(true)" }) Yes
                        @Html.RadioButtonFor(s => s.OfferingPriceDeterminedByMarketBidding, "false", new { onchange = "toggleBidsSection(false)" }) No
                    </div>
                </div>
            </div>
            <div class="row" id="bidsDueDate" style="display: none;">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.IndicativeBidsDueDate, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.TextBoxFor(model => model.IndicativeBidsDueDate, new { @class = "datepicker" }) <em>MM/dd/yyyy</em>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.CallforOffersDate)
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.TextBoxFor(s => s.CallforOffersDate, new { @class = "datepicker" }) <em>MM/dd/yyyy</em>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.TermId, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.DropDownListFor(model => model.TermId, Model.TermTypes as IEnumerable<SelectListItem>)
                    </div>
                </div>
            </div>
            <div class="row" id="termsOtherDiv">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.TermsOther, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.TextAreaFor(s => s.TermsOther, new { @class = "form-control", @rows = "4", @cols = "95" })
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(model => model.isParticipateTaxExchange)
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group" style="line-height: 34px">
                        @Html.RadioButtonFor(s => s.isParticipateTaxExchange, "true") Yes
                        @Html.RadioButtonFor(s => s.isParticipateTaxExchange, "false") No
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.HasEnvironmentalIssues, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.RadioButtonFor(s => s.HasEnvironmentalIssues, "true") Yes
                        @Html.RadioButtonFor(s => s.HasEnvironmentalIssues, "false") No
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.AreEnviDocsProvided, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.RadioButtonFor(s => s.AreEnviDocsProvided, "true") Yes
                        @Html.RadioButtonFor(s => s.AreEnviDocsProvided, "false") No
                    </div>
                </div>
            </div>
            @*<div class="row">
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.LabelFor(s => s.EnvironmentalIssues, new { @class = "control-label" })
                </div>
            </div>
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.TextBoxFor(s => s.EnvironmentalIssues, new { @class = "control-label" })
                </div>
            </div>
        </div>*@
            @*<div class="row">
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.LabelFor(s => s.MotivationToLiquidate, new { @class = "control-label" })
                </div>
            </div>
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.TextBoxFor(s => s.MotivationToLiquidate, new { @class = "control-label" })
                </div>
            </div>
        </div>*@
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(model => model.isPendingForeclosure)
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group" style="line-height: 34px">
                        @Html.RadioButtonFor(s => s.isPendingForeclosure, "true", new { onchange = "toggleForeclosureSection(true)" }) Yes
                        @Html.RadioButtonFor(s => s.isPendingForeclosure, "false", new { onchange = "toggleForeclosureSection(false)" }) No
                    </div>
                </div>
            </div>
            <div id="foreclosureSection" style="display: none;">
                <div class="row">
                    <div class="col-sm-6">
                        <div class="input-group">
                            @Html.LabelFor(model => model.ForeclosureLender)
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="input-group" style="line-height: 34px">
                            @Html.EditorFor(model => model.ForeclosureLender)
                            @Html.ValidationMessageFor(model => model.ForeclosureLender)
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-6">
                        <div class="input-group">
                            @Html.LabelFor(model => model.ForeclosurePosition)
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="input-group" style="line-height: 34px">
                            @Html.EnumDropDownList("Position", Model.ForeclosurePosition, "---")
                            @Html.ValidationMessageFor(model => model.ForeclosurePosition)
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-6">
                        <div class="input-group">
                            @Html.LabelFor(model => model.ForeclosureRecordNumber)
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="input-group" style="line-height: 34px">
                            @Html.EditorFor(model => model.ForeclosureRecordNumber)
                            @Html.ValidationMessageFor(model => model.ForeclosureRecordNumber)
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-6">
                        <div class="input-group">
                            @Html.LabelFor(model => model.ForeclosureOriginalMortgageAmount)
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="input-group" style="line-height: 34px">
                            @Html.TextBoxFor(model => model.ForeclosureOriginalMortgageAmount, new { @class = "formatNumber" })
                            @Html.ValidationMessageFor(model => model.ForeclosureOriginalMortgageAmount)
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-6">
                        <div class="input-group">
                            @Html.LabelFor(model => model.ForeclosureOriginalMortageDate)
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="input-group" style="line-height: 34px">
                            @Html.TextBoxFor(model => model.ForeclosureOriginalMortageDate, new { @class = "datepicker" }) <em>MM/dd/yyyy</em>
                            @Html.ValidationMessageFor(model => model.ForeclosureOriginalMortageDate)
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-6">
                        <div class="input-group">
                            @Html.LabelFor(model => model.ForeclosureSaleDate)
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="input-group" style="line-height: 34px">
                            @Html.TextBoxFor(model => model.ForeclosureSaleDate, new { @class = "datepicker" }) <em>MM/dd/yyyy</em>
                            @Html.ValidationMessageFor(model => model.ForeclosureSaleDate)
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-6">
                        <div class="input-group">
                            @Html.LabelFor(model => model.ForeclosureRecordDate)
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="input-group" style="line-height: 34px">
                            @Html.TextBoxFor(model => model.ForeclosureRecordDate, new { @class = "datepicker" }) <em>MM/dd/yyyy</em>
                            @Html.ValidationMessageFor(model => model.ForeclosureRecordDate)
                        </div>
                    </div>
                </div>
            </div>
            <hr />
        </div>
        
        <div id="sectionBeforeDeferredmaintenance1">
            <h3>Note Payor Information</h3>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.NotePayerName, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.TextBoxFor(s => s.NotePayerName, new { @class = "control-label" })
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.NotePayerFullName, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.TextBoxFor(s => s.NotePayerFullName, new { @class = "control-label" })
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.NotePayerContactAddress, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.TextBoxFor(s => s.NotePayerContactAddress, new { @class = "control-label" })
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.NotePayerCity, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.TextBoxFor(s => s.NotePayerCity, new { @class = "control-label" })
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.NotePayerState, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.DropDownListFor(model => model.NotePayerState, Model.States as IEnumerable<SelectListItem>, "---")
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.NotePayerZip, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.TextBoxFor(s => s.NotePayerZip, new { @class = "control-label" })
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.NotePayerPhoneCell, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.TextBoxFor(s => s.NotePayerPhoneCell, new { @class = "control-label" })
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.NotePayerPhoneWork, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.TextBoxFor(s => s.NotePayerPhoneWork, new { @class = "control-label" })
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.NotePayerFax, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.TextBoxFor(s => s.NotePayerFax, new { @class = "control-label" })
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.NotePayerEmail, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.TextBoxFor(s => s.NotePayerEmail, new { @class = "control-label" })
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.NotePayerSSNOrTIN, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.TextBoxFor(s => s.NotePayerSSNOrTIN, new { @class = "control-label" })
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.NotePayerFICO, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.TextBoxFor(s => s.NotePayerFICO, new { @class = "control-label" })
                    </div>
                </div>
            </div>
            <hr />
        </div>
        
        <div id="sectionBeforeDeferredMaintenance2">
            <h3>Existing Senior Position Mortgage to Subject Note</h3>
            <em>This Section is only applicable if your Note is a Junior Position Note to an existing Senior Position Note secured by subject property. If you &lt;click&gt; Yes… there will be a list of applicable data field questions for you to answer.  Thank you.</em>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.HasPositionMortgage, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.RadioButtonFor(s => s.HasPositionMortgage, Inview.Epi.EpiFund.Domain.Enum.PositionMortgageType.Yes, new { onchange = "toggleMortgage(1)" }) Yes
                        @Html.RadioButtonFor(s => s.HasPositionMortgage, Inview.Epi.EpiFund.Domain.Enum.PositionMortgageType.No, new { onchange = "toggleMortgage(4)" }) No
                        @Html.RadioButtonFor(s => s.HasPositionMortgage, Inview.Epi.EpiFund.Domain.Enum.PositionMortgageType.Unknown, new { onchange = "toggleMortgage(4)" }) Unknown
                        @Html.ValidationMessageFor(model => model.HasPositionMortgage)
                    </div>
                </div>
            </div>
            <div id="hasMortgage">
                <div class="row">
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.LabelFor(s => s.MortgageLienType, new { @class = "control-label" })

                        </div>
                    </div>
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.RadioButtonFor(s => s.MortgageLienType, Inview.Epi.EpiFund.Domain.Enum.MortgageLienType.Recourse, new { @class = "mltRecourse" }) Recourse
                            @Html.RadioButtonFor(s => s.MortgageLienType, Inview.Epi.EpiFund.Domain.Enum.MortgageLienType.NonRecourse, new { @class = "mltNonRecourse" }) Non-Recourse
                            @Html.RadioButtonFor(s => s.MortgageLienType, Inview.Epi.EpiFund.Domain.Enum.MortgageLienType.Unknown, new { @class = "mltUnknown" }) Unknown
                            @Html.ValidationMessageFor(model => model.MortgageLienType)
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.LabelFor(s => s.MortgageLienAssumable, new { @class = "control-label" })

                        </div>
                    </div>
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.RadioButtonFor(s => s.MortgageLienAssumable, Inview.Epi.EpiFund.Domain.Enum.MortgageLienAssumable.Yes, new { @class = "mlaYes" }) Yes
                            @Html.RadioButtonFor(s => s.MortgageLienAssumable, Inview.Epi.EpiFund.Domain.Enum.MortgageLienAssumable.No, new { @class = "mlaNo" }) No
                            @Html.RadioButtonFor(s => s.MortgageLienAssumable, Inview.Epi.EpiFund.Domain.Enum.MortgageLienAssumable.Unknown, new { @class = "mlaUnknown" }) Unknown
                            @Html.ValidationMessageFor(model => model.MortgageLienAssumable)
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.LabelFor(s => s.FirstMortgageCompany, new { @class = "control-label" })
                        </div>
                    </div>
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.TextBoxFor(s => s.FirstMortgageCompany, new { @class = "control-label" })
                            @Html.ValidationMessageFor(model => model.FirstMortgageCompany)
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.LabelFor(s => s.MortgageCompanyAddress, new { @class = "control-label" })
                        </div>
                    </div>
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.TextBoxFor(s => s.MortgageCompanyAddress, new { @class = "control-label" })
                            @Html.ValidationMessageFor(model => model.MortgageCompanyAddress)
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.LabelFor(s => s.MortgageCompanyCity, new { @class = "control-label" })
                        </div>
                    </div>
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.TextBoxFor(s => s.MortgageCompanyCity, new { @class = "control-label" })
                            @Html.ValidationMessageFor(model => model.MortgageCompanyCity)
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.LabelFor(s => s.MortgageCompanyState, new { @class = "control-label" })
                        </div>
                    </div>
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.DropDownListFor(model => model.MortgageCompanyState, Model.States as IEnumerable<SelectListItem>, "---")
                            @Html.ValidationMessageFor(model => model.MortgageCompanyState)
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.LabelFor(s => s.MortgageCompanyZip, new { @class = "control-label" })
                        </div>
                    </div>
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.TextBoxFor(s => s.MortgageCompanyZip, new { @class = "control-label" })
                            @Html.ValidationMessageFor(model => model.MortgageCompanyZip)
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.LabelFor(s => s.LenderPhone, new { @class = "control-label" })
                        </div>
                    </div>
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.TextBoxFor(s => s.LenderPhone, new { @class = "control-label" })
                            @Html.ValidationMessageFor(model => model.LenderPhone)
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.LabelFor(s => s.LenderPhoneOther, new { @class = "control-label" })
                        </div>
                    </div>
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.TextBoxFor(s => s.LenderPhoneOther, new { @class = "control-label" })
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.LabelFor(s => s.AccountNumber, new { @class = "control-label" })
                        </div>
                    </div>
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.TextBoxFor(s => s.AccountNumber, new { @class = "control-label" })
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.LabelFor(s => s.CurrentPrincipalBalance, new { @class = "control-label" })
                        </div>
                    </div>
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.TextBoxFor(s => s.CurrentPrincipalBalance, new { @class = "control-label formatNumber" })
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.LabelFor(s => s.MonthlyPayment, new { @class = "control-label" })
                        </div>
                    </div>
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.TextBoxFor(s => s.MonthlyPayment, new { @class = "control-label formatNumber" })
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.LabelFor(s => s.PaymentIncludes, new { @class = "control-label" })
                        </div>
                    </div>
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.DropDownListFor(model => model.PaymentIncludes, Model.PaymentTypes as IEnumerable<SelectListItem>, "---")
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.LabelFor(s => s.InterestRate, new { @class = "control-label" })
                        </div>
                    </div>
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.TextBoxFor(s => s.InterestRate, new { @class = "control-label formatNumber" }) %
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.LabelFor(s => s.IsMortgageAnARM, new { @class = "control-label" })
                        </div>
                    </div>
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.RadioButtonFor(model => model.IsMortgageAnARM, "true") Yes
                            @Html.RadioButtonFor(model => model.IsMortgageAnARM, "false") No
                            @Html.RadioButtonFor(model => model.IsMortgageAnARM, "false") Unknown
                            @*@Html.RadioButtonFor(s => s.IsMortgageAnARM, "Yes") Yes
                        @Html.RadioButtonFor(s => s.IsMortgageAnARM, "No") No
                        @Html.RadioButtonFor(s => s.IsMortgageAnARM, "Unknown") Unknown*@
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-6">
                        <div class="input-group">
                            @Html.LabelFor(model => model.SelectedAmortSchedule)
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="input-group">
                            @Html.DropDownListFor(model => model.SelectedAmortSchedule, Model.AmortizationScheduleList as IEnumerable<SelectListItem>, "---")
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.LabelFor(s => s.MortgageAdjustIfARM, new { @class = "control-label" })
                        </div>
                    </div>
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.TextBoxFor(s => s.MortgageAdjustIfARM, new { @class = "control-label datepicker" }) <em>MM/dd/yyyy</em>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.LabelFor(s => s.BalloonDateOfNote, new { @class = "control-label" })
                        </div>
                    </div>
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.TextBoxFor(s => s.BalloonDateOfNote, new { @class = "control-label datepicker" }) <em>MM/dd/yyyy</em>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.LabelFor(s => s.NumberOfMissedPayments, new { @class = "control-label" })
                        </div>
                    </div>
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.TextBoxFor(s => s.NumberOfMissedPayments, new { @class = "control-label formatNumber" })
                        </div>
                    </div>
                </div>
            </div>
            <hr />
        </div>
        
        <div id="section9DeferredMaintenance">
            <h3>Securing Property Deferred Maintenance</h3>
            <div id="maintainance">
                <div class="mfDiv">
                    <div class="row">
                        <div class="col-lg-6">
                            <div class="input-group">
                                @Html.LabelFor(model => model.HasDeferredMaintenance)
                            </div>
                        </div>
                        <div class="col-lg-6">
                            <div class="input-group">
                                @Html.RadioButtonFor(model => model.HasDeferredMaintenance, "true", new { style = "margin-top: 10px;", onclick = "toggleDeferredMaintenanceDetailsMF(true)" }) Yes
                                @Html.RadioButtonFor(model => model.HasDeferredMaintenance, "false", new { style = "margin-top: 10px;", onclick = "toggleDeferredMaintenanceDetailsMF(false)" }) No
                            </div>
                        </div>
                        <div class="col-lg-6">
                            <div class="input-group">
                                @Html.ValidationMessageFor(model => model.HasDeferredMaintenance)
                            </div>
                        </div>
                    </div>
                    <div id="deferredMaintenanaceDetailsMF" style="display: none;">
                        <div style="background-color: lightgrey; border: 1px solid #000; padding: 5px; margin-bottom: 5px;">
                            <em>The “Estimated Deferred Maintenance (“EDM”) data field auto calculates based on your selections in the categories below EDM.  Before you &lt;click&gt; an applicable EDM checkbox, confirm the data in the [UNIT COST] box and [# of Buildings/Units] box.  Each time you &lt;click&gt; an applicable EDM checkbox you will see the EDM data field calculate your estimate for deferred maintenance change.
                            </em>
                        </div>
                        <div class="row">
                            <div class="col-sm-6">
                                <div class="input-group">
                                    @Html.LabelFor(s => s.AverageAdjustmentToBaseRentalIncomePerUnitAfterRenovations)
                                </div>
                            </div>
                            <div class="col-sm-6">
                                <div class="input-group">
                                    @Html.TextBoxFor(s => s.AverageAdjustmentToBaseRentalIncomePerUnitAfterRenovations, new { @class = "formatNumber" })
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-sm-6">
                                <div class="input-group">
                                    @Html.LabelFor(model => model.EstDeferredMaintenance)
                                </div>
                            </div>
                            <div class="col-sm-6">
                                <div class="input-group">
                                    @Html.TextBoxFor(s => s.EstDeferredMaintenance, new { @readonly = "readonly", @class = "formatNumber" })
                                    @*<input type="text" name="EstDeferredMaintenance" id="EstDeferredMaintenance" class="formatNumber" value="@((Model as MultiFamilyAssetViewModel).EstDeferredMaintenance)" readonly />*@
                                </div>
                            </div>
                            <div class="col-sm-6">
                                <div class="input-group">
                                </div>
                            </div>
                        </div>
                        @for (int i = 0; i < Model.DeferredMaintenanceItemsMF.Count; i++)
                        {
                            <div class="document-item">
                                <div class="row">
                                    <div class="col-sm-5">
                                        @Html.CheckBoxFor(s => Model.DeferredMaintenanceItemsMF[i].Selected, new { onchange = "calculateEstimatedDeferredMaintenance()" })
                                        <label>@Model.DeferredMaintenanceItemsMF[i].ItemTitle</label>
                                    </div>
                                    @if (Model.DeferredMaintenanceItemsMF[i].ItemTitle != null && Model.DeferredMaintenanceItemsMF[i].ItemTitle.Contains("Other"))
                                    {
                                        <div class="col-sm-7" style="text-align: right;">
                                            <label>Description:</label>
                                            @Html.TextBoxFor(s => Model.DeferredMaintenanceItemsMF[i].ItemDescription, new { onchange = "checkText(this)" })
                                            <label>Unit Cost:</label>
                                            @Html.TextBoxFor(s => Model.DeferredMaintenanceItemsMF[i].UnitCost, new { @class = "formatMaint", style = "width: 60px; margin-right:5px;", onchange = "addCommasToInputAndCalculate(this)" })
                                            @Html.HiddenFor(s => Model.DeferredMaintenanceItemsMF[i].NumberOfUnits, new { Value = "1" })
                                        </div>
                        
                                    }
                                    else if (Model.DeferredMaintenanceItemsMF[i].ItemTitle != null && Model.DeferredMaintenanceItemsMF[i].ItemTitle.Contains("Parking Structure"))
                                    {
                                        <div class="col-sm-7" style="text-align: right;">
                                            <label>Unit Cost:</label>
                                            @Html.TextBoxFor(s => Model.DeferredMaintenanceItemsMF[i].UnitCost, new { @class = "formatMaint", style = "width: 60px; margin-right:5px;", onchange = "addCommasToInputAndCalculate(this)" })
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="col-sm-7" style="text-align: right;">
                                            <label>Unit Cost:</label>
                                            @Html.TextBoxFor(s => Model.DeferredMaintenanceItemsMF[i].UnitCost, new { @class = "formatMaint", style = "width: 60px; margin-right:5px;", onchange = "addCommasToInputAndCalculate(this)" })
                                            @if (Model.DeferredMaintenanceItemsMF[i].UnitTypeLabel != null)
                                            {
                                                <label>Number of @Model.DeferredMaintenanceItemsMF[i].UnitTypeLabel:</label>
                                                @Html.TextBoxFor(s => Model.DeferredMaintenanceItemsMF[i].NumberOfUnits, new { @class = "formatMaint", style = "margin-left: 5px; width: 60px;", onchange = "addCommasToInputAndCalculate(this)" })
                                            }
                                        </div>
                                    }
                                </div>
                                @Html.HiddenFor(s => Model.DeferredMaintenanceItemsMF[i].MaintenanceDetail)
                                @Html.HiddenFor(s => Model.DeferredMaintenanceItemsMF[i].UnitCost)
                                @Html.HiddenFor(s => Model.DeferredMaintenanceItemsMF[i].UnitTypeLabel)
                                @Html.HiddenFor(s => Model.DeferredMaintenanceItemsMF[i].NumberOfUnits)
                                @Html.HiddenFor(s => Model.DeferredMaintenanceItemsMF[i].ItemTitle)
                            </div>
                        }


                    </div>
                </div>
                <div class="mhpDiv">
                    <div class="row">
                        <div class="col-lg-6">
                            <div class="input-group">
                                @Html.LabelFor(model => model.HasDeferredMaintenance)
                            </div>
                        </div>
                        <div class="col-lg-6">
                            <div class="input-group">
                                @Html.RadioButtonFor(model => model.HasDeferredMaintenance, "true", new { style = "margin-top: 10px;", onclick = "toggleDeferredMaintenanceDetailsMHP(true)" }) Yes
                                @Html.RadioButtonFor(model => model.HasDeferredMaintenance, "false", new { style = "margin-top: 10px;", onclick = "toggleDeferredMaintenanceDetailsMHP(false)" }) No
                            </div>
                        </div>
                        <div class="col-lg-6">
                            <div class="input-group">
                                @Html.ValidationMessageFor(model => model.HasDeferredMaintenance)
                            </div>
                        </div>
                    </div>
                    <div id="deferredMaintenanaceDetailsMHP" style="display: none;">
                        <div style="background-color: lightgrey; border: 1px solid #000; padding: 5px; margin-bottom: 5px;">
                            <em>The “Estimated Deferred Maintenance (“EDM”) data field auto calculates based on your selections in the categories below EDM.  Before you &lt;click&gt; an applicable EDM checkbox, confirm the data in the [UNIT COST] box and [# of Buildings/Units] box.  Each time you &lt;click&gt; an applicable EDM checkbox you will see the EDM data field calculate your estimate for deferred maintenance change.
                            </em>
                        </div>
                        <div class="row">
                            <div class="col-sm-6">
                                <div class="input-group">
                                    @Html.LabelFor(s => s.AverageAdjustmentToBaseRentalIncomePerUnitAfterRenovations)
                                </div>
                            </div>
                            <div class="col-sm-6">
                                <div class="input-group">
                                    @Html.TextBoxFor(s => s.AverageAdjustmentToBaseRentalIncomePerUnitAfterRenovations, new { @class = "formatNumber" })
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-sm-6">
                                <div class="input-group">
                                    @Html.LabelFor(model => model.EstDeferredMaintenance)
                                </div>
                            </div>
                            <div class="col-sm-6">
                                <div class="input-group">
                                    @Html.TextBoxFor(s => s.EstDeferredMaintenance, new { @readonly = "readonly", @class = "formatNumber" })
                                    @*<input type="text" name="EstDeferredMaintenance" id="EstDeferredMaintenance" class="formatNumber" value="@((Model as MultiFamilyAssetViewModel).EstDeferredMaintenance)" readonly />*@
                                </div>
                            </div>
                            <div class="col-sm-6">
                                <div class="input-group">
                                </div>
                            </div>
                        </div>
                       @for (int i = 0; i < Model.DeferredMaintenanceItemsMF.Count; i++)
                        {
                            <div class="document-item">
                                <div class="row">
                                    <div class="col-sm-5">
                                        @Html.CheckBoxFor(s => Model.DeferredMaintenanceItemsMF[i].Selected, new { onchange = "calculateEstimatedDeferredMaintenance()" })
                                        <label>@Model.DeferredMaintenanceItemsMF[i].ItemTitle</label>
                                    </div>
                                    @if (Model.DeferredMaintenanceItemsMF[i].ItemTitle != null && Model.DeferredMaintenanceItemsMF[i].ItemTitle.Contains("Other"))
                                    {
                                        <div class="col-sm-7" style="text-align: right;">
                                            <label>Description:</label>
                                            @Html.TextBoxFor(s => Model.DeferredMaintenanceItemsMF[i].ItemDescription, new { onchange = "checkText(this)" })
                                            <label>Unit Cost:</label>
                                            @Html.TextBoxFor(s => Model.DeferredMaintenanceItemsMF[i].UnitCost, new { @class = "formatMaint", style = "width: 60px; margin-right:5px;", onchange = "addCommasToInputAndCalculate(this)" })
                                            @Html.HiddenFor(s => Model.DeferredMaintenanceItemsMF[i].NumberOfUnits, new { Value = "1" })
                                        </div>
                        
                                    }
                                    else if (Model.DeferredMaintenanceItemsMF[i].ItemTitle != null && Model.DeferredMaintenanceItemsMF[i].ItemTitle.Contains("Parking Structure"))
                                    {
                                        <div class="col-sm-7" style="text-align: right;">
                                            <label>Unit Cost:</label>
                                            @Html.TextBoxFor(s => Model.DeferredMaintenanceItemsMF[i].UnitCost, new { @class = "formatMaint", style = "width: 60px; margin-right:5px;", onchange = "addCommasToInputAndCalculate(this)" })
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="col-sm-7" style="text-align: right;">
                                            <label>Unit Cost:</label>
                                            @Html.TextBoxFor(s => Model.DeferredMaintenanceItemsMF[i].UnitCost, new { @class = "formatMaint", style = "width: 60px; margin-right:5px;", onchange = "addCommasToInputAndCalculate(this)" })
                                            @if (Model.DeferredMaintenanceItemsMF[i].UnitTypeLabel != null)
                                            {
                                                <label>Number of @Model.DeferredMaintenanceItemsMF[i].UnitTypeLabel:</label>
                                                @Html.TextBoxFor(s => Model.DeferredMaintenanceItemsMF[i].NumberOfUnits, new { @class = "formatMaint", style = "margin-left: 5px; width: 60px;", onchange = "addCommasToInputAndCalculate(this)" })
                                            }
                                        </div>
                                    }
                                </div>
                                @Html.HiddenFor(s => Model.DeferredMaintenanceItemsMF[i].MaintenanceDetail)
                                @Html.HiddenFor(s => Model.DeferredMaintenanceItemsMF[i].UnitCost)
                                @Html.HiddenFor(s => Model.DeferredMaintenanceItemsMF[i].UnitTypeLabel)
                                @Html.HiddenFor(s => Model.DeferredMaintenanceItemsMF[i].NumberOfUnits)
                                @Html.HiddenFor(s => Model.DeferredMaintenanceItemsMF[i].ItemTitle)
                            </div>
                        }


                    </div>
                </div>
                <div class="commercialDiv">
                    <div class="row">
                        <div class="col-lg-6">
                            <div class="input-group">
                                @Html.LabelFor(model => model.HasDeferredMaintenance)
                            </div>
                        </div>
                        <div class="col-lg-6">
                            <div class="input-group">
                                @Html.RadioButtonFor(model => model.HasDeferredMaintenance, "true", new { style = "margin-top: 10px;", onclick = "toggleDeferredMaintenanceDetailsCOM(true)" }) Yes
                                @Html.RadioButtonFor(model => model.HasDeferredMaintenance, "false", new { style = "margin-top: 10px;", onclick = "toggleDeferredMaintenanceDetailsCOM(false)" }) No
                            </div>
                        </div>
                        <div class="col-lg-6">
                            <div class="input-group">
                                @Html.ValidationMessageFor(model => model.HasDeferredMaintenance)
                            </div>
                        </div>
                    </div>
                    <div id="deferredMaintenanaceDetailsCOM" style="display: none;">
                        <div style="background-color: lightgrey; border: 1px solid #000; padding: 5px; margin-bottom: 5px;">
                            <em>The “Estimated Deferred Maintenance (“EDM”) data field auto calculates based on your selections in the categories below EDM.  Before you &lt;click&gt; an applicable EDM checkbox, confirm the data in the [UNIT COST] box and [# of Buildings/Units] box.  Each time you &lt;click&gt; an applicable EDM checkbox you will see the EDM data field calculate your estimate for deferred maintenance change.
                            </em>
                        </div>
                        <div class="row">
                            <div class="col-sm-6">
                                <div class="input-group">
                                    <label>Average Adjustment to Base Rental Income after Renovations</label>
                                </div>
                            </div>
                            <div class="col-sm-6">
                                <div class="input-group">
                                    @Html.TextBoxFor(s => s.AverageAdjustmentToBaseRentalIncomePerUnitAfterRenovations, new { @class = "formatNumber" })
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-sm-6">
                                <div class="input-group">
                                    <label>Estimated Deferred Maintenance</label>
                                </div>
                            </div>
                            <div class="col-sm-6">
                                <div class="input-group">
                                    @Html.TextBoxFor(s => s.EstDeferredMaintenance, new { @readonly = "readonly", @class = "formatNumber" })
                                    @*<input type="text" name="EstDeferredMaintenance" id="EstDeferredMaintenance" class="formatNumber" value="@((Model as MultiFamilyAssetViewModel).EstDeferredMaintenance)" readonly />*@
                                </div>
                            </div>
                            <div class="col-sm-6">
                                <div class="input-group">
                                </div>
                            </div>
                        </div>
                        @for (int i = 0; i < Model.DeferredMaintenanceItems.Count; i++)
                        {
                            <div class="document-item">
                                <div class="row">
                                    <div class="col-sm-5">
                                        @Html.CheckBoxFor(s => Model.DeferredMaintenanceItems[i].Selected, new { onchange = "calculateEstimatedDeferredMaintenance()" })
                                        <label>@Model.DeferredMaintenanceItems[i].ItemTitle</label>
                                    </div>

                                    @if (Model.DeferredMaintenanceItems[i].UnitTypeLabel != null && Model.DeferredMaintenanceItems[i].UnitTypeLabel.Contains("Sq.Ft"))
                                    {
                                        <div class="col-sm-7" style="text-align: right;">
                                            <label>Base Cost per Sq.Ft.:</label>
                                            @Html.TextBoxFor(s => Model.DeferredMaintenanceItems[i].UnitCost, new { @class = "formatMaint", style = "width: 60px; margin-right:5px;", onchange = "addCommasToInputAndCalculate(this)" })
                                            @if (Model.DeferredMaintenanceItems[i].UnitTypeLabel != null)
                                            {
                                                <label>@Model.DeferredMaintenanceItems[i].UnitTypeLabel:</label>
                                                @Html.TextBoxFor(s => Model.DeferredMaintenanceItems[i].NumberOfUnits, new { @class = "formatMaint", style = "margin-left: 5px; width: 60px;", onchange = "addCommasToInputAndCalculate(this)" })
                                            }
                                        </div>
                                    }
                                    else if (Model.DeferredMaintenanceItems[i].UnitTypeLabel != null && Model.DeferredMaintenanceItems[i].UnitTypeLabel.Contains("Base Estimate"))
                                    {
                                        <div class="col-sm-7" style="text-align: right;">
                                            @if (Model.DeferredMaintenanceItems[i].UnitTypeLabel != null)
                                            {
                                                <label>Base Estimate Per List Agent/Ownership:</label>
                                                @Html.TextBoxFor(s => Model.DeferredMaintenanceItems[i].UnitCost, new { @class = "formatMaint", style = "margin-left: 5px; width: 60px;", onchange = "addCommasToInputAndCalculate(this)" })
                                            }
                                        </div>
                        
                                    }
                                    else if (Model.DeferredMaintenanceItems[i].ItemTitle != null && Model.DeferredMaintenanceItems[i].ItemTitle.Contains("Other"))
                                    {
                                        <div class="col-sm-7" style="text-align: right;">
                                            <label>Description:</label>
                                            @Html.TextBoxFor(s => Model.DeferredMaintenanceItems[i].ItemDescription, new { onchange = "checkText(this)" })
                                            <label>Unit Cost:</label>
                                            @Html.TextBoxFor(s => Model.DeferredMaintenanceItems[i].UnitCost, new { @class = "formatMaint", style = "width: 60px; margin-right:5px;", onchange = "addCommasToInputAndCalculate(this)" })
                                            @Html.HiddenFor(s => Model.DeferredMaintenanceItems[i].NumberOfUnits, new { Value = "1" })
                                        </div>
                        
                                    }
                                    else if (Model.DeferredMaintenanceItems[i].ItemTitle != null && Model.DeferredMaintenanceItems[i].ItemTitle.Contains("Parking Structure"))
                                    {
                                        <div class="col-sm-7" style="text-align: right;">
                                            <label>Unit Cost:</label>
                                            @Html.TextBoxFor(s => Model.DeferredMaintenanceItems[i].UnitCost, new { @class = "formatMaint", style = "width: 60px; margin-right:5px;", onchange = "addCommasToInputAndCalculate(this)" })
                                        </div>
                                    }
                                    else
                                    {   
                                        <div class="col-sm-7" style="text-align: right;">
                                            <label>Unit Cost:</label>
                                            @Html.TextBoxFor(s => Model.DeferredMaintenanceItems[i].UnitCost, new { @class = "formatMaint", style = "width: 60px; margin-right:5px;", onchange = "addCommasToInputAndCalculate(this)" })
                                            @if (Model.DeferredMaintenanceItems[i].UnitTypeLabel != null)
                                            {
                                                <label>Number of @Model.DeferredMaintenanceItems[i].UnitTypeLabel:</label>
                                                @Html.TextBoxFor(s => Model.DeferredMaintenanceItems[i].NumberOfUnits, new { @class = "formatMaint", style = "margin-left: 5px; width: 60px;", onchange = "addCommasToInputAndCalculate(this)" })
                                            }
                                        </div>
                            
                                    }
                                </div>
                                @Html.HiddenFor(s => Model.DeferredMaintenanceItems[i].MaintenanceDetail)
                                @Html.HiddenFor(s => Model.DeferredMaintenanceItems[i].UnitCost)
                                @Html.HiddenFor(s => Model.DeferredMaintenanceItems[i].UnitTypeLabel)
                                @Html.HiddenFor(s => Model.DeferredMaintenanceItems[i].NumberOfUnits)
                                @Html.HiddenFor(s => Model.DeferredMaintenanceItems[i].ItemTitle)
                            </div>
                        }

                        @*@Html.EditorFor(s => Model.DeferredMaintenanceItems, "DeferredMaintenanceEditorTemplate")*@
                    </div>
                </div>
            </div>
            <hr />
        </div>
        
        <div id="section10Images">
            <h3>Securing Property Images</h3>
            <div style="background-color: lightgrey; border: 1px solid #000; padding: 5px; margin-bottom: 5px;">
                <em>You may upload as many images as you like for each New Property File.  The images must be in the form of JPEG, PNG, and or GIF.  To get started simply
                        < <a>click</a> > inside the shaded box below.  Doing so will cause your Desktop Window to pop-up.  Go to the data storage location for the image file of your respective Property Folder.  You may upload as many images <b>[<u>at one time</u>]</b> as you like.  Simply select the first image, then press the [Control Key] and select the last image in your File, then < <a>click</a> >
                        the [Open] or [Submit] button in your pop-up window.  You may repeat the process to add more images from a different folder in this New Asset Create Form, or do so through your <b>“My USC Page”</b> at any time.  You may also DELETE any image, and or select which image is to be your MAIN IMAGE, and or select which image(s) you would like in any e Flyers you intend to send in the future either in this New Asset Create Form, or do so through your <b>“My USC Page”</b> at any time.
                    </em>
            </div>
            <div id="dropzone" class="dropzone">
            </div>
            <hr />
        </div>
        
        <div id="section11Docs">
            <div id="documents">
                <h3>Due Diligence Documents on Note</h3>
                <div style="background-color: lightgrey; border: 1px solid #000; padding: 5px; margin-bottom: 5px;">
                    <em>Only PDF Documents will be accepted by USC.  Simply &lt;click&gt; the “Data Available” button to commence the upload process. 
                    You may change the “Title” of any uploaded documents in the [Title Bar] and add descriptive, clarifying text for each document in the [Description Bar] if you so choose.
                    </em>
                </div>

                <div id="uploadDocs" class="layer1" style="width: 100%">
                    <h4 style="margin-bottom: 5px;">Upload Documents</h4>
                    <div class="docSetup" style="width: 100%; background-color: #F1EBDE; border: 1px solid #E4DFD3; padding: 15px;" style="width: 100%; background-color: #F1EBDE; border: 1px solid #E4DFD3; padding: 15px;">
                        <div class="row" style="padding: 0;">
                            <div class="col-sm-12">
                                <label>Document Type</label>
                            </div>
                            <div class="col-sm-12" style="margin: 5px 0;">
                                @Html.EnumDropDownList("AssetDocumentType", Model.AssetDocumentType, "---")
                                @Html.ValidationMessageFor(model => model.AssetDocumentType)
                            </div>
                            <div class="col-sm-12">
                                <label>Title</label>
                            </div>
                            <div class="col-sm-12">
                                <input type="text" id="docTitle" style="width: 250px; margin: 5px 0;" value="" />
                            </div>
                            <div class="col-sm-12">
                                <label>Description</label>
                            </div>
                            <div class="col-sm-12">
                                <textarea cols="10" rows="4" id="docDescription" style="border: 1px solid #B1A795; margin: 5px 0 20px;"></textarea>
                            </div>
                            <div class="col-sm-6">
                                <input type="file" data-type="" id="docUpload" value="Upload" />
                            </div>
                            <div class="col-sm-6">
                                <div id="progressbar" class="progressbar" style="20px; height: 20px; background-color: transparent;">
                                </div>
                            </div>
                            <div class="col-sm-12">
                                <div style="color: #18904B; margin-top: 20px; display: none;" id="successDoc">
                                    <i class="fa fa-check" style="color: #27ae60; margin-right: 3px; display: inline;"></i>
                                    <span>The file has been uploaded successfully.</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="tab-pane" id="documents" style="margin-bottom: 20px;">
                    <div id="docManager" data-doccount="@Model.Documents.Count">
                        <div id="uploadDocId" style="display: none;" class="document-item-expanded">
                            <div class="docSetup" style="width: 100%">
                                <div class="row">
                                    <div class="col-sm-12">
                                        <input type="hidden" id="uploadFileId" />
                                    </div>
                                </div>
                            </div>
                        </div>
                        @if (Model.availablecurrentRentRoll)
                        {
                            <div class="document-item">
                                <div id="linkCRR">
                                    <span style="width: 40%; float: left;">Current Rent Roll:</span>
                                    <a onclick="show('currentRentRollDocs')" style="margin-left: 15px;">View Document(s)</a>
                                </div>
                                <div id="currentRentRollDocs" style="display: none;" class="document-item-expanded">
                                    <a onclick="hide('currentRentRollDocs')" style="text-align: right; margin-left: 550px;"><span class="glyphicon glyphicon-remove"></span></a>
                                    @for (int item = 0; item < Model.Documents.Count; item++)
                                    {
                                        if (Model.Documents[item].Type == (int)Inview.Epi.EpiFund.Domain.Enum.AssetDocumentType.CurrentRentRoll)
                                        {
                                        <div class="docPreviewDiv">
                                            <a target='_blank' href="@Url.Action("DownloadDocument", "Admin", new { fileName = Model.Documents[item].FileName, assetId = Model.GuidId, contentType = Model.Documents[item].ContentType, title = Model.Documents[item].Title })">Click here to download file</a>
                                            <br />
                                            <div class="row">
                                                <div class="col-lg-12">
                                                    <label style="font-weight: bold;">Title</label>
                                                </div>
                                                <div class="col-lg-12">
                                                    @Html.DisplayFor(s => Model.Documents[item].Title)
                                                </div>
                                                <div class="col-lg-12">
                                                    <label style="font-weight: bold;">Description</label>
                                                </div>
                                                <div class="col-lg-12">
                                                    @Html.DisplayFor(s => Model.Documents[item].Description)
                                                </div>
                                            </div>
                                            @Html.HiddenFor(s => Model.Documents[item].Title)
                                            @Html.HiddenFor(s => Model.Documents[item].Description)
                                            @Html.HiddenFor(s => Model.Documents[item].TempAssetDocumentId)
                                            @Html.HiddenFor(s => Model.Documents[item].Size)
                                            @Html.HiddenFor(s => Model.Documents[item].ContentType)
                                            @Html.HiddenFor(s => Model.Documents[item].GuidId)
                                            @Html.HiddenFor(s => Model.Documents[item].Type)
                                            @Html.HiddenFor(s => Model.Documents[item].FileName, new { @class = "docName" })
                                            <input type='button' class='deleteDocUpload delCRR' value='Delete' data-button="@Model.Documents[item].FileName" onclick='docDelete(this, "#currentRentRollDocs", ".delCRR", "#linkCRR")'/>
                                        </div>
                                        }
                                    }
                                </div>
                            </div>
                        }
                        @if (Model.availablecurrentOperatingReport)
                        {
                            <div class="document-item">
                                <div id="linkCOR">
                                    <span style="width: 40%; float: left;">Current Operating Report:</span>
                                    <a onclick="show('currentOperatingReportDocs')" style="margin-left: 15px;">View Document(s)</a>
                                </div>
                                <div id="currentOperatingReportDocs" style="display: none;" class="document-item-expanded">
                                    <a onclick="hide('currentOperatingReportDocs')" style="text-align: right; margin-left: 550px;"><span class="glyphicon glyphicon-remove"></span></a>
                                    @for (int item = 0; item < Model.Documents.Count; item++)
                                    {
                                        if (Model.Documents[item].Type == (int)Inview.Epi.EpiFund.Domain.Enum.AssetDocumentType.CurrentOperatingReport)
                                        {
                                        <div class="docPreviewDiv">
                                            <a target='_blank' href="@Url.Action("DownloadDocument", "Admin", new { fileName = Model.Documents[item].FileName, assetId = Model.GuidId, contentType = Model.Documents[item].ContentType, title = Model.Documents[item].Title })">Click here to download file</a>
                                            <br />
                                            <div class="row">
                                                <div class="col-lg-12">
                                                    <label style="font-weight: bold;">Title</label>
                                                </div>
                                                <div class="col-lg-12">
                                                    @Html.DisplayFor(s => Model.Documents[item].Title)
                                                </div>
                                                <div class="col-lg-12">
                                                    <label style="font-weight: bold;">Description</label>
                                                </div>
                                                <div class="col-lg-12">
                                                    @Html.DisplayFor(s => Model.Documents[item].Description)
                                                </div>
                                            </div>
                                            @Html.HiddenFor(s => Model.Documents[item].Title)
                                            @Html.HiddenFor(s => Model.Documents[item].Description)
                                            @Html.HiddenFor(s => Model.Documents[item].Type)
                                            @Html.HiddenFor(s => Model.Documents[item].TempAssetDocumentId)
                                            @Html.HiddenFor(s => Model.Documents[item].Size)
                                            @Html.HiddenFor(s => Model.Documents[item].ContentType)
                                            @Html.HiddenFor(s => Model.Documents[item].GuidId)
                                            @Html.HiddenFor(s => Model.Documents[item].FileName, new { @class = "docName" })
                                            <input type='button' class='deleteDocUpload delCOR' value='Delete' data-button="@Model.Documents[item].FileName" onclick='docDelete(this, "#currentOperatingReportDocs", ".delCOR", "#linkCOR")'/>
                                        </div>
                                        }
                                    }
                                </div>
                            </div>
                        }
                        @if (Model.availablepriorFiscalYearOperReport)
                        {
                            <div class="document-item">
                                <div id="linkPFYOR">
                                    <span style="width: 40%; float: left;">Prior Fiscal Year Oper Report:</span>
                                    <a onclick="show('priorFiscalYearOperReportDocs')" style="margin-left: 15px;">View Document(s)</a>
                                </div>
                                <div id="priorFiscalYearOperReportDocs" style="display: none;" class="document-item-expanded">
                                    <a onclick="hide('priorFiscalYearOperReportDocs')" style="text-align: right; margin-left: 550px;"><span class="glyphicon glyphicon-remove"></span></a>
                                    @for (int item = 0; item < Model.Documents.Count; item++)
                                    {
                                        if (Model.Documents[item].Type == (int)Inview.Epi.EpiFund.Domain.Enum.AssetDocumentType.PriorFiscalYearOperReport)
                                        {
                                        <div class="docPreviewDiv">
                                            <a target='_blank' href="@Url.Action("DownloadDocument", "Admin", new { fileName = Model.Documents[item].FileName, assetId = Model.GuidId, contentType = Model.Documents[item].ContentType, title = Model.Documents[item].Title })">Click here to download file</a>
                                            <br />
                                            <div class="row">
                                                <div class="col-lg-12">
                                                    <label style="font-weight: bold;">Title</label>
                                                </div>
                                                <div class="col-lg-12">
                                                    @Html.DisplayFor(s => Model.Documents[item].Title)
                                                </div>
                                                <div class="col-lg-12">
                                                    <label style="font-weight: bold;">Description</label>
                                                </div>
                                                <div class="col-lg-12">
                                                    @Html.DisplayFor(s => Model.Documents[item].Description)
                                                </div>
                                            </div>
                                            @Html.HiddenFor(s => Model.Documents[item].Title)
                                            @Html.HiddenFor(s => Model.Documents[item].Description)
                                            @Html.HiddenFor(s => Model.Documents[item].Type)
                                            @Html.HiddenFor(s => Model.Documents[item].TempAssetDocumentId)
                                            @Html.HiddenFor(s => Model.Documents[item].Size)
                                            @Html.HiddenFor(s => Model.Documents[item].ContentType)
                                            @Html.HiddenFor(s => Model.Documents[item].GuidId)
                                            @Html.HiddenFor(s => Model.Documents[item].FileName, new { @class = "docName" })
                                            <input type='button' class='deleteDocUpload delPFYOR' value='Delete' data-button="@Model.Documents[item].FileName" onclick='docDelete(this, "#priorFiscalYearOperReportDocs", ".delPFYOR", "#linkPFYOR")'/>
                                        </div>
                                        }
                                    }
                                </div>
                            </div>
                        }
                        @if (Model.availablepreliminaryTitleReport)
                        {
                            <div class="document-item">
                                <div id="linkPTR">
                                    <span style="width: 40%; float: left;">Preliminary Title Report:</span>
                                    <a onclick="show('preliminaryTitleReportDocs')" style="margin-left: 15px;">View Document(s)</a>
                                </div>
                                <div id="preliminaryTitleReportDocs" style="display: none;" class="document-item-expanded">
                                    <a onclick="hide('preliminaryTitleReportDocs')" style="text-align: right; margin-left: 550px;"><span class="glyphicon glyphicon-remove"></span></a>
                                    @for (int item = 0; item < Model.Documents.Count; item++)
                                    {
                                        if (Model.Documents[item].Type == (int)Inview.Epi.EpiFund.Domain.Enum.AssetDocumentType.PreliminaryTitleReport)
                                        {
                                        <div class="docPreviewDiv">
                                            <a target='_blank' href="@Url.Action("DownloadDocument", "Admin", new { fileName = Model.Documents[item].FileName, assetId = Model.GuidId, contentType = Model.Documents[item].ContentType, title = Model.Documents[item].Title })">Click here to download file</a>
                                            <br />
                                            <div class="row">
                                                <div class="col-lg-12">
                                                    <label style="font-weight: bold;">Title</label>
                                                </div>
                                                <div class="col-lg-12">
                                                    @Html.DisplayFor(s => Model.Documents[item].Title)
                                                </div>
                                                <div class="col-lg-12">
                                                    <label style="font-weight: bold;">Description</label>
                                                </div>
                                                <div class="col-lg-12">
                                                    @Html.DisplayFor(s => Model.Documents[item].Description)
                                                </div>
                                            </div>
                                            @Html.HiddenFor(s => Model.Documents[item].Title)
                                            @Html.HiddenFor(s => Model.Documents[item].Description)
                                            @Html.HiddenFor(s => Model.Documents[item].Type)
                                            @Html.HiddenFor(s => Model.Documents[item].TempAssetDocumentId)
                                            @Html.HiddenFor(s => Model.Documents[item].Size)
                                            @Html.HiddenFor(s => Model.Documents[item].ContentType)
                                            @Html.HiddenFor(s => Model.Documents[item].GuidId)
                                            @Html.HiddenFor(s => Model.Documents[item].FileName, new { @class = "docName" })
                                            <input type='button' class='deleteDocUpload delPTR' value='Delete' data-button="@Model.Documents[item].FileName" onclick='docDelete(this, "#preliminaryTitleReportDocs", ".delPTR", "#linkPTR")'/>
                                        </div>
                                        }
                                    }
                                </div>
                            </div>
                        }
                        @if (Model.availableplatMap)
                        {
                            <div class="document-item">
                                <div id="linkPM">
                                    <span style="width: 40%; float: left;">Plat Map:</span>
                                    <a onclick="show('platMapDocs')" style="margin-left: 15px;">View Document(s)</a>
                                </div>
                                <div id="platMapDocs" style="display: none;" class="document-item-expanded">
                                    <a onclick="hide('platMapDocs')" style="text-align: right; margin-left: 550px;"><span class="glyphicon glyphicon-remove"></span></a>
                                    @for (int item = 0; item < Model.Documents.Count; item++)
                                    {
                                        if (Model.Documents[item].Type == (int)Inview.Epi.EpiFund.Domain.Enum.AssetDocumentType.PlatMap)
                                        {
                                        <div class="docPreviewDiv">
                                            <a target='_blank' href="@Url.Action("DownloadDocument", "Admin", new { fileName = Model.Documents[item].FileName, assetId = Model.GuidId, contentType = Model.Documents[item].ContentType, title = Model.Documents[item].Title })">Click here to download file</a>
                                            <br />
                                            <div class="row">
                                                <div class="col-lg-12">
                                                    <label style="font-weight: bold;">Title</label>
                                                </div>
                                                <div class="col-lg-12">
                                                    @Html.DisplayFor(s => Model.Documents[item].Title)
                                                </div>
                                                <div class="col-lg-12">
                                                    <label style="font-weight: bold;">Description</label>
                                                </div>
                                                <div class="col-lg-12">
                                                    @Html.DisplayFor(s => Model.Documents[item].Description)
                                                </div>
                                            </div>
                                            @Html.HiddenFor(s => Model.Documents[item].Title)
                                            @Html.HiddenFor(s => Model.Documents[item].Description)
                                            @Html.HiddenFor(s => Model.Documents[item].Type)
                                            @Html.HiddenFor(s => Model.Documents[item].TempAssetDocumentId)
                                            @Html.HiddenFor(s => Model.Documents[item].Size)
                                            @Html.HiddenFor(s => Model.Documents[item].ContentType)
                                            @Html.HiddenFor(s => Model.Documents[item].GuidId)
                                            @Html.HiddenFor(s => Model.Documents[item].FileName, new { @class = "docName" })
                                            <input type='button' class='deleteDocUpload delPM' value='Delete' data-button="@Model.Documents[item].FileName" onclick='docDelete(this, "#platMapDocs", ".delPM", "#linkPM")'/>
                                        </div>
                                        }
                                    }
                                </div>
                            </div>
                        }
                        @if (Model.availablearialMap)
                        {
                            <div class="document-item">
                                <div id="linkAM">
                                    <span style="width: 40%; float: left;">Aerial Map:</span>
                                    <a onclick="show('arialMapDocs')" style="margin-left: 15px;">View Document(s)</a>
                                </div>
                                <div id="arialMapDocs" style="display: none;" class="document-item-expanded">
                                    <a onclick="hide('arialMapDocs')" style="text-align: right; margin-left: 550px;"><span class="glyphicon glyphicon-remove"></span></a>
                                    @for (int item = 0; item < Model.Documents.Count; item++)
                                    {
                                        if (Model.Documents[item].Type == (int)Inview.Epi.EpiFund.Domain.Enum.AssetDocumentType.ArialMap)
                                        {
                                        <div class="docPreviewDiv">
                                            <a target='_blank' href="@Url.Action("DownloadDocument", "Admin", new { fileName = Model.Documents[item].FileName, assetId = Model.GuidId, contentType = Model.Documents[item].ContentType, title = Model.Documents[item].Title })">Click here to download file</a>
                                            <br />
                                            <div class="row">
                                                <div class="col-lg-12">
                                                    <label style="font-weight: bold;">Title</label>
                                                </div>
                                                <div class="col-lg-12">
                                                    @Html.DisplayFor(s => Model.Documents[item].Title)
                                                </div>
                                                <div class="col-lg-12">
                                                    <label style="font-weight: bold;">Description</label>
                                                </div>
                                                <div class="col-lg-12">
                                                    @Html.DisplayFor(s => Model.Documents[item].Description)
                                                </div>
                                            </div>
                                            @Html.HiddenFor(s => Model.Documents[item].Title)
                                            @Html.HiddenFor(s => Model.Documents[item].Description)
                                            @Html.HiddenFor(s => Model.Documents[item].Type)
                                            @Html.HiddenFor(s => Model.Documents[item].TempAssetDocumentId)
                                            @Html.HiddenFor(s => Model.Documents[item].Size)
                                            @Html.HiddenFor(s => Model.Documents[item].ContentType)
                                            @Html.HiddenFor(s => Model.Documents[item].GuidId)
                                            @Html.HiddenFor(s => Model.Documents[item].FileName, new { @class = "docName" })
                                            <input type='button' class='deleteDocUpload delAM' value='Delete' data-button="@Model.Documents[item].FileName" onclick='docDelete(this, "#arialMapDocs", ".delAM", "#linkAM")'/>
                                        </div>
                                        }
                                    }
                                </div>
                            </div>
                        }
                        @if (Model.availableoriginalAppraisal)
                        {
                            <div class="document-item">
                                <div id="linkAOA">
                                    <span style="width: 40%; float: left;">Original Appraisal/BPO:</span>
                                    <a onclick="show('originalAppraisalDocs')" style="margin-left: 15px;">View Document(s)</a>
                                </div>
                                <div id="originalAppraisalDocs" style="display: none;" class="document-item-expanded">
                                    <a onclick="hide('originalAppraisalDocs')" style="text-align: right; margin-left: 550px;"><span class="glyphicon glyphicon-remove"></span></a>
                                    @for (int item = 0; item < Model.Documents.Count; item++)
                                    {
                                        if (Model.Documents[item].Type == (int)Inview.Epi.EpiFund.Domain.Enum.AssetDocumentType.OriginalAppraisal)
                                        {
                                        <div class="docPreviewDiv">
                                            <a target='_blank' href="@Url.Action("DownloadDocument", "Admin", new { fileName = Model.Documents[item].FileName, assetId = Model.GuidId, contentType = Model.Documents[item].ContentType, title = Model.Documents[item].Title })">Click here to download file</a>
                                            <br />
                                            <div class="row">
                                                <div class="col-lg-12">
                                                    <label style="font-weight: bold;">Title</label>
                                                </div>
                                                <div class="col-lg-12">
                                                    @Html.DisplayFor(s => Model.Documents[item].Title)
                                                </div>
                                                <div class="col-lg-12">
                                                    <label style="font-weight: bold;">Description</label>
                                                </div>
                                                <div class="col-lg-12">
                                                    @Html.DisplayFor(s => Model.Documents[item].Description)
                                                </div>
                                            </div>
                                            @Html.HiddenFor(s => Model.Documents[item].Title)
                                            @Html.HiddenFor(s => Model.Documents[item].Description)
                                            @Html.HiddenFor(s => Model.Documents[item].Type)
                                            @Html.HiddenFor(s => Model.Documents[item].TempAssetDocumentId)
                                            @Html.HiddenFor(s => Model.Documents[item].Size)
                                            @Html.HiddenFor(s => Model.Documents[item].ContentType)
                                            @Html.HiddenFor(s => Model.Documents[item].GuidId)
                                            @Html.HiddenFor(s => Model.Documents[item].FileName, new { @class = "docName" })
                                            <input type='button' class='deleteDocUpload delAOA' value='Delete' data-button="@Model.Documents[item].FileName" onclick='docDelete(this, "#originalAppraisalDocs", ".delAOA", "#linkAOA")'/>
                                        </div>
                                        }
                                    }
                                </div>
                            </div>
                        }
                        @if (Model.availablecurrentAppraisal)
                        {
                            <div class="document-item">
                                <div id="linkCA">
                                    <span style="width: 40%; float: left;">Calculated Market Value/<a title="[Calculated Market Value is based solely on either (1) comparable sales data provided by the Listing Agent or Seller in their Offering Memorandum, or, in the absence thereof, (2) calculated to the displayed CAP Rate only if the offering price for the asset is TBD by Market.]">CMV</a>:</span>
                                    <a onclick="show('currentAppraisalDocs')" style="margin-left: 15px;">View Document(s)</a>
                                </div>
                                <div id="currentAppraisalDocs" style="display: none;" class="document-item-expanded">
                                    <a onclick="hide('currentAppraisalDocs')" style="text-align: right; margin-left: 550px;"><span class="glyphicon glyphicon-remove"></span></a>
                                    @for (int item = 0; item < Model.Documents.Count; item++)
                                    {
                                        if (Model.Documents[item].Type == (int)Inview.Epi.EpiFund.Domain.Enum.AssetDocumentType.CurrentAppraisal)
                                        {
                                        <div class="docPreviewDiv">
                                            <a target='_blank' href="@Url.Action("DownloadDocument", "Admin", new { fileName = Model.Documents[item].FileName, assetId = Model.GuidId, contentType = Model.Documents[item].ContentType, title = Model.Documents[item].Title })">Click here to download file</a>
                                            <br />
                                            <div class="row">
                                                <div class="col-lg-12">
                                                    <label style="font-weight: bold;">Title</label>
                                                </div>
                                                <div class="col-lg-12">
                                                    @Html.DisplayFor(s => Model.Documents[item].Title)
                                                </div>
                                                <div class="col-lg-12">
                                                    <label style="font-weight: bold;">Description</label>
                                                </div>
                                                <div class="col-lg-12">
                                                    @Html.DisplayFor(s => Model.Documents[item].Description)
                                                </div>
                                            </div>
                                            @Html.HiddenFor(s => Model.Documents[item].Title)
                                            @Html.HiddenFor(s => Model.Documents[item].Description)
                                            @Html.HiddenFor(s => Model.Documents[item].Type)
                                            @Html.HiddenFor(s => Model.Documents[item].TempAssetDocumentId)
                                            @Html.HiddenFor(s => Model.Documents[item].Size)
                                            @Html.HiddenFor(s => Model.Documents[item].ContentType)
                                            @Html.HiddenFor(s => Model.Documents[item].GuidId)
                                            @Html.HiddenFor(s => Model.Documents[item].FileName, new { @class = "docName" })
                                            <input type='button' class='deleteDocUpload delCA' value='Delete' data-button="@Model.Documents[item].FileName" onclick='docDelete(this, "#currentAppraisalDocs", ".delCA", "#linkCA")'/>
                                        </div>
                                        }
                                    }
                                </div>
                            </div>
                        }
                        @if (Model.availableListingAgentMarketingBrochure)
                        {
                            <div class="document-item">
                                <div id="linkMB">
                                    <span style="width: 40%; float: left;">Marketing Brochure:</span>
                                    <a onclick="show('marketingBrochureDocs')" style="margin-left: 15px;">View Document(s)</a>
                                </div>
                                <div id="marketingBrochureDocs" style="display: none;" class="document-item-expanded">
                                    <a onclick="hide('marketingBrochureDocs')" style="text-align: right; margin-left: 550px;"><span class="glyphicon glyphicon-remove"></span></a>
                                    @for (int item = 0; item < Model.Documents.Count; item++)
                                    {
                                        if (Model.Documents[item].Type == (int)Inview.Epi.EpiFund.Domain.Enum.AssetDocumentType.ListingAgentMarketingBrochure)
                                        {
                                        <div class="docPreviewDiv">
                                            <a target='_blank' href="@Url.Action("DownloadDocument", "Admin", new { fileName = Model.Documents[item].FileName, assetId = Model.GuidId, contentType = Model.Documents[item].ContentType, title = Model.Documents[item].Title })">Click here to download file</a>
                                            <br />
                                            <div class="row">
                                                <div class="col-lg-12">
                                                    <label style="font-weight: bold;">Title</label>
                                                </div>
                                                <div class="col-lg-12">
                                                    @Html.DisplayFor(s => Model.Documents[item].Title)
                                                </div>
                                                <div class="col-lg-12">
                                                    <label style="font-weight: bold;">Description</label>
                                                </div>
                                                <div class="col-lg-12">
                                                    @Html.DisplayFor(s => Model.Documents[item].Description)
                                                </div>
                                            </div>
                                            @Html.HiddenFor(s => Model.Documents[item].Title)
                                            @Html.HiddenFor(s => Model.Documents[item].Description)
                                            @Html.HiddenFor(s => Model.Documents[item].Type)
                                            @Html.HiddenFor(s => Model.Documents[item].TempAssetDocumentId)
                                            @Html.HiddenFor(s => Model.Documents[item].Size)
                                            @Html.HiddenFor(s => Model.Documents[item].ContentType)
                                            @Html.HiddenFor(s => Model.Documents[item].GuidId)
                                            @Html.HiddenFor(s => Model.Documents[item].FileName, new { @class = "docName" })
                                            <input type='button' class='deleteDocUpload delMB' value='Delete' data-button="@Model.Documents[item].FileName" onclick='docDelete(this, "#marketingBrochureDocs", ".delMB", "#linkMB")'/>
                                        </div>
                                        }
                                    }
                                </div>
                            </div>
                        }
                        @if (Model.availableOtherDocument)
                        {
                            <div class="document-item">
                                <div id="linkOD">
                                    <span style="width: 40%; float: left;">Other:</span>
                                    <a onclick="show('otherDocumentsDocs')" style="margin-left: 15px;">View Document(s)</a>
                                </div>
                                <div id="otherDocumentsDocs" style="display: none;" class="document-item-expanded">
                                    <a onclick="hide('otherDocumentsDocs')" style="text-align: right; margin-left: 550px;"><span class="glyphicon glyphicon-remove"></span></a>
                                    @for (int item = 0; item < Model.Documents.Count; item++)
                                    {
                                        if (Model.Documents[item].Type == (int)Inview.Epi.EpiFund.Domain.Enum.AssetDocumentType.Other)
                                        {
                                        <div class="docPreviewDiv">
                                            <a target='_blank' href="@Url.Action("DownloadDocument", "Admin", new { fileName = Model.Documents[item].FileName, assetId = Model.GuidId, contentType = Model.Documents[item].ContentType, title = Model.Documents[item].Title })">Click here to download file</a>
                                            <br />
                                            <div class="row">
                                                <div class="col-lg-12">
                                                    <label style="font-weight: bold;">Title</label>
                                                </div>
                                                <div class="col-lg-12">
                                                    @Html.DisplayFor(s => Model.Documents[item].Title)
                                                </div>
                                                <div class="col-lg-12">
                                                    <label style="font-weight: bold;">Description</label>
                                                </div>
                                                <div class="col-lg-12">
                                                    @Html.DisplayFor(s => Model.Documents[item].Description)
                                                </div>
                                            </div>
                                            @Html.HiddenFor(s => Model.Documents[item].Title)
                                            @Html.HiddenFor(s => Model.Documents[item].Description)
                                            @Html.HiddenFor(s => Model.Documents[item].Type)
                                            @Html.HiddenFor(s => Model.Documents[item].TempAssetDocumentId)
                                            @Html.HiddenFor(s => Model.Documents[item].Size)
                                            @Html.HiddenFor(s => Model.Documents[item].ContentType)
                                            @Html.HiddenFor(s => Model.Documents[item].GuidId)
                                            @Html.HiddenFor(s => Model.Documents[item].FileName, new { @class = "docName" })
                                            <input type='button' class='deleteDocUpload delOD' value='Delete' data-button="@Model.Documents[item].FileName" onclick='docDelete(this, "#otherDocumentsDocs", ".delOD", "#linkOD")'/>
                                        </div>
                                        }
                                    }
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>

        <div id="section12Videos">
            <h3>Securing Property Videos</h3>
            <div id="videos">
                <div class="row">
                    <div class="col-lg-12">
                        <label for="videoUploader">Upload Video:</label>
                        <br />
                        <br />
                        <div style="background-color: lightgrey; border: 1px solid #000; padding: 5px; margin-bottom: 5px;">
                            <em>Video must be in .mp4 format and must not exceed 100MB in size. <span style="color: red">Note:</span> Only browsers with Internet Explorer 9+, Chrome 6+, Safari 5+ will be able to view these videos.</em>
                        </div>

                        <br />
                        <br />
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-12">
                        <input type="file" name="videoFile" id="videoUploader" style="width: 100%;" />
                    </div>
                    <hr />
                </div>
                <br />
                <div id="videosPreviewer" data-videocount="@Model.Videos.Count">
                    @for (int item = 0; item < Model.Videos.Count; item++)
                    {       
                        <div class="videoPreviewDiv" style="display: inline-block;">
                            @Html.Video(new VideoOptions()
                       {
                           Mp4Url = @Url.Action("GetVideo", "Admin", new { id = Model.GuidId, filepath = Model.Videos[item].FilePath }),
                           HasPoster = false,
                           HasDownloadLink = true,
                           VideoNotSupported = "<p>No video playback capabilities, please download the video below</p>",
                           TrackEnable = false
                       }, new { @class = "video-responsive", id = "video" + item })
                            @Html.HiddenFor(s => Model.Videos[item].FilePath, new { @class = "videoName" })
                            @Html.HiddenFor(s => Model.Videos[item].GuidId)
                            <input type='button' class='deleteImgUpload' value='Delete' data-button="@Model.Videos[item].FilePath" onclick='videoDelete(this)'/>
                        </div>
                        <hr />
                        <br />
                    }
                    <br />
                </div>
            </div>
            <hr />
        </div>
    
        <div style="background-color: lightgrey; border: 1px solid #000; padding: 5px; margin-bottom: 5px;">
                            <em>Please carefully review your data entered before you SAVE the Asset File to your “My USC Page” at US CRE Online. Once you have submitted your data you will be able to edit your data file 24/7 through your “My USC Page”. 
        You are encouraged to regularly update each of your CRE Asset Data Files so that each is ready for “<a title="Publishing a Vested or Represented CRE Asset is a one click protocol that results in notifying the full USC Community of Accredited Principals of the availability of said Asset or Portfolio.">Publishing</a>” to the USC Accredited <a title="Principal Investor">PI</a> Community at your discretion.  Thank you.</em>
                        </div>
        
        <br />
        <br />
        <input type="submit" class="btn btn-primary" onclick="fixNumbers()" name="SubmitPaper" value="Submit Note Data to My USC Page" style="width: auto">
        <input type="submit" class="btn btn-primary" onclick="fixNumbers()" name="SubmitPaper" value="Submit Form to My USC Page & Add Next Note Data" style="width: auto">
        @Html.DropDownListFor(s => s.PagePropertyTypes, Model.PagePropertyTypes as IEnumerable<SelectListItem>, new { style = "display:none;" })
        <input type="hidden" value="@(Model.GuidId)" data-asset="@(Model.GuidId)" id="GuidId" name="GuidId"/>
        @Html.HiddenFor(model => Model.DateForTempImages)
        <input id="JsonPictures" name="JsonPictures" style="display:none" value="@Model.JsonPictures"/>
        @Html.HiddenFor(model => Model.UserId)
        <input type="hidden" value="@(Model.GuidId)" id="AssetId" name="AssetId"/>
    }
</div>

@Html.Partial("_NoteJavascript")

<script>

    function toggleLabels(label) {
        setDefaultValues(label);
        switch (label) {
            case "default":
                $(".defaultLabel").show();
                $(".mhpLabel").hide();
                $(".mfLabel").hide();
                break;
            case "mf":
                $(".defaultLabel").hide();
                $(".mhpLabel").hide();
                $(".mfLabel").show();
                break;
            case "mhp":
                $(".defaultLabel").hide();
                $(".mhpLabel").show();
                $(".mfLabel").hide();
                break;
        }
    }

    function updateFullName() {
        var firstName = $("#NameOfPrincipal").val()
        var lastName = $("#NameOfCoPrincipal").val()
        $("#CorporateOwnershipOfficer").val(firstName + " " + lastName);
    }

    function setDefaultValues(type) {
        switch (type) {
            case "default":
                //$("#TotalUnits").val(0);
                $("#OccupancyPercentage").val(0);
                $("#LastReportedDateMF").val("");
                break;
            case "mf":
            case "mhp":
                $("#LeasedSquareFootageByMajorTenant").val(0);
                $("#BaseRentPerSqFtMajorTenant").val(0);
                $("#CurrentMarkerRentPerSqFt").val(0);
                $("#NumberofSuites").val(0);
                $("#LastReportedDateCommercial").val("");
                break;
        }
    }

    $('#NewPfName').change(function () {
        var newPF = $("#NewPfName").val();

        if (newPF.length > 0) {
            $.ajax({
                type: "POST",
                url: "/Admin/ValidatePortFolioName/",
                data: JSON.stringify({ newPF: newPF }),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                async: false,
                cache: false,
                success: function (response) {
                    if (response.Status == "True") {
                        alert('Portfolio Name already in use');
                        //$("#errorMsg").show();
                    }
                    else {
                        //document.getElementById('createAssetForm').submit();
                        $("#errorMsg").hide();
                    }
                },
                error: function (jqXHR, exception) {
                },
                failure: function (response) {
                }
            });
        }
    });

    $(document).ready(function () {

        jQuery(".detailsContent").hide();
        //toggle the componenet with class msg_body
        jQuery(".detailsHeading").click(function () {
            jQuery(this).next(".detailsContent").slideToggle(500);
            $('#AssetDocumentType').val('---');
            $("#docTitle").val('');
            $('#docDescription').val('');
        });

        $("input.formatNumber").each(function (index) {
            $(this).val(addCommas($(this).val(), true));
            $(this).on("input", null, null, function () {
                $(this).val(addCommas($(this).val(), true));
            });
        });
        if (!$("#OfferingPriceDeterminedByMarketBidding").prop('checked')) {
            toggleBidsSection(false);
        } else {
            toggleBidsSection(true);
        }
        if (!$("#HasDeferredMaintenance").prop('checked')) {
            toggleDeferredMaintenanceDetailsMF(false);
            toggleDeferredMaintenanceDetailsMHP(false);
            toggleDeferredMaintenanceDetailsCOM(false);
        } else {
            toggleDeferredMaintenanceDetailsMF(true);
            toggleDeferredMaintenanceDetailsMHP(false);
            toggleDeferredMaintenanceDetailsCOM(false);
        }
        if (!$("#NoteServicedByAgent").prop('checked')) {
            toggleServicingAgent(false);
        } else {
            toggleServicingAgent(true);
        }
        if (!$("#HasProformaInformation").prop('checked')) {
            toggleProformaInformation(false);
        } else {
            toggleProformaInformation(true);
        }
        if (!$("#IsNoteWRAP").prop('checked')) {
            toggleWRAP(false);
        } else {
            toggleWRAP(true);
        }
        if ($("#HasPositionMortgage").prop('checked')) {
            toggleMortgage(1);
            //if (!$("#MortgageLienType").prop('checked')) {
            //    toggleMortgage(2);
            //}
            //else {
            //    toggleMortgage(3);
            //}
        } else {
            toggleMortgage(4);
        }
        var propertyType = $('#TypeOfProperty').val();
        toggleLabels("default");
        if (propertyType) {
            if (propertyType == "MultiFamily") {
                $(".mfDiv").show();
                toggleLabels("mf");
                $(".commercialDiv").hide();
                $(".commercialDiv1").hide();
                $(".mhpDiv").hide();
            }
            else if (propertyType == "MHP") {
                $(".mhpDiv").show();
                toggleLabels("mhp");
                $(".commercialDiv").hide();
                $(".commercialDiv1").hide();
                $(".mfDiv").hide();
            }
            else if (propertyType != "") {
                $(".mfDiv").hide();
                $(".mhpDiv").hide();
                $(".commercialDiv").show();
                $(".commercialDiv1").show();
            }
        }
        else {
            $(".mfDiv").hide();
            $(".mhpDiv").hide();
            $(".commercialDiv").hide();
            $(".commercialDiv1").show();
        }
    });

    if (!$("#RenovatedByOwner").prop('checked')) {
        toggleRenovationsSection(false);
    } else {
        toggleRenovationsSection(true);
    }

    if (!$("#isPendingForeclosure").prop('checked')) {
        toggleForeclosureSection(false);
    } else {
        toggleForeclosureSection(true);
    }

    $("#TypeOfProperty").change(function () {
        toggleLabels("default");
        var propertyType = $(this).val();
        if (propertyType) {
            if (propertyType == "MultiFamily") {
                $(".mfDiv").show();
                toggleLabels("mf");
                $(".commercialDiv").hide();
                $(".commercialDiv1").hide();
                $(".mhpDiv").hide();
            }
            else if (propertyType == "MHP") {
                $(".mhpDiv").show();
                toggleLabels("mhp");
                $(".commercialDiv").hide();
                $(".commercialDiv1").hide();
                $(".mfDiv").hide();
            }
            else if (propertyType != "") {
                $(".mfDiv").hide();
                $(".commercialDiv").show();
                $(".commercialDiv1").show();
                $(".mhpDiv").hide();
            }
        }
        else {
            $(".mfDiv").hide();
            $(".mhpDiv").hide();
            $(".commercialDiv").hide();
            $(".commercialDiv1").show();
        }
    });

    function toggleWRAP(show) {
        if (show) {
            $("#wrapFields").show();
        } else {
            $("#wrapFields").hide();
        }
    }

    function toggleMortgage(level) {
        if (level == 1) {
            $("#hasMortgage").show();
            //$("#hasLienType").hide();
        }
        if (level == 2) {
            //$("#hasLienType").show();
        }
        // hiding
        if (level == 3) {
            //$("#hasLienType").hide();
            //$(".mltRecourse").prop('checked', false);
            //$(".mltNonRecourse").prop('checked', false);
            //$(".mltUnknown").prop('checked', false);
            //var mlt = document.getElementsByName("MortgageLienType");
            //$(mlt).removeProp('checked');
        }
        if (level == 4) {
            $("#hasMortgage").hide();
            $(".mltRecourse").prop('checked', false);
            $(".mltNonRecourse").prop('checked', false);
            $(".mltUnknown").prop('checked', false);

            $(".mlaYes").prop('checked', false);
            $(".mlaNo").prop('checked', false);
            $(".mlaUnknown").prop('checked', false);
            //var mlt = document.getElementsByName("MortgageLienType");
            //var mla = document.getElementsByName("MortgageLienAssumable");
            //$(mlt).removeProp('checked');
            //$(mla).removeProp('checked');

        }
    }

    function toggleBidsSection(show) {
        if (show) {
            $("#bidsDueDate").show();
        } else {
            $("#bidsDueDate").hide();
        }
    }

    function toggleRenovationsSection(show) {
        if (show) {
            $("#renovationsDetails").show();
        } else {
            $("#renovationsDetails").hide();
        }
    }

    function toggleForeclosureSection(show) {
        if (show) {
            $("#foreclosureSection").show();
        } else {
            $("#foreclosureSection").hide();
        }
    }

    function togglePortfolioSec(show) {
        if (show) {
            $("#portfolioDiv").show();
        } else {
            $("#portfolioDiv").hide();
        }
    }

    function OnChangeNewPF(checkbox) {
        if (checkbox.checked) {
            $("#newPFDiv").show();
        }
        else {
            $("#newPFDiv").hide();
        }
    }

    function toggleProformaInformation(show) {
        if (show) {
            $("#proformaInfo").show();
        } else {
            $("#proformaInfo").hide();
        }
    }

    function toggleDeferredMaintenanceDetailsMF(show) {
        if (show) {
            $("#deferredMaintenanaceDetailsMF").show();
        } else {
            $("#deferredMaintenanaceDetailsMF").hide();
        }
    }

    function toggleDeferredMaintenanceDetailsMHP(show) {
        if (show) {
            $("#deferredMaintenanaceDetailsMHP").show();
        } else {
            $("#deferredMaintenanaceDetailsMHP").hide();
        }
    }

    function toggleDeferredMaintenanceDetailsCOM(show) {
        if (show) {
            $("#deferredMaintenanaceDetailsCOM").show();
        } else {
            $("#deferredMaintenanaceDetailsCOM").hide();
        }
    }
    function toggleServicingAgent(show) {
        if (show) {
            $("#ServingAgentDiv").show();
        } else {
            $("#ServingAgentDiv").hide();
        }
    }

    function addCommasToInputAndCalculate(control, index) {
        $(control).val(addCommas($(control).val(), false));
        calculateEstimatedDeferredMaintenance(index);
    };

    $('#addTaxAssessorNumber').click(function () {
        $('#additionalAssessor').show()
    });

    $('#remTaxAssessorNumber').click(function () {
        $('#additionalAssessor').hide()
    });

    $('#addDoubleSpecs').click(function () {
        $('#mhpUnitSpecDivDouble').show();
        $('#removeDoubleSpecs').show();
    });

    $('#removeDoubleSpecs').click(function () {
        $('#mhpUnitSpecDivDouble').hide();
        $('#removeDoubleSpecs').hide();
    });

    $('#addTripleSpecs').click(function () {
        $('#mhpUnitSpecDivTriple').show();
        $('#removeTripleSpecs').show();
    });

    $('#removeTripleSpecs').click(function () {
        $('#mhpUnitSpecDivTriple').hide();
        $('#removeTripleSpecs').hide();
    });


    $('#chkUpdUnk').change(function () {
        if ($('#chkUpdUnk').is(":checked")) {
            $("#PropLastUpdated").prop('readonly', true);
            $('#PropLastUpdated').addClass('input-disabled');
        }
        else {
            $("#PropLastUpdated").prop('readonly', false);
            $('#PropLastUpdated').removeClass('input-disabled');
        }
    });

    $('#chkNameNone').change(function () {
        var Address1 = $('#PropertyAddress').val();
        $('#ProjectName').val(Address1);
        if ($('#chkNameNone').is(":checked")) {
            $('#ProjectName').addClass('input-disabled');
        }
        else {
            $('#ProjectName').removeClass('input-disabled');
        }
    });

    
    $('#PropertyAddress').change(function () {
        if ($('#chkNameNone').is(":checked")) {
            var Address1 = $('#PropertyAddress').val();
            $('#ProjectName').val(Address1);
        }
    });

    document.getElementById("chkSubDiv").onclick = function () {
        if ((document.getElementById('chkSubDiv').checked)) {
            $("#Subdivision").val("Meters & Bounds");
        }
        else {
            $("#Subdivision").val("");
        }
    }

    function calculateEstimatedDeferredMaintenance() {
        var total = 0;
        for (var i = 0; i < 17; i++) {
            var itemName = $("#DeferredMaintenanceItems_" + i + "__ItemTitle").val();
            var unitCost = getNumberFromValue($("#DeferredMaintenanceItems_" + i + "__UnitCost").val());
            var units = getNumberFromValue($("#DeferredMaintenanceItems_" + i + "__NumberOfUnits").val());
            if (!units) {
                units = 1;
            }
            if ($("#DeferredMaintenanceItems_" + i + "__Selected").is(':checked')) {
                if (itemName.toLowerCase() == "other" && (getNumberFromValue($("#DeferredMaintenanceItems_" + i + "__UnitCost").val()) == 0 || getNumberFromValue($("#DeferredMaintenanceItems_" + i + "__UnitCost").val()) == null)) {
                    alert("Please provide a value for the Other item")
                }
                if (itemName.toLowerCase() == "other" && getNumberFromValue($("#DeferredMaintenanceItems_" + i + "__UnitCost").val()) != 0 && $("#DeferredMaintenanceItems_" + i + "__ItemDescription").val() == "") {
                    alert("Please provide a description for the Other item")
                }
                total += (unitCost * units);
            }
        }
        if (total > 0) {
            $("#EstDeferredMaintenance").val(addCommas(Math.round(total.toFixed(2)).toString(), false));
        } else {
            $("#EstDeferredMaintenance").val(0);
        }
    }

    $(function () {
        $(".datepicker").datepicker();
    });

    function fixNumbers() {
        $("input.formatNumber").each(function (index) {
            $(this).val($(this).val().replace(/,/g, ""));
        });
        $("input.formatMaint").each(function (index) {
            $(this).val($(this).val().replace(/,/g, ""));
        });
    };


    $("#AssetDocumentType").change(function () {
        $('#successDoc').hide();
        var selected = $("#AssetDocumentType option:selected").text();
        $("#docTitle").val(selected);
    });


    $("#docUpload").change(function () {
        var path = $(this).val();
        var selDocType = $("#AssetDocumentType").val();
        var type = $("#docUpload").attr('data-type');
        var description = $('#docDescription').val();
        var docId = null;
        var fileID = null;
        switch (selDocType) {
            case 'CurrentRentRoll':
                $("docUpload").attr("data-type", 0); type = 0;
                //docId = '#currentRentRoll'; fileID =  "#rentRoll"
                break;
            case 'CurrentOperatingReport':
                $("docUpload").attr("data-type", 1); type = 1;
                //docId = '#currentOperatingReport'; fileID =  "#cor"
                break;
            case "PriorFiscalYearOperReport":
                $("docUpload").attr("data-type", 2); type = 2;
                //docId = '#priorFiscalYearOperReport'; fileID =  "#pfyor"
                break;
            case "PreliminaryTitleReport":
                $("docUpload").attr("data-type", 3); type = 3;
                //docId = '#preliminaryTitleReport'; fileID =  "#ptr"
                break;
            case "PlatMap":
                $("docUpload").attr("data-type", 4); type = 4;
                //docId = '#platMap'; fileID =  "#pm"
                break;
            case "ArialMap":
                $("docUpload").attr("data-type", 5); type = 5;
                //docId = '#arialMap'; fileID =  "#am"
                break;
            case "OriginalAppraisal":
                $("docUpload").attr("data-type", 6); type = 6;
                //docId = '#originalAppraisal'; fileID =  "#oa"
                break;
            case "CurrentAppraisal":
                $("docUpload").attr("data-type", 7); type = 7;
                // docId = '#currentAppraisal'; fileID =  "#ca"
                break;
            case "ListingAgentMarketingBrochure":
                $("docUpload").attr("data-type", 8); type = 8;
                //docId = '#marketingBrochure'; fileID =  "#mb"
                break;
            case "Other":
                $("docUpload").attr("data-type", 9); type = 9;
                //docId = '#otherDocuments'; fileID =  "#od"
                break;
            case "MortgageInstrumentOfRecord":
                $("docUpload").attr("data-type", 10); type = 10;
                //docId = '#mgInstRec'; fileID =  "#instrumentRecord"
                break;
            case "RecordedLiens":
                $("docUpload").attr("data-type", 11); type = 11;
                //docId = '#recordedLiens'; fileID =  "#recLiens"
                break;
            case "TaxLiens":
                $("docUpload").attr("data-type", 12); type = 12;
                //docId = '#taxLiens'; fileID =  "#txLiens"
                break;
            case "BKRelated":
                $("docUpload").attr("data-type", 13); type = 13;
                //docId = '#bkRelated'; fileID =  "#related"
                break;
            case "PreliminaryTitleReportTitle":
                $("docUpload").attr("data-type", 14); type = 14;
                //docId = '#preliminaryTitleReportTitle'; fileID =  "#ptrTitle"
                break;
            case "DOTMTG":
                $("docUpload").attr("data-type", 15); type = 15;
                //docId = '#recDOTMTG'; fileID =  "#dotMG"
                break;
            case "OtherTitle":
                $("docUpload").attr("data-type", 16); type = 16;
                //docId = '#otherDocumentsTitle'; fileID =  "#othTitle"
                break;
        }
        var title = $('#docTitle').val();
        var description = $('#docDescription').val();
        docId = '#uploadDocId'; fileID = "#uploadFileId"
        var fileName = path.match(/[^\/\\]+$/);
        readDOC(this, fileName, title, description, type, docId, fileID);
    });
    $('#TermId').change(function () {
        if ($(this).val() === "Other") {
            $('#termsOtherDiv').show();
        } else {
            $('#termsOtherDiv').hide();
        }
    });

</script>
