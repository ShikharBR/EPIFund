@model Inview.Epi.EpiFund.Domain.ViewModel.AssetViewModel
@using MVCVideo
@using Inview.Epi.EpiFund.Domain.ViewModel
@using Inview.Epi.EpiFund.Domain.Helpers
@{
    ViewBag.Title = "Asset View";
    Layout = ViewBag.Layout;
    ViewBag.IsAssetView = true;
    List<MVCVideo.VideoOptions> videoOptions = ViewBag.Videos as List<MVCVideo.VideoOptions>;

    MultiFamilyAssetViewModel mfAsset = new MultiFamilyAssetViewModel();
    CommercialAssetViewModel cAsset = new CommercialAssetViewModel();
    double proformaSGI = new double();
    double proformaNOI = new double();
    double sgiAvgMonthlySpaceRent = new double();
    double listPricePerSqFt = new double();
    double listPricePerUnit = new double();
    double listPricePerMHP = new double();
    double appraisalPerUnit = new double();
    double appraisalPerSqFt = new double();
    double capRate = new double();
    double defCapRate = new double();
    double defCapRateLP = new double();
    double defCapRateCMV = new double();
    double defProformaSGI = new double();
    double defProformaNOI = new double();
    double defTotalListing = new double();
    double defTotalListingCMV = new double();
    double defTotalListingLP = new double();
    double defAnnualRevenueAdjustment = new double();
    double bpoRate = new double();
    double proformaCam = new double();
    double sgiPerSqFt = new double();
    double percentOfPropLeased = new double();
    double currentAnnualGrossIncome = new double();
    double listPriceBPO = new double();
    int mhpUnits = new int();
    int mhpRentable = new int();
    double mhpSqFt = new double();
    double mfAdjustedPretaxNOI = new double();

    mfAdjustedPretaxNOI = 0;
    mhpUnits = 0;
    mhpRentable = 0;
    mhpSqFt = 0;
    listPricePerSqFt = 0;
    listPricePerUnit = 0;
    listPricePerMHP = 0;
    appraisalPerSqFt = 0;
    appraisalPerUnit = 0;
    defCapRate = 0;
    defProformaNOI = 0;
    defProformaSGI = 0;
    defAnnualRevenueAdjustment = 0;
    currentAnnualGrossIncome = 0;
    listPriceBPO = 0;
    currentAnnualGrossIncome = Model.AnnualGrossIncome;

    //Issue#42 and Issue#27 say that listPricePerSqFt is calculate logic is different for MHP and MultiFamily
    if (Model.AssetType == AssetType.MHP)
    {
        double logsizedbl; //note a problem coming (alfabatic entry in LotSize) will solve in future
        if (Double.TryParse(Model.LotSize, out logsizedbl) && Double.Parse(Model.LotSize) > 0)
        {
            listPricePerSqFt = Model.AskingPrice / (Double.Parse(Model.LotSize) * 43560);
        }
        if (Model.NumberRentableSpace != null && Model.NumberRentableSpace > 0)
        {
            sgiAvgMonthlySpaceRent = ((Model.ProformaAnnualIncome / (double)Model.NumberRentableSpace) / 12);
        }
        else
        {
            sgiAvgMonthlySpaceRent = 0;
        }
    }
    else if (Model.AssetType == AssetType.MultiFamily)
    {
        if (Model.SquareFeet > 0)
        {
            listPricePerSqFt = Model.AskingPrice / Model.SquareFeet;

        }
    }
    else if (Model.GetType() == typeof(CommercialAssetViewModel))
    {
        if (Model.SquareFeet > 0)
        {
            listPricePerSqFt = Model.AskingPrice / Model.SquareFeet;

        }


    }



    if (Model.SquareFeet > 0)
    {
        //comment as per Issue#42 and Issue#27
        //listPricePerSqFt = Model.AskingPrice / Model.SquareFeet;
        appraisalPerSqFt = Model.CurrentBpo / Model.SquareFeet;
    }

    if (Model.GetType() == typeof(MultiFamilyAssetViewModel))
    {
        mfAsset = (Model as MultiFamilyAssetViewModel);
        mhpUnits += Model.NumberNonRentableSpace != null ? (int)Model.NumberNonRentableSpace : 0;
        mhpUnits += Model.NumberRentableSpace != null ? (int)Model.NumberRentableSpace : 0;
        mhpRentable += Model.NumberRentableSpace != null ? (int)Model.NumberRentableSpace : 0;
        if (mfAsset.UnitSpecifications.Count > 0)
        {
            //listPricePerSqFt = Model.AskingPrice / (mfAsset.TotalUnits * (Model.SquareFeet / mfAsset.UnitSpecifications.Count));
        }
        if (mfAsset.TotalUnits > 0) //this conditon true for multiasset type view and NumberRentableSpace heading not come and  TotalUnits heading come
        {
            listPricePerUnit = Model.AskingPrice / mfAsset.TotalUnits;
            appraisalPerUnit = Model.CurrentBpo / mfAsset.TotalUnits;

        }
        else if (Model.AssetType == AssetType.MHP) //when assettype is mhp then TotalUnits is heading not come and NumberRentableSpace come
        {

            //alter listPricePerMHP calculation as per issue# 26
            if (mhpUnits > 0) { listPricePerMHP = Model.AskingPrice / mhpUnits; }

            //alter appraisalperunit calculation as per issue#40
            try
            {

                //if (Double.Parse(Model.NumberRentableSpace.ToString()) > 0) { appraisalPerUnit = Model.CurrentBpo / Double.Parse(Model.NumberRentableSpace.ToString()) ; }
                //alter after a issue (forget issue#number but issue created after issue#40)
                if (Double.Parse(Model.NumberRentableSpace.ToString()) > 0) { appraisalPerUnit = Model.CurrentBpo / mhpRentable; }
            }
            catch
            {
                appraisalPerUnit = Model.CurrentBpo;
            }

            if (Model.LotSize != null && Model.LotSize.Length > 0 && Double.Parse(Model.LotSize) > 0)
            {
                mhpSqFt = Double.Parse(Model.LotSize) * 43560;
                //comment listPricePerMHP as per issue# 26
                //listPricePerMHP = Model.AskingPrice / Double.Parse(Model.LotSize);

                //comment  appraisalPerUnit as per issue# 40
                //appraisalPerUnit = Model.CurrentBpo / (Double.Parse(Model.LotSize) * 43560);

            }
        }


        var aoe = Model.ProformaAnnualOperExpenses;
        var pagi = Model.ProformaAnnualIncome;
        var pami = Model.ProformaMiscIncome;
        proformaSGI = 0;
        proformaNOI = 0;
        defTotalListing = 0;

        if (Model.HasDeferredMaintenance)
        {
            defTotalListing = Model.AskingPrice == 0 ? Model.CurrentBpo + mfAsset.EstDeferredMaintenance : Model.AskingPrice + mfAsset.EstDeferredMaintenance;
            defTotalListingCMV = Model.CurrentBpo + mfAsset.EstDeferredMaintenance;
            defTotalListingLP = Model.AskingPrice + mfAsset.EstDeferredMaintenance;
        }
        else
        {
            defTotalListing = Model.AskingPrice == 0 ? Model.CurrentBpo : Model.AskingPrice;
            defTotalListingCMV = Model.CurrentBpo;
            defTotalListingLP = Model.AskingPrice;
        }
        //if (pami > 0 && pagi > 0)
        if (true)
        {
            //o   Formula:  [((P:SGI + P:AMI) – P:VF) – P:AOE] = P:NOI (Pre-Tax)
            //o   Numerical application of Formula: [(($1,307,760 + $53,618) - $245,048*) - $733,230] = $383,100 (correct amount)
            //§  *P:VF is 18% per data in the Asset file.  18% of ($1,307,760 + $53,618) = $245,048

            var totalIncome = pagi + pami;
            if (totalIncome > 0)
            {
                proformaSGI = ((aoe / totalIncome) * 100);
            }
            var pvf = (Model.ProformaVacancyFac / 100) * totalIncome;
            proformaNOI = Math.Round((totalIncome - pvf) - aoe);
            var pretax = totalIncome - pvf - aoe;


            bpoRate = ((pretax / Model.CurrentBpo));
            var e = (Model.AverageAdjustmentToBaseRentalIncomePerUnitAfterRenovations.GetValueOrDefault(0) * mfAsset.TotalUnits * 12);


            if (Model.AskingPrice > 0)
            {
                Model.CashInvestmentApy = (float)((pretax / Model.AskingPrice) * 100);
            }
            else if (Model.CurrentBpo > 0)
            {
                Model.CashInvestmentApy = (float)((pretax / Model.CurrentBpo) * 100);
            }
            else
            {
                Model.CashInvestmentApy = 0;
            }

            if (Model.CurrentBpo == 0)
            {
                capRate = 0;
            }
            else if (Model.CurrentBpo > 0)
            {
                capRate = ((pretax / Model.CurrentBpo) * 100);
            }
            else
            {
                capRate = 0;
            }


            //defAnnualRevenueAdjustment = mfAsset.EstDeferredMaintenance == 0 ? 0 : (Model.AverageAdjustmentToBaseRentalIncomePerUnitAfterRenovations.GetValueOrDefault(0) * mfAsset.TotalUnits * 12);
            //Issue#52 and Issue#62
            if (Model.AssetType == AssetType.MHP)
            {
                defAnnualRevenueAdjustment = mfAsset.HasDeferredMaintenance == false ? 0 : (Model.AverageAdjustmentToBaseRentalIncomePerUnitAfterRenovations.GetValueOrDefault(0) * mfAsset.NumberRentableSpace.GetValueOrDefault(0) * 12);
            }
            else if (Model.AssetType == AssetType.MultiFamily)
            {
                defAnnualRevenueAdjustment = mfAsset.HasDeferredMaintenance == false ? 0 : (Model.AverageAdjustmentToBaseRentalIncomePerUnitAfterRenovations.GetValueOrDefault(0) * mfAsset.TotalUnits * 12);
            }
            /////////////////////////////////////

            defProformaSGI = mfAsset.EstDeferredMaintenance == 0 ? Model.ProformaAnnualIncome : Model.ProformaAnnualIncome + defAnnualRevenueAdjustment + pami;

            var adjDefPvf = (Model.ProformaVacancyFac / 100) * defProformaSGI;
            //[{(Proforma SGI + Annualized Revenue Adjustment to Proforma SGI after Renovation + Proforma AMI) – Proforma VF} – Proforma AOE]
            defProformaNOI = mfAsset.EstDeferredMaintenance == 0 ? proformaNOI : Math.Round(defProformaSGI - adjDefPvf - aoe);

            //Issue#64: mfAdjustedPretaxNOI calculation differ for mhp and multifamily asset ///////////////////////////////////////////////
            //var adjSGI = Model.ProformaAnnualIncome + defAnnualRevenueAdjustment;
            //var adjVF = (Model.ProformaVacancyFac * adjSGI) / 100;
            //mfAdjustedPretaxNOI = ((adjSGI - adjVF) - Model.ProformaAnnualOperExpenses) + Model.ProformaMiscIncome;
            //if (Model.AssetType == AssetType.MHP)
            //{
            //    var adjSGI = Model.ProformaAnnualIncome + defAnnualRevenueAdjustment;
            //    var adjVF = (Model.ProformaVacancyFac * adjSGI) / 100;
            //    mfAdjustedPretaxNOI = ((adjSGI - adjVF) - Model.ProformaAnnualOperExpenses) + Model.ProformaMiscIncome;
            //}
            if (Model.AssetType == AssetType.MultiFamily || Model.AssetType == AssetType.MHP)
            {
                var adjSGI = Model.ProformaAnnualIncome + defAnnualRevenueAdjustment;
                var adjVF = (Model.ProformaVacancyFac * (adjSGI + Model.ProformaMiscIncome)) / 100;
                mfAdjustedPretaxNOI = Math.Round(((adjSGI - adjVF) - Model.ProformaAnnualOperExpenses) + Model.ProformaMiscIncome);
            }
            ///////////////////////////////////////////////

            if (defTotalListing != 0)
            {
                defCapRate = (mfAdjustedPretaxNOI / defTotalListing) * 100;
            }
            else
            {
                defCapRate = 0;
            }

            defCapRateLP = (mfAdjustedPretaxNOI / defTotalListingLP) * 100; defCapRateCMV = (mfAdjustedPretaxNOI / defTotalListingCMV) * 100;

        }
        if (mfAsset.EstDeferredMaintenance == 0)
        {
            defProformaSGI = Model.ProformaAnnualIncome;
        }



    }
    if (Model.GetType() == typeof(CommercialAssetViewModel))
    {
        cAsset = (Model as CommercialAssetViewModel);
        //listPricePerUnit = Model.AskingPrice / mfAsset.TotalUnits;
        //appraisalPerUnit = Model.CurrentBpo / mfAsset.TotalUnits;

        var aoe = Model.ProformaAnnualOperExpenses;
        var pagi = Model.ProformaAnnualIncome;
        var pami = Model.ProformaMiscIncome;
        proformaSGI = 0;
        proformaNOI = 0;
        proformaCam = 0;
        sgiPerSqFt = 0;
        percentOfPropLeased = 0;
        defTotalListing = 0;
        defTotalListing = cAsset.AskingPrice == 0 ? cAsset.CurrentBpo + cAsset.EstDeferredMaintenance : cAsset.AskingPrice + cAsset.EstDeferredMaintenance;
        defTotalListingCMV = cAsset.CurrentBpo + cAsset.EstDeferredMaintenance;
        defTotalListingLP = cAsset.AskingPrice + cAsset.EstDeferredMaintenance;
        //if (pami > 0 && pagi > 0)
        if (true)
        {
            //o   Formula:  [((P:SGI + P:AMI) – P:VF) – P:AOE] = P:NOI (Pre-Tax)
            //o   Numerical application of Formula: [(($1,307,760 + $53,618) - $245,048*) - $733,230] = $383,100 (correct amount)
            //§  *P:VF is 18% per data in the Asset file.  18% of ($1,307,760 + $53,618) = $245,048

            var totalIncome = pagi + pami;
            if (totalIncome > 0)
            {
                proformaSGI = ((aoe / totalIncome) * 100);
            }
            if (cAsset.SquareFeet > 0)
            {
                proformaCam = pami / cAsset.SquareFeet;
                sgiPerSqFt = pagi / cAsset.SquareFeet;
                if (cAsset.LeasedSquareFootageByMajorTenant > 0)
                {
                    percentOfPropLeased = Math.Round((Math.Round((double)((double)cAsset.LeasedSquareFootageByMajorTenant / (double)cAsset.SquareFeet), 4) * 100), 2);
                }
            }
            var pvf = (Model.ProformaVacancyFac / 100) * totalIncome;
            proformaNOI = Math.Round((totalIncome - pvf) - aoe);
            var pretax = totalIncome - pvf - aoe;

            if (Model.CurrentBpo == 0)
            {
                capRate = 0;
            }
            else if (Model.CurrentBpo > 0)
            {
                capRate = ((pretax / Model.CurrentBpo) * 100);
            }
            else
            {
                capRate = 0;
            }


            bpoRate = ((pretax / Model.CurrentBpo));
            defAnnualRevenueAdjustment = cAsset.AverageAdjustmentToBaseRentalIncomePerUnitAfterRenovations.GetValueOrDefault(0);
            defProformaSGI = mfAsset.EstDeferredMaintenance == 0 ? Model.ProformaAnnualIncome : Model.ProformaAnnualIncome + defAnnualRevenueAdjustment + pami;

            var adjDefPvf = (Model.ProformaVacancyFac / 100) * defProformaSGI;
            //[{(Proforma SGI + Annualized Revenue Adjustment to Proforma SGI after Renovation + Proforma AMI) – Proforma VF} – Proforma AOE]
            defProformaNOI = mfAsset.EstDeferredMaintenance == 0 ? proformaNOI : Math.Round(defProformaSGI - adjDefPvf - aoe);
            if (defTotalListing != 0)
            {
                defCapRate = ((defProformaNOI + defAnnualRevenueAdjustment) / defTotalListing) * 100;
            }
            else
            {
                defCapRate = 0;
            }

            defCapRateLP = ((defProformaNOI + defAnnualRevenueAdjustment) / defTotalListingLP) * 100;
            defCapRateCMV = ((defProformaNOI + defAnnualRevenueAdjustment) / defTotalListingCMV) * 100;

            if (Model.AssetType == AssetType.ConvenienceStoreFuel)
            {
                if (Model.SalesPrice.HasValue && Model.SalesPrice.Value > 0)
                {
                    Model.CashInvestmentApy = (float)((pretax / Model.SalesPrice.Value) * 100);
                }
                else
                {
                    Model.CashInvestmentApy = 0;
                }
            }
            else
            {
                if (Model.AskingPrice > 0)
                {
                    Model.CashInvestmentApy = (float)((pretax / Model.AskingPrice) * 100);
                }
                else if (Model.CurrentBpo > 0)
                {
                    Model.CashInvestmentApy = (float)((pretax / Model.CurrentBpo) * 100);
                }
                else
                {
                    Model.CashInvestmentApy = 0;
                }
            }
        }
    }
}
@*<link rel="stylesheet" href="/resources/demos/style.css">*@

<style>
    .property-feature {
        padding-bottom: 3px;
    }

    .main-content {
        padding: 60px 20px !important;
    }

    .add-padding-calc-radio {
        padding-left: 8px;
    }
    .italic-label {
        font-weight: normal;
        padding-top: 4px;
        font-style: italic;
    }
</style>




<input type="hidden" value="@Model.AskingPrice" id="hdnListPriceOriginal" />
@*<input type="hidden" value="@Model.CurrentBpo" id="hdnCMVOriginal" />
    not need cmv hidden field bcoz you can get it by parseFloat($("#hdnAppraisal1").val());
*@

<div class="modal fade" id="requestInsDocsModal">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h2>Request Insurance Documents</h2>
            </div>
            <div class="alert alert-info main-alert" id="divRequestInsMessage" style="display: none;">
            </div>
            @using (Html.BeginForm("RequestInsuranceDocuments", "DataPortal", FormMethod.Post, new { @id = "insDocForm" }))
            {
                <div class="modal-body text-center">
                    <h5>
                        Select an insurance company
                    </h5>
                    @Html.Hidden("AssetId", Model.AssetId)
                    @Html.DropDownList("InsuranceCompany", Model.InsuranceCompanies as IEnumerable<SelectListItem>, "---")
                    <div class="row">
                        <div class="col-sm-6">
                            <div class="input-group">
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" onclick="return submitInsuranceCompany()">Submit</button>
                </div>
            }

        </div>
    </div>
</div>

<div class="modal fade" id="orderDocumentsModal">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h2>Order Recorded Documents</h2>
            </div>
            <div class="alert alert-info main-alert" id="divOrderDocumentsMessage" style="display: none;">
            </div>
            @using (Html.BeginForm("OrderDocuments", "DataPortal", FormMethod.Post, new { @id = "docForm" }))
            {
                <div class="modal-body text-center">
                    <h5>
                        Select a title company
                    </h5>
                    @Html.Hidden("AssetId", Model.AssetId)
                    @Html.DropDownList("TitleCompany", Model.TitleCompanies as IEnumerable<SelectListItem>, "---")
                    <br />
                    <div id="secondary-list" style="display: none">
                        <h5>Select a region</h5>
                        <select id="titleCompanyRegion">
                            <option value="">---</option>
                            <option value="6">General</option>
                            <option value="5">location 1</option>
                            <option value="7">location 2</option>
                            <option value="8">location 3</option>
                            <option value="9">location 4</option>
                        </select>
                    </div>
                    <div class="row">
                        <div class="col-sm-6">
                            <div class="input-group">
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" onclick="return submitTitleCompany()">Submit</button>
                </div>
            }

        </div>
    </div>
</div>

@if (!ViewBag.IsSampleAsset)
{
    <div style="width: 100%; float: left;">
        <div style="width: 33%; display: inline-block;">

            @if (Model.OrderStatus != Inview.Epi.EpiFund.Domain.Enum.OrderStatus.Completed)
            {
                if (Model.OrderStatus == Inview.Epi.EpiFund.Domain.Enum.OrderStatus.Unknown)
                {
                    <a data-toggle="modal" data-target="#orderDocumentsModal" class="btn btn-primary" style="cursor: pointer; float: left; margin-bottom: 30px;">Order Recorded Documents</a>
                }
                else
                {
                    <a class="btn btn-primary" style="cursor: pointer; float: left; margin-bottom: 30px;" onclick="addUserOrder()">Order Recorded Documents</a>
                }
            }
        </div>
        <div style="width: 33%; display: inline-block;">
            @if (Model.PCInsuranceOrderStatus != Inview.Epi.EpiFund.Domain.Enum.OrderStatus.Completed)
            {
                if (Model.PCInsuranceOrderStatus == Inview.Epi.EpiFund.Domain.Enum.OrderStatus.Unknown)
                {
                    <a data-toggle="modal" data-target="#requestInsDocsModal" class="btn btn-primary" style="cursor: pointer; float: left; margin-bottom: 30px;">Request Insurance Documents</a>
                }
                else
                {

                }
            }
        </div>
        <div style="width: 33%; display: inline-block;">
            @if (Model.ListingStatus != Inview.Epi.EpiFund.Domain.Enum.ListingStatus.SoldAndClosed)
            {
                <div class="col-sm-12">
                    @Html.ActionLink("Complete and Send Binding LOI", "ExecuteLOI", new { id = Model.AssetId }, new { @class = "btn btn-primary", style = "float:right;margin-bottom:30px;" })
                </div>
            }
        </div>
    </div>
}


<h3>United States Commercial Real Estate Online, LLC</h3>

<h4 style="text-align: center;">@Model.ProjectName</h4>
<div class="row">
    <div class="col-md-12">
        <div style="float: left">
            <b>Asset Details: @Inview.Epi.EpiFund.Domain.Helpers.EnumHelper.GetEnumDescription(Model.AssetType)</b>
        </div>
        <br />
        @if (Model.PortfolioNames != null)
        {
            if (Model.PortfolioNames.Length > 0)
            {
                <div style="float: left">
                    <b>Included in Portfolios: @Model.PortfolioNames </b>
                </div>
            }
        }
        <br />
        <div>
            @if (Model.ListingStatus == Inview.Epi.EpiFund.Domain.Enum.ListingStatus.Available)
            {
                <span style="text-align: center;" class="asset-available">This property is @Html.DisplayFor(s => s.ListingStatus)</span>
            }
            else if (Model.ListingStatus == Inview.Epi.EpiFund.Domain.Enum.ListingStatus.Pending)
            {
                <span style="text-align: center;" class="asset-pending">This property is @Html.DisplayFor(s => s.ListingStatus)</span>
            }
            else
            {
                <span style="text-align: center;" class="asset-sold">This property is @Html.DisplayFor(s => s.ListingStatus)</span>
            }
        </div>
    </div>

</div>
<br />
<br />
<ul class="nav nav-tabs">
    <li class="active"><a href="#pics" data-toggle="tab">Images</a></li>
    <li><a href="#videos" data-toggle="tab">Videos</a></li>
</ul>
<div class="tab-content" style="padding-left: 40px; padding-right: 40px;">
    <div class="tab-pane active" id="pics">
        @if (Model.Images != null)
        {
            <div id="asset-carousel" class="carousel slide" data-ride="carousel" data-interval="5000">

                <!-- Slides -->
                <div class="carousel-inner">
                    @for (int item = 0; item < Model.Images.Count; item++)
                    {

                        if (item == 0)
                        {
                            <div class="item active" style="background-image: url('@Url.Action("GetImageSource", "Admin", new { fileName = Model.Images[item].FileName, assetId = Model.AssetId, contentType = Model.Images[item].ContentType })')">
                            </div>
                        }
                        else
                        {
                            <div class="item" style="background-image: url('@Url.Action("GetImageSource", "Admin", new { fileName = Model.Images[item].FileName, assetId = Model.AssetId, contentType = Model.Images[item].ContentType })')">
                            </div>
                        }
                    }
                </div>

                <!-- Controls -->
                <a class="left carousel-control" href="#asset-carousel" data-slide="prev">
                    <span class="glyphicon glyphicon-chevron-left"></span>
                </a>
                <a class="right carousel-control" href="#asset-carousel" data-slide="next">
                    <span class="glyphicon glyphicon-chevron-right"></span>
                </a>
            </div>

            <!-- Indicators -->
            <ol class="carousel-indicators">
                @for (int item = 0; item < Model.Images.Count; item++)
                {
                    if (item == 0)
                    {
                        <li data-target="#asset-carousel" data-slide-to="@item" class="active" style="background-image: url('@Url.Action("GetImageSource", "Admin", new { fileName = Model.Images[item].FileName, assetId = Model.AssetId, contentType = Model.Images[item].ContentType })')"></li>
                    }
                    else
                    {
                        <li data-target="#asset-carousel" data-slide-to="@item" style="background-image: url('@Url.Action("GetImageSource", "Admin", new { fileName = Model.Images[item].FileName, assetId = Model.AssetId, contentType = Model.Images[item].ContentType })')"></li>
                    }
                }
            </ol>


            <div class="input-group text-center" style="display: block; margin-top: -10px">
                <button class="btn btn-default btn-xs" id="carousel-pause">
                    <span class="glyphicon glyphicon-pause"></span>
                </button>
                <button class="btn btn-default btn-xs" id="carousel-play">
                    <span class="glyphicon glyphicon-play"></span>
                </button>
            </div>
        }
    </div>
    <div class="tab-pane" id="videos">
        <div class="row">
            @{ if (Model.Videos.Count > 0)
                {
                    Model.Videos.Sort((x, y) => x.Index.CompareTo(y.Index));

                    <div class="col-md-8">
                        <div class="featuredVideo" rel="@Model.Videos[0].Url"></div>
                        <hr />
                    </div>
                    <div class="col-md-4 playlist">
                        @foreach (var vid in Model.Videos)
                        {
                            <div>
                                <p><b>@vid.Description</b></p>
                                <div class="videoDiv" rel="@vid.Url">
                                </div>
                            </div>
                            <hr />
                        }
                    </div>
                }
            }
            <script>
                $(function () {
                    //this will return the video iframe if the url is ok
                    function checkVideoFormat(url, returnType, autoplay, size) {

                        //we just want the video id
                        var youtubeRegex = /youtube.com\/watch\?v=([a-zA-Z0-9-_]+)/;
                        var vimeoRegex = /vimeo.com\/([a-zA-Z0-9-_]+)/;

                        var isYouTube = url.indexOf("https://www.youtube.com/") > -1;
                        var isVimeo = url.indexOf("https://vimeo.com/") > -1;

                        var found = [];
                        if (isYouTube) {
                            found = url.match(youtubeRegex);
                        } else if (isVimeo) {
                            found = url.match(vimeoRegex);
                        } else {
                            return null; //not found then return null
                        }

                        var auto = autoplay === true ? 1 : 0;

                        if (returnType == "thumbnail") {
                            if (isYouTube) {
                                //https://img.youtube.com/vi/mRqDWkIhMBM/
                                //https://img.youtube.com/vi/mRqDWkIhMBM/0.jpg/
                                return '<div rel=' + url + ' class="viewVideo"><img style="width:100%; min-height:50px;" src="https://img.youtube.com/vi/' + found[1] + '/0.jpg"/></div>';
                            } else if (isVimeo) {

                                //for vimeo, you'll need to call vimeo api
                                $.getJSON('https://vimeo.com/api/oembed.json?url=https%3A//vimeo.com/' + found[1], {
                                    format: "json",
                                    width: "640"
                                },
                                    function (data) {
                                        $(".vimeo-image-" + found[1]).html('<img style="width:100%; min-height:50px;" src="' + data.thumbnail_url + '"/>');
                                    });

                                return '<div class="vimeo-image-' + found[1] + ' viewVideo" rel=' + url + ' class="viewVideo"></div>'
                            }
                        } else if (returnType == "video") {

                            if (isYouTube) {
                                return '<iframe class="previewVideoIframe" allowfullscreen frameborder="0" scrolling="no" marginheight="0" marginwidth="0" width="100%" height="300" type="text/html" src="https://www.youtube.com/embed/' + found[1] + '?autoplay=' + auto + '&fs=1&iv_load_policy=3&showinfo=0&rel=0&cc_load_policy=0&start=0&end=0"></iframe>';
                            } else if (isVimeo) {
                                return '<iframe class="previewVideoIframe" src="https://player.vimeo.com/video/' + found[1] + '?autoplay=' + auto + '" width="100%" height="300" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>';
                            }
                        }
                    }

                    //show featuredVideo
                    var featuredUrl = $('.featuredVideo').attr('rel');
                    var featuredIframe = checkVideoFormat(featuredUrl, "video");
                    if (featuredIframe != null) {
                        $(".featuredVideo").html(featuredIframe);
                    }

                    var vidIndex = 0;
                    $.each($(".videoDiv"), function () {
                        var url = $(this).attr("rel");
                        var img = checkVideoFormat(url, "thumbnail");
                        $(this).html(img);
                    });

                    //view video
                    $("#videos").on("click", ".viewVideo", function () {
                        var url = $(this).attr("rel");
                        var iframe = checkVideoFormat(url, "video");
                        $(".featuredVideo").html(iframe);
                    });

                });
            </script>
        </div>

    </div>
</div>
@Html.Hidden("CODM", @cAsset.EstDeferredMaintenance)
@Html.Hidden("MFDM", @mfAsset.EstDeferredMaintenance)
@if (Model.GetType() == typeof(CommercialAssetViewModel))
{
    @Html.Hidden("CoType", true);
}
@if (Model.GetType() == typeof(MultiFamilyAssetViewModel))
{
    @Html.Hidden("MfType", true);
}
@if (Model.GetType() == typeof(CommercialAssetViewModel))
{
    <hr />
    <h4>Property Proforma Details</h4>
    <div class="row">
        <div class="col-lg-6">
            <table class="table table-striped asset-table">
                <tbody>
                    <tr>
                        <td colspan="3">
                            <label>Listed/Asking Price</label>
                        </td>
                        <td style="text-align: right;">
                            @if (!Model.IsTBDMarket || Model.AskingPrice > 0)
                            {
                                <span class="padmoney" id="AskingPrice">@Model.AskingPrice.ToString("C0")</span>
                            }
                            else
                            {
                                <a title="Per Professional Listing, Pricing to be determined by Market Conditions and highest and best offer submitted">TBD</a>
                            }
                            @Html.HiddenFor(s => s.AskingPrice)

                        </td>
                    </tr>
                    <tr>
                        <td colspan="3">
                            <label>List Price / Sq.Ft.</label>
                        </td>
                        <td style="text-align: right;">
                            @if (!Model.IsTBDMarket || Model.AskingPrice > 0)
                            {
                                <span class="padmoney">@listPricePerSqFt.ToString("C")</span>
                                
                            }
                            else
                            {
                                <a title="Per Professional Listing, Pricing to be determined by Market Conditions and highest and best offer submitted">TBD</a>
                            }
                        </td>
                    </tr>

                    <tr>
                        <td colspan="3">
                            <label>Proforma <a title="Annualized Scheduled Gross Income">SGI</a> (Annual)</label>
                        </td>
                        <td style="text-align: right;">
                            <span class="padmoney">@Model.ProformaAnnualIncome.ToString("C0")</span>
                        </td>
                    </tr>
                    <tr>
                        <td colspan="3">
                            <label>Proforma <a title="Annualized Scheduled Gross Income">SGI</a> per Sq.Ft.</label>
                        </td>
                        <td style="text-align: right;">
                            <span class="padmoney">@sgiPerSqFt.ToString("C")</span>
                        </td>
                    </tr>

                    <tr>
                        <td colspan="3">
                            <label>Proforma <a title="Vacancy Factor">VF</a> (Annualized)</label>
                            @if (Model.isOfferingMemorandum)
                            {
                                <i style="font-size: xx-small">*Offering Memorandum Proforma Nets Out VF Offsets</i>
                            }
                        </td>
                        <td style="text-align: right;">
                            @((Model.ProformaVacancyFac / 100).ToString("P"))
                        </td>

                    </tr>
                    @*<tr>
                            <td colspan="3">
                                <label>Offering Memorandum Proforma Nets Out VF Offsets</label>
                            </td>
                            @if (((Model.ProformaVacancyFac / 100) != 0))
                            {
                                <td style="text-align: right;">No
                                </td>
                            }
                            else
                            {
                                <td style="text-align: right;">Yes
                                </td>
                            }
                        </tr>*@

                    <tr>
                        <td colspan="3">
                            <label>Proforma <a title="Annual Operating Expense">AOE</a></label>
                        </td>
                        <td style="text-align: right;">
                            <span class="padmoney">@Model.ProformaAnnualOperExpenses.ToString("C0")</span>
                        </td>
                    </tr>
                    <tr>
                        <td colspan="3">
                            <label>Proforma Reimbursement <a title="Common Area Maintenance">CAM</a> </label>
                            <br />
                            <span>(Per Sq. Ft. @((Model.ProformaMiscIncome / Model.SquareFeet).ToString("C2")) )</span>
                        </td>
                        <td style="text-align: right;">
                            <span class="padmoney">@Model.ProformaMiscIncome.ToString("C0")</span>
                            @Html.HiddenFor(s => s.ProformaAnnualOperExpenses)
                        </td>


                    </tr>
                    <tr>
                        <td colspan="3">
                            <label>Proforma <a title="Annual Operating Expense">AOE</a> as % of <a title="Scheduled Gross Income">SGI</a></label>
                        </td>
                        <td style="text-align: right;">
                            <span class="pad">@Model.ProformaAoeFactorAsPerOfSGI.ToString("0.00")</span>%
                            @Html.HiddenFor(s => s.ProformaAoeFactorAsPerOfSGI)
                        </td>
                    </tr>
                    <tr>
                        <td colspan="3">
                            <label>Proforma Pre Tax <a title="Annualized Net Operating Income">NOI</a></label>
                        </td>
                        <td style="text-align: right;">
                            @proformaNOI.ToString("C0")
                            <input type="hidden" value="@proformaNOI" id="hdnProformaNOI" />
                        </td>
                    </tr>
                    <tr>
                        <td colspan="3">
                            <label>Listed Price/<a title="[Calculated Market Value is based solely on either (1) comparable sales data provided by the Listing Agent or Seller in their Offering Memorandum, or, in the absence thereof, (2) calculated to the displayed CAP Rate only if the offering price for the asset is TBD by Market.]">CMV</a> 
                                               <a title="Annual Capitalization Rate">CAP</a> (Profroma Annualized Operating Data)</label>
                        </td>
                        <td style="text-align: right;">
                            @if (Model.CashInvestmentApy <= 0)
                            {
                                <span style="font-weight: bold; color: red;">@((Model.CashInvestmentApy / 100).ToString("P2"))</span>
                            }
                            else
                            {
                                <span>@((Model.CashInvestmentApy / 100).ToString("P2"))</span>
                            }
                            @Html.HiddenFor(s => s.CashInvestmentApy)
                        </td>
                    </tr>
                    @if (@Model.CurrentPrincipalBalance != null && @Model.CurrentPrincipalBalance != 0)
                    {
                        <tr>
                            <td colspan="4">
                                <em>This Property may have existing assumable financing. Details on the existing debt structure are available for your review in the Listing Agent’s Marketing Brochure located in the Asset Documents Section below.</em>
                            </td>
                        </tr>

                    }
                    @*@if (Model.HasPositionMortgage == Inview.Epi.EpiFund.Domain.Enum.PositionMortgageType.Yes &&
                            Model.MortgageLienAssumable == Inview.Epi.EpiFund.Domain.Enum.MortgageLienAssumable.Yes)
                        {

                        }*@

                    @*<tr>
                            <td>
                                <label>Current Annual Gross Income</label>
                            </td>
                            <td style="text-align: right;">
                                <span class="padmoney">@Model.AnnualGrossIncome.ToString()</span>
                            </td>
                        </tr>*@
                    @*<tr>
                            <td>
                                <label><a title="Common Area Maintenance">CAM</a> Pass thru to Tenants: <span class="padmoney">@proformaCam</span> per Sq.Ft.</label>
                            </td>
                            <td style="text-align: right;">
                                <span class="padmoney">@Model.ProformaMiscIncome.ToString("C0")</span>
                            </td>
                        </tr>*@
                    @*
                        <tr>
                            <td>
                                <label>Proforma <a title="Vacancy Factor">VF</a>, Concessions, & Misc Offsets</label>
                            </td>
                            <td style="text-align: right;">
                                <span class="pad">@Model.ProformaVacancyFac.ToString("P")</span>
                            </td>
                        </tr>

                        <tr>
                            <td>
                                <label>Proforma <a title="Common Area Maintenance">CAM</a> as % of <a title="Scheduled Gross Income">SGI</a></label>
                            </td>
                            <td style="text-align: right;">
                                <span class="pad">@Model.ProformaAoeFactorAsPerOfSGI</span>%
                                @Html.HiddenFor(s => s.ProformaAoeFactorAsPerOfSGI)
                            </td>
                        </tr>*@


                </tbody>
            </table>
        </div>
        <div class="col-lg-6">
            <table class="table table-striped asset-table">
                <tbody>
                    <tr>
                        <td>
                            <label>Calculated Market Value (<a title="[Calculated Market Value is based solely on either (1) comparable sales data provided by the Listing Agent or Seller in their Offering Memorandum, or, in the absence thereof, (2) calculated to the displayed CAP Rate only if the offering price for the asset is TBD by Market.]">CMV</a>)</label>
                        </td>
                        <td style="text-align: right;">
                            <span class="padmoney" id="bpo">@Model.CurrentBpo.ToString("C0")</span>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <label>Calculated Market Value/<a title="[Calculated Market Value is based solely on either (1) comparable sales data provided by the Listing Agent or Seller in their Offering Memorandum, or, in the absence thereof, (2) calculated to the displayed CAP Rate only if the offering price for the asset is TBD by Market.]">CMV</a> Price/Sq.Ft.</label>
                        </td>
                        <td style="text-align: right;">
                            <span class="padmoney">@appraisalPerSqFt.ToString("C2")</span>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <label>Calculated Market Value/<a title="[Calculated Market Value is based solely on either (1) comparable sales data provided by the Listing Agent or Seller in their Offering Memorandum, or, in the absence thereof, (2) calculated to the displayed CAP Rate only if the offering price for the asset is TBD by Market.]">CMV</a> <a title="Annual Capitalization Rate">CAP</a> Rate</label>
                        </td>
                        <td style="text-align: right;">
                            @((capRate / 100).ToString("P2"))

                        </td>
                    </tr>
                    <tr>
                        <td>
                            <label>Is Property Currently Producing Income</label>
                        </td>
                        <td style="text-align: right;">
                            <span class="pad">@(Model.HasIncome ? "Yes" : "No")</span>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <label>Last Reported Occupancy</label>
                        </td>
                        <td style="text-align: right;">
                            @cAsset.OccupancyPercentage %
                            <br />
                            @(cAsset.OccupancyDate.HasValue ? cAsset.OccupancyDate.Value.ToString("MM/yyyy") : "")
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <label>Current Annual Gross Income</label>
                        </td>
                        <td style="text-align: right;">
                            <span class="padmoney">@Model.AnnualGrossIncome.ToString("C0")</span>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <label>Is property Operated as Multi or Single Tenant</label>
                        </td>
                        <td style="text-align: right;">
                            @if (@cAsset.NumberOfTenants > 1)
                            {
                                <span>Multi</span>
                            }
                            else
                            {
                                <span>Single</span>
                            }
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <label>Is Sale of Property Subject to Auction?</label>
                        </td>
                        <td style="text-align: right;">
                            @if (Model.IsTBDMarket)
                            {
                                <span class="asset-sold">Yes</span>
                            }
                            else
                            {
                                <span>No</span>
                            }
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <label>If Yes, What is the Auction Date?</label>
                        </td>
                        @if (Model.AuctionDate.HasValue)
                        {
                            <td style="text-align: right;">
                                @if (Model.AuctionDate.Value.AddDays(-30) <= DateTime.Now)
                                {
                                    <span class="asset-sold">@Model.AuctionDate.Value.ToString("MM/dd/yy")</span>
                                }
                                else
                                {
                                    <span>@Model.AuctionDate.Value.ToString("MM/dd/yy")</span>
                                }
                            </td>
                        }
                        else
                        {
                            <td style="text-align: right;">
                                <span>N/A</span>
                            </td>
                        }

                    </tr>
                    <tr>
                        <td>
                            <label>Call for Offers Date</label>
                        </td>
                        <td style="text-align: right;">@(Model.CallforOffersDate.HasValue ? Model.CallforOffersDate.Value.ToString("MM/dd/yy") : "N/A")</td>
                    </tr>
                    <tr>
                        <td>
                            @Html.LabelFor(s => s.SellerTerms)
                        </td>
                        <td style="text-align: right;">
                            @Inview.Epi.EpiFund.Domain.Helpers.EnumHelper.GetEnumDescription(Model.SellerTerms)
                        </td>
                    </tr>
                    <tr>
                        <td>
                            @Html.LabelFor(s => s.isParticipateTaxExchange)
                        </td>
                        @if (Model.isParticipateTaxExchange != null && Model.isParticipateTaxExchange == true)
                        {
                            <td style="text-align: right;">
                                Yes
                            </td>
                        }
                        else if (Model.isParticipateTaxExchange != null && Model.isParticipateTaxExchange == false)
                        {
                            <td style="text-align: right;">
                                No
                            </td>
                        }
                        else
                        {
                            <td style="text-align: right;"></td>
                        }
                    </tr>

                    @if (Model.ClosingDate.HasValue && !Model.IsTBDMarket)
                    {
                        <tr>
                            <td>
                                <label>Offer Closing Date</label>
                            </td>
                            <td style="text-align: right;">@Model.ClosingDate.Value.ToString("MM/dd/yy")</td>
                        </tr>
                    }

                    <tr>
                        <td>
                            <label>Est Tenant Improvement Budget</label>
                            <a data-toggle="modal" data-target="#loginwarning" style="margin-left: 10px;">(View list)</a>
                        </td>
                        <td style="text-align: right;">
                            <span class="padmoney">@cAsset.EstDeferredMaintenance.ToString("C0")</span>
                        </td>
                    </tr>
                    <tr>
                        <td colspan="2">
                            <em>This Section will be for inclusion of data fields pertinent if a proposed Debt Package were [formerly] committed to (e.g., evidenced as an attached document) by a bonafide Debt Investor (e.g., amnt, terms, leveraged cash flow analysis, etc.)</em>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>

}
@if (Model.GetType() == typeof(MultiFamilyAssetViewModel) && Model.AssetType != AssetType.MHP)
{
    <hr />
    <h4>Property Proforma Details</h4>
    <div class="row">
        <div class="col-lg-6">
            <table class="table table-striped asset-table">
                <tbody>
                    <tr>
                        <td>
                            @Html.LabelFor(s => s.AskingPrice)
                        </td>
                        <td style="text-align: right;">
                            @if (!Model.IsTBDMarket || Model.AskingPrice > 0)
                            {
                                <span class="padmoney" id="AskingPrice">@Model.AskingPrice.ToString("C0")</span>
                            }
                            else
                            {
                                <a title="Per Professional Listing, Pricing to be determined by Market Conditions and highest and best offer submitted">TBD</a>
                            }
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <label>List Price / Unit</label>
                        </td>
                        <td style="text-align: right;">
                            @if (!Model.IsTBDMarket || Model.AskingPrice > 0)
                            {
                                <span class="padmoney">@listPricePerUnit.ToString("C0")</span>
                            }
                            else
                            {
                                <a title="Per Professional Listing, Pricing to be determined by Market Conditions and highest and best offer submitted">TBD</a>
                            }
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <label>List Price / Sq.Ft.</label>
                        </td>
                        <td style="text-align: right;">
                            @if (!Model.IsTBDMarket || Model.AskingPrice > 0)
                            {
                                <span class="padmoney">@listPricePerSqFt.ToString("C")</span>
                            }
                            else
                            {
                                <a title="Per Professional Listing, Pricing to be determined by Market Conditions and highest and best offer submitted">TBD</a>
                            }
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <label>Proforma <a title="Annualized Scheduled Gross Income">SGI</a> (Annualized)</label>
                        </td>
                        <td style="text-align: right;">
                            <span class="padmoney">@Model.ProformaAnnualIncome.ToString("C0")</span>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <label>Proforma <a title="Annualized Scheduled Gross Income">SGI</a> Avg Monthly Unit Rent </label>
                        </td>
                        <td style="text-align: right;">
                            <span class="padmoney">@(((Model.ProformaAnnualIncome / @mfAsset.TotalUnits) / 12).ToString("C0"))</span>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <label>Proforma <a title="Vacancy Factor">VF</a> (Annualized)</label>
                            @if (Model.isOfferingMemorandum)
                            {
                                <i style="font-size: xx-small">*Offering Memorandum Proforma Nets Out VF Offsets</i>
                            }
                        </td>
                        <td style="text-align: right;">
                            @((Model.ProformaVacancyFac / 100).ToString("P"))
                        </td>

                    </tr>
                    @*<tr>
                            <td>
                                <label>Offering Memorandum Proforma Nets Out VF Offsets</label>
                            </td>
                            @if (((Model.ProformaVacancyFac / 100) != 0))
                            {
                                <td style="text-align: right;">No
                                </td>
                            }
                            else
                            {
                                <td style="text-align: right;">Yes
                                </td>
                            }
                        </tr>*@
                    <tr>
                        <td>
                            <label>Proforma <a title="Annual Operating Expense">AOE</a></label>
                        </td>
                        <td style="text-align: right;">
                            <span class="padmoney">@Model.ProformaAnnualOperExpenses.ToString("C0")</span>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <label>Proforma <a title="Annual Miscellaneous Income">AMI</a></label>
                        </td>
                        <td style="text-align: right;">
                            <span class="padmoney">@Model.ProformaMiscIncome.ToString("C0")</span>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <label>Proforma <a title="Annual Operating Expense">AOE</a> as % of <a title="Scheduled Gross Income">SGI</a></label>
                        </td>
                        <td style="text-align: right;">
                            <span class="pad">@Model.ProformaAoeFactorAsPerOfSGI</span>%
                            @Html.HiddenFor(s => s.ProformaAoeFactorAsPerOfSGI)
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <label>Proforma Pre Tax <a title="Annualized Net Operating Income">NOI</a></label>
                        </td>
                        <td style="text-align: right;">
                            <span class="padmoney">@proformaNOI.ToString("C0")</span>
                            <input type="hidden" value="@proformaNOI" id="hdnProformaNOI" />
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <label>Listed Price/<a title="[Calculated Market Value is based solely on either (1) comparable sales data provided by the Listing Agent or Seller in their Offering Memorandum, or, in the absence thereof, (2) calculated to the displayed CAP Rate only if the offering price for the asset is TBD by Market.]">CMV</a> <a title="Annual Capitalization Rate">CAP</a> (Profroma Annualized Operating Data)</label>
                        </td>
                        <td style="text-align: right;">
                            @if (Model.CashInvestmentApy <= 0)
                            {
                                <span style="font-weight: bold; color: red;">@((Model.CashInvestmentApy / 100).ToString("P2"))</span>
                            }
                            else
                            {
                                @((Model.CashInvestmentApy / 100).ToString("P2"))
                            }
                        </td>
                    </tr>
                    @if (@Model.CurrentPrincipalBalance != null && @Model.CurrentPrincipalBalance != 0)
                    {
                        <tr>
                            <td colspan="2">
                                <em>This Property may have existing assumable financing. Details on the existing debt structure are available for your review in the Listing Agent’s Marketing Brochure located in the Asset Documents Section below.</em>
                            </td>
                        </tr>
                    }

                </tbody>
            </table>
        </div>
        <div class="col-lg-6">
            <table class="table table-striped asset-table">
                <tbody>
                    <tr>
                        <td>
                            <label>Calculated Market Value (<a title="[Calculated Market Value is based solely on either (1) comparable sales data provided by the Listing Agent or Seller in their Offering Memorandum, or, in the absence thereof, (2) calculated to the displayed CAP Rate only if the offering price for the asset is TBD by Market.]">CMV</a>)</label>
                        </td>
                        <td style="text-align: right;">
                            <span class="padmoney" id="bpo">@Model.CurrentBpo.ToString("C0")</span>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <label>Calculated Market Value / <a title="[Calculated Market Value is based solely on either (1) comparable sales data provided by the Listing Agent or Seller in their Offering Memorandum, or, in the absence thereof, (2) calculated to the displayed CAP Rate only if the offering price for the asset is TBD by Market.]">CMV</a> / Unit</label>
                        </td>
                        <td style="text-align: right;">
                            <span class="padmoney">@appraisalPerUnit.ToString("c0")</span>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <label>Calculated Market Value / <a title="[Calculated Market Value is based solely on either (1) comparable sales data provided by the Listing Agent or Seller in their Offering Memorandum, or, in the absence thereof, (2) calculated to the displayed CAP Rate only if the offering price for the asset is TBD by Market.]">CMV</a> / Sq.Ft.</label>
                        </td>
                        <td style="text-align: right;">
                            <span class="padmoney">@appraisalPerSqFt.ToString("c2")</span>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <label>Calculated Market Value / <a title="[Calculated Market Value is based solely on either (1) comparable sales data provided by the Listing Agent or Seller in their Offering Memorandum, or, in the absence thereof, (2) calculated to the displayed CAP Rate only if the offering price for the asset is TBD by Market.]">CMV</a> <a title="Annual Capitalization Rate">CAP</a> Rate</label>
                        </td>
                        <td style="text-align: right;">
                            @((capRate / 100).ToString("P2"))
                        </td>
                    </tr>
                    <tr>
                        <td>
                            @Html.LabelFor(s => s.HasIncome)
                        </td>
                        <td style="text-align: right;">
                            @(Model.HasIncome ? "Yes" : "No")
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <label>Last Reported Occupancy</label>
                        </td>
                        <td style="text-align: right;">
                            @(((100 - Model.CurrentVacancyFac) / 100).ToString("P"))
                            <br />@(Model.LastReportedOccupancyDate.HasValue ? Model.LastReportedOccupancyDate.Value.ToString("MM/yyyy") : "")
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <label>Current Annualized Gross Income</label>
                        </td>
                        <td style="text-align: right;">
                            <span class="padmoney">@Model.AnnualGrossIncome.ToString("C0")</span>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <label>Is Sale of Property Subject to Auction?</label>
                        </td>
                        <td style="text-align: right;">
                            @if (Model.IsTBDMarket)
                            {

                                <span class="asset-sold">Yes</span>
                            }
                            else
                            {
                                <span>No</span>
                            }
                        </td>
                    </tr>

                    <tr>
                        <td>
                            <label>If Yes, What is the Auction Date?</label>
                        </td>
                        <td style="text-align: right;">
                            @if (Model.AuctionDate.HasValue)
                            {
                                <span class="asset-sold">@Model.AuctionDate.Value.ToShortDateString()</span>
                            }
                            else
                            {
                                <span>N/A</span>
                            }
                        </td>
                    </tr>
                    <tr>
                        <td>
                            @Html.LabelFor(s => s.SellerTerms)
                        </td>
                        <td style="text-align: right;">
                            @Inview.Epi.EpiFund.Domain.Helpers.EnumHelper.GetEnumDescription(Model.SellerTerms)
                        </td>
                    </tr>
                    <tr>
                        <td>
                            @Html.LabelFor(s => s.isParticipateTaxExchange)
                        </td>
                        @if (Model.isParticipateTaxExchange != null && Model.isParticipateTaxExchange == true)
                        {
                            <td style="text-align: right;">
                                Yes
                            </td>
                        }
                        else if (Model.isParticipateTaxExchange != null && Model.isParticipateTaxExchange == false)
                        {
                            <td style="text-align: right;">
                                No
                            </td>
                        }
                        else
                        {
                            <td style="text-align: right;"></td>
                        }
                    </tr>
                    <tr>
                        <td>
                            <label>Call for Offers Date</label>
                        </td>
                        @if (Model.CallforOffersDate.HasValue)
                        {
                            <td style="text-align: right;">@Model.CallforOffersDate.Value.ToString("MM/dd/yy")</td>
                        }
                        else
                        {
                            <td style="text-align: right;"></td>
                        }
                    </tr>
                    @if (Model.ClosingDate.HasValue && !Model.IsTBDMarket)
                    {
                        <tr>
                            <td>
                                <label>Offer Closing Date</label>
                            </td>
                            <td style="text-align: right;">@Model.ClosingDate.Value.ToString("MM/dd/yy")</td>
                        </tr>
                    }
                    <tr>
                        <td>
                            <label>Est Def Maintenance</label>
                            <a data-toggle="modal" data-target="#loginwarning" style="margin-left: 10px;">(View list)</a>
                        </td>
                        @if (!Model.HasDeferredMaintenance)
                        {
                            <td style="text-align: right;">
                                <span class="padmoney">$0</span>
                            </td>
                        }
                        else if (Model.HasDeferredMaintenance)
                        {
                            <td style="text-align: right;">
                                <span class="padmoney">@mfAsset.EstDeferredMaintenance.ToString("C0")</span>
                            </td>
                        }
                    </tr>
                    <tr>
                        <td colspan="2">
                            <em>This Section will be for inclusion of data fields pertinent if a proposed Debt Package were [formerly] committed to (e.g., evidenced as an attached document) by a bonafide Debt Investor (e.g., amnt, terms, leveraged cash flow analysis, etc.)</em>
                        </td>
                    </tr>
                    @*<tr>
                            <td>
                                <label>Independent Appraisal/<a title="Broker Price Opinion and or weighted average of Sale Comps provided by List Agent">BPO</a> <a title="Annual Capitalization Rate">CAP</a> Rate</label></td>
                            <td style="text-align: right;">
                                @bpoRate.ToString("P2")
                            </td>
                        </tr>*@
                </tbody>
            </table>
        </div>
    </div>

}
@if (Model.AssetType == AssetType.MHP)
{
    <hr />
    <h4>Property Proforma Details</h4>
    <div class="row">
        <div class="col-lg-6">
            <table class="table table-striped asset-table">
                <tbody>
                    <tr>
                        <td>
                            @Html.LabelFor(s => s.AskingPrice)
                        </td>
                        <td style="text-align: right;">
                            @if (!Model.IsTBDMarket || Model.AskingPrice > 0)
                            {
                                <span class="padmoney" id="AskingPrice">@Model.AskingPrice.ToString("C0")</span>
                            }
                            else
                            {
                                <a title="Per Professional Listing, Pricing to be determined by Market Conditions and highest and best offer submitted">TBD</a>
                            }
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <label>List Price / MHP Space</label>
                        </td>
                        <td style="text-align: right;">
                            @if (!Model.IsTBDMarket || Model.AskingPrice > 0)
                            {
                                <span class="padmoney">@listPricePerMHP.ToString("C0")</span>
                            }
                            else
                            {
                                <a title="Per Professional Listing, Pricing to be determined by Market Conditions and highest and best offer submitted">TBD</a>
                            }
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <label>List Price / Acreage  Sq.Ft.</label>
                        </td>
                        <td style="text-align: right;">
                            @if (!Model.IsTBDMarket || Model.AskingPrice > 0)
                            {
                                <span class="padmoney">@listPricePerSqFt.ToString("C")</span>
                            }
                            else
                            {
                                <a title="Per Professional Listing, Pricing to be determined by Market Conditions and highest and best offer submitted">TBD</a>
                            }
                        </td>
                    </tr>
                    @*<tr>
                            <td>
                                <label>Current Annualized Operating Income</label>
                            </td>
                            <td style="text-align: right;">
                                <span class="padmoney">@Model.AnnualGrossIncome.ToString("C0")</span>
                            </td>
                        </tr>*@
                    <tr>
                        <td>
                            <label>Proforma <a title="Annualized Scheduled Gross Income">SGI</a> (Annualized)</label>
                        </td>
                        <td style="text-align: right;">
                            <span class="padmoney">@Model.ProformaAnnualIncome.ToString("C0")</span>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <label>Proforma <a title="Annualized Scheduled Gross Income">SGI</a> Avg Monthly Space Rent  </label>
                        </td>
                        <td style="text-align: right;">
                            <span class="padmoney">@sgiAvgMonthlySpaceRent.ToString("C0")</span>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <label>Proforma <a title="Vacancy Factor">VF</a> (Annualized)</label>
                            @if (Model.isOfferingMemorandum)
                            {
                                <i style="font-size: xx-small">*Offering Memorandum Proforma Nets Out VF Offsets</i>
                            }
                        </td>
                        <td style="text-align: right;">
                            @((Model.ProformaVacancyFac / 100).ToString("P"))
                        </td>

                    </tr>
                    @*<tr>
                            <td>
                                <label>Offering Memorandum Proforma Nets Out VF Offsets</label>
                            </td>
                            @if (((Model.ProformaVacancyFac / 100) != 0))
                            {
                                <td style="text-align: right;">No
                                </td>
                            }
                            else
                            {
                                <td style="text-align: right;">Yes
                                </td>
                            }
                        </tr>*@
                    <tr>
                        <td>
                            <label>Proforma <a title="Annual Miscellaneous Income">AMI</a></label>
                        </td>
                        <td style="text-align: right;">
                            <span class="padmoney">@Model.ProformaMiscIncome.ToString("C0")</span>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <label>Proforma <a title="Annual Operating Expense">AOE</a></label>
                        </td>
                        <td style="text-align: right;">
                            <span class="padmoney">@Model.ProformaAnnualOperExpenses.ToString("C0")</span>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <label>Proforma <a title="Annual Operating Expense">AOE</a> as % of <a title="Scheduled Gross Income">SGI</a> + <a title="Annual Miscellaneous Income">AMI</a></label>
                        </td>
                        <td style="text-align: right;">
                            <span class="pad">@Model.ProformaAoeFactorAsPerOfSGI</span>%
                            @Html.HiddenFor(s => s.ProformaAoeFactorAsPerOfSGI)
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <label>Proforma Pre Tax <a title="Annualized Net Operating Income">NOI</a></label>
                        </td>
                        <td style="text-align: right;">
                            <span class="padmoney">@proformaNOI.ToString("C0")</span>
                            <input type="hidden" value="@proformaNOI" id="hdnProformaNOI" />
                        </td>
                    </tr>
                    <tr>
                        <td>
                            @* Listed Price is change to NOT Listed Price as per issue#40
                                <label>Listed Price/<a title="Annual Capitalization Rate"> CAP</a>Rate</label>*@
                            <label>Listed Price/<a title="Annual Capitalization Rate"> CMV CAP</a>&nbsp;Rate</label>
                        </td>
                        <td style="text-align: right;">
                            @if (Model.CashInvestmentApy <= 0)
                            {
                                <span style="font-weight: bold; color: red;">@((Model.CashInvestmentApy / 100).ToString("P2"))</span>
                            }
                            else
                            {
                                @((Model.CashInvestmentApy / 100).ToString("P2"))
                            }
                        </td>
                    </tr>
                    @if (@Model.CurrentPrincipalBalance != null && @Model.CurrentPrincipalBalance != 0)
                    {
                        <tr>
                            <td colspan="2">
                                <em>This Property may have existing assumable financing. Details on the existing debt structure are available for your review in the Listing Agent’s Marketing Brochure located in the Asset Documents Section below.</em>
                            </td>
                        </tr>
                    }
                    @*@if (Model.HasPositionMortgage == Inview.Epi.EpiFund.Domain.Enum.PositionMortgageType.Yes &&
                            Model.MortgageLienAssumable == Inview.Epi.EpiFund.Domain.Enum.MortgageLienAssumable.Yes)
                        {

                        }*@
                </tbody>
            </table>
        </div>
        <div class="col-lg-6">
            <table class="table table-striped asset-table">
                <tbody>
                    <tr>
                        <td>
                            <label>Calculated Market Value (<a title="[Calculated Market Value is based solely on either (1) comparable sales data provided by the Listing Agent or Seller in their Offering Memorandum, or, in the absence thereof, (2) calculated to the displayed CAP Rate only if the offering price for the asset is TBD by Market.]">CMV</a>)</label>
                        </td>
                        <td style="text-align: right;">
                            <span class="padmoney" id="bpo">@Model.CurrentBpo.ToString("C0")</span>
                        </td>
                    </tr>
                    @*<tr>
                            <td>
                                <label>Independent Appraisal/<a title="Broker Price Opinion and or weighted average of Sale Comps provided by List Agent">BPO</a> </label>
                            </td>
                            <td style="text-align: right;">
                                @bpoRate.ToString("P2")
                            </td>
                        </tr>*@
                    <tr>
                        <td>
                            <label>Calculated Market Value / <a title="[Calculated Market Value is based solely on either (1) comparable sales data provided by the Listing Agent or Seller in their Offering Memorandum, or, in the absence thereof, (2) calculated to the displayed CAP Rate only if the offering price for the asset is TBD by Market.]">CMV</a> / MHP Space</label>
                        </td>
                        <td style="text-align: right;">
                            <span class="padmoney">@appraisalPerUnit.ToString("c0")</span>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <label>Acreage Cost per Sq.Ft. at Calculated Market Value/<a title="[Calculated Market Value is based solely on either (1) comparable sales data provided by the Listing Agent or Seller in their Offering Memorandum, or, in the absence thereof, (2) calculated to the displayed CAP Rate only if the offering price for the asset is TBD by Market.]">CMV</a></label>
                        </td>
                        <td style="text-align: right;">
                            @* alter as per issue#51
                                <span class="padmoney">@appraisalPerUnit</span>*@
                            <span class="padmoney">
                                @{ if (Model.LotSize != null && Model.LotSize.Length > 0 && Double.Parse(Model.LotSize) > 0)
                                    {
                                        appraisalPerUnit = Model.CurrentBpo / (Double.Parse(Model.LotSize) * 43560);
                                        <text> @appraisalPerUnit.ToString("c2")</text>
                                    }}

                            </span>

                        </td>
                    </tr>
                    <tr>
                        <td>
                            <label>Calculated Market Value / <a title="[Calculated Market Value is based solely on either (1) comparable sales data provided by the Listing Agent or Seller in their Offering Memorandum, or, in the absence thereof, (2) calculated to the displayed CAP Rate only if the offering price for the asset is TBD by Market.]">CMV</a> <a title="Annual Capitalization Rate">CAP</a> Rate</label>
                        </td>
                        <td style="text-align: right;">
                            @((capRate / 100).ToString("P2"))
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <label>Is property currently producing income</label>
                        </td>
                        <td style="text-align: right;">
                            @(Model.HasIncome ? "Yes" : "No")
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <label>Last Reported Occupancy</label>
                        </td>
                        <td style="text-align: right;">
                            @(((100 - Model.CurrentVacancyFac) / 100).ToString("P"))
                            <br />@(Model.LastReportedOccupancyDate.HasValue ? Model.LastReportedOccupancyDate.Value.ToString("MM/yyyy") : "")
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <label>Current Annual Gross Income</label>
                        </td>
                        <td style="text-align: right;">
                            <span class="padmoney">@Model.AnnualGrossIncome.ToString("C0")</span>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <label>Is Sale of Property Subject to Auction?</label>
                        </td>
                        <td style="text-align: right;">
                            @if (Model.IsTBDMarket)
                            {
                                <span class="asset-sold">Yes</span>
                            }
                            else
                            {
                                <span>No</span>
                            }
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <label>Does Property have a Call for Offers Date ?</label>
                        </td>
                        <td style="text-align: right;">
                            @if (Model.CallforOffersDate.HasValue)
                            {
                                <span class="asset-sold">Yes</span>
                            }
                            else
                            {
                                <span>N/A</span>
                            }
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <label>If Yes, what is the Auction/Call for Offers Date?</label>
                        </td>
                        <td style="text-align: right;">
                            @if (Model.AuctionDate.HasValue)
                            {
                                <span class="asset-sold">@Model.AuctionDate.Value.ToShortDateString()</span>
                            }
                            else if (Model.CallforOffersDate != null)
                            {
                                @*<td style="text-align: right;">@Model.CallforOffersDate.Value.ToString("MM/dd/yy")</td>
                                    bug#4 on mail on date 2016-07-14  *@
                                <span class="asset-sold">@Model.CallforOffersDate.Value.ToString("MM/dd/yy")</span>

                            }
                            else
                            {
                                <span>N/A</span>
                            }
                        </td>
                    </tr>
                    @*<tr>
                            <td>
                                <label>Call for Offers Date</label></td>
                            @if (Model.CallforOffersDate != null)
                            {
                                <td style="text-align: right;">@Model.CallforOffersDate.Value.ToString("MM/dd/yy")</td>
                            }
                            else
                            {
                                <td style="text-align: right;"></td>
                            }
                        </tr>*@
                    <tr>
                        <td>
                            @Html.LabelFor(s => s.SellerTerms)
                        </td>
                        <td style="text-align: right;">
                            @Inview.Epi.EpiFund.Domain.Helpers.EnumHelper.GetEnumDescription(Model.SellerTerms)
                        </td>
                    </tr>
                    <tr>
                        <td>
                            @Html.LabelFor(s => s.isParticipateTaxExchange)
                        </td>
                        @if (Model.isParticipateTaxExchange != null && Model.isParticipateTaxExchange == true)
                        {
                            <td style="text-align: right;">
                                Yes
                            </td>
                        }
                        else if (Model.isParticipateTaxExchange != null && Model.isParticipateTaxExchange == false)
                        {
                            <td style="text-align: right;">
                                No
                            </td>
                        }
                        else
                        {
                            <td style="text-align: right;"></td>
                        }
                    </tr>
                    @if (Model.ClosingDate.HasValue && !Model.IsTBDMarket)
                    {
                        <tr>
                            <td>
                                <label>Offer Closing Date</label>
                            </td>
                            <td style="text-align: right;">@Model.ClosingDate.Value.ToString("MM/dd/yy")</td>
                        </tr>
                    }
                    <tr>
                        <td>
                            <label>Est Def Maintenance</label>
                            <a data-toggle="modal" data-target="#loginwarning" style="margin-left: 10px;">(View list)</a>
                        </td>
                        @if (!Model.HasDeferredMaintenance)
                        {
                            <td style="text-align: right;">
                                <span class="padmoney">$0</span>
                            </td>
                        }
                        else if (Model.HasDeferredMaintenance)
                        {
                            <td style="text-align: right;">
                                <span class="padmoney">@mfAsset.EstDeferredMaintenance.ToString("C0")</span>
                            </td>
                        }
                    </tr>
                    <tr>
                        <td colspan="2">
                            <em>This Section will be for inclusion of data fields pertinent if a proposed Debt Package were [formerly] committed to (e.g., evidenced as an attached document) by a bonafide Debt Investor (e.g., amnt, terms, leveraged cash flow analysis, etc.)</em>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>

}
<hr />
<h4>Debt Fund Calculators</h4>

<div class="row">
    <div class="col-md-6 text-center">
        @if (@Model.CurrentPrincipalBalance != null && @Model.CurrentPrincipalBalance != 0)
        {
            <input type="button" class="btn btn-primary" id="btnpopu1" value="Existing Debt Fund Calculator" onclick="OpenExistingCalc('@Model.AssetId    ')" />
        }
        else
        {
            <input type="button" class="btn" id="btnpopuInvalid" value="Existing Debt Fund Calculator" onclick="alert('There is no existing debt fund for this asset.')" />

        }
    </div>
    <div class="col-md-6 text-center">
        <input type="button" class="btn btn-primary " id="btnpopu" value="Proposed Debt Fund Calculator" onclick="OpenProposedCalc('@Model.AssetId    ')" />
    </div>
</div>
<hr />

@if (Model.GetType() == typeof(CommercialAssetViewModel))
{
    <h4>Preferred CAP Rate Analysis Calculator to Proforma Operating Data</h4>
    <div class="row">
        <div class="col-xs-6">
            <label class="control-label">Analysis is Based On:</label>
            <input type="hidden" value="@Model.AskingPrice" id="hdnListedPrice1" />
            <input type="hidden" value="@Model.CurrentBpo" id="hdnAppraisal1" />
            <input type="hidden" value="@Model.CurrentPrincipalBalance" id="hdnBalance" />
            <input type="hidden" value="@Model.MonthlyPayment" id="hdnMonthlyPay" />
            <input type="hidden" value="@Model.isARM" id="hdnARM1" />
            <input type="hidden" value="@Model.SelectedAmortSchedule" id="hdnAmrtSche" />
            <input type="hidden" value="@Model.AskingPrice" id="hdnPriceAmount" />
            @if (Model.AskingPrice > 0)
            {
                <input type="radio" id="radiobtn1" name="option1" class="option1" value="ListedPrice" /><label class="add-padding-calc-radio">Listed Price</label> }
            else
            {
                <input type="radio" id="radiobtn1" name="option1" class="option1" disabled="disabled" value="ListedPrice" /><label class="add-padding-calc-radio">Listed Price</label>}
            @if (Model.CurrentBpo > 0)
            {
                <input type="radio" id="radiobtn2" name="option1" class="option1" value="Appraisal" /><label class="add-padding-calc-radio"><a title="[Calculated Market Value is based solely on either (1) comparable sales data provided by the Listing Agent or Seller in their Offering Memorandum, or, in the absence thereof, (2) calculated to the displayed CAP Rate only if the offering price for the asset is TBD by Market.]">CMV</a></label>
            }
            else
            {
                <input type="radio" id="radiobtn2" name="option1" class="option1" disabled="disabled" value="Appraisal" /><label class="add-padding-calc-radio"><a title="[Calculated Market Value is based solely on either (1) comparable sales data provided by the Listing Agent or Seller in their Offering Memorandum, or, in the absence thereof, (2) calculated to the displayed CAP Rate only if the offering price for the asset is TBD by Market.]">CMV</a></label>}
        </div>
    </div>
    <div class="row">
        <div class="col-lg-6">
            <table class="table table-striped asset-table">
                <tbody>
                    <tr>
                        <td style="line-height: 32px">
                            <label>Enter Desired <a title="Annual Capitalization Rate">CAP</a> Rate</label>
                        </td>
                        <td style="line-height: 32px">
                            <input type="text" id="txtBoxDesiredCapRate" style="width: 60px; text-align: right; margin-right: 5px; margin-bottom: 0" value="0.00%" />
                        </td>
                    </tr>
                    <tr></tr>
                    <tr>
                        <td>
                            <label>Comparative % to Listed Pricing/<a title="[Calculated Market Value is based solely on either (1) comparable sales data provided by the Listing Agent or Seller in their Offering Memorandum, or, in the absence thereof, (2) calculated to the displayed CAP Rate only if the offering price for the asset is TBD by Market.]">CMV</a></label>
                        </td>
                        <td style="text-align: right;"><span id="CompPercPerCapRate">0.00%</span></td>
                    </tr>
                </tbody>
            </table>
        </div>
        <div class="col-lg-6">
            <table class="table table-striped asset-table">
                <tbody>
                    <tr>
                        <td>
                            <label>Calculated value at your selected <a title="Annual Capitalization Rate">CAP</a></label>
                        </td>
                        <td style="text-align: right;">
                            <span id="CalculatedPricePerCapRate">$0.00</span>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <label>New <a title="Annual Capitalization Rate">CAP</a> Pricing Per Sq.Ft</label>
                        </td>
                        <td style="text-align: right;"><span id="PricePerFootPerCapRate">$0.00</span></td>
                    </tr>
                    <tr>
                        <td>
                            <label>Equity Adjustment to selected <a title="Annual Capitalization Rate">CAP</a></label>
                        </td>
                        <td style="text-align: right;"><span id="EquityAdjPerCapRate">$0.00</span></td>
                    </tr>
                </tbody>
            </table>
        </div>
        <div class="col-lg-12" style="text-align: center">
            <input type="button" id="BtnCapRateCalc" value="Calculate" />
        </div>
    </div>

    <hr />
    <h4>Property Data</h4>
    <div class="row">
        <div class="col-lg-6">
            <table class="table table-striped asset-table">
                <tbody>
                    <tr>
                        <td>
                            <label>Property Type</label>
                        </td>
                        <td style="text-align: right;">
                            @Inview.Epi.EpiFund.Domain.Helpers.EnumHelper.GetEnumDescription(Model.AssetType)
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <label>Number of Rentable Suites</label>
                        </td>
                        <td style="text-align: right;">
                            @cAsset.NumberofSuites
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <label>Gross Rentable Sq. Ft.</label>
                        </td>
                        <td style="text-align: right;">
                            <span class="pad">@cAsset.SquareFeet.ToString("N0")</span>
                            @Html.HiddenFor(s => cAsset.SquareFeet, new { id = "mfAsset_SquareFeet" })
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <label>Property Address</label>
                        </td>
                        <td style="text-align: right;">
                            @Html.DisplayFor(s => s.PropertyAddress, new { @class = "control-label" })
                            <a href="http://maps.google.com/maps?q=@Model.PropertyAddress @Model.City @Model.State" target="_blank">Click Here For Map</a>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <label>City, State, Zip</label>
                        </td>
                        <td style="text-align: right;">@(string.Format("{0}, {1} {2}", Model.City, Model.State, Model.Zip))</td>
                    </tr>
                    <tr>
                        <td>
                            <label>County where Property Located</label>
                        </td>
                        <td style="text-align: right;">@Model.County</td>
                    </tr>
                    <tr>
                        <td style="width: 50%;">
                            <label>Tax Assessor Number(s)</label>
                        <td style="width: 50%; text-align: right;">
                            @foreach (var tpn in Model.AssetTaxParcelNumbers)
                            {
                                <span>@tpn.TaxParcelNumber</span> <br />
                            }
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <label>Year Orginally Built</label>
                        </td>
                        <td style="text-align: right;">@Model.YearBuilt</td>
                    </tr>
                    <tr>
                        <td>
                            @Html.LabelFor(s => s.PropLastUpdatedYear)
                        </td>
                        @if (Model.PropLastUpdatedYear != 0)
                        {
                            <td style="text-align: right;">@Model.PropLastUpdatedYear</td>
                        }
                        else
                        {
                            <td style="text-align: right;">Unknown</td>
                        }
                    </tr>
                    <tr>
                        <td>
                            <label>Total Lot Size of Property</label>
                        </td>
                        <td style="text-align: right;">@Model.LotSize acres</td>
                    </tr>
                    <tr>
                        <td>
                            <label>Number of Buildings</label>
                        </td>
                        <td style="text-align: right;">@Model.BuildingsCount</td>
                    </tr>
                    <tr>
                        <td>
                            <label>Number of Parking Spaces</label>
                        </td>
                        <td style="text-align: right;"><span class="pad">@cAsset.ParkingSpaces</span></td>
                    </tr>
                    <tr>
                        <td>
                            <label>Number of Covered Parking Spaces</label>
                        </td>
                        <td style="text-align: right;"><span class="pad">@cAsset.CoveredParkingSpaces</span></td>
                    </tr>
                    <tr>
                        <td>
                            <label>Property Operating Status</label>
                        </td>
                        <td style="text-align: right;">@Inview.Epi.EpiFund.Domain.Helpers.EnumHelper.GetEnumDescription(Model.OperatingStatus)</td>
                    </tr>
                    <tr>
                        <td>
                            <label>List Agent Grade Classification of Prop:</label>
                        </td>
                        <td style="text-align: right;">@Model.GradeClassification</td>
                    </tr>
                    <tr>
                        <td>@Html.LabelFor(s => s.PropertyCondition)</td>
                        <td style="text-align: right;">@Inview.Epi.EpiFund.Domain.Helpers.EnumHelper.GetEnumDescription(Model.PropertyCondition)</td>
                    </tr>

                    <tr>
                        <td>
                            @Html.LabelFor(s => s.RenovatedByOwner)
                        </td>
                        @if (Model.RenovatedByOwner != null && (bool)Model.RenovatedByOwner == true)
                        {
                            <td style="text-align: right;">Yes</td>
                        }
                        else
                        {
                            <td style="text-align: right;">No</td>
                        }

                    </tr>
                    <tr>
                        <td>
                            @Html.LabelFor(s => s.PropHoldTypeId)
                            @if (Model.PropHoldTypeId == 2 && Model.LeaseholdMaturityDate.HasValue)
                            {
                                @Html.LabelFor(s => s.LeaseholdMaturityDate, new { @class = "italic-label" })
                            }
                        </td>
                        <td style="text-align: right;">
                            @Model.PropHoldType
                            @if (Model.PropHoldTypeId == 2 && Model.LeaseholdMaturityDate.HasValue)
                            {
                                <div style="margin-top:20px">@Model.LeaseholdMaturityDate.Value.ToString("MM/dd/yyyy")</div>
                            }
                        </td>
                    </tr>
                    <tr>
                        <td>
                            @Html.LabelFor(s => s.HasEnvironmentalIssues)
                            @if (Model.DocumentNumberEnvi > -1)
                            {
                                <a target='_blank' href="@Url.Action("DownloadDocument", "Admin", new { fileName = Model.Documents[Model.DocumentNumberEnvi].FileName, assetId = Model.AssetId, contentType = Model.Documents[Model.DocumentNumberEnvi].ContentType, title = Model.Documents[Model.DocumentNumberEnvi].Title })">@(Model.Documents[Model.DocumentNumberEnvi].Title)</a>
                            }
                        </td>
                        @if (Model.HasEnvironmentalIssues != null && Model.HasEnvironmentalIssues == true)
                        {
                            <td style="text-align: right;">
                                Yes
                            </td>
                        }
                        else if (Model.HasEnvironmentalIssues != null && Model.HasEnvironmentalIssues == false)
                        {
                            <td style="text-align: right;">
                                No
                            </td>
                        }
                        else
                        {
                            <td style="text-align: right;">
                                No
                            </td>
                        }
                    </tr>

                </tbody>
            </table>
        </div>
        <div class="col-lg-6">
            <table class="table table-striped asset-table">
                <tbody>
                    <tr>
                        <td>
                            <label>Does Property have a Major Tenant ?</label>
                        </td>
                        <td style="text-align: right;">
                            @(cAsset.HasAAARatedMajorTenant ? "Yes" : "No")
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <label>Name of Major Tenant (if applicable)</label>
                        </td>
                        <td style="text-align: right;">
                            @cAsset.NameOfAAARatedMajorTenant
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <label>Is the Major Tenant a Publically Traded Company?</label>
                        </td>
                        <td style="text-align: right;">
                            @(cAsset.IsMajorTenantAAARated ? "Yes" : "No")
                        </td>
                    </tr>

                    <tr>
                        <td>
                            <label>Leased Square Footage of Major Tenant</label>
                        </td>
                        <td style="text-align: right;">
                            <span class="pad">@cAsset.LeasedSquareFootageByMajorTenant.ToString("N0")</span>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <label>Percentage of Property Leased by Major Tenant</label>
                        </td>
                        <td style="text-align: right;">
                            @percentOfPropLeased %
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <label>Major Tenant's Base Rent per Sq.Ft</label>
                        </td>
                        <td style="text-align: right;">
                            <span class="padmoney">@cAsset.BaseRentPerSqFtMajorTenant.ToString("C2")</span>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <label>Total Number of Tenants Currently Occ Prop</label>
                        </td>
                        <td style="text-align: right;">
                            @cAsset.NumberOfTenants
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <label>Current Market Rents per Sq.Ft</label>
                        </td>
                        <td style="text-align: right;">
                            <span class="padmoney">@cAsset.CurrentMarkerRentPerSqFt.ToString("C2")</span>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <label>Current Number of Vacant Suites for the Property</label>
                        </td>
                        <td style="text-align: right;">
                            @cAsset.NumberOfRentableSuites
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <label>Define Vacancy Suite Build Out Status of Property</label>
                        </td>
                        <td style="text-align: right;">
                            @Inview.Epi.EpiFund.Domain.Helpers.EnumHelper.GetEnumDescription(cAsset.VacantSuites)
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <label>Is Property in a Pending Foreclosure/Bankruptcy</label>
                        </td>
                        <td style="text-align: right;">
                            @(cAsset.isPendingForeclosure ? "Yes" : "No")
                        </td>
                    </tr>
                    @if (cAsset.isPendingForeclosure)
                    {
                        <tr>
                            <td>
                                <label>Pending Foreclosure Sale Date</label>
                            </td>
                            <td style="text-align: right;">
                                @(cAsset.ForeclosureSaleDate.HasValue ? @cAsset.ForeclosureSaleDate.Value.ToString("MM/dd/yy") : "N/A")
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <label>Foreclosure File Recordation Number</label>
                            </td>
                            <td style="text-align: right;">
                                @cAsset.ForeclosureRecordNumber
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <label>Foreclosing Lender of Record</label>
                            </td>
                            <td style="text-align: right;">
                                @cAsset.ForeclosureLender
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <label>Mortgage Position for Lender of Record</label>
                            </td>
                            <td style="text-align: right;">
                                @Inview.Epi.EpiFund.Domain.Helpers.EnumHelper.GetEnumDescription(cAsset.ForeclosurePosition)
                            </td>
                        </tr>
                    }
                    <tr>
                        <td>
                            <label>Complete Rent Roll/Tenant Lease Summary</label>
                        </td>
                        <td style="text-align: right;">
                            @*@(Model.availablecurrentRentRoll ? "Yes" : "No")*@
                            @(Model.CompleteRentRoll == true ? "Yes" : "No")

                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>

    <hr />
    <h4>Adjusted Proforma Analysis: Tenant Improvement Inclusion</h4>
    <div class="row">
        <div class="col-xs-6">
            <label class="control-label">Analysis is Based On:</label>
            <input type="hidden" value="@defTotalListing" id="hdnPickedTotalPrice" />
            <input type="hidden" value="@defCapRateLP" id="hdnCapRateLP" />
            <input type="hidden" value="@defCapRateCMV" id="hdnCapRateCMV" />
            @if (Model.AskingPrice > 0)
            {
                <input type="radio" id="radiobtn5" name="option3" class="option3" value="ListedPrice" /><label class="add-padding-calc-radio">Listed Price</label> }
            else
            {
                <input type="radio" id="radiobtn5" name="option3" class="option3" disabled="disabled" value="ListedPrice" /><label class="add-padding-calc-radio">Listed Price</label>}
            @if (Model.CurrentBpo > 0)
            {
                <input type="radio" id="radiobtn6" name="option3" class="option3" value="Appraisal" /><label class="add-padding-calc-radio"><a title="[Calculated Market Value is based solely on either (1) comparable sales data provided by the Listing Agent or Seller in their Offering Memorandum, or, in the absence thereof, (2) calculated to the displayed CAP Rate only if the offering price for the asset is TBD by Market.]">CMV</a></label>}
            else
            { <input type="radio" id="radiobtn6" name="option3" class="option3" disabled="disabled" value="Appraisal" /><label class="add-padding-calc-radio"><a title="[Calculated Market Value is based solely on either (1) comparable sales data provided by the Listing Agent or Seller in their Offering Memorandum, or, in the absence thereof, (2) calculated to the displayed CAP Rate only if the offering price for the asset is TBD by Market.]">CMV</a></label>}
        </div>
    </div>
    <div class="row">
        <div class="col-lg-6">
            <table class="table table-striped asset-table">
                <tbody>
                    <tr>
                        <td>
                            <label>List Price/<a title="[Calculated Market Value is based solely on either (1) comparable sales data provided by the Listing Agent or Seller in their Offering Memorandum, or, in the absence thereof, (2) calculated to the displayed CAP Rate only if the offering price for the asset is TBD by Market.]">CMV</a> + Est <a title="Tenant Improvement">TI</a> Budget</label>
                        </td>
                        <td style="text-align: right;"><span class="padmoney" id="spnTotalListing">@defTotalListing.ToString("C0")</span></td>
                    </tr>
                    <tr>
                        <td>
                            <label>Adjusted <a title="Annualized Scheduled Gross Income">SGI</a> after <a title="Tenant Improvement">TI</a> budget Inclusion</label>
                        </td>
                        <td style="text-align: right;"><span class="padmoney">@((@Model.ProformaAnnualIncome + defAnnualRevenueAdjustment).ToString("C0"))</span></td>
                    </tr>

                    @*<tr>
                            <td>
                                <label>Base Monthly Rental Income Adjustment per Unit after Renovations</label></td>
                            <td style="text-align: right;"><span class="padmoney">@(mfAsset.EstDeferredMaintenance == 0 ? 0 : Model.AverageAdjustmentToBaseRentalIncomePerUnitAfterRenovations)</span></td>
                        </tr>*@
                    <tr>
                        <td>
                            <label>Estimated Base Rent Adjustment after <a title="Tenant Improvement">TI</a> Budget Inclusion</label>
                        </td>
                        <td style="text-align: right;"><span class="padmoney">@defAnnualRevenueAdjustment.ToString("C2")</span></td>
                    </tr>
                </tbody>
            </table>
        </div>
        <div class="col-lg-6">
            <table class="table table-striped asset-table">
                <tbody>
                    <tr>
                        <td>
                            <label>Adjusted Proforma Pre Tax <a title="Annualized Net Operating Income">NOI</a></label>
                        </td>
                        <td style="text-align: right;">
                            <span class="padmoney">@((defProformaNOI + defAnnualRevenueAdjustment).ToString("C0"))</span>
                            <input type="hidden" value="@(defProformaNOI + defAnnualRevenueAdjustment)" id="hdnDefProformaNOI" />
                            <input type="hidden" value="@defTotalListing" id="hdnDefTotalListing" />
                            <input type="hidden" value="@defTotalListingLP" id="hdnDefTotalListingLP" />
                            <input type="hidden" value="@defTotalListingCMV" id="hdnDefTotalListingCMV" />
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <label>Adjusted <a title="Annual Capitalization Rate">CAP</a> Rate Calculation</label>
                        </td>
                        <td style="text-align: right;"><span id="spnAdjCap" class="pad">@defCapRate.ToString("0.00")</span>%</td>
                    </tr>
                    @*<tr>
                            <td colspan="2">
                                <em>“The comparative pricing analysis computes the differentials between the adjusted price points of [List Price + Deferred Maintenance Budget] and calculated Operating & Value Proforma subsequent Deferred Maintenance implementation.”</em>
                            </td>
                        </tr>*@
                </tbody>
            </table>
        </div>
    </div>

    <hr />
    <h4>Adjusted Preferred Cap Rate Analysis Calculator: Tenant Improvement Inclusion</h4>
    <div class="row">
        <div class="col-xs-6">
            <label class="control-label">Analysis is Based On:</label>
            <input type="hidden" value="@defTotalListing" id="hdnPickedTotal" />
            @if (Model.AskingPrice > 0)
            {
                <input type="radio" id="radiobtn3" name="option2" class="option2" value="ListedPrice" /><label class="add-padding-calc-radio">Listed Price</label>
            }
            else
            {
                <input type="radio" id="radiobtn3" name="option2" class="option2" disabled="disabled" value="ListedPrice" /><label class="add-padding-calc-radio">Listed Price</label>
            }
            @if (Model.CurrentBpo > 0)
            {
                <input type="radio" id="radiobtn4" name="option2" class="option2" value="Appraisal" /><label class="add-padding-calc-radio"><a title="[Calculated Market Value is based solely on either (1) comparable sales data provided by the Listing Agent or Seller in their Offering Memorandum, or, in the absence thereof, (2) calculated to the displayed CAP Rate only if the offering price for the asset is TBD by Market.]">CMV</a></label>}
            else
            { <input type="radio" id="radiobtn4" name="option2" class="option2" disabled="disabled" value="Appraisal" /><label class="add-padding-calc-radio"><a title="[Calculated Market Value is based solely on either (1) comparable sales data provided by the Listing Agent or Seller in their Offering Memorandum, or, in the absence thereof, (2) calculated to the displayed CAP Rate only if the offering price for the asset is TBD by Market.]">CMV</a></label>}
        </div>
    </div>
    <div class="row">
        <div class="col-lg-6">
            <table class="table table-striped asset-table">
                <tbody>
                    <tr>
                        <td style="line-height: 32px">
                            <label>Enter Desired <a title="Annual Capitalization Rate">CAP</a> Rate</label>
                        </td>
                        <td style="line-height: 32px; text-align: right;">
                            <input type="text" id="defTxtBoxDesiredCapRate" style="width: 60px; text-align: right; margin-right: 5px; margin-bottom: 0" value="0.00%" />
                        </td>
                    </tr>

                    <tr style="display: none">
                        <td>
                            <label>New Tenant Improvement <a title="Annual Capitalization Rate">CAP</a> Pricing Per Unit</label>
                        </td>
                        <td style="text-align: right;"><span id="defPricePerUnitPerCapRate">$0.00</span></td>
                    </tr>
                    <tr>
                        <td>
                            <label>New <a title="Tenant Improvement">TI</a> Budget <a title="Annual Capitalization Rate">CAP</a> Price per Sq.Ft.</label>
                        </td>
                        <td style="text-align: right;"><span id="defPricePerFootPerCapRate">$0.00</span></td>
                    </tr>
                    <tr>
                        <td>
                            <label>Comparative % to Listed Pricing/<a title="[Calculated Market Value is based solely on either (1) comparable sales data provided by the Listing Agent or Seller in their Offering Memorandum, or, in the absence thereof, (2) calculated to the displayed CAP Rate only if the offering price for the asset is TBD by Market.]">CMV</a></label>
                        </td>
                        <td style="text-align: right;"><span id="defCompPercPerCapRate">0.00%</span></td>
                    </tr>
                </tbody>
            </table>
        </div>

        <div class="col-lg-6">
            <table class="table table-striped asset-table">
                <tbody>
                    <tr>
                        <td>
                            <label>Calculated Price at your selected <a title="Annual Capitalization Rate">CAP</a></label>
                        </td>
                        <td style="text-align: right;"><span id="defCalculatedPricePerCapRate">$0.00</span></td>
                    </tr>
                    <tr>
                        <td colspan="2">
                            <b>Less DM/TI Budget of:</b><span style="padding: 5px" id="defLessDMBudget">$0.00</span>

                            <b>Net Offering:</b><span style="padding: 5px" id="defNetOffering">$0.00</span>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <label>Equity Adjustment to Selected <a title="Annual Capitalization Rate">CAP</a></label>
                        </td>
                        <td style="text-align: right;"><span id="defEquityAdjPerCapRate">$0.00</span></td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>

    <div class="row">
        <div class="col-lg-12" style="text-align: center">
            <input type="button" id="defBtnCapRateCalc" value="Calculate" />
        </div>
    </div>

    <div class="modal fade" id="loginwarning" tabindex="-1" role="dialog" aria-labelledby="loginwarning-label" aria-hidden="true" data-backdrop="false">
        <form>
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                        <h4 class="modal-title" id="loginwarning-label">Estimated Tenant Improvement Items</h4>
                    </div>
                    <div class="modal-body">
                        @if (@cAsset.EstDeferredMaintenance == 0)
                        {
                        }
                        else
                        {
                            <table class="tabled table-striped" style="width: 100%;">
                                <thead>
                                    <tr>
                                        <th style="width: 160px;">Item</th>
                                        <th style="text-align: right;">Unit Per Cost</th>
                                        <th style="text-align: right;">Number of Items</th>
                                        <th style="text-align: right;">Total Item Cost</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in Model.DeferredMaintenanceItems)
                                    {
                                        if (item.Selected)
                                        {
                                            <tr>
                                                @if (@item.ItemTitle == "Other" && @item.ItemDescription != null)
                                                {
                                                    <td style="">@item.ItemDescription</td>
                                                }
                                                else
                                                {
                                                    <td style="">@item.ItemTitle</td>
                                                }
                                                <td style="text-align: right;">@item.UnitCost.ToString("C0")</td>
                                                <td style="text-align: right;">@(string.Format("{0} {1}", item.NumberOfUnits, item.UnitTypeLabel))</td>
                                                <td style="text-align: right;">@((item.NumberOfUnits * item.UnitCost).ToString("C0"))</td>
                                            </tr>
                                        }
                                    }
                                    <br />
                                    <br />
                                    <tr>
                                        <td colspan="4" style="text-align: right;">
                                            <label>Total Cost: </label>@cAsset.EstDeferredMaintenance.ToString("C0")
                                        </td>
                                    </tr>
                                </tbody>
                            </table>
                        }
                    </div>
                    <div class="modal-footer">
                        <input type="button" class="btn" value="Close" data-dismiss="modal" />
                    </div>
                </div>
            </div>
        </form>
    </div>
}
@if (Model.GetType() == typeof(MultiFamilyAssetViewModel) && Model.AssetType != AssetType.MHP)
{
    <h4>Preferred Cap Rate Analysis Calculator</h4>
    <div class="row">
        <div class="col-xs-6">
            <label class="control-label">Analysis is Based On:</label>
            <input type="hidden" value="@Model.AskingPrice" id="hdnListedPrice1" />
            <input type="hidden" value="@Model.CurrentBpo" id="hdnAppraisal1" />
            <input type="hidden" value="@Model.CurrentPrincipalBalance" id="hdnBalance" />
            <input type="hidden" value="@Model.MonthlyPayment" id="hdnMonthlyPay" />
            <input type="hidden" value="@Model.isARM" id="hdnARM1" />
            <input type="hidden" value="@Model.SelectedAmortSchedule" id="hdnAmrtSche" />
            <input type="hidden" value="@Model.AskingPrice" id="hdnPriceAmount" />
            @if (Model.AskingPrice > 0)
            {
                <input type="radio" id="radiobtn1" name="option1" class="option1" value="ListedPrice" /><label class="add-padding-calc-radio">Listed Price</label> }
            else
            {
                <input type="radio" id="radiobtn1" name="option1" class="option1" disabled="disabled" value="ListedPrice" /><label class="add-padding-calc-radio">Listed Price</label>
            }
            @if (Model.CurrentBpo > 0)
            {
                <input type="radio" id="radiobtn2" name="option1" class="option1" value="Appraisal" /><label class="add-padding-calc-radio"><a title="[Calculated Market Value is based solely on either (1) comparable sales data provided by the Listing Agent or Seller in their Offering Memorandum, or, in the absence thereof, (2) calculated to the displayed CAP Rate only if the offering price for the asset is TBD by Market.]">CMV</a></label>
            }
            else
            {
                <input type="radio" id="radiobtn2" name="option1" class="option1" disabled="disabled" value="Appraisal" /><label class="add-padding-calc-radio"><a title="[Calculated Market Value is based solely on either (1) comparable sales data provided by the Listing Agent or Seller in their Offering Memorandum, or, in the absence thereof, (2) calculated to the displayed CAP Rate only if the offering price for the asset is TBD by Market.]">CMV</a></label>}
            
        </div>
    </div>
    <div class="row">
        <div class="col-lg-6">
            <table class="table table-striped asset-table">
                <tbody>
                    <tr>
                        <td style="line-height: 32px">
                            <label>Enter Desired <a title="Annual Capitalization Rate">CAP</a> Rate</label>
                        </td>
                        <td style="line-height: 32px">
                            <input type="text" id="txtBoxDesiredCapRate" style="width: 60px; text-align: right; margin-right: 5px; margin-bottom: 0" value="0.00%" />
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <label>New <a title="Annual Capitalization Rate">CAP</a> Pricing Per Unit</label>
                        </td>
                        <td style="text-align: right;"><span id="PricePerUnitPerCapRate">$0.00</span></td>
                    </tr>
                    <tr>
                        <td>
                            <label>Comparative % to Listed Pricing/<a title="[Calculated Market Value is based solely on either (1) comparable sales data provided by the Listing Agent or Seller in their Offering Memorandum, or, in the absence thereof, (2) calculated to the displayed CAP Rate only if the offering price for the asset is TBD by Market.]">CMV</a></label>
                        </td>
                        <td style="text-align: right;"><span id="CompPercPerCapRate">0.00%</span></td>
                    </tr>
                </tbody>
            </table>
        </div>
        <div class="col-lg-6">
            <table class="table table-striped asset-table">
                <tbody>
                    <tr>
                        <td>
                            <label>Calculated value at your selected <a title="Annual Capitalization Rate">CAP</a></label>
                        </td>
                        <td style="text-align: right;">
                            <span id="CalculatedPricePerCapRate">$0.00</span>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <label>New <a title="Annual Capitalization Rate">CAP</a> Pricing Per Square Foot</label>
                        </td>
                        <td style="text-align: right;"><span id="PricePerFootPerCapRate">$0.00</span></td>
                    </tr>
                    <tr>
                        <td>
                            <label>Equity Adjustment to selected <a title="Annual Capitalization Rate">CAP</a></label>
                        </td>
                        <td style="text-align: right;"><span id="EquityAdjPerCapRate">$0.00</span></td>
                    </tr>
                </tbody>
            </table>
        </div>
        <div class="col-lg-12" style="text-align: center">
            <input type="button" id="BtnCapRateCalc" value="Calculate" />
        </div>
    </div>
    <hr />
    <h4>Property Data</h4>
    <div class="row">
        <div class="col-lg-6">
            <table class="table table-striped asset-table">
                <tbody>
                    <tr>
                        <td>
                            <label>Property Type</label>
                        </td>
                        <td style="text-align: right;">
                            @Inview.Epi.EpiFund.Domain.Helpers.EnumHelper.GetEnumDescription(Model.AssetType)
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <label>Number of Units</label>
                        </td>
                        <td style="text-align: right;">
                            @mfAsset.TotalUnits
                            <input id="mfAsset_TotalUnits" value="@mfAsset.TotalUnits" style="display:none;" />
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <label>Gross Rentable Sq. Ft.</label>
                        </td>
                        <td style="text-align: right;">
                            <span class="pad">@mfAsset.SquareFeet.ToString("N0")</span>
                            <input id="mfAsset_SquareFeet" value="@mfAsset.SquareFeet" style="display:none" />
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <label>Property Address</label>
                        </td>
                        <td style="text-align: right;">
                            @Html.DisplayFor(s => s.PropertyAddress, new { @class = "control-label" })
                            <a href="http://maps.google.com/maps?q=@Model.PropertyAddress @Model.City @Model.State">Click Here For Map</a>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <label>City, State, Zip</label>
                        </td>
                        <td style="text-align: right;">@(string.Format("{0}, {1} {2}", Model.City, Model.State, Model.Zip))</td>
                    </tr>
                    <tr>
                        <td>
                            <label>County where Property Located</label>
                        </td>
                        <td style="text-align: right;">@Model.County</td>
                    </tr>
                    <tr>
                        <td style="width: 50%;">
                            <label>Tax Assessor Number(s)</label>
                        <td style="width: 50%; text-align: right;">
                            @foreach (var tpn in Model.AssetTaxParcelNumbers)
                            {
                                <span>@tpn.TaxParcelNumber</span> <br />
                            }
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <label>Year Orginally Built</label>
                        </td>
                        <td style="text-align: right;">@Model.YearBuilt</td>
                    </tr>
                    <tr>
                        <td>
                            @Html.LabelFor(s => s.PropLastUpdatedYear)
                        </td>
                        @if (Model.PropLastUpdatedYear != 0)
                        {
                            <td style="text-align: right;">@Model.PropLastUpdatedYear</td>
                        }
                        else
                        {
                            <td style="text-align: right;">Unknown</td>
                        }
                    </tr>
                    <tr>
                        <td>
                            <label>Total Lot Size of Property</label>
                        </td>
                        <td style="text-align: right;">@Model.LotSize Acres</td>
                    </tr>
                    <tr>
                        <td>
                            <label>Number of Buildings</label>
                        </td>
                        <td style="text-align: right;">@Model.BuildingsCount</td>
                    </tr>
                    <tr>
                        <td>
                            <label>Electric Utility Metering</label>
                        </td>
                        <td style="text-align: right;">@Inview.Epi.EpiFund.Domain.Helpers.EnumHelper.GetEnumDescription(@mfAsset.ElectricMeterMethod)</td>
                    </tr>
                    <tr>
                        <td>
                            <label>Electric Meter Service Provider</label>
                        </td>
                        <td style="text-align: right;">@mfAsset.ElectricMeterServProvider</td>
                    </tr>

                    <tr>
                        <td>
                            <label>Gas Utility Metering</label>
                        </td>
                        <td style="text-align: right;">@Inview.Epi.EpiFund.Domain.Helpers.EnumHelper.GetEnumDescription(@mfAsset.GasMeterMethod)</td>
                    </tr>
                    <tr>
                        <td>
                            <label>Gas Meter Service Provider</label>
                        </td>
                        <td style="text-align: right;">@mfAsset.GasMeterServProvider</td>
                    </tr>

                    <tr>
                        <td>
                            <label>Number of Parking Spaces</label>
                        </td>
                        <td style="text-align: right;"><span class="pad">@mfAsset.ParkingSpaces</span></td>
                    </tr>
                    <tr>
                        <td>
                            <label>Number of Covered Parking Spaces</label>
                        </td>
                        <td style="text-align: right;"><span class="pad">@mfAsset.CoveredParkingSpaces</span></td>
                    </tr>
                    <tr>
                        <td>
                            <label>Property Operating Status</label>
                        </td>
                        <td style="text-align: right;">@Inview.Epi.EpiFund.Domain.Helpers.EnumHelper.GetEnumDescription(Model.OperatingStatus)</td>
                    </tr>
                    <tr>
                        <td>
                            <label>List Agent Grade Classification of Prop:</label>
                        </td>
                        <td style="text-align: right;">@Model.GradeClassification</td>
                    </tr>
                    <tr>
                        <td>@Html.LabelFor(s => s.PropertyCondition)</td>
                        <td style="text-align: right;">@Inview.Epi.EpiFund.Domain.Helpers.EnumHelper.GetEnumDescription(Model.PropertyCondition)</td>
                    </tr>

                    <tr>
                        <td>
                            @Html.LabelFor(s => s.RenovatedByOwner)
                        </td>
                        @if (Model.RenovatedByOwner != null && (bool)Model.RenovatedByOwner == true)
                        {
                            <td style="text-align: right;">Yes</td>
                        }
                        else
                        {
                            <td style="text-align: right;">No</td>
                        }

                    </tr>
                    <tr>
                        <td>
                            @Html.LabelFor(s => s.PropHoldTypeId)
                            @if (Model.PropHoldTypeId == 2 && Model.LeaseholdMaturityDate.HasValue)
                            {
                                @Html.LabelFor(s => s.LeaseholdMaturityDate, new { @class = "italic-label" })
                            }
                        </td>
                        <td style="text-align: right;">
                            @Model.PropHoldType
                            @if (Model.PropHoldTypeId == 2 && Model.LeaseholdMaturityDate.HasValue)
                            {
                                <div style="margin-top:20px">@Model.LeaseholdMaturityDate.Value.ToString("MM/dd/yyyy")</div>
                            }
                        </td>
                    </tr>
                    <tr>
                        <td>
                            @Html.LabelFor(s => s.HasEnvironmentalIssues)
                            @if (Model.DocumentNumberEnvi > -1)
                            {
                                <a target='_blank' href="@Url.Action("DownloadDocument", "Admin", new { fileName = Model.Documents[Model.DocumentNumberEnvi].FileName, assetId = Model.AssetId, contentType = Model.Documents[Model.DocumentNumberEnvi].ContentType, title = Model.Documents[Model.DocumentNumberEnvi].Title })">@(Model.Documents[Model.DocumentNumberEnvi].Title)</a>
                            }
                        </td>
                        @if (Model.HasEnvironmentalIssues != null && Model.HasEnvironmentalIssues == true)
                        {
                            <td style="text-align: right;">
                                Yes
                            </td>
                        }
                        else if (Model.HasEnvironmentalIssues != null && Model.HasEnvironmentalIssues == false)
                        {
                            <td style="text-align: right;">
                                No
                            </td>
                        }
                        else
                        {
                            <td style="text-align: right;">
                                No
                            </td>
                        }
                    </tr>

                </tbody>
            </table>
        </div>

        @Html.DisplayFor(s => mfAsset.UnitSpecifications, "UnitSpecDisplayTemplate")
        <div class="col-lg-6">
            <table class="table table-striped asset-table">
                <tbody>
                    <tr>
                        <td>
                            <label>Complete Rent Roll/Tenant Lease Summary</label>
                        </td>
                        <td style="text-align: right;">
                            @*@(Model.availablecurrentRentRoll ? "Yes" : "No")*@
                            @(Model.CompleteRentRoll == true ? "Yes" : "No")
                        </td>
                    </tr>

                </tbody>
            </table>
        </div>
    </div>

    <hr />
    <h4>Adjusted Proforma Analysis: Deferred Maintenance Inclusion</h4>
    <div class="row">
        <div class="col-xs-6">
            <label class="control-label">Analysis is Based On:</label>
            <input type="hidden" value="@defTotalListing" id="hdnPickedTotalPrice" />
            <input type="hidden" value="@defCapRateLP" id="hdnCapRateLP" />
            <input type="hidden" value="@defCapRateCMV" id="hdnCapRateCMV" />
            <input type="hidden" value="@(((((mfAsset.AskingPrice + mfAsset.EstDeferredMaintenance) != 0 && mfAsset.TotalUnits != 0) ? Math.Round(((mfAsset.AskingPrice + mfAsset.EstDeferredMaintenance) / mfAsset.TotalUnits)) : 0)))" id="hdnAdjCostLP" />
            <input type="hidden" value="@(((((mfAsset.CurrentBpo + mfAsset.EstDeferredMaintenance) != 0 && mfAsset.TotalUnits != 0) ? Math.Round(((mfAsset.CurrentBpo + mfAsset.EstDeferredMaintenance) / mfAsset.TotalUnits)) : 0)))" id="hdnAdjCostCMV" />
            @if (Model.AskingPrice > 0)
            {
                <input type="radio" id="radiobtn5" name="option3" class="option3" value="ListedPrice" /><label class="add-padding-calc-radio">Listed Price</label> }
            else
            {
                <input type="radio" id="radiobtn5" name="option3" class="option3" disabled="disabled" value="ListedPrice" /><label class="add-padding-calc-radio">Listed Price</label>}
            @if (Model.CurrentBpo > 0)
            {
                <input type="radio" id="radiobtn6" name="option3" class="option3" value="Appraisal" /><label class="add-padding-calc-radio"><a title="[Calculated Market Value is based solely on either (1) comparable sales data provided by the Listing Agent or Seller in their Offering Memorandum, or, in the absence thereof, (2) calculated to the displayed CAP Rate only if the offering price for the asset is TBD by Market.]">CMV</a></label>}
            else
            { <input type="radio" id="radiobtn6" name="option3" class="option3" disabled="disabled" value="Appraisal" /><label class="add-padding-calc-radio"><a title="[Calculated Market Value is based solely on either (1) comparable sales data provided by the Listing Agent or Seller in their Offering Memorandum, or, in the absence thereof, (2) calculated to the displayed CAP Rate only if the offering price for the asset is TBD by Market.]">CMV</a></label>}
            
        </div>
    </div>
    <div class="row">
        <div class="col-lg-6">
            <table class="table table-striped asset-table">
                <tbody>
                    <tr>
                        <td>
                            <label>List Price/<a title="[Calculated Market Value is based solely on either (1) comparable sales data provided by the Listing Agent or Seller in their Offering Memorandum, or, in the absence thereof, (2) calculated to the displayed CAP Rate only if the offering price for the asset is TBD by Market.]">CMV</a> + Est <a title="Deferred Maintenance">DM</a> Budget</label>
                        </td>
                        <td style="text-align: right;"><span class="padmoney" id="spnTotalListing">@defTotalListing.ToString("C0")</span></td>
                    </tr>
                    <tr>
                        <td>
                            <label>Adjusted <a title="Annualized Scheduled Gross Income">SGI</a> after <a title="Deferred Maintenance">DM</a> Budget</label>
                        </td>
                        <td style="text-align: right;"><span class="padmoney">@((@Model.ProformaAnnualIncome + defAnnualRevenueAdjustment).ToString("C0"))</span></td>
                    </tr>

                    @*<tr>
                            <td>
                                <label>Base Monthly Rental Income Adjustment per Unit after Renovations</label></td>
                            <td style="text-align: right;"><span class="padmoney">@(mfAsset.EstDeferredMaintenance == 0 ? 0 : Model.AverageAdjustmentToBaseRentalIncomePerUnitAfterRenovations)</span></td>
                        </tr>*@
                    <tr>
                        <td>
                            <label>EST Base Rent Adj After <a title="Deferred Maintenance">DM</a> Budget</label>
                        </td>
                        <td style="text-align: right;"><span class="padmoney">@defAnnualRevenueAdjustment.ToString("C2")</span></td>
                    </tr>
                </tbody>
            </table>
        </div>
        <div class="col-lg-6">
            <table class="table table-striped asset-table">
                <tbody>
                    <tr>
                        <td>
                            <label>Adjusted Unit Cost with <a title="Deferred Maintenance">DM</a> Budget</label>
                        </td>
                        @if (mfAsset.AskingPrice > 0)
                        {
                            <td style="text-align: right;"><span id="spnAdjCost" class="padmoney">@(((((mfAsset.AskingPrice + mfAsset.EstDeferredMaintenance) != 0 && (@mfAsset.TotalUnits > 0)) ? Math.Round(((mfAsset.AskingPrice + mfAsset.EstDeferredMaintenance) / (@mfAsset.TotalUnits))) : 0)).ToString("C0"))</span></td>
                        }
                        else
                        {
                            <td style="text-align: right;"><span id="spnAdjCost" class="padmoney">@(((((mfAsset.CurrentBpo + mfAsset.EstDeferredMaintenance) != 0 && (@mfAsset.TotalUnits > 0)) ? Math.Round(((mfAsset.CurrentBpo + mfAsset.EstDeferredMaintenance) / (@mfAsset.TotalUnits))) : 0)).ToString("C0"))</span></td>
                        }
                        @*<td style="text-align: right;"><span id="spnAdjCost" class="padmoney"></span></td>*@
                    </tr>
                    <tr>
                        <td>
                            <label>Adjusted Proforma Pre Tax <a title="Annualized Net Operating Income">NOI</a></label>
                        </td>
                        <td style="text-align: right;">
                            @*////////#issue#28 multifamily//////////////
                                <span class="padmoney">@mfAdjustedPretaxNOI.ToString("C0")</span>
                                <input type="hidden" value="@mfAdjustedPretaxNOI" id="hdnDefProformaNOI" />*@

                            <span class="padmoney">
                                @if (mfAsset.EstDeferredMaintenance == 0)
                                {@defProformaNOI.ToString("C0") }
                                else
                                {@mfAdjustedPretaxNOI.ToString("C0")}
                            </span>
                            <input type="hidden" value="@if (mfAsset.EstDeferredMaintenance == 0) { @defProformaNOI.ToString()  }
                                else {@mfAdjustedPretaxNOI.ToString()}" id="hdnDefProformaNOI" />
                            @*///////////////////////*@
                            <input type="hidden" value="@defTotalListing" id="hdnDefTotalListing" />
                            <input type="hidden" value="@defTotalListingLP" id="hdnDefTotalListingLP" />
                            <input type="hidden" value="@defTotalListingCMV" id="hdnDefTotalListingCMV" />
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <label>Adjusted <a title="Annual Capitalization Rate">CAP</a> Rate Calculation</label>
                        </td>
                        <td style="text-align: right;"><span id="spnAdjCap" class="pad">@defCapRate.ToString("0.00")</span>%</td>
                    </tr>
                    @*<tr>
                            <td colspan="2">
                                <em>“The comparative pricing analysis computes the differentials between the adjusted price points of [List Price + Deferred Maintenance Budget] and calculated Operating & Value Proforma subsequent Deferred Maintenance implementation.”</em>
                            </td>
                        </tr>*@
                </tbody>
            </table>
        </div>
    </div>


    <hr />
    <h4>Adjusted Preferred Cap Rate Analysis Calculator: Deferred Maintenance Inclusion</h4>
    <div class="row">
        <div class="col-xs-6">
            <label class="control-label">Analysis is Based On:</label>
            <input type="hidden" value="@defTotalListing" id="hdnPickedTotal" />
            @if (Model.AskingPrice > 0)
            {
                <input type="radio" id="radiobtn3" name="option2" class="option2" value="ListedPrice" /><label class="add-padding-calc-radio">Listed Price</label> }
            else
            {
                <input type="radio" id="radiobtn3" name="option2" class="option2" disabled="disabled" value="ListedPrice" /><label class="add-padding-calc-radio">Listed Price</label>}
            @if (Model.CurrentBpo > 0)
            {
                <input type="radio" id="radiobtn4" name="option2" class="option2" value="Appraisal" /><label class="add-padding-calc-radio"><a title="[Calculated Market Value is based solely on either (1) comparable sales data provided by the Listing Agent or Seller in their Offering Memorandum, or, in the absence thereof, (2) calculated to the displayed CAP Rate only if the offering price for the asset is TBD by Market.]">CMV</a></label>}
            else
            { <input type="radio" id="radiobtn4" name="option2" class="option2" disabled="disabled" value="Appraisal" /><label class="add-padding-calc-radio"><a title="[Calculated Market Value is based solely on either (1) comparable sales data provided by the Listing Agent or Seller in their Offering Memorandum, or, in the absence thereof, (2) calculated to the displayed CAP Rate only if the offering price for the asset is TBD by Market.]">CMV</a></label> }
        </div>
    </div>
    <div class="row">
        <div class="col-lg-6">
            <table class="table table-striped asset-table">
                <tbody>
                    <tr>
                        <td style="line-height: 32px">
                            <label>Enter Desired <a title="Annual Capitalization Rate">CAP</a> Rate</label>
                        </td>
                        <td style="line-height: 32px; text-align: right;">
                            <input type="text" id="defTxtBoxDesiredCapRate" style="width: 60px; text-align: right; margin-right: 5px; margin-bottom: 0" value="0.00%" />
                        </td>
                    </tr>

                    <tr>
                        <td>
                            <label>New Def Maintenance <a title="Annual Capitalization Rate">CAP</a> Pricing Per Unit</label>
                        </td>
                        <td style="text-align: right;"><span id="defPricePerUnitPerCapRate">$0.00</span></td>
                    </tr>
                    <tr style="display: none">
                        <td>
                            <label>New <a title="Annual Capitalization Rate">CAP</a> Pricing per Sq.Ft</label>
                        </td>
                        <td style="text-align: right;"><span id="defPricePerFootPerCapRate">$0.00</span></td>
                    </tr>
                    <tr>
                        <td>
                            <label>Comparative % to Listed Pricing/<a title="[Calculated Market Value is based solely on either (1) comparable sales data provided by the Listing Agent or Seller in their Offering Memorandum, or, in the absence thereof, (2) calculated to the displayed CAP Rate only if the offering price for the asset is TBD by Market.]">CMV</a></label>
                        </td>
                        <td style="text-align: right;"><span id="defCompPercPerCapRate">0.00%</span></td>
                    </tr>
                </tbody>
            </table>
        </div>

        <div class="col-lg-6">
            <table class="table table-striped asset-table">
                <tbody>
                    <tr>
                        <td>
                            <label>Calculated Price at your selected <a title="Annual Capitalization Rate">CAP</a></label>
                        </td>
                        <td style="text-align: right;"><span id="defCalculatedPricePerCapRate">$0.00</span></td>
                    </tr>
                    <tr>
                        <td colspan="2">
                            <b>Less DM/TI Budget of:</b><span style="padding: 5px" id="defLessDMBudget">$0.00</span>

                            <b>Net Offering:</b><span style="padding: 5px" id="defNetOffering">$0.00</span>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <label>Equity Adjustment to Selected <a title="Annual Capitalization Rate">CAP</a></label>
                        </td>
                        <td style="text-align: right;"><span id="defEquityAdjPerCapRate">$0.00</span></td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>

    <div class="row">
        <div class="col-lg-12" style="text-align: center">
            <input type="button" id="defBtnCapRateCalc" value="Calculate" />
        </div>
    </div>

    <div class="modal fade" id="loginwarning" tabindex="-1" role="dialog" aria-labelledby="loginwarning-label" aria-hidden="true" data-backdrop="false">
        <form>
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                        <h4 class="modal-title" id="loginwarning-label">Estimated Deferred Maintenance Items</h4>
                    </div>
                    <div class="modal-body">
                        @if (@mfAsset.EstDeferredMaintenance == 0)
                        {
                        }
                        else
                        {
                            <table class="tabled table-striped" style="width: 100%;">
                                <thead>
                                    <tr>
                                        <th style="width: 160px;">Item</th>
                                        <th style="text-align: right;">Unit Per Cost</th>
                                        <th style="text-align: right;">Number of Items</th>
                                        <th style="text-align: right;">Total Item Cost</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in Model.DeferredMaintenanceItems)
                                    {
                                        if (item.Selected)
                                        {
                                            <tr>
                                                @if (@item.ItemTitle == "Other" && @item.ItemDescription != null)
                                                {
                                                    <td style="">@item.ItemDescription</td>
                                                }
                                                else
                                                {
                                                    <td style="">@item.ItemTitle</td>
                                                }
                                                <td style="text-align: right;">@item.UnitCost.ToString("C0")</td>
                                                <td style="text-align: right;">@(string.Format("{0} {1}", item.NumberOfUnits, item.UnitTypeLabel))</td>
                                                <td style="text-align: right;">@((item.NumberOfUnits * item.UnitCost).ToString("C0"))</td>
                                            </tr>
                                        }
                                    }
                                    <br />
                                    <tr>
                                        <td colspan="4" style="text-align: right;">
                                            <label>Total Cost: </label>@mfAsset.EstDeferredMaintenance.ToString("C0")
                                        </td>
                                    </tr>
                                </tbody>
                            </table>
                        }
                        <label>Total Cost:</label>@mfAsset.EstDeferredMaintenance.ToString("C0")
                    </div>
                    <div class="modal-footer">
                        <input type="button" class="btn" value="Close" data-dismiss="modal" />
                    </div>
                </div>
            </div>
        </form>
    </div>
}
@if (Model.AssetType == AssetType.MHP)
{

    <hr />
    <h4>Preferred Cap Rate Analysis Calculator</h4>
    <div class="row">
        <div class="col-xs-6">
            <label class="control-label">Analysis is Based On:</label>
            <input type="hidden" value="@Model.AskingPrice" id="hdnListedPrice1" />
            <input type="hidden" value="@Model.CurrentBpo" id="hdnAppraisal1" />
            <input type="hidden" value="@Model.CurrentPrincipalBalance" id="hdnBalance" />
            <input type="hidden" value="@Model.MonthlyPayment" id="hdnMonthlyPay" />
            <input type="hidden" value="@Model.isARM" id="hdnARM1" />
            <input type="hidden" value="@Model.SelectedAmortSchedule" id="hdnAmrtSche" />
            <input type="hidden" value="@Model.AskingPrice" id="hdnPriceAmount" />
            @if (Model.AskingPrice > 0)
            {
                <input type="radio" id="radiobtn1" name="option1" class="option1" value="ListedPrice" /><label class="add-padding-calc-radio">Listed Price</label> }
            else
            {
                <input type="radio" id="radiobtn1" name="option1" class="option1" disabled="disabled" value="ListedPrice" /><label class="add-padding-calc-radio">Listed Price</label>}
            @if (Model.CurrentBpo > 0)
            {
                <input type="radio" id="radiobtn2" name="option1" class="option1" value="Appraisal" /><label class="add-padding-calc-radio"><a title="[Calculated Market Value is based solely on either (1) comparable sales data provided by the Listing Agent or Seller in their Offering Memorandum, or, in the absence thereof, (2) calculated to the displayed CAP Rate only if the offering price for the asset is TBD by Market.]">CMV</a></label>
            }
            else
            {
                <input type="radio" id="radiobtn2" name="option1" class="option1" disabled="disabled" value="Appraisal" /><label class="add-padding-calc-radio"><a title="[Calculated Market Value is based solely on either (1) comparable sales data provided by the Listing Agent or Seller in their Offering Memorandum, or, in the absence thereof, (2) calculated to the displayed CAP Rate only if the offering price for the asset is TBD by Market.]">CMV</a></label>}
        </div>
    </div>
    <div class="row">
        <div class="col-lg-6">
            <table class="table table-striped asset-table">
                <tbody>
                    <tr>
                        <td style="line-height: 32px">
                            <label>Enter Desired <a title="Annual Capitalization Rate">CAP</a> Rate</label>
                        </td>
                        <td style="line-height: 32px">
                            <input type="text" id="txtBoxDesiredCapRate" style="width: 60px; text-align: right; margin-right: 5px; margin-bottom: 0" value="0.00%" />
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <label>New <a title="Annual Capitalization Rate">CAP</a> Pricing Per Rentable Park Space</label>
                        </td>
                        <td style="text-align: right;"><span id="PricePerUnitPerCapRate">$0.00</span></td>
                    </tr>
                    <tr>
                        <td>
                            <label>Comparative % to Listed Pricing/<a title="[Calculated Market Value is based solely on either (1) comparable sales data provided by the Listing Agent or Seller in their Offering Memorandum, or, in the absence thereof, (2) calculated to the displayed CAP Rate only if the offering price for the asset is TBD by Market.]">CMV</a></label>
                        </td>
                        <td style="text-align: right;"><span id="CompPercPerCapRate">0.00%</span></td>
                    </tr>
                </tbody>
            </table>
        </div>
        <div class="col-lg-6">
            <table class="table table-striped asset-table">
                <tbody>
                    <tr>
                        <td>
                            <label>Calculated Value at your selected <a title="Annual Capitalization Rate">CAP</a></label>
                        </td>
                        <td style="text-align: right;">
                            <span id="CalculatedPricePerCapRate">$0.00</span>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <label>New <a title="Annual Capitalization Rate">CAP</a> Pricing Per Acreage Sq Foot</label>
                        </td>
                        <td style="text-align: right;"><span id="PricePerFootPerCapRate">$0.00</span></td>
                    </tr>
                    <tr>
                        <td>
                            <label>Equity Adjustment to selected <a title="Annual Capitalization Rate">CAP</a></label>
                        </td>
                        <td style="text-align: right;"><span id="EquityAdjPerCapRate">$0.00</span></td>
                    </tr>
                </tbody>
            </table>
        </div>
        <div class="col-lg-12" style="text-align: center">
            <input type="button" id="BtnCapRateCalc" value="Calculate" />
        </div>
    </div>

    <h4>Property Data</h4>
    <div class="row">
        <div class="col-lg-6">
            <table class="table table-striped asset-table">
                <tbody>
                    <tr>
                        <td>
                            <label>Property Type</label>
                        </td>
                        <td style="text-align: right;">
                            @Inview.Epi.EpiFund.Domain.Helpers.EnumHelper.GetEnumDescription(Model.AssetType)
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <label>Number of Rentable Spaces</label>
                        </td>
                        <td style="text-align: right;">
                            @Model.NumberRentableSpace
                            <input id="mfAsset_TotalUnits" value="@mhpUnits" style="display:none;" />
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <label>Number of Non-Rentable Spaces</label>
                        </td>
                        <td style="text-align: right;">
                            @Model.NumberNonRentableSpace
                            <input id="mfAsset_SquareFeet" value="@mhpSqFt" style="display:none" />
                        </td>
                    </tr>
                    @* <tr>
            <td>
                <label>Gross Rentable Sq. Ft.</label></td>
            <td style="text-align: right;">
                <span class="pad">@mfAsset.SquareFeet</span>
                <input id="mfAsset_SquareFeet" value="@mfAsset.SquareFeet" style="display:none" />
            </td>
        </tr>*@
                    @*<tr>
            <td>
                <label></label>
            </td>
            <td style="text-align: right;">
                <span class="pad"></span>
                <input id="mfAsset_SquareFeet" value="@mfAsset.SquareFeet" />
            </td>
        </tr>*@
                    <tr>
                        <td>
                            <label>Property Address</label>
                        </td>
                        <td style="text-align: right;">
                            @Html.DisplayFor(s => s.PropertyAddress, new { @class = "control-label" })
                            <a href="http://maps.google.com/maps?q=@Model.PropertyAddress @Model.City @Model.State">Click Here For Map</a>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <label>City, State, Zip</label>
                        </td>
                        <td style="text-align: right;">@(string.Format("{0}, {1} {2}", Model.City, Model.State, Model.Zip))</td>
                    </tr>
                    <tr>
                        <td>
                            <label>County where Property Located</label>
                        </td>
                        <td style="text-align: right;">@Model.County</td>
                    </tr>
                    <tr>
                        <td style="width: 50%;">
                            <label>Tax Assessor Number(s)</label>
                        <td style="width: 50%; text-align: right;">
                            @foreach (var tpn in Model.AssetTaxParcelNumbers)
                            {
                                <span>@tpn.TaxParcelNumber</span> <br />
                            }
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <label>Year Orginally Built</label>
                        </td>
                        <td style="text-align: right;">@Model.YearBuilt</td>
                    </tr>
                    <tr>
                        <td>
                            @Html.LabelFor(s => s.PropLastUpdatedYear)
                        </td>
                        @if (Model.PropLastUpdatedYear != 0)
                        {
                            <td style="text-align: right;">@Model.PropLastUpdatedYear</td>
                        }
                        else
                        {
                            <td style="text-align: right;">Unknown</td>
                        }
                    </tr>
                    <tr>
                        <td>
                            <label>Total Lot Size of Property</label>
                        </td>
                        <td style="text-align: right;">@Model.LotSize Acres</td>
                    </tr>
                    <tr>
                        <td>
                            <label>Number of Park Owned Mobile Homes</label>
                        </td>
                        <td style="text-align: right;">@Model.NumberParkOwnedMH</td>
                    </tr>
                    <tr>
                        <td>
                            <label>Electric Utility Metering</label>
                        </td>
                        <td style="text-align: right;">@Inview.Epi.EpiFund.Domain.Helpers.EnumHelper.GetEnumDescription(@mfAsset.ElectricMeterMethod)</td>
                    </tr>
                    <tr>
                        <td>
                            <label>Gas Utility Metering</label>
                        </td>
                        <td style="text-align: right;">@Inview.Epi.EpiFund.Domain.Helpers.EnumHelper.GetEnumDescription(@mfAsset.GasMeterMethod)</td>
                    </tr>
                    <tr>
                        <td>
                            <label>Number of Parking Spaces</label>
                        </td>
                        <td style="text-align: right;"><span class="pad">@mfAsset.ParkingSpaces</span></td>
                    </tr>
                    <tr>
                        <td>
                            <label>Number of Covered Parking Spaces</label>
                        </td>
                        <td style="text-align: right;"><span class="pad">@mfAsset.CoveredParkingSpaces</span></td>
                    </tr>
                    <tr>
                        <td>
                            <label>Property Operating Status</label>
                        </td>
                        <td style="text-align: right;">@Inview.Epi.EpiFund.Domain.Helpers.EnumHelper.GetEnumDescription(Model.OperatingStatus)</td>
                    </tr>
                    <tr>
                        <td>
                            <label>List Agent Grade Classification of Prop:</label>
                        </td>
                        <td style="text-align: right;">@Model.GradeClassification</td>
                    </tr>
                    <tr>
                        <td>@Html.LabelFor(s => s.PropertyCondition)</td>
                        <td style="text-align: right;">@Inview.Epi.EpiFund.Domain.Helpers.EnumHelper.GetEnumDescription(Model.PropertyCondition)</td>
                    </tr>
                    <tr>
                        <td>
                            @Html.LabelFor(s => s.RenovatedByOwner)
                        </td>
                        @if (Model.RenovatedByOwner != null && (bool)Model.RenovatedByOwner == true)
                        {
                            <td style="text-align: right;">Yes</td>
                        }
                        else
                        {
                            <td style="text-align: right;">No</td>
                        }

                    </tr>
                    <tr>
                        <td>
                            @Html.LabelFor(s => s.PropHoldTypeId)
                            @if (Model.PropHoldTypeId == 2 && Model.LeaseholdMaturityDate.HasValue)
                            {
                                @Html.LabelFor(s => s.LeaseholdMaturityDate, new { @class = "italic-label" })
                            }
                        </td>
                        <td style="text-align: right;">
                            @Model.PropHoldType
                            @if (Model.PropHoldTypeId == 2 && Model.LeaseholdMaturityDate.HasValue)
                            {
                                <div style="margin-top:20px">@Model.LeaseholdMaturityDate.Value.ToString("MM/dd/yyyy")</div>
                            }
                        </td>
                    </tr>
                    <tr>
                        <td>
                            @Html.LabelFor(s => s.HasEnvironmentalIssues)
                            @if (Model.DocumentNumberEnvi > -1)
                            {
                                <a target='_blank' href="@Url.Action("DownloadDocument", "Admin", new { fileName = Model.Documents[Model.DocumentNumberEnvi].FileName, assetId = Model.AssetId, contentType = Model.Documents[Model.DocumentNumberEnvi].ContentType, title = Model.Documents[Model.DocumentNumberEnvi].Title })">@(Model.Documents[Model.DocumentNumberEnvi].Title)</a>
                            }
                        </td>
                        @if (Model.HasEnvironmentalIssues != null && Model.HasEnvironmentalIssues == true)
                        {
                            <td style="text-align: right;">
                                Yes
                            </td>
                        }
                        else if (Model.HasEnvironmentalIssues != null && Model.HasEnvironmentalIssues == false)
                        {
                            <td style="text-align: right;">
                                No
                            </td>
                        }
                        else
                        {
                            <td style="text-align: right;">
                                No
                            </td>
                        }
                    </tr>

                    <tr>
                        <td>@Html.LabelFor(model => model.FloodPlainLocated)  </td>
                        @if (Model.FloodPlainLocated != null && (bool)Model.FloodPlainLocated == true)
                        {
                            <td style="text-align: right;">Yes</td>
                        }
                        else
                        {
                            <td style="text-align: right;">No</td>
                        }
                    </tr>
                    <tr>
                        <td>@Html.LabelFor(model => model.AccessRoadTypeId)</td>
                        @if (Model.AccessRoadTypeId != null)
                        {
                            <td style="text-align: right;">@Inview.Epi.EpiFund.Domain.Helpers.EnumHelper.GetEnumDescription((Inview.Epi.EpiFund.Domain.ViewModel.AccessRoadType)Model.AccessRoadTypeId)</td>
                        }
                        else
                        {
                            <td style="text-align: right;"></td>
                        }
                    </tr>
                    <tr>
                        <td>@Html.LabelFor(model => model.InteriorRoadTypeId)</td>
                        @if (Model.InteriorRoadTypeId != null)
                        {
                            <td style="text-align: right;">@Inview.Epi.EpiFund.Domain.Helpers.EnumHelper.GetEnumDescription((Inview.Epi.EpiFund.Domain.ViewModel.InteriorRoadType)Model.InteriorRoadTypeId)</td>
                        }
                        else
                        {
                            <td style="text-align: right;"></td>
                        }
                    </tr>
                    <tr>
                        <td>@Html.LabelFor(model => model.WaterServTypeId)</td>
                        @if (Model.WaterServTypeId != null)
                        {
                            <td style="text-align: right;">@Inview.Epi.EpiFund.Domain.Helpers.EnumHelper.GetEnumDescription((Inview.Epi.EpiFund.Domain.ViewModel.WaterServType)Model.WaterServTypeId)</td>
                        }
                        else
                        {
                            <td style="text-align: right;"></td>
                        }
                    </tr>
                    <tr>
                        <td>@Html.LabelFor(model => model.WaterServProvider)</td>

                        <td style="text-align: right;">@Model.WaterServProvider</td>


                    </tr>

                    <tr>
                        <td>@Html.LabelFor(model => model.WasteWaterTypeId)</td>
                        @if (Model.WasteWaterTypeId != null)
                        {
                            <td style="text-align: right;">@Inview.Epi.EpiFund.Domain.Helpers.EnumHelper.GetEnumDescription((Inview.Epi.EpiFund.Domain.ViewModel.WasteWaterType)Model.WasteWaterTypeId)</td>
                        }
                        else
                        {
                            <td style="text-align: right;"></td>
                        }
                    </tr>
                    <tr>
                        <td>@Html.LabelFor(model => model.WasteWaterServProvider)</td>

                        <td style="text-align: right;">@Model.WasteWaterServProvider</td>


                    </tr>
                    <tr>
                        <td>@Html.LabelFor(model => model.MHPadTypeId)</td>
                        @if (Model.MHPadTypeId != null)
                        {
                            <td style="text-align: right;">@Inview.Epi.EpiFund.Domain.Helpers.EnumHelper.GetEnumDescription((Inview.Epi.EpiFund.Domain.ViewModel.MHPadType)Model.MHPadTypeId)</td>
                        }
                        else
                        {
                            <td style="text-align: right;"></td>
                        }
                    </tr>
                    <tr>
                        <td>
                            <label>How is title to acreage held?</label>
                        </td>
                        <td style="text-align: right;">@Model.PropHoldType</td>
                    </tr>


                </tbody>
            </table>
        </div>
        @Html.DisplayFor(s => mfAsset.MHPUnitSpecifications, "MHPUnitSpecDisplayTemplate")


        @*below CompleteRentRoll added as Issue #41*@
        <div class="col-lg-6">
            <table class="table table-striped asset-table">
                <tbody>
                    <tr>
                        <td>
                            <label>Complete Rent Roll/Tenant Lease Summary</label>
                        </td>
                        <td style="text-align: right;">
                            @*@(Model.availablecurrentRentRoll ? "Yes" : "No")*@
                            @(Model.CompleteRentRoll == true ? "Yes" : "No")
                        </td>
                    </tr>

                </tbody>
            </table>
        </div>

    </div>

    <hr />
    <h4>Adjusted Proforma Analysis: Deferred Maintenance Inclusion</h4>
    <div class="row">
        <div class="col-xs-6">
            <label class="control-label">Analysis is Based On:</label>
            <input type="hidden" value="@defTotalListing" id="hdnPickedTotalPrice" />

            @*##### below 4 hidden input added after coming issue Issue EFUOA-07 : (javascript code object null return) #########################*@
            <input type="hidden" value="@defCapRateLP" id="hdnCapRateLP" />
            <input type="hidden" value="@defCapRateCMV" id="hdnCapRateCMV" />
            <input type="hidden" value="@(((((mfAsset.AskingPrice + mfAsset.EstDeferredMaintenance) != 0 && mfAsset.TotalUnits != 0) ? Math.Round(((mfAsset.AskingPrice + mfAsset.EstDeferredMaintenance) / mfAsset.TotalUnits)) : 0)))" id="hdnAdjCostLP" />
            <input type="hidden" value="@(((((mfAsset.CurrentBpo + mfAsset.EstDeferredMaintenance) != 0 && mfAsset.TotalUnits != 0) ? Math.Round(((mfAsset.CurrentBpo + mfAsset.EstDeferredMaintenance) / mfAsset.TotalUnits)) : 0)))" id="hdnAdjCostCMV" />
            @*###################################################*@

            @if (Model.AskingPrice > 0)
            {
                <input type="radio" id="radiobtn5" name="option3" class="option3" value="ListedPrice" /><label class="add-padding-calc-radio">Listed Price</label> }
            else
            {
                <input type="radio" id="radiobtn5" name="option3" class="option3" disabled="disabled" value="ListedPrice" /><label class="add-padding-calc-radio">Listed Price</label>}
            @if (Model.CurrentBpo > 0)
            {
                <input type="radio" id="radiobtn6" name="option3" class="option3" value="Appraisal" /><label class="add-padding-calc-radio"><a title="[Calculated Market Value is based solely on either (1) comparable sales data provided by the Listing Agent or Seller in their Offering Memorandum, or, in the absence thereof, (2) calculated to the displayed CAP Rate only if the offering price for the asset is TBD by Market.]">CMV</a></label>}
            else
            { <input type="radio" id="radiobtn6" name="option3" class="option3" disabled="disabled" value="Appraisal" /><label class="add-padding-calc-radio"><a title="[Calculated Market Value is based solely on either (1) comparable sales data provided by the Listing Agent or Seller in their Offering Memorandum, or, in the absence thereof, (2) calculated to the displayed CAP Rate only if the offering price for the asset is TBD by Market.]">CMV</a></label>}
            
        </div>
    </div>
    <div class="row">
        <div class="col-lg-6">
            <table class="table table-striped asset-table">
                <tbody>
                    <tr>
                        <td>
                            <label>List Price/<a title="[Calculated Market Value is based solely on either (1) comparable sales data provided by the Listing Agent or Seller in their Offering Memorandum, or, in the absence thereof, (2) calculated to the displayed CAP Rate only if the offering price for the asset is TBD by Market.]">CMV</a> + Est <a title="Deferred Maintenance">DM</a> Budget</label>
                        </td>
                        <td style="text-align: right;"><span class="padmoney" id="spnTotalListing">@defTotalListing.ToString("C0")</span></td>
                    </tr>
                    <tr>
                        <td>
                            <label>Adjusted <a title="Annualized Scheduled Gross Income">SGI</a> after <a title="Deferred Maintenance">DM</a> Budget</label>
                        </td>
                        <td style="text-align: right;"><span class="padmoney">@((@Model.ProformaAnnualIncome + defAnnualRevenueAdjustment).ToString("C0"))</span></td>
                    </tr>

                    @*<tr>
                            <td>
                                <label>Base Monthly Rental Income Adjustment per Unit after Renovations</label></td>
                            <td style="text-align: right;"><span class="padmoney">@(mfAsset.EstDeferredMaintenance == 0 ? 0 : Model.AverageAdjustmentToBaseRentalIncomePerUnitAfterRenovations)</span></td>
                        </tr>*@

                    <tr>
                        <td>
                            <label>EST Base Rent Adj After <a title="Deferred Maintenance">DM</a> Budget</label>
                        </td>
                        <td style="text-align: right;"><span class="padmoney">@defAnnualRevenueAdjustment.ToString("C2")</span></td>
                    </tr>
                </tbody>
            </table>
        </div>
        <div class="col-lg-6">
            <table class="table table-striped asset-table">
                <tbody>
                    <tr>
                        <td>
                            <label>Adjusted Park Space Cost with <a title="Deferred Maintenance">DM</a> Inclusion</label>
                        </td>
                        @*@if (mfAsset.AskingPrice > 0)
                            {
                                <td style="text-align: right;"><span class="padmoney">@(((((mfAsset.AskingPrice + mfAsset.EstDeferredMaintenance) != 0 && (Model.NumberRentableSpace != null && Model.NumberRentableSpace > 0)) ? Math.Round(((mfAsset.AskingPrice + mfAsset.EstDeferredMaintenance) / (Model.NumberRentableSpace != null ? (int)Model.NumberRentableSpace : 1))) : 0)))</span></td>
                            }
                            else
                            {
                                <td style="text-align: right;"><span class="padmoney">@(((((mfAsset.CurrentBpo + mfAsset.EstDeferredMaintenance) != 0 && (Model.NumberRentableSpace != null && Model.NumberRentableSpace > 0)) ? Math.Round(((mfAsset.CurrentBpo + mfAsset.EstDeferredMaintenance) / (Model.NumberRentableSpace != null ? (int)Model.NumberRentableSpace : 1))) : 0)))</span></td>
                            }*@

                        @*issue#54,point#2  add non rentable space with rentable space *@
                        @if (mfAsset.AskingPrice > 0)
                        {
                            <td style="text-align: right;"><span class="padmoney">@(((((mfAsset.AskingPrice + mfAsset.EstDeferredMaintenance) != 0 && (Model.NumberRentableSpace.GetValueOrDefault(0) + Model.NumberNonRentableSpace.GetValueOrDefault(0) > 0)) ? Math.Round(((mfAsset.AskingPrice + mfAsset.EstDeferredMaintenance) / (Model.NumberRentableSpace.GetValueOrDefault(0) + Model.NumberNonRentableSpace.GetValueOrDefault(0)))) : 0)).ToString("C0"))</span></td>
                        }
                        else
                        {
                            <td style="text-align: right;"><span class="padmoney">@(((((mfAsset.CurrentBpo + mfAsset.EstDeferredMaintenance) != 0 && (Model.NumberRentableSpace.GetValueOrDefault(0) + Model.NumberNonRentableSpace.GetValueOrDefault(0) > 0)) ? Math.Round(((mfAsset.CurrentBpo + mfAsset.EstDeferredMaintenance) / (Model.NumberRentableSpace.GetValueOrDefault(0) + Model.NumberNonRentableSpace.GetValueOrDefault(0)))) : 0)).ToString("C0"))</span></td>
                        }
                        @*//////////////////////////////////////*@

                    </tr>
                    <tr>
                        <td>
                            <label>Adjusted Proforma Pre Tax <a title="Annualized Net Operating Income">NOI</a></label>
                        </td>
                        <td style="text-align: right;">
                            @*////////#issue#28 MHP//////////////*@
                            @*<span class="padmoney">@mfAdjustedPretaxNOI.ToString("C0")</span>
                                <input type="hidden" value="@mfAdjustedPretaxNOI" id="hdnDefProformaNOI" /> *@<span class="padmoney"></span>
                            <input type="hidden" value="@mfAdjustedPretaxNOI" id="hdnDefProformaNOI" />

                            <span class="padmoney">
                                @if (mfAsset.EstDeferredMaintenance == 0)
                                {@defProformaNOI.ToString("C0") }
                                else
                                {@mfAdjustedPretaxNOI.ToString("C0")}
                            </span>
                            <input type="hidden" value="@if (mfAsset.EstDeferredMaintenance == 0) { @defProformaNOI.ToString()  }
                                else {@mfAdjustedPretaxNOI.ToString()}" id="hdnDefProformaNOI" />

                            @*///////////////////////*@

                            <input type="hidden" value="@defTotalListing" id="hdnDefTotalListing" />
                            <input type="hidden" value="@defTotalListingLP" id="hdnDefTotalListingLP" />
                            <input type="hidden" value="@defTotalListingCMV" id="hdnDefTotalListingCMV" />
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <label>Adjusted <a title="Annual Capitalization Rate">CAP</a> Rate Calculation</label>
                        </td>
                        <td style="text-align: right;"><span class="pad">@defCapRate.ToString("0.00")</span>%</td>
                    </tr>
                    @*<tr>
                            <td colspan="2">
                                <em>“The comparative pricing analysis computes the differentials between the adjusted price points of [List Price + Deferred Maintenance Budget] and calculated Operating & Value Proforma subsequent Deferred Maintenance implementation.”</em>
                            </td>
                        </tr>*@

                </tbody>
            </table>
        </div>
    </div>


    <hr />
    <hr />
    <h4>Adjusted Preferred Cap Rate Analysis Calculator: Deferred Maintenance Inclusion</h4>
    <div class="row">
        <div class="col-xs-6">
            <label class="control-label">Analysis is Based On:</label>
            <input type="hidden" value="@defTotalListing" id="hdnPickedTotal" />
            @if (Model.AskingPrice > 0)
            {
                <input type="radio" id="radiobtn3" name="option2" class="option2" value="ListedPrice" /><label class="add-padding-calc-radio">Listed Price</label> }
            else
            {
                <input type="radio" id="radiobtn3" name="option2" class="option2" disabled="disabled" value="ListedPrice" /><label class="add-padding-calc-radio">Listed Price</label>}
            @if (Model.CurrentBpo > 0)
            {
                <input type="radio" id="radiobtn4" name="option2" class="option2" value="Appraisal" /><label class="add-padding-calc-radio"><a title="[Calculated Market Value is based solely on either (1) comparable sales data provided by the Listing Agent or Seller in their Offering Memorandum, or, in the absence thereof, (2) calculated to the displayed CAP Rate only if the offering price for the asset is TBD by Market.]">CMV</a></label>}
            else
            { <input type="radio" id="radiobtn4" name="option2" class="option2" disabled="disabled" value="Appraisal" /><label class="add-padding-calc-radio"><a title="[Calculated Market Value is based solely on either (1) comparable sales data provided by the Listing Agent or Seller in their Offering Memorandum, or, in the absence thereof, (2) calculated to the displayed CAP Rate only if the offering price for the asset is TBD by Market.]">CMV</a></label>}
            
        </div>
    </div>
    <div class="row">
        <div class="col-lg-6">
            <table class="table table-striped asset-table">
                <tbody>
                    <tr>
                        <td style="line-height: 32px">
                            <label>Enter Desired <a title="Annual Capitalization Rate">CAP</a> Rate</label>
                        </td>
                        <td style="line-height: 32px; text-align: right;">
                            <input type="text" id="defTxtBoxDesiredCapRate" style="width: 60px; text-align: right; margin-right: 5px; margin-bottom: 0" value="0.00%" />
                        </td>
                    </tr>

                    <tr>
                        <td>
                            <label>New <a title="Deferred Maintenance">DM</a> Budget <a title="Annual Capitalization Rate">CAP</a> Pricing Per Park Space</label>
                        </td>
                        <td style="text-align: right;"><span id="defPricePerUnitPerCapRate">$0.00</span></td>
                    </tr>
                    <tr>
                        <td>
                            <label>New <a title="Annual Capitalization Rate">CAP</a> Rate Pricing with <a title="Deferred Maintenance">DM</a> Inclusion Acreage Cost per Sq.Ft.</label>
                        <td style="text-align: right;"><span id="defPricePerFootPerCapRate">$0.00</span></td>
                    </tr>
                    <tr>
                        <td>
                            <label>Comparative % to Listed Pricing/<a title="[Calculated Market Value is based solely on either (1) comparable sales data provided by the Listing Agent or Seller in their Offering Memorandum, or, in the absence thereof, (2) calculated to the displayed CAP Rate only if the offering price for the asset is TBD by Market.]">CMV</a></label>
                        </td>
                        <td style="text-align: right;"><span id="defCompPercPerCapRate">0.00%</span></td>
                    </tr>
                </tbody>
            </table>
        </div>

        <div class="col-lg-6">
            <table class="table table-striped asset-table">
                <tbody>
                    <tr>
                        <td>
                            <label>Calculated Price at your selected <a title="Annual Capitalization Rate">CAP</a></label>
                        </td>
                        <td style="text-align: right;"><span id="defCalculatedPricePerCapRate">$0.00</span></td>
                    </tr>
                    <tr>
                        <td colspan="2">
                            <b>Less DM/TI Budget of:</b><span style="padding: 5px" id="defLessDMBudget">$0.00</span>
                            <b>Net Offering:</b><span style="padding: 5px" id="defNetOffering">$0.00</span>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <label>Equity Adjustment to Selected <a title="Annual Capitalization Rate">CAP</a></label>
                        </td>
                        <td style="text-align: right;"><span id="defEquityAdjPerCapRate">$0.00</span></td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>

    <div class="row">
        <div class="col-lg-12" style="text-align: center">
            <input type="button" id="defBtnCapRateCalc" value="Calculate" />
        </div>
    </div>

    <div class="modal fade" id="loginwarning" tabindex="-1" role="dialog" aria-labelledby="loginwarning-label" aria-hidden="true" data-backdrop="false">
        <form>
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                        <h4 class="modal-title" id="loginwarning-label">Estimated Deferred Maintenance Items</h4>
                    </div>
                    <div class="modal-body">
                        @if (@mfAsset.EstDeferredMaintenance == 0 || !Model.HasDeferredMaintenance)
                        {
                            <label>Total Cost: $0</label>
                        }
                        else
                        {
                            <table class="tabled table-striped" style="width: 100%;">
                                <thead>
                                    <tr>
                                        <th style="width: 160px;">Item</th>
                                        <th style="text-align: right;">Unit Per Cost</th>
                                        <th style="text-align: right;">Number of Items</th>
                                        <th style="text-align: right;">Total Item Cost</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in Model.DeferredMaintenanceItems)
                                    {
                                        if (item.Selected)
                                        {
                                            <tr>
                                                @if (@item.ItemTitle == "Other" && @item.ItemDescription != null)
                                                {
                                                    <td style="">@item.ItemDescription</td>
                                                }
                                                else
                                                {
                                                    <td style="">@item.ItemTitle</td>
                                                }
                                                <td style="text-align: right;">@item.UnitCost.ToString("C0")</td>
                                                <td style="text-align: right;">@(string.Format("{0} {1}", item.NumberOfUnits, item.UnitTypeLabel))</td>
                                                <td style="text-align: right;">@((item.NumberOfUnits * item.UnitCost).ToString("C0"))</td>
                                            </tr>
                                        }
                                    }
                                    <br />
                                    <tr>
                                        <td colspan="4" style="text-align: right;">
                                            <label>Total Cost: </label>@mfAsset.EstDeferredMaintenance.ToString("C0")
                                        </td>
                                    </tr>
                                </tbody>
                            </table>

                            <label>Total Cost:</label>@mfAsset.EstDeferredMaintenance.ToString("C0")
                        }
                    </div>
                    <div class="modal-footer">
                        <input type="button" class="btn" value="Close" data-dismiss="modal" />
                    </div>
                </div>
            </div>
        </form>
    </div>
}
@if (@Model.IsPaper)
{
    <div class="row">
        <div class="col-lg-6">
            <table class="table table-striped asset-table">
                <tbody>
                    <tr>
                        <td>@Html.LabelFor(s => s.Paper.MaturityDate, new { @class = "control-label" })</td>
                        <td>@Html.DisplayFor(s => s.Paper.MaturityDate, new { @class = "control-label" })</td>
                    </tr>
                    <tr>
                        <td>@Html.LabelFor(s => s.Paper.Current, new { @class = "control-label" })</td>
                        <td>@Html.DisplayFor(s => s.Paper.Current, new { @class = "control-label" })</td>
                    </tr>
                    <tr>
                        <td>@Html.LabelFor(s => s.AnnualPropertyTax, new { @class = "control-label" })</td>
                        <td>@Html.DisplayFor(s => s.AnnualPropertyTax, new { @class = "control-label" })</td>
                    </tr>
                    <tr>
                        <td>@Html.LabelFor(s => s.Paper.NextDueDate, new { @class = "control-label" })</td>
                        <td>@Html.DisplayFor(s => s.Paper.NextDueDate, new { @class = "control-label" })</td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
}
<hr />
<h4>Property Features</h4>
@if (Model.AssetType == AssetType.MHP)
{
    @Html.DisplayFor(s => mfAsset.MHPDetails, "MHPPropertyDetailsDisplayTemplate")
}
else if (Model.GetType() == typeof(MultiFamilyAssetViewModel))
{
    @Html.DisplayFor(s => mfAsset.MFDetails, "MFPropertyDetailsDisplayTemplate")
}

@if (Model.GetType() == typeof(CommercialAssetViewModel))
{
    @Html.DisplayFor(s => cAsset.PropertyDetails, "CPropertyDetailsDisplayTemplate")
}
<hr />

@*  commented as per issue#46
    <h4>Additional Miscellaneous Property Information</h4>*@
<h4></h4>
<h4>Additional Asset Information</h4>
<div class="row">
    <div class="col-lg-6">
        <table class="table table-striped asset-table">
            <tbody>
                <tr>
                    <td>
                        <label>Asset Full Disclosure Information</label>
                    </td>
                    <td style="text-align: justify;">
                        <div style='padding: 3px; width: 700px; word-break: normal; word-wrap: normal;'>@Model.AdditionalInformation</div>
                    </td>
                </tr>
                <tr>
                    <td>
                        <label>Miscellaneous Asset Information</label>
                    </td>
                    <td style="text-align: justify;">
                        <div style='padding: 3px; width: 700px; word-break: normal; word-wrap: normal;'>@Model.GeneralCommentsDtlInfo</div>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
</div>
<hr />
<h4>Asset Due Diligence Documents</h4>
<ol>
    @for (int item = 0; item < Model.Documents.Count; item++)
    {
        if (Model.Documents[item].Viewable.HasValue)
        {
            if (Model.Documents[item].Viewable.Value)
            {
                <li>
                    <div class="docPreviewDiv">
                        <a target='_blank' href="@Url.Action("DownloadDocument", "Admin" , new { fileName=Model.Documents[item].FileName, assetId=Model.AssetId, contentType=Model.Documents[item].ContentType, title=Model.Documents[item].Title })">@(Model.Documents[item].Title)</a>
                    </div>
                </li>
            }
        }
        else
        {
            <li>
                <div class="docPreviewDiv">
                    <a target='_blank' href="@Url.Action("DownloadDocument", "Admin" , new { fileName=Model.Documents[item].FileName, assetId=Model.AssetId, contentType=Model.Documents[item].ContentType, title=Model.Documents[item].Title })">@(Model.Documents[item].Title)</a>
                </div>
            </li>
        }
    }
</ol>
<br />

@if (!ViewBag.IsSampleAsset)
{
    <div style="width: 100%; float: left;">
        <div style="width: 33%; display: inline-block;">

            @if (Model.OrderStatus != Inview.Epi.EpiFund.Domain.Enum.OrderStatus.Completed)
            {
                if (Model.OrderStatus == Inview.Epi.EpiFund.Domain.Enum.OrderStatus.Unknown)
                {
                    <a data-toggle="modal" data-target="#orderDocumentsModal" class="btn btn-primary" style="cursor: pointer; float: left; margin-bottom: 30px;">Order Recorded Documents</a>
                }
                else
                {
                    <a class="btn btn-primary" style="cursor: pointer; float: left; margin-bottom: 30px;" onclick="addUserOrder()">Order Recorded Documents</a>
                }
            }
        </div>
        <div style="width: 33%; display: inline-block;">
            @if (Model.PCInsuranceOrderStatus != Inview.Epi.EpiFund.Domain.Enum.OrderStatus.Completed)
            {
                if (Model.PCInsuranceOrderStatus == Inview.Epi.EpiFund.Domain.Enum.OrderStatus.Unknown)
                {
                    <a data-toggle="modal" data-target="#requestInsDocsModal" class="btn btn-primary" style="cursor: pointer; float: left; margin-bottom: 30px;">Request Insurance Documents</a>
                }
                else
                {

                }
            }
        </div>
        <div style="width: 33%; display: inline-block;">
            @if (Model.ListingStatus != Inview.Epi.EpiFund.Domain.Enum.ListingStatus.SoldAndClosed)
            {
                <div class="col-sm-12">
                    @Html.ActionLink("Complete and Send Binding LOI", "ExecuteLOI", new { id = Model.AssetId }, new { @class = "btn btn-primary", style = "float:right;margin-bottom:30px;" })
                </div>
            }
        </div>
    </div>
}


<script>

    //$('#btnpopuInvalid').click(function () { alert('There is no Existing debt for this asset'); });

    

    setTimeout(checkCalcInformation, 3000);

    OpenProposedCalc = function (id) {
        window.open('/DataPortal/OpenProposedCalc/' + id, "Proposed Debt Fund Calc", 'width=620px,height=400px,top=150,left=250,resizable=1,scrollbars=1');
    }

    OpenExistingCalc = function (id) {
        window.open('/DataPortal/OpenExistingCalc/' + id, "Existing Debt Fund Calc", 'width=620px,height=400px,top=150,left=250,resizable=1,scrollbars=1');
    }

    $(".option1").change(function () {
        var val = $('.option1:checked').val();
        switch (val) {
            case 'ListedPrice':
                var listing = document.getElementById('hdnListedPrice1').value;
                $("#hdnPriceAmount").val(listing);
                break;
            case 'Appraisal':
                var appraisal = document.getElementById('hdnAppraisal1').value;
                $("#hdnPriceAmount").val(appraisal);
                break;
        }
    });

    $(".option2").change(function () {
        var val = $('.option2:checked').val();
        switch (val) {
            case 'ListedPrice':
                var listing = document.getElementById('hdnDefTotalListingLP').value;
                $("#hdnPickedTotal").val(listing);
                break;
            case 'Appraisal':
                var appraisal = document.getElementById('hdnDefTotalListingCMV').value;
                $("#hdnPickedTotal").val(appraisal);
                break;
        }
    });

    $(".option3").change(function () {
        var val = $('.option3:checked').val();

        switch (val) {
            case 'ListedPrice':
                var listing = document.getElementById('hdnDefTotalListingLP').value;
                var adjCost = 0;
                if (document.getElementById('hdnAdjCostLP') != null) {
                    adjCost = document.getElementById('hdnAdjCostLP').value;
                }
                var adjCap = document.getElementById('hdnCapRateLP').value;
                $("#hdnPickedTotalPrice").val(listing);
                $("#spnTotalListing").html(addCommas(listing, false, true, false));
                $("#spnAdjCost").html(addCommas(adjCost, false, true, false));

                //issue#65////////////////////
                var adjCapLP = document.getElementById('hdnCapRateLP').value;
                ////////////////////

                var adjCapLPNum = Number(adjCapLP).toFixed(2);
                $("#spnAdjCap").html(adjCapLPNum);
                break;
            case 'Appraisal':
                var appraisal = document.getElementById('hdnDefTotalListingCMV').value;
                var adjCost = 0;
                if (document.getElementById('hdnAdjCostCMV') != null) {
                    adjCost = document.getElementById('hdnAdjCostCMV').value;
                }
                var adjCap = document.getElementById('hdnCapRateCMV').value;
                $("#hdnPickedTotalPrice").val(appraisal);
                $("#spnTotalListing").html(addCommas(appraisal, false, true, false));
                $("#spnAdjCost").html(addCommas(adjCost, false, true, false));

                //issue#65////////////////////
                var adjCapCMV = document.getElementById('hdnCapRateCMV').value;
                ////////////////////

                var adjCapCMVNum = Number(adjCapCMV).toFixed(2);
                $("#spnAdjCap").html(adjCapCMVNum);
                break;
        }
    });

    function checkCalcInformation() {
        var l1 = document.getElementById('hdnListedPrice1').value;
        var a1 = document.getElementById('hdnAppraisal1').value;
        // still compare if cmv or LP is zero

        if (getNumberFromValue(l1) > 0) {
            var radiobtn3 = document.getElementById("radiobtn1");
            var radiobtn = document.getElementById("radiobtn3");
            var radiobtn2 = document.getElementById("radiobtn5");
            radiobtn.checked = true;
            radiobtn2.checked = true;
            radiobtn3.checked = true;
            $("#hdnPriceAmount").val(l1);
            
        }
        else if (getNumberFromValue(a1) > 0) {
            var radiobtn3 = document.getElementById("radiobtn2");
            var radiobtn = document.getElementById("radiobtn4");
            var radiobtn2 = document.getElementById("radiobtn6");
            radiobtn.checked = true;
            radiobtn2.checked = true;
            radiobtn3.checked = true;
            $("#hdnPriceAmount").val(a1);
        }
        var coType = $('#CoType').val(); var mfType = $('#MfType').val();
        if (coType == "True") {
            var coDM = $('#CODM').val();
            $('#defLessDMBudget').html(addCommas(coDM.toString(), false, true, false));
        }
        if (mfType == "True") {
            var mfDM = $('#MFDM').val();
            $('#defLessDMBudget').html(addCommas(mfDM.toString(), false, true, false));
        }

    }

    function CalculatePropDebt() {

        $.ajax({
            url: '@Url.Action("ActionName", "ControllerName")',
            type: 'POST',
            data: {
                name: $('#Dialog-Name').val(),
                address: $('#Dialog-Address').val()
            },
            success: function (msg) {
            },
            error: function (msg) {
            }
        });

    }

    function submitTitleCompany() {
        var selection = $("#TitleCompany").val();
        if (typeof selection !== typeof undefined && selection !== false) {
            if (selection.length > 0) {
                $("#docForm").submit();
                return true;
            }
        }
        $("#divOrderDocumentsMessage").html("<span>Please select a Title Company.</span>");
        $("#divOrderDocumentsMessage").show();
        return false;
    }

    $('#TitleCompany').change(function () {
        var selection = $(this).val();
        if (typeof selection !== typeof undefined && selection !== false) {
            if (selection.length > 0) {
                $("#secondary-list").show();
            }
            else {
                $("#secondary-list").hide();
            }
        }
        else {
            $("#secondary-list").hide();
        }
    });

    function submitInsuranceCompany() {
        var selection = $("#InsuranceCompany").val();
        if (typeof selection !== typeof undefined && selection !== false) {
            if (selection.length > 0) {
                $("#insDocForm").submit();
                return true;
            }
        }
        $("#divRequestInsMessage").html("<span>Please select an insurance Company.</span>");
        $("#divRequestInsMessage").show();
        return false;
    }

    function addUserOrder() {
        var id = $("#AssetId").val();
        $.post("/DataPortal/AddUserOrder", { assetId: id })
        .done(function (data) {
            if (data["result"] == true) {
                alert("Recorded documents have already been ordered. You will receive an automatic email when documents have been uploaded.");
            }
            else {
                alert("There was an error processing your request.");
            }
        })
        .fail(function () {
            alert("There was an error processing your request.");
        });
    }

    function addUserOrderInsurance() {
        var id = $("#AssetId").val();
        $.post("/DataPortal/AddUserOrderInsurance", { assetId: id })
        .done(function (data) {
            if (data["result"] == true) {
                alert("Recorded documents have already been ordered. You will receive an automatic email when documents have been uploaded.");
            }
            else {
                alert("There was an error processing your request.");
            }
        })
        .fail(function () {
            alert("There was an error processing your request.");
        });
    }
    $("#txtBoxDesiredCapRate").on('mouseup', function () { $(this).select(); });
    $("#defTxtBoxDesiredCapRate").on('mouseup', function () { $(this).select(); });

    $('#BtnCapRateCalc').click(function () {
        var capRate = parseFloat($('#txtBoxDesiredCapRate').val());
        if (capRate > 0) {
            $('#txtBoxDesiredCapRate').val(addCommas(capRate.toFixed(2).toString(), true, false, true));
            var calculatedPrice = Math.round(parseFloat($("#hdnProformaNOI").val()) / (capRate / 100));
            $('#CalculatedPricePerCapRate').html(addCommas(Math.round(calculatedPrice).toFixed(0), false, true, false));
            var totalUnits = parseFloat($('#mfAsset_TotalUnits').val());
            var sqFeet = $('#mfAsset_SquareFeet').val();
            if (totalUnits > 0) {
                $('#PricePerUnitPerCapRate').html(addCommas(Math.round((calculatedPrice / (totalUnits)).toFixed(2)).toString(), false, true, false));
            }
            else {
                $('#PricePerUnitPerCapRate').html(addCommas("0.00", true, true, false));
            }
            if (sqFeet > 0) {
                $('#PricePerFootPerCapRate').html(addCommas((calculatedPrice / (sqFeet)).toFixed(2).toString(), true, true, false));
            }
            else {
                $('#PricePerFootPerCapRate').html(addCommas("0.00", true, true, false));
            }
            var listPrice = getNumberFromValue($('#hdnPriceAmount').val()); //#AskingPrice
            var CompPercentage = ((calculatedPrice / listPrice) * 100).toFixed(2);
            if (CompPercentage == Infinity) {
                CompPercentage = 0;
            }
            $('#CompPercPerCapRate').html(addCommas(CompPercentage.toString(), true, false, true));
            var equity = Math.round(((calculatedPrice - listPrice)));
            $('#EquityAdjPerCapRate').html(addCommas(equity.toFixed(0).toString(), false, true, false));
            //if (listPrice == undefined || listPrice == 0) {
            //    // check appraisal/BPO
            //    var bpo = getNumberFromValue($('#hdnPriceAmount').text()); //#bpo
            //    $('#CompPercPerCapRate').html(addCommas(((calculatedPrice / bpo) * 100).toFixed(2).toString(), true, false, true));
            //    var equity = Math.round(((calculatedPrice - bpo)));
            //    $('#EquityAdjPerCapRate').html(addCommas(equity.toFixed(0).toString(), false, true, false));
            //}
            //else {
            //    $('#CompPercPerCapRate').html(addCommas(((calculatedPrice / listPrice) * 100).toFixed(2).toString(), true, false, true));
            //    var equity = Math.round(((calculatedPrice - listPrice)));
            //    $('#EquityAdjPerCapRate').html(addCommas(equity.toFixed(0).toString(), false, true, false));
            //}
            $("#EquityAdjPerCapRate").removeAttr('class');
            if (equity < 0) {
                $('#EquityAdjPerCapRate').addClass('asset-sold').css("font-weight", "normal");
            } else {
                $('#EquityAdjPerCapRate').addClass('asset-available').css("font-weight", "normal");
            }
        }
        else {
            alert("You must enter a value greater than 0.");
            $('#CalculatedPricePerCapRate').html(addCommas("0", false, true, false));
            $('#PricePerUnitPerCapRate').html(addCommas("0.00", false, true, false));
            $('#PricePerFootPerCapRate').html(addCommas("0.00", true, true, false));
            $('#CompPercPerCapRate').html(addCommas("0.00", true, false, true));
            $('#EquityAdjPerCapRate').html(addCommas("0", false, true, false));
        }
    });

    //Implementation for Adjusted calculations based on deferred Maintenance
    $('#defBtnCapRateCalc').click(function () {

        if ($('#defTxtBoxDesiredCapRate').val() != '') {
            var dmBudget = Number($('#defLessDMBudget').text().replace(/[^0-9\.]+/g, "")); //parseFloat($('#defLessDMBudget').text());
            var capRate = parseFloat($('#defTxtBoxDesiredCapRate').val());
            if (capRate > 0) {
                $('#defTxtBoxDesiredCapRate').val(addCommas(capRate.toFixed(2).toString(), true, false, true));
                var calculatedPrice = Math.round(parseFloat($('#hdnDefProformaNOI').val()) / (capRate * .01));
                $('#defCalculatedPricePerCapRate').html(addCommas(Math.round(calculatedPrice).toFixed(0), false, true, false));
                var defPricePerUnit = 0;
                var defPricePerSqFt = 0;
                var totalUnits = parseFloat($("#mfAsset_TotalUnits").val());
                var sqFeet = $("#mfAsset_SquareFeet").val();
                if (totalUnits == undefined || totalUnits == 0) {
                }
                else {
                    defPricePerUnit = Math.round((calculatedPrice / totalUnits).toFixed(2));
                }
                if (sqFeet == undefined || sqFeet == 0) {
                } else {
                    var defPricePerSqFt = (calculatedPrice / sqFeet).toFixed(2);
                }
                //Issue#56, Issue#57 : List price radio selected then  defTotalListing should "Listed/Asking Price" or when CMV radio selected then defTotalListing should be "Calculated Market Value(CMV)"
                //var defTotalListing = parseFloat($("#hdnPickedTotal").val());
                var defTotalListing;
                if (document.getElementById("radiobtn3").checked) { //radiobtn3 =>listed price radio
                    //defTotalListing = parseFloat($('input[id="AskingPrice"]').val());
                    defTotalListing = parseFloat($('#hdnListPriceOriginal').val());
                }
                else { //cmv price
                    //defTotalListing = parseFloat($("#hdnPickedTotal").val());
                    defTotalListing = parseFloat($("#hdnAppraisal1").val());

                }

                ////////////////////////////////

                $('#defPricePerUnitPerCapRate').html(addCommas(defPricePerUnit.toString(), false, true, false));
                $('#defPricePerFootPerCapRate').html(addCommas(defPricePerSqFt.toString(), true, true, false));
                var netOff = Math.round(calculatedPrice).toFixed(0) - dmBudget;
                $('#defNetOffering').html(addCommas(netOff.toString(), true, true, false));

                var defCompPercentage = ((netOff / defTotalListing) * 100).toFixed(2);

                if (defCompPercentage == Infinity) {
                    defCompPercentage = 0;
                }
                $('#defCompPercPerCapRate').html(addCommas(defCompPercentage.toString(), true, false, true));

                var defEquityAdj = netOff - defTotalListing;

                $('#defEquityAdjPerCapRate').html(addCommas(defEquityAdj.toString(), false, true, false));
                $("#defEquityAdjPerCapRate").removeAttr('class');
                if (defEquityAdj < 0) {
                    $('#defEquityAdjPerCapRate').addClass('asset-sold').css("font-weight", "normal");
                } else {
                    $('#defEquityAdjPerCapRate').addClass('asset-available').css("font-weight", "normal");
                }
            }
            else {
                alert("You must enter a value greater than 0.");
                $('#defTxtBoxDesiredCapRate').val(addCommas("0.00", true, false, true));
                $('#defPricePerUnitPerCapRate').html(addCommas("0.00", false, true, false));
                $('#defPricePerFootPerCapRate').html(addCommas("0.00", true, true, false));
                $('#defCompPercPerCapRate').html(addCommas("0", true, false, true));
                $('#defEquityAdjPerCapRate').html(addCommas("0", false, true, false));
            }
        }
    });

    $(document).ready(function () {

        $("#BtnCapRateCalc").attr("disabled", "true");
        var coType = $('#CoType').val(); var mfType = $('#MfType').val();
        if (coType == "True") {
            var coDM = $('#CODM').val();
            $('#defLessDMBudget').html(addCommas(coDM.toString(), false, true, false));
        }
        if (mfType == "True") {
            var mfDM = $('#MFDM').val();
            $('#defLessDMBudget').html(addCommas(mfDM.toString(), false, true, false));
        }
        $("#txtBoxDesiredCapRate").on('input', function () {
            if ($(this).val() != "") {
                $("#BtnCapRateCalc").removeAttr("disabled");
            } else {
                $("#BtnCapRateCalc").attr("disabled", "true");
            }
        });
        $('.pad').each(function (index) {
            padCommas(this, false);
        });
        $('.padmoney').each(function (index) {
            padCommas(this, true);
        });


        var l1 = document.getElementById('hdnListedPrice1').value;
        var a1 = document.getElementById('hdnAppraisal1').value;
        if (getNumberFromValue(l1) > 0) {
            var radiobtn = document.getElementById("radiobtn1");
            radiobtn.checked = true;
            $("#hdnPriceAmount").val(l1);
        }
        else if (getNumberFromValue(a1) > 0) {
            var radiobtn = document.getElementById("radiobtn2");
            radiobtn.checked = true;
            $("#hdnPriceAmount").val(a1);
        }

        var l2 = document.getElementById('hdnDefTotalListingLP').value;
        var a2 = document.getElementById('hdnDefTotalListingCMV').value;
        var adjCostLP = 0;
        if (document.getElementById('hdnAdjCostLP') != null) {
            adjCostLP = document.getElementById('hdnAdjCostLP').value;
        }
        var adjCostCMV = 0;
        if (document.getElementById('hdnAdjCostCMV') != null) {
            adjCostCMV = document.getElementById('hdnAdjCostCMV').value;
        }

        var adjCapLP = document.getElementById('hdnCapRateLP').value;
        var adjCapCMV = document.getElementById('hdnCapRateCMV').value;
        var adjCapLPNum = Number(adjCapLP).toFixed(2);
        var adjCapCMVNum = Number(adjCapCMV).toFixed(2);
        // still compare if cmv or LP is zero

        if (getNumberFromValue(l1) > 0) {
            var radiobtn = document.getElementById("radiobtn3");
            var radiobtn2 = document.getElementById("radiobtn5");
            radiobtn.checked = true;
            radiobtn2.checked = true;
            $("#hdnPickedTotal").val(l2);
            $("#hdnPickedTotalPrice").val(l2);
            $("#spnTotalListing").html(addCommas(l2, false, true, false));
            $("#spnAdjCap").html(adjCapLPNum);
            $("#spnAdjCost").html(addCommas(adjCostLP, false, true, false));
        }
        else if (getNumberFromValue(a1) > 0) {
            var radiobtn = document.getElementById("radiobtn4");
            var radiobtn2 = document.getElementById("radiobtn6");
            radiobtn.checked = true;
            radiobtn2.checked = true;
            $("#hdnPickedTotal").val(a2);
            $("#hdnPickedTotalPrice").val(a2);
            $("#spnTotalListing").html(addCommas(a2, false, true, false));
            $("#spnAdjCap").html(adjCapCMVNum);
            $("#spnAdjCost").html(addCommas(adjCostCMV, false, true, false));
        }

        
    });

    $(document).ready(function () {
        $('#carousel-pause').click(function () {
            $('#asset-carousel').carousel('pause');
        })

        $('#carousel-play').click(function () {
            $('#asset-carousel').carousel('cycle');
        })

    });


    //issue#73
    $(document).ready(function () {
        var lp = parseFloat($('#hdnListPriceOriginal').val());
        var cmv = parseFloat($("#hdnAppraisal1").val());
        if (lp > 0 && !cmv > 0) {
            $('input[type="radio"][value="Appraisal"]').attr('disabled', 'disabled');
            $('input[type="radio"][value="ListedPrice"]').click();
        }
        else if (!lp > 0 && cmv > 0) {

            $('input[type="radio"][value="ListedPrice"]').attr('disabled', 'disabled');
            $('input[type="radio"][value="Appraisal"]').click();

        }
        else if (!lp > 0 && !cmv > 0) {
            $('input[type="radio"][value="ListedPrice"]').attr('disabled', 'disabled');

            $('input[type="radio"][name="option2"][value="Appraisal"]').click();
            $('input[type="radio"][name="option1"][value="Appraisal"]').click();
            $('input[type="radio"][value="Appraisal"]').attr('disabled', 'disabled')
        }


    });



    //function ProposedDebtCalc() {
    //    $('#annualPreforma').value = 0;
    //    $('#annualDebt1').value = 0;
    //    $('#calcCashFlow').value = 0;
    //    var moPayment = document.getElementsByName('#monthlyPayment').value;
    //    var anPayment = document.getElementsByName('#annualDebt').value;
    //}

    function computeField(input) {
        if (input.value != null && input.value.length != 0)
            input.value = "" + eval(input.value);
        // computeForm(input.form);
    }

    function checkNumber(fld, min, max, message) {
        message = message + " field has invalid data: " + fld;

        num = getNumber(fld);
        if (num == null) {
            //alert(message + " you must enter a value");
            return false;
        }

        if (num < min || max < num) {
            //alert(message + " is not in the range [" + min + ".." + max + "]");
            return false;
        }

        return true;
    }


    function getNumberFromNonInput(element) {
        var str = element.innerHTML;
        var tmp = '';

        if (element.innerHTML.length == 0) {
            return null;
        }

        for (var i = 0; i < str.length; i++) {
            var ch = str.substring(i, i + 1);
            if (ch == '$' || ch == ',' || ((ch < '0' || ch > '9') && ch != '.')) {
                continue;
            }
            tmp += ch;
        }

        if (tmp == '') {
            return null;
        }

        var num = parseFloat(tmp)

        return num;
    }

    function getNumberFromValue(val) {
        var tmp = '';

        if (!val) {
            return null;
        }

        for (var i = 0; i < val.length; i++) {
            var ch = val.substring(i, i + 1);
            if (ch == '$' || ch == ',' || ((ch < '0' || ch > '9') && ch != '.')) {
                continue;
            }
            tmp += ch;
        }

        if (tmp == '') {
            return null;
        }

        var num = parseFloat(tmp)

        return num;
    }

    function toMoney(input, addDollarSign) {
        if (input.value != null && input.value.length != 0) {
            var sign = (addDollarSign) ? '$' : '';
            num = getNumber(input);
            if (num == null) {
                return;
            }

            str = num.toString();
            sig = str.split('.');

            tmp = '';
            len = sig[0].length;
            for (var i = len, j = 1; i > 0; i--, j++) {
                var t = sig[0].substring(i, i - 1);
                tmp = t + tmp;
                if ((j % 3 == 0) && j != len) {
                    tmp = ',' + tmp;
                }
            }

            if (sig.length > 1 && sig[1].length) {
                tmp += '.' + sig[1].substr(0, 1);
                var t = sig[1].substr(1, 1);
                if (t) {
                    tmp += t;
                } else {
                    tmp += '0';
                }
            }
            str = sign + tmp;

            input.value = str;
        }
    }

    function padCommas(element, addDollarSign) {
        // asumming element is span, not input
        if (element) {
            if (element.innerHTML.length != 0 && element.innerHTML != null) {
                var sign = (addDollarSign) ? '$' : '';
                num = getNumberFromNonInput(element);
                if (num == null) {
                    return;
                }

                str = num.toString();
                sig = str.split('.');

                tmp = '';
                len = sig[0].length;
                for (var i = len, j = 1; i > 0; i--, j++) {
                    var t = sig[0].substring(i, i - 1);
                    tmp = t + tmp;
                    if ((j % 3 == 0) && j != len) {
                        tmp = ',' + tmp;
                    }
                }

                if (sig.length > 1 && sig[1].length) {
                    tmp += '.' + sig[1].substr(0, 1);
                    var t = sig[1].substr(1, 1);
                    if (t) {
                        tmp += t;
                    } else {
                        tmp += '0';
                    }
                }
                str = sign + tmp;
                element.innerHTML = str;
            }
        }
    }

    function addCommasToInput(control) {
        $(control).val(addCommas($(control).val(), false));
    };

    function addCommas(str, includeDecimals, addDollarSign, addPercentSign) {

        str = str.toString().replace(/,/g, "");
        var isNegative = str.indexOf("-") > -1;
        str = str.replace(/-/g, "");
        var output = getNumberFromValue(str);
        output = (str + "").replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")
        if (addDollarSign) {
            output = "$" + output;
        }
        else if (addPercentSign) {
            output = output + "%";
        }
        if (isNegative) {
            output = "<" + output + ">";
        }
        return output;
    }

    function formatMoney(value, addDollarSign) {
        if (value != null) {
            var sign = (addDollarSign) ? '$' : '';
            num = getNumberFromValue(value);
            if (num == null) {
                return;
            }

            str = num.toString();
            sig = str.split('.');

            tmp = '';
            len = sig[0].length;
            for (var i = len, j = 1; i > 0; i--, j++) {
                var t = sig[0].substring(i, i - 1);
                tmp = t + tmp;
                if ((j % 3 == 0) && j != len) {
                    tmp = ',' + tmp;
                }
            }

            if (sig.length > 1 && sig[1].length) {
                tmp += '.' + sig[1].substr(0, 1);
                var t = sig[1].substr(1, 1);
                if (t) {
                    tmp += t;
                } else {
                    tmp += '0';
                }
            }
            str = sign + tmp;

            return str;
        }
    }

</script>
