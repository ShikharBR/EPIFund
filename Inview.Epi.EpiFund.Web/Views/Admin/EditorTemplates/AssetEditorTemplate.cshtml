@model AssetViewModel
@using MVCVideo
@using Inview.Epi.EpiFund.Domain.Helpers
@using Inview.Epi.EpiFund.Domain.Entity
@using Inview.Epi.EpiFund.Domain.ViewModel
@using Inview.Epi.EpiFund.Domain.Enum

@{
    bool isCorpAdmin = ViewBag.IsCorpAdmin;
    bool isICAdmin = ViewBag.IsICAdmin;
    var costDetails = (ViewBag.DefMaintenanceDetails as IEnumerable<SelectListItem>);
    string dataRoot = ViewBag.VideoRoot;
    MultiFamilyAssetViewModel mfAsset = new MultiFamilyAssetViewModel();
    double defProformaNOI = new double();
    double proformaNOI = new double();
    double defAnnualRevenueAdjustment = new double();
    float cashInvLP = new float();
    float cashInvCAP = new float();
    defProformaNOI = 0;
    defAnnualRevenueAdjustment = 0;
    proformaNOI = 0;
    if (Model.GetType() == typeof(MultiFamilyAssetViewModel))
    {
        mfAsset = (Model as MultiFamilyAssetViewModel);
        var aoe = Model.ProformaAnnualOperExpenses;
        var pagi = Model.ProformaAnnualIncome;
        var pami = Model.ProformaMiscIncome;
        var totalIncome = pagi + pami;
        var pvf = (Model.ProformaVacancyFac / 100) * totalIncome;
        proformaNOI = Math.Round((totalIncome - pvf) - aoe);
        defAnnualRevenueAdjustment = mfAsset.EstDeferredMaintenance == 0 ? 0 : (Model.AverageAdjustmentToBaseRentalIncomePerUnitAfterRenovations.GetValueOrDefault(0) * mfAsset.TotalUnits * 12);
        var defProformaSGI = mfAsset.EstDeferredMaintenance == 0 ? Model.ProformaAnnualIncome : Model.ProformaAnnualIncome + defAnnualRevenueAdjustment + pami;
        var adjDefPvf = (Model.ProformaVacancyFac / 100) * defProformaSGI;
        defProformaNOI = mfAsset.EstDeferredMaintenance == 0 ? proformaNOI : Math.Round(defProformaSGI - adjDefPvf - aoe);
        if (Model.AskingPrice != 0 && Model.CurrentBpo != 0)
        {
            cashInvLP = @Model.CashInvestmentApy;
            cashInvCAP = @Model.CashInvestmentApy;
        }
        else if (Model.AskingPrice != 0)
        {
            cashInvLP = @Model.CashInvestmentApy;
            cashInvCAP = 0;
        }
        else if (Model.CurrentBpo != 0)
        {
            cashInvCAP = @Model.CashInvestmentApy;
            cashInvLP = 0;
        }

    }
    else
    {
        var aoe = Model.ProformaAnnualOperExpenses;
        var pagi = Model.ProformaAnnualIncome;
        var pami = Model.ProformaMiscIncome;
        var totalIncome = pagi + pami;
        var pvf = (Model.ProformaVacancyFac / 100) * totalIncome;
        proformaNOI = Math.Round((totalIncome - pvf) - aoe);

        if (Model.AssetType == AssetType.ConvenienceStoreFuel)
        {
            if (Model.SalesPrice.HasValue && Model.SalesPrice.Value != 0)
            {
                cashInvLP = @Model.CashInvestmentApy;
                cashInvCAP = @Model.CashInvestmentApy;
            }
            else
            {
                cashInvLP = 0;
                cashInvCAP = 0;
            }
        }
        else
        {
            if (Model.AskingPrice != 0 && Model.CurrentBpo != 0)
            {
                cashInvLP = @Model.CashInvestmentApy;
                cashInvCAP = @Model.CashInvestmentApy;
            }
            else if (Model.AskingPrice != 0)
            {
                cashInvLP = @Model.CashInvestmentApy;
                cashInvCAP = 0;
            }
            else if (Model.CurrentBpo != 0)
            {
                cashInvCAP = @Model.CashInvestmentApy;
                cashInvLP = 0;
            }
        }
    }
}

<style>

    section h3 {
        border-bottom: none !important;
        margin-bottom: 10px !important;
        padding-bottom: 0px !important;
    }

    .editAssetTop {
        border-bottom: 1px solid #aeaba3 !important;
    }

    .err {
        border: 1px solid red !important;
    }

    .err {
        border: 1px solid red !important;
    }

    .field-validation-error {
        color: red;
        font-weight: bold;
    }

    .detailsHeading {
        margin: 1px;
        color: #fff;
        padding: 3px 10px;
        cursor: pointer;
        position: relative;
        background-color: #428bca;
    }

    .layer1 {
        margin: 0;
        padding: 0;
        width: 300px;
    }

    .detailsContent {
        padding: 5px 10px;
        background-color: #fafafa;
    }

    #uploadDiv #AssetDocumentType, #uploadDiv #docTitle {
        border: 1px solid #ccc;
    }

    #documents .deleteDocUpload {
        background-color: transparent;
        border: 0;
        font-size: 10px;
        color: #428bca;
        padding: 0;
        margin: 0;
    }

        #documents .deleteDocUpload:hover, #docManager .deleteDocUpload:focus {
            color: #2a6496;
        }

    #documents a {
        display: block;
    }

    #documents .description {
        color: #888;
        font-weight: normal;
        font-style: italic;
        font-size: 10px;
        display: block;
        margin: 0;
    }

    #documents .docPreviewDiv.row {
        background-color: #f7f7f7;
        width: 100%;
        margin-left: 0px;
        padding: 10px 0;
        margin-bottom: 5px;
        border: 1px solid #eee;
        border-radius: 4px;
    }

        #documents .docPreviewDiv.row .col-sm-2 {
            text-align: right;
        }

    #documents .document-item {
        background-color: #fff;
        border: 0;
        padding: 0;
    }

    #documents .document-item-expanded {
        background-color: transparent;
        border: 0;
        padding: 0;
        margin: 0;
    }

    #PendingUploads .docPreviewDiv.row {
        background-color: #F1FBED;
        border-color: #d6e9c6;
    }

    #documents h4 {
        margin-bottom: 5px;
    }

    .progressbar {
        width: 300px;
        height: 20px;
        background-color: transparent;
    }

    .progressbarlabel {
        width: 300px;
        height: 20px;
        position: absolute;
        text-align: center;
        font-size: smaller;
    }


    .ui-progressbar .ui-progressbar-value {
        height: 20px;
    }

    .spaceLab {
        margin-right: 10px;
    }

    .spaceText {
        margin-left: 10px;
    }

    #SellerTerms {
        width: 200px;
    }

    #OwnerOperatingCompanyCountry,
    #OwnerHoldingCompanyCountry,
    #OwnerOperatingCompanyUpdateCountry,
    #OwnerHoldingCompanyUpdateCountry {
        max-width: 300px;
    }

    .detailsHeading {
        text-align: center;
    }

    .hcoicon {
        margin-top: 4px;
        float: left;
    }

    #selectPIModal .modal-body .col-sm-6,
    #selectCompanyModal .modal-body .col-sm-6,
    #selectPIModal .modal-body .col-sm-6 .input-group,
    #selectCompanyModal .modal-body .col-sm-6 .input-group {
        width: 100%;
    }

    #selectPIModal select,
    #selectCompanyModal select {
        width: 400px;
        margin-left: auto;
        margin-right: auto;
    }

    #ActualClosingDate {
        float: left;
    }
</style>



<!-- Nav tabs -->
<ul class="nav nav-pills">
    <li class="active"><a href="#basic" data-toggle="pill">Basic Info</a></li>
    @if (Model.IsPaper)
    {
        <li><a href="#paper" data-toggle="tab">CRE Note Data</a></li>
    }
    <li><a href="#details" data-toggle="tab">Detailed Info</a></li>
    <li><a href="#mortgage" data-toggle="tab">Existing Mortgages</a></li>
    <li><a href="#media" data-toggle="tab">Images</a></li>
    <li><a href="#documents" data-toggle="tab">Documents</a></li>
    <li><a href="#videos" data-toggle="tab">Videos</a></li>
    <li><a href="#finish" data-toggle="tab">Finish</a></li>
</ul>

<!-- Tab panes -->
<div class="tab-content">
    <div class="tab-pane active" id="basic">
        <div class="row">
            <div class="col-sm-6 text-right">
                <div class="input-group">
                    @Html.LabelFor(model => model.AssetType) <span style="color: red;">*</span>
                </div>
            </div>
            <div class="col-sm-6">
                <div class="input-group" style="padding-top: 10px">
                    @Inview.Epi.EpiFund.Domain.Helpers.EnumHelper.GetEnumDescription(@Model.AssetType)
                    @Html.HiddenFor(model => model.AssetType)
                    @Html.HiddenFor(s => s.ExistingListingStatus)
                    @Html.HiddenFor(model => Model.AssetNumber)
                    @Html.HiddenFor(model => Model.IsPaper)
                    @Html.HiddenFor(model => Model.IsSubmitted)
                    @Html.HiddenFor(model => Model.Show)

                    @Html.HiddenFor(model => Model.isPortfolio)
                    @Html.HiddenFor(model => Model.isNewPf)
                    @Html.HiddenFor(model => Model.ExistingPFName)
                    @Html.HiddenFor(model => Model.NewPFName)

                    @Html.HiddenFor(model => Model.TitleCompanyId)
                    @Html.HiddenFor(model => Model.TitleCompanyUserId)
                    @Html.HiddenFor(model => Model.OrderId)
                    @Html.HiddenFor(model => Model.OrderStatus)
                    @Html.HiddenFor(model => Model.OrderDate)
                    @Html.HiddenFor(model => Model.OrderedByUserId)
                    @Html.HiddenFor(model => Model.DateOfOrderSubmit)

                    @Html.HiddenFor(model => Model.AssetSellerId)
                    @Html.HiddenFor(model => Model.Method)
                    @Html.HiddenFor(model => Model.DateForTempImages)
                    @Html.HiddenFor(model => Model.UserId)
                    @Html.HiddenFor(model => Model.IsSampleAsset)
                    @Html.HiddenFor(model => Model.FromCreateMethod)
                    @Html.HiddenFor(model => Model.HoldForUserId)
                    @Html.HiddenFor(model => Model.HoldStartDate)
                    @Html.HiddenFor(model => Model.HoldEndDate)
                    <input id="JsonPictures" name="JsonPictures" style="display:none" value="@Model.JsonPictures" />
                    @for (int i = 0; i < Model.ListingAgents.Count; i++)
                    {
                        @Html.HiddenFor(model => Model.ListingAgents[i].Text)
                        @Html.HiddenFor(model => Model.ListingAgents[i].Value)
                        @Html.HiddenFor(model => Model.ListingAgents[i].Selected)
                    }
                </div>
            </div>
        </div>


        <div class="row">
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.LabelFor(model => model.ListingStatus) <span style="color: red;">*</span>
                </div>
            </div>
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.EnumDropDownList("ListingStatus", Model.ListingStatus, "---")
                    @Html.ValidationMessageFor(model => model.ListingStatus)
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.LabelFor(model => model.OperatingStatus) <span style="color: red;">*</span>
                </div>
            </div>
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.EnumDropDownList("OperatingStatus", Model.OperatingStatus, "---")
                    @Html.ValidationMessageFor(model => model.OperatingStatus)
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.LabelFor(model => model.PropHoldTypeId)
                </div>
            </div>
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.DropDownListFor(model => model.PropHoldTypeId, Model.PropHoldTypes as IEnumerable<SelectListItem>)
                    @*@Html.EnumDropDownList("PropHoldTypeId", Model.PropHoldTypeId, "---")*@
                </div>
            </div>
        </div>

        <div id="maturityDiv" style="display: none;">
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(model => model.LeaseholdMaturityDate)
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.TextBoxFor(model => model.LeaseholdMaturityDate, new { @class = "datepicker" })
                        @Html.ValidationMessageFor(model => model.LeaseholdMaturityDate)
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.LabelFor(model => model.WebsiteEmail) <span style="color: red;">*</span>
                </div>
            </div>
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.EditorFor(model => model.WebsiteEmail)
                    @Html.ValidationMessageFor(model => model.WebsiteEmail)
                </div>
            </div>
        </div>

        <hr />

        @*HC OC Section START*@

        <div class="row">
            <div class="col-sm-6">
                <div class="input-group" style="margin-bottom:10px;">
                    @if (Model.AssetHCOwnershipLst != null && Model.AssetHCOwnershipLst.Count > 0)
                    {
                        <input id="btnAddHoldingCompany" type="button" value="Change Ownership" onclick="ShowHCpopup();" />
                        <br />
                    }
                    else
                    {
                        <input id="btnAddHoldingCompany" type="button" value="Add Holding Company" onclick="ShowHCpopup();" />
                        <br />
                    }
                </div>
            </div>
        </div>

        <div class="modal fade" id="addnewHC">
            <div class="modal-dialog" style="width:850px;">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5>Add new HC Company</h5>
                    </div>
                    <div class="modal-body text-center">
                        <div class="row">
                            <div class="col-sm-5">
                                <div class="input-group">
                                    <label>Contract Owner of Asset(Holding Company)/Address</label>
                                </div>
                            </div>
                            <div class="col-sm-6">
                                <div class="input-group">
                                    <input type="hidden" id="AssetHCOwnershipId" value="" />
                                    @Html.HiddenFor(model => model.OwnerHoldingCompanyNewId)
                                    @Html.TextBoxFor(model => model.OwnerHoldingCompany)
                                    <input type="button" value="Search For Holding Company" data-type="Holding" data-method="create" class="loadFields" />
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-sm-6">
                                <div class="input-group">
                                    @Html.CheckBoxFor(x => x.NotOnHoldingList, new { @style = "margin-left:20px;" })
                                    <span class='hideOnDisabledHolding'>Not on list?</span>
                                </div>
                            </div>
                        </div>
                        <div class="row" id="divSelectHC" style="display:none;">
                            <div class="col-sm-5">
                                <label>Select Comapny</label>
                            </div>
                            <div class="col-sm-6">
                                <div class="input-group">
                                    <input id="SelectOwnerCompanyType" style="display:none" />
                                    <select id="ddlSelectOwnerCompanyType" style="width:450px;">
                                        <option selected="selected" value="">--</option>
                                    </select>
                                </div>
                            </div>
                        </div>
                        <div class="fields" style="display:none">

                            <div class="row">
                                <div class="col-sm-5">
                                    <div class="input-group">
                                        @Html.LabelFor(model => model.OwnerISRA, new { @class = "control-label", style = "font-weight:bold;" })
                                    </div>
                                </div>
                                <div class="col-sm-6">
                                    <div class="input-group">
                                        @Html.CheckBoxFor(model => model.OwnerISRA)
                                        @Html.ValidationMessageFor(model => model.OwnerISRA)
                                    </div>
                                </div>
                            </div>

                            <div class="row">
                                <div class="col-sm-5">
                                    <div class="input-group">
                                        @Html.LabelFor(model => model.OwnerHoldingCompanyEmail)
                                    </div>
                                </div>
                                <div class="col-sm-6">
                                    <div class="input-group">
                                        @Html.EditorFor(model => model.OwnerHoldingCompanyEmail)
                                        @Html.ValidationMessageFor(model => model.OwnerHoldingCompanyEmail)
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-sm-5">
                                    <div class="input-group">
                                        @Html.LabelFor(model => model.OwnerHoldingCompanyFirst)
                                    </div>
                                </div>
                                <div class="col-sm-6">
                                    <div class="input-group">
                                        @Html.EditorFor(model => model.OwnerHoldingCompanyFirst)
                                        @Html.ValidationMessageFor(model => model.OwnerHoldingCompanyFirst)
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-sm-5">
                                    <div class="input-group">
                                        @Html.LabelFor(model => model.OwnerHoldingCompanyLast)
                                    </div>
                                </div>
                                <div class="col-sm-6">
                                    <div class="input-group">
                                        @Html.EditorFor(model => model.OwnerHoldingCompanyLast)
                                        @Html.ValidationMessageFor(model => model.OwnerHoldingCompanyLast)
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-sm-5">
                                    <div class="input-group">
                                        @Html.LabelFor(model => model.OwnerHoldingCompanyAddressLine1)
                                    </div>
                                </div>
                                <div class="col-sm-6">
                                    <div class="input-group">
                                        @Html.EditorFor(model => model.OwnerHoldingCompanyAddressLine1)
                                        @Html.ValidationMessageFor(model => model.OwnerHoldingCompanyAddressLine1)
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-sm-5">
                                    <div class="input-group">
                                        @Html.LabelFor(model => model.OwnerHoldingCompanyAddressLine2)
                                    </div>
                                </div>
                                <div class="col-sm-6">
                                    <div class="input-group">
                                        @Html.EditorFor(model => model.OwnerHoldingCompanyAddressLine2)
                                        @Html.ValidationMessageFor(model => model.OwnerHoldingCompanyAddressLine2)
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-sm-5">
                                    <div class="input-group">
                                        @Html.LabelFor(model => model.OwnerHoldingCompanyCity)
                                    </div>
                                </div>
                                <div class="col-sm-6">
                                    <div class="input-group">
                                        @Html.EditorFor(model => model.OwnerHoldingCompanyCity)
                                        @Html.ValidationMessageFor(model => model.OwnerHoldingCompanyCity)
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-sm-5">
                                    <div class="input-group">
                                        @Html.LabelFor(model => model.OwnerHoldingCompanyState)
                                    </div>
                                </div>
                                <div class="col-sm-6">
                                    <div class="input-group">
                                        @Html.EditorFor(model => model.OwnerHoldingCompanyState)
                                        @Html.ValidationMessageFor(model => model.OwnerHoldingCompanyState)
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-sm-5">
                                    <div class="input-group">
                                        @Html.LabelFor(model => model.OwnerHoldingCompanyZip)
                                    </div>
                                </div>
                                <div class="col-sm-6">
                                    <div class="input-group">
                                        @Html.EditorFor(model => model.OwnerHoldingCompanyZip)
                                        @Html.ValidationMessageFor(model => model.OwnerHoldingCompanyZip)
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-sm-5">
                                    <div class="input-group">
                                        @Html.LabelFor(model => model.OwnerHoldingCompanyCountry)
                                    </div>
                                </div>
                                <div class="col-sm-6">
                                    <div class="input-group">
                                        @Html.DropDownListFor(s => s.OwnerHoldingCompanyCountry, new SelectList(Model.Countries, "Value", "Text", Model.OwnerHoldingCompanyCountry))
                                        @Html.ValidationMessageFor(model => model.OwnerHoldingCompanyCountry)
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-sm-5">
                                    <div class="input-group">
                                        @Html.LabelFor(model => model.OwnerHoldingCompanyWorkPhone)
                                    </div>
                                </div>
                                <div class="col-sm-6">
                                    <div class="input-group">
                                        @Html.EditorFor(model => model.OwnerHoldingCompanyWorkPhone)
                                        @Html.ValidationMessageFor(model => model.OwnerHoldingCompanyWorkPhone)
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-sm-5">
                                    <div class="input-group">
                                        @Html.LabelFor(model => model.OwnerHoldingCompanyCellPhone)
                                    </div>
                                </div>
                                <div class="col-sm-6">
                                    <div class="input-group">
                                        @Html.EditorFor(model => model.OwnerHoldingCompanyCellPhone)
                                        @Html.ValidationMessageFor(model => model.OwnerHoldingCompanyCellPhone)
                                    </div>
                                </div>
                            </div>

                            @*<div class="row">
                                    <div class="col-sm-5">
                                        <div class="input-group">
                                            @Html.LabelFor(model => model.OwnerHoldingCompanyFax)
                                        </div>
                                    </div>
                                    <div class="col-sm-6">
                                        <div class="input-group">
                                            @Html.EditorFor(model => model.OwnerHoldingCompanyFax)
                                            @Html.ValidationMessageFor(model => model.OwnerHoldingCompanyFax)
                                        </div>
                                    </div>
                                </div>*@

                            <div class="row">
                                <div class="col-sm-5">
                                    <div class="input-group">
                                        <label for="OwnerHoldingCompanyLinkedIn">Linked In URL</label>
                                    </div>
                                </div>
                                <div class="col-sm-6">
                                    <div class="input-group">
                                        <input class="text-box single-line" id="OwnerHoldingCompanyLinkedIn" name="OwnerHoldingCompanyLinkedIn" type="text" value="">
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-sm-5">
                                    <div class="input-group">
                                        <label for="OwnerHoldingCompanyFacebook">Facebook URL</label>
                                    </div>
                                </div>
                                <div class="col-sm-6">
                                    <div class="input-group">
                                        <input class="text-box single-line" id="OwnerHoldingCompanyFacebook" name="OwnerHoldingCompanyFacebook" type="text" value="">
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-sm-5">
                                    <div class="input-group">
                                        <label for="OwnerHoldingCompanyInstagram">Instagram URL</label>
                                    </div>
                                </div>
                                <div class="col-sm-6">
                                    <div class="input-group">
                                        <input class="text-box single-line" id="OwnerHoldingCompanyInstagram" name="OwnerHoldingCompanyInstagram" type="text" value="">
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-sm-5">
                                    <div class="input-group">
                                        <label for="OwnerHoldingCompanyTwitter">Twitter URL</label>
                                    </div>
                                </div>
                                <div class="col-sm-6">
                                    <div class="input-group">
                                        <input class="text-box single-line" id="OwnerHoldingCompanyTwitter" name="OwnerHoldingCompanyTwitter" type="text" value="">
                                    </div>
                                </div>
                            </div>

                            <div class="row">
                                <div class="col-sm-5">
                                    <div class="input-group">
                                        @Html.LabelFor(model => model.Terms)
                                    </div>
                                </div>
                                <div class="col-sm-6">
                                    <div class="input-group">
                                        @Html.DropDownListFor(s => s.Terms, @Model.TermTypes, new { style = "width:150px;" })
                                        @Html.ValidationMessageFor(model => model.Terms)
                                    </div>
                                </div>
                            </div>
                            <div class="row" id="termsOtherDiv">
                                <div class="col-sm-5">
                                    <div class="input-group">
                                        @Html.LabelFor(s => s.TermsOther, new { @class = "control-label" })
                                    </div>
                                </div>
                                <div class="col-sm-6">
                                    <div class="input-group">
                                        @Html.TextAreaFor(s => s.TermsOther, new { @class = "form-control", @rows = "4", @cols = "95" })
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-sm-5">
                                    <div class="input-group">
                                        @Html.LabelFor(model => model.ActualClosingDate)
                                    </div>
                                </div>
                                <div class="col-sm-6">
                                    <div class="input-group">
                                        @Html.EditorFor(model => model.ActualClosingDate, new { @class = "datepicker" })
                                        <br /><span id="errorMsgActualClosingDate" class="field-validation-error" style="font-size:10px; float:left;"></span>
                                        <em>MM/dd/yyyy</em>
                                        @Html.ValidationMessageFor(model => model.ActualClosingDate)

                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-sm-5">
                                    <div class="input-group">
                                        @Html.LabelFor(model => model.SalesPrice)
                                    </div>
                                </div>
                                <div class="col-sm-6">
                                    <div class="input-group">
                                        @Html.TextBoxFor(s => s.SalesPrice, new { @class = "control-label formatNumber", onChange = "calculatePricePer(this)" })
                                        @Html.CheckBoxFor(s => s.SalesPriceNotProvided) @Html.LabelFor(model => model.SalesPriceNotProvided)
                                        @Html.ValidationMessageFor(model => model.SalesPrice)
                                    </div>
                                </div>
                            </div>



                            @if (isCorpAdmin)
                            {
                                if (Model.GetType() == typeof(MultiFamilyAssetViewModel) || Model.AssetType == AssetType.MHP)
                                {
                                    <div class="row">
                                        <div class="col-sm-5">
                                            <div class="input-group">
                                                @*<label>Calculated Price Per Unit/Sq.Ft.</label>*@
                                                @Html.LabelFor(model => (model as MultiFamilyAssetViewModel).CalculatedPPU)
                                            </div>
                                        </div>
                                        <div class="col-sm-6">
                                            <div class="input-group">
                                                @Html.TextBoxFor(model => (model as MultiFamilyAssetViewModel).CalculatedPPU, new { @class = "formatNumber" })
                                            </div>
                                        </div>
                                        <div class="col-sm-6">
                                            <div class="input-group">
                                                @Html.ValidationMessageFor(model => (model as MultiFamilyAssetViewModel).CalculatedPPU)
                                            </div>
                                        </div>
                                    </div>
                                }
                                else if (Model.AssetType == AssetType.ConvenienceStoreFuel)
                                {
                                    <div class="row">
                                        <div class="col-sm-5">
                                            <div class="input-group">
                                                @Html.LabelFor(model => (model as CommercialAssetViewModel).CalculatedPPSqFt)
                                            </div>
                                        </div>
                                        <div class="col-sm-6">
                                            <div class="input-group">
                                                @Html.TextBoxFor(model => (model as CommercialAssetViewModel).CalculatedPPSqFt, new { @class = "formatNumber" })
                                            </div>
                                        </div>
                                        <div class="col-sm-6">
                                            <div class="input-group">
                                                @Html.ValidationMessageFor(model => (model as CommercialAssetViewModel).CalculatedPPSqFt)
                                            </div>
                                        </div>
                                    </div>

                                    <div class="row">
                                        <div class="col-sm-5">
                                            <div class="input-group">
                                                <label class="control-label"> Calculated Closing Price CAP Rate</label>
                                            </div>
                                        </div>
                                        <div class="col-sm-6">
                                            <div class="input-group">
                                                @Html.TextBoxFor(model => (model as CommercialAssetViewModel).CashInvestmentApy, new { @class = "formatNumber" })
                                            </div>
                                        </div>
                                        <div class="col-sm-6">
                                            <div class="input-group">
                                                @Html.ValidationMessageFor(model => (model as CommercialAssetViewModel).CashInvestmentApy)
                                            </div>
                                        </div>
                                    </div>
                                }
                                else if (Model.GetType() == typeof(CommercialAssetViewModel) && Model.AssetType != AssetType.ConvenienceStoreFuel)
                                {
                                    <div class="row">
                                        <div class="col-sm-5">
                                            <div class="input-group">
                                                @Html.LabelFor(model => (model as CommercialAssetViewModel).CalculatedPPSqFt)
                                            </div>
                                        </div>
                                        <div class="col-sm-6">
                                            <div class="input-group">
                                                @Html.TextBoxFor(model => (model as CommercialAssetViewModel).CalculatedPPSqFt, new { @class = "formatNumber" })
                                            </div>
                                        </div>
                                        <div class="col-sm-6">
                                            <div class="input-group">
                                                @Html.ValidationMessageFor(model => (model as CommercialAssetViewModel).CalculatedPPSqFt)
                                            </div>
                                        </div>
                                    </div>
                                }
                            }

                            <div class="row">
                                <div class="col-sm-5">
                                    <div class="input-group">
                                        <label for="CapRate">CAP Rate (%)</label>
                                    </div>
                                </div>
                                <div class="col-sm-6">
                                    <div class="input-group">
                                        <input class="text-box single-line" id="CapRate" name="CapRate" type="text" value="" maxlength="5">
                                    </div>
                                </div>
                            </div>

                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-default" onclick="UpdateCreateHCInsertHCOwnership()">Submit</button>
                        <button type="button" class="btn btn-default" onclick="HideHCpopup()">Cancel</button>
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <div style="border: 1px solid #ddd; text-align: left; margin-left: 13px; width: 97%; display: @(Model.AssetHCOwnershipLst.Count>0?"":"none");" id="divtblAssetHC">
                <table id="tblAssetHC" class="table table-striped" cellpadding="1" cellspacing="1" style=" font-size: 10px !important; padding: 1px; vertical-align: middle;">
                    <thead>
                        <tr style="background-color: #428bca; color:white;">
                            <th>HC Name</th>
                            <th>Terms</th>
                            <th>Actual Closing Date</th>
                            <th>Contract Sales Price</th>
                            <th>Calculated Price Per Unit/Space</th>
                            <th>No SP Provided</th>
                            <th style="min-width:70px;">
                                <span style="display:inline-block; margin-right:5px;">Action</span>
                                <span class="fa fa-arrow-down" id="spanHCCollapse" style="cursor:pointer; font-size:11px; "></span>
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var assetHC in Model.AssetHCOwnershipLst)
                        {
                            <tr>
                                <td>@assetHC.OwnerHoldingCompany</td>
                                <td>@(assetHC.Terms=="0"?"--": assetHC.Terms)</td>
                                <td>@(assetHC.ActualClosingDate.HasValue ? assetHC.ActualClosingDate.Value.ToString("MM/dd/yy"):"N/A") </td>
                                <td><span class="padmoney">@(assetHC.SalesPrice.HasValue? assetHC.SalesPrice.Value.ToString("C0"):"--")</span></td>
                                <td><span class="padmoney">@(assetHC.CalculatedPPU.HasValue? assetHC.CalculatedPPU.Value.ToString("C0"):"--")</span></td>
                                <td>@assetHC.SalesPriceNotProvided</td>
                                <td>
                                    @if (Model.AssetHCOwnershipLst.IndexOf(assetHC) == 0)
                                    {
                                        <a onclick="EditHC('@assetHC.AssetHCOwnershipId')" style="cursor:pointer" title="eidt Holding company">
                                            <span class="glyphicon glyphicon-pencil"></span>
                                        </a>
                                    }
                                    else
                                    {
                                        <a onclick="EditHC('@assetHC.AssetHCOwnershipId')" style="cursor:pointer" title="eidt Holding company">
                                            <span class="glyphicon glyphicon-pencil"></span>
                                        </a>
                                    }
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>


        <div class="row">
            <div class="col-sm-6">
                <div class="input-group" style="margin-top: 10px; margin-bottom: 10px;">
                    @if (Model.AssetOCLst != null && Model.AssetOCLst.Count > 0)
                    {
                        <input id="btnAddOperatingCompany" type="button" value="Change Operating Company" onclick="ShowOCpopup();" />
                        <br />
                    }
                    else
                    {
                        <input id="btnAddOperatingCompany" type="button" value="Add Operating Company" onclick="ShowOCpopup();" />
                        <br />
                    }
                </div>
            </div>
        </div>

        <div class="modal fade" id="addnewOC">
            <div class="modal-dialog" style="width:850px;">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5>Add new OC Company</h5>
                    </div>

                    <div class="modal-body text-center">
                        <div class="row">
                            <div class="col-sm-5">
                                <div class="input-group OperatingOwnerUpdate">
                                    @Html.LabelFor(model => model.OwnerOperatingCompany)
                                </div>
                            </div>
                            <div class="col-sm-6">
                                <div class="input-group OperatingOwnerUpdate">

                                    <input type="hidden" id="AssetOCId" value="" />
                                    @Html.HiddenFor(model => model.OwnerOperatingCompanyNewId)

                                    @Html.TextBoxFor(model => model.OwnerOperatingCompany)
                                    <input type="button" value="Search For Operating Company" data-type="Operating" data-method="create" class="loadFields hideOnOperatingUpdate" />

                                    @Html.ValidationMessageFor(model => model.OwnerOperatingCompany)
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-sm-5">
                                <div class="input-group">
                                    @Html.LabelFor(model => model.OwnerOperatingCompanyEmail)
                                </div>
                            </div>
                            <div class="col-sm-6">
                                <div class="input-group">
                                    @Html.TextBoxFor(model => model.OwnerOperatingCompanyEmail)
                                    <input type="button" value="Search For PI" class="hideOnOperatingUpdate" onclick="searchForPI('Owner')" />

                                    @Html.ValidationMessageFor(model => model.OwnerOperatingCompanyEmail)
                                </div>
                            </div>
                        </div>

                        <div class="row" id="divSelectOC" style="display:none;">
                            <div class="col-sm-5">
                                <label>Select Company</label>
                            </div>
                            <div class="col-sm-6">
                                <div class="input-group">
                                    <input id="SelectOwnerCompanyOCType" style="display:none" />
                                    <select id="ddlSelectOwnerCompanyOCType" style="width:450px;">
                                        <option selected="selected" value="">--</option>
                                    </select>
                                </div>
                            </div>
                        </div>
                        <div class="row" id="selectPIModal" style="display:none;">
                            <div class="col-sm-5">
                                <label>Select Principal Investor</label>
                            </div>
                            <div class="col-sm-6">
                                <div class="input-group">
                                    <input id="piOperatingCompanyType" style="display:none" />
                                    <select id="ddlPi">
                                        <option selected="selected" value="">--</option>
                                    </select>
                                </div>
                            </div>
                        </div>

                        <div class="row OCNotInList">
                            <div class="col-sm-6">
                                <div class="input-group">
                                    @Html.CheckBoxFor(x => x.NotOnOperatingList, new { @style = "margin-left:20px;" })
                                    <span class='hideOnDisabledOperating'>Not on list?</span>
                                </div>
                            </div>
                        </div>
                        <div class="fields" style="display:none">
                            <div class="row">
                                <div class="col-sm-5">
                                    <div class="input-group">
                                        @Html.LabelFor(model => model.OwnerOperatingCompanyFirst)
                                    </div>
                                </div>
                                <div class="col-sm-6">
                                    <div class="input-group">
                                        @Html.EditorFor(model => model.OwnerOperatingCompanyFirst)
                                        @Html.ValidationMessageFor(model => model.OwnerOperatingCompanyFirst)
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-sm-5">
                                    <div class="input-group">
                                        @Html.LabelFor(model => model.OwnerOperatingCompanyLast)
                                    </div>
                                </div>
                                <div class="col-sm-6">
                                    <div class="input-group">
                                        @Html.EditorFor(model => model.OwnerOperatingCompanyLast)
                                        @Html.ValidationMessageFor(model => model.OwnerOperatingCompanyLast)
                                    </div>
                                </div>
                            </div>
                            <div class="row" style="padding-bottom:10px">
                                <div class="col-sm-6">
                                    <div class="input-group">
                                        <input type="checkbox" id="cbOperatingCreate" />
                                        <span>Same Address and Phone as Holding Company?</span>
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-sm-5">
                                    <div class="input-group">
                                        @Html.LabelFor(model => model.OwnerOperatingCompanyAddressLine1)
                                    </div>
                                </div>
                                <div class="col-sm-6">
                                    <div class="input-group">
                                        @Html.EditorFor(model => model.OwnerOperatingCompanyAddressLine1)
                                        @Html.ValidationMessageFor(model => model.OwnerOperatingCompanyAddressLine1)
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-sm-5">
                                    <div class="input-group">
                                        @Html.LabelFor(model => model.OwnerOperatingCompanyAddressLine2)
                                    </div>
                                </div>
                                <div class="col-sm-6">
                                    <div class="input-group">
                                        @Html.EditorFor(model => model.OwnerOperatingCompanyAddressLine2)
                                        @Html.ValidationMessageFor(model => model.OwnerOperatingCompanyAddressLine2)
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-sm-5">
                                    <div class="input-group">
                                        @Html.LabelFor(model => model.OwnerOperatingCompanyCity)
                                    </div>
                                </div>
                                <div class="col-sm-6">
                                    <div class="input-group">
                                        @Html.EditorFor(model => model.OwnerOperatingCompanyCity)
                                        @Html.ValidationMessageFor(model => model.OwnerOperatingCompanyCity)
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-sm-5">
                                    <div class="input-group">
                                        @Html.LabelFor(model => model.OwnerOperatingCompanyState)
                                    </div>
                                </div>
                                <div class="col-sm-6">
                                    <div class="input-group">
                                        @Html.EditorFor(model => model.OwnerOperatingCompanyState)
                                        @Html.ValidationMessageFor(model => model.OwnerOperatingCompanyState)
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-sm-5">
                                    <div class="input-group">
                                        @Html.LabelFor(model => model.OwnerOperatingCompanyZip)
                                    </div>
                                </div>
                                <div class="col-sm-6">
                                    <div class="input-group">
                                        @Html.EditorFor(model => model.OwnerOperatingCompanyZip)
                                        @Html.ValidationMessageFor(model => model.OwnerOperatingCompanyZip)
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-sm-5">
                                    <div class="input-group">
                                        @Html.LabelFor(model => model.OwnerOperatingCompanyCountry)
                                    </div>
                                </div>
                                <div class="col-sm-6">
                                    <div class="input-group">
                                        @Html.DropDownListFor(s => s.OwnerOperatingCompanyCountry, new SelectList(Model.Countries, "Value", "Text", Model.OwnerOperatingCompanyCountry))
                                        @Html.ValidationMessageFor(model => model.OwnerOperatingCompanyCountry)
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-sm-5">
                                    <div class="input-group">
                                        @Html.LabelFor(model => model.OwnerOperatingCompanyWorkPhone)
                                    </div>
                                </div>
                                <div class="col-sm-6">
                                    <div class="input-group">
                                        @Html.EditorFor(model => model.OwnerOperatingCompanyWorkPhone)
                                        @Html.ValidationMessageFor(model => model.OwnerOperatingCompanyWorkPhone)
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-sm-5">
                                    <div class="input-group">
                                        @Html.LabelFor(model => model.OwnerOperatingCompanyCellPhone)
                                    </div>
                                </div>
                                <div class="col-sm-6">
                                    <div class="input-group">
                                        @Html.EditorFor(model => model.OwnerOperatingCompanyCellPhone)
                                        @Html.ValidationMessageFor(model => model.OwnerOperatingCompanyCellPhone)
                                    </div>
                                </div>
                            </div>

                            @*<div class="row">
                                    <div class="col-sm-5">
                                        <div class="input-group">
                                            @Html.LabelFor(model => model.OwnerOperatingCompanyFax)
                                        </div>
                                    </div>
                                    <div class="col-sm-6">
                                        <div class="input-group">
                                            @Html.EditorFor(model => model.OwnerOperatingCompanyFax)
                                            @Html.ValidationMessageFor(model => model.OwnerOperatingCompanyFax)
                                        </div>
                                    </div>
                                </div>*@

                            <div class="row">
                                <div class="col-sm-5">
                                    <div class="input-group">
                                        <label for="OwnerOperatingCompanyLinkedIn">Linked In URL</label>
                                    </div>
                                </div>
                                <div class="col-sm-6">
                                    <div class="input-group">
                                        <input class="text-box single-line" id="OwnerOperatingCompanyLinkedIn" name="OwnerOperatingCompanyLinkedIn" type="text" value="">
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-sm-5">
                                    <div class="input-group">
                                        <label for="OwnerOperatingCompanyFacebook">Facebook URL</label>
                                    </div>
                                </div>
                                <div class="col-sm-6">
                                    <div class="input-group">
                                        <input class="text-box single-line" id="OwnerOperatingCompanyFacebook" name="OwnerOperatingCompanyFacebook" type="text" value="">
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-sm-5">
                                    <div class="input-group">
                                        <label for="OwnerOperatingCompanyFacebook">Instagram URL</label>
                                    </div>
                                </div>
                                <div class="col-sm-6">
                                    <div class="input-group">
                                        <input class="text-box single-line" id="OwnerOperatingCompanyInstagram" name="OwnerOperatingCompanyInstagram" type="text" value="">
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-sm-5">
                                    <div class="input-group">
                                        <label for="OwnerOperatingCompanyTwitter">Twitter URL</label>
                                    </div>
                                </div>
                                <div class="col-sm-6">
                                    <div class="input-group">
                                        <input class="text-box single-line" id="OwnerOperatingCompanyTwitter" name="OwnerOperatingCompanyTwitter" type="text" value="">
                                    </div>
                                </div>
                            </div>

                        </div>

                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-default" onclick="UpdateCreateOCInsertOC()">Submit</button>
                        <button type="button" class="btn btn-default" onclick="HideOCpopup()">Cancel</button>
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <div style="border: 1px solid #ddd; text-align: left; margin-left: 13px; width: 97%; display: @(Model.AssetOCLst.Count>0?"":"none");" id="divtblAssetOC">
                <table id="tblAssetOC" class="table table-striped" cellpadding="1" cellspacing="1" style=" font-size: 10px !important; padding: 1px; vertical-align: middle;">
                    <thead>
                        <tr style="background-color: #428bca; color:white;">
                            <th>OC Name</th>
                            <th>FullName</th>
                            <th>City</th>
                            <th>State</th>
                            <th>Zip</th>
                            <th style="min-width:70px;">
                                <span style="display:inline-block; margin-right:5px;">Action</span>
                                <span class="fa fa-arrow-down" id="spanOCCollapse" style="cursor:pointer; font-size:11px; "></span>
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var assetOC in Model.AssetOCLst)
                        {
                            <tr>
                                <td>@assetOC.OwnerOperatingCompany</td>
                                <td>@assetOC.FullName</td>
                                <td>@assetOC.City</td>
                                <td>@assetOC.State</td>
                                <td>@assetOC.Zip</td>
                                <td>
                                    @if (Model.AssetOCLst.IndexOf(assetOC) == 0)
                                    {
                                        <a onclick="EditOC('@assetOC.AssetOCId')" style="cursor:pointer" title="eidt Operating company">
                                            <span class="glyphicon glyphicon-pencil"></span>
                                        </a>
                                    }
                                    else
                                    {
                                        <a onclick="EditOC('@assetOC.AssetOCId')" style="cursor:pointer" title="eidt Operating company">
                                            <span class="glyphicon glyphicon-pencil"></span>
                                        </a>
                                    }
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>

        @*HC OC Section END*@

        <hr />

        <div>
            Listing Agents:
            <div id="listingAgentList" data-unitcount="@(Model.AssetNARMembers.Count)" style="background-color: #f7f7f7;padding: 10px;border: 1px solid #ddd;">
                @for (int item = 0; item < Model.AssetNARMembers.Count; item++)
                {
                    <div class="iterateListingAgents">
                        @Html.HiddenFor(model => model.AssetNARMembers[item].AssetNARMemberId, new { @id = "AssetNARMemberId-" + item })
                        @Html.HiddenFor(model => model.AssetNARMembers[item].AssetId, new { @id = "AssetId-" + item })
                        @Html.HiddenFor(model => model.AssetNARMembers[item].NarMemberId, new { @id = "agentId-" + item })
                        @Html.HiddenFor(model => model.AssetNARMembers[item].NARMember.NarMemberId, new { @id = "NARMemberId-" + item })
                        @Html.HiddenFor(model => model.AssetNARMembers[item].NARMember.ReferredByUserId, new { @id = "ReferredByUserId-" + item })
                        @Html.HiddenFor(model => model.AssetNARMembers[item].NARMember.IsActive, new { @id = "IsActive-" + item })
                        @Html.HiddenFor(model => model.AssetNARMembers[item].NARMember.Website, new { @id = "Website-" + item })
                        @Html.HiddenFor(model => model.AssetNARMembers[item].NARMember.Registered, new { @id = "Registered-" + item })
                        <div class="row">
                            <div class="col-sm-6">
                                <div class="input-group">
                                    <label>Company Name</label>
                                    @*@Html.LabelFor(model => model.AssetNARMembers[item].NARMember.CompanyName)*@
                                </div>
                            </div>
                            <div class="col-sm-6">
                                <div class="input-group">
                                    @Html.TextBoxFor(model => model.AssetNARMembers[item].NARMember.CompanyName, new { @id = "CompanyName-" + item })
                                </div>
                            </div>
                            <div class="col-sm-6">
                                <div class="input-group">
                                    @Html.ValidationMessageFor(model => model.AssetNARMembers[item].NARMember.CompanyName)
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-sm-6">
                                <div class="input-group">
                                    <label>Full Name</label>
                                    @*@Html.LabelFor(model => model.AssetNARMembers[item].NARMember.FullName)*@
                                </div>
                            </div>
                            <div class="col-sm-6">
                                <div class="input-group">
                                    @Html.DropDownListFor(model => model.AssetNARMembers[item].SelectedNARMemberId, new SelectList(Model.ListingAgents, "Value", "Text", Model.AssetNARMembers[item].SelectedNARMemberId), new { onchange = "fillListingUserInformation(" + @item + ")", @id = "SelectedNarMemberId-" + item })

                                    @Html.CheckBoxFor(x => x.AssetNARMembers[item].NARMember.NotOnList, new { onchange = "showExtraListingAgentBox(" + item + ")", @class = "NotOnList" })
                                    Not on list?
                                    @Html.ValidationMessageFor(model => model.AssetNARMembers[item].NARMember.FullName)
                                </div>
                            </div>
                        </div>

                        <div id="OptionName-@item" style="display: none;">
                            <div class="row">
                                <div class="col-sm-6">
                                    <div class="input-group"><em>Type new listing agent first name here:</em></div>
                                </div>
                                <div class="col-sm-6">
                                    <div class="input-group">
                                        @Html.TextBoxFor(model => model.AssetNARMembers[item].NARMember.FirstName, new { @id = "FirstName-" + item })
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-sm-6">
                                    <div class="input-group"><em>Type new listing agent last name here:</em></div>
                                </div>
                                <div class="col-sm-6">
                                    <div class="input-group">
                                        @Html.TextBoxFor(model => model.AssetNARMembers[item].NARMember.LastName, new { @id = "LastName-" + item })
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-sm-6">
                                <div class="input-group">
                                    <label>Email</label>
                                    @*@Html.LabelFor(model => model.AssetNARMembers[item].NARMember.Email)*@ <span style="color: red;">*</span>
                                </div>
                            </div>
                            <div class="col-sm-6">
                                <div class="input-group">
                                    @Html.TextBoxFor(model => model.AssetNARMembers[item].NARMember.Email, new { @id = "Email-" + item })
                                    @Html.ValidationMessageFor(model => model.AssetNARMembers[item].NARMember.Email)
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-sm-6">
                                <div class="input-group">
                                    <label>Company Address Line1</label>
                                    @* @Html.LabelFor(model => model.AssetNARMembers[item].NARMember.CompanyAddressLine1)*@ <span style="color: red;">*</span>
                                </div>
                            </div>
                            <div class="col-sm-6">
                                <div class="input-group">
                                    @Html.TextBoxFor(model => model.AssetNARMembers[item].NARMember.CompanyAddressLine1, new { @id = "CompanyAddressLine1-" + item })
                                </div>
                            </div>
                            <div class="col-sm-6">
                                <div class="input-group">
                                    @Html.ValidationMessageFor(model => model.AssetNARMembers[item].NARMember.CompanyAddressLine1)
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-sm-6">
                                <div class="input-group">
                                    <label>Company Address Line2</label>
                                    @*@Html.LabelFor(model => model.AssetNARMembers[item].NARMember.CompanyAddressLine2)*@
                                </div>
                            </div>
                            <div class="col-sm-6">
                                <div class="input-group">
                                    @Html.TextBoxFor(model => model.AssetNARMembers[item].NARMember.CompanyAddressLine2, new { @id = "CompanyAddressLine2-" + item })
                                </div>
                            </div>
                            <div class="col-sm-6">
                                <div class="input-group">
                                    @Html.ValidationMessageFor(model => model.AssetNARMembers[item].NARMember.CompanyAddressLine2)
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-sm-6">
                                <div class="input-group">
                                    <label>Company City</label>
                                    @*@Html.LabelFor(model => model.AssetNARMembers[item].NARMember.CompanyCity)*@ <span style="color: red;">*</span>
                                </div>
                            </div>
                            <div class="col-sm-6">
                                <div class="input-group">
                                    @Html.TextBoxFor(model => model.AssetNARMembers[item].NARMember.CompanyCity, new { @id = "CompanyCity-" + item })
                                </div>
                            </div>
                            <div class="col-sm-6">
                                <div class="input-group">
                                    @Html.ValidationMessageFor(model => model.AssetNARMembers[item].NARMember.CompanyCity)
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-sm-6">
                                <div class="input-group">
                                    <label>Company State</label>
                                    @* @Html.LabelFor(model => model.AssetNARMembers[item].NARMember.CompanyState)*@ <span style="color: red;">*</span>
                                </div>
                            </div>
                            <div class="col-sm-6">
                                <div class="input-group">
                                    @Html.TextBoxFor(model => model.AssetNARMembers[item].NARMember.CompanyState, new { @id = "CompanyState-" + item })
                                </div>
                            </div>
                            <div class="col-sm-6">
                                <div class="input-group">
                                    @Html.ValidationMessageFor(model => model.AssetNARMembers[item].NARMember.CompanyState)
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-sm-6">
                                <div class="input-group">
                                    <label>Company Zip</label>
                                    @*@Html.LabelFor(model => model.AssetNARMembers[item].NARMember.CompanyZip)*@ <span style="color: red;">*</span>
                                </div>
                            </div>
                            <div class="col-sm-6">
                                <div class="input-group">
                                    @Html.TextBoxFor(model => model.AssetNARMembers[item].NARMember.CompanyZip, new { @id = "CompanyZip-" + item })
                                </div>
                            </div>
                            <div class="col-sm-6">
                                <div class="input-group">
                                    @Html.ValidationMessageFor(model => model.AssetNARMembers[item].NARMember.CompanyZip)
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-sm-6">
                                <div class="input-group">
                                    <label>Work Phone Number</label>
                                    @* @Html.LabelFor(model => model.AssetNARMembers[item].NARMember.WorkPhoneNumber)*@
                                </div>
                            </div>
                            <div class="col-sm-6">
                                <div class="input-group">
                                    @Html.TextBoxFor(model => model.AssetNARMembers[item].NARMember.WorkPhoneNumber, new { @id = "WorkPhoneNumber-" + item })
                                </div>
                            </div>
                            <div class="col-sm-6">
                                <div class="input-group">
                                    @Html.ValidationMessageFor(model => model.AssetNARMembers[item].NARMember.WorkPhoneNumber)
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-sm-6">
                                <div class="input-group">
                                    <label>Cell Phone Number</label>
                                    @* @Html.LabelFor(model => model.AssetNARMembers[item].NARMember.CellPhoneNumber)*@
                                </div>
                            </div>
                            <div class="col-sm-6">
                                <div class="input-group">
                                    @Html.TextBoxFor(model => model.AssetNARMembers[item].NARMember.CellPhoneNumber, new { @id = "CellPhoneNumber-" + item })
                                </div>
                            </div>
                            <div class="col-sm-6">
                                <div class="input-group">
                                    @Html.ValidationMessageFor(model => model.AssetNARMembers[item].NARMember.CellPhoneNumber)
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-sm-6">
                                <div class="input-group">
                                    <label>Fax Number</label>
                                    @* @Html.LabelFor(model => model.AssetNARMembers[item].NARMember.FaxNumber)*@
                                </div>
                            </div>
                            <div class="col-sm-6">
                                <div class="input-group">
                                    @Html.TextBoxFor(model => model.AssetNARMembers[item].NARMember.FaxNumber, new { @id = "FaxNumber-" + item })
                                </div>
                            </div>
                            <div class="col-sm-6">
                                <div class="input-group">
                                    @Html.ValidationMessageFor(model => model.AssetNARMembers[item].NARMember.FaxNumber)
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-sm-6">
                                <div class="input-group">
                                    <label>Commission Share Agr</label>
                                    @* @Html.LabelFor(model => model.AssetNARMembers[item].NARMember.CommissionShareAgr)*@
                                </div>
                            </div>
                            <div class="col-sm-6">
                                <div class="input-group" style="padding-top: 5px">
                                    @Html.RadioButtonFor(model => model.AssetNARMembers[item].NARMember.CommissionShareAgr, true, new { onchange = "toggleCommissionDetails(true, " + @item + ")", @class = "csa" }) Yes
                                    @Html.RadioButtonFor(model => model.AssetNARMembers[item].NARMember.CommissionShareAgr, false, new { onchange = "toggleCommissionDetails(false, " + @item + ")", @class = "csa" }) No
                                    @Html.ValidationMessageFor(model => model.AssetNARMembers[item].NARMember.CommissionShareAgr)
                                </div>
                            </div>
                        </div>
                        <div id="commissionDetails-@item" class="commissionDetailItem" style="display: none;">
                            <div class="row">
                                <div class="col-sm-6">
                                    <div class="input-group">
                                        <label>Commission Amount</label>
                                        @*@Html.LabelFor(model => model.AssetNARMembers[item].NARMember.CommissionAmount)*@
                                    </div>
                                </div>
                                <div class="col-sm-6">
                                    <div class="input-group">
                                        @Html.TextBoxFor(model => model.AssetNARMembers[item].NARMember.CommissionAmount, new { @class = "formatNumber" }) %
                                    </div>
                                </div>
                                <div class="col-sm-6">
                                    <div class="input-group">
                                        @Html.ValidationMessageFor(model => model.AssetNARMembers[item].NARMember.CommissionAmount)
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-sm-6">
                                    <div class="input-group">
                                        <label>Date Of Csa Confirm</label>
                                        @*@Html.LabelFor(model => model.AssetNARMembers[item].NARMember.DateOfCsaConfirm)*@
                                    </div>
                                </div>
                                <div class="col-sm-6">
                                    <div class="input-group">
                                        @Html.TextBoxFor(model => model.AssetNARMembers[item].NARMember.DateOfCsaConfirm, new { @class = "datepicker" })
                                        @Html.ValidationMessageFor(model => model.AssetNARMembers[item].NARMember.DateOfCsaConfirm)
                                    </div>
                                </div>
                            </div>
                        </div>
                        <hr />
                    </div>
                }
            </div>
            <input type="button" id="addListingAgent" value="Add Listing Agent" />
            <input type="button" id="removeListingAgent" value="Remove Listing Agent" />
        </div>

        <hr />

        <div class="row">
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.LabelFor(model => model.ProjectName)
                </div>
            </div>
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.TextBoxFor(s => s.ProjectName)
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.LabelFor(model => model.PropertyAddress) <span style="color: red;">*</span>
                </div>
            </div>
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.EditorFor(model => model.PropertyAddress)
                    @Html.ValidationMessageFor(model => model.PropertyAddress)
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.LabelFor(model => model.City) <span style="color: red;">*</span>
                </div>
            </div>
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.EditorFor(model => model.City)
                    @Html.ValidationMessageFor(model => model.City)
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.LabelFor(model => model.State) <span style="color: red;">*</span>
                </div>
            </div>
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.DropDownListFor(model => model.State, Model.States as IEnumerable<SelectListItem>, "---")
                    @Html.ValidationMessageFor(model => model.State)
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.LabelFor(model => model.Zip) <span style="color: red;">*</span>
                </div>
            </div>
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.EditorFor(model => model.Zip)
                    @Html.ValidationMessageFor(model => model.Zip)
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.LabelFor(model => model.County)
                </div>
            </div>
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.EditorFor(model => model.County)
                    @Html.ValidationMessageFor(model => model.County)
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.LabelFor(model => model.LotNumber)
                </div>
            </div>
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.EditorFor(model => model.LotNumber)
                    @Html.ValidationMessageFor(model => model.LotNumber)
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.LabelFor(model => model.Subdivision)
                </div>
            </div>
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.EditorFor(model => model.Subdivision)
                    <input type="checkbox" id="chkSubDiv" name="chkSubDiv" title="Meters & Bounds" />Meters & Bounds
                    @Html.ValidationMessageFor(model => model.Subdivision)
                </div>
            </div>
        </div>
        @*Subdivision*@
        <div class="row">
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.LabelFor(model => model.TaxBookMap)
                </div>
            </div>
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.EditorFor(model => model.TaxBookMap)
                    @Html.ValidationMessageFor(model => model.TaxBookMap)
                </div>
            </div>
        </div>

        <div>
            @if (Model.AssetTaxParcelNumbers != null)
            {
                <div id="taxParcelNumberList" data-count="@Model.AssetTaxParcelNumbers.Count" style="background-color: #f7f7f7;padding: 10px;border: 1px solid #ddd;">
                    @for (int i = 0; i < Model.AssetTaxParcelNumbers.Count; i++)
                    {
                        <div class="iterateTaxParcelNumbers">
                            <div class="row">
                                <div class="col-sm-6">
                                    <div class="input-group">
                                        <label>Tax Parcel Number</label>
                                    </div>
                                </div>
                                <div class="col-sm-6">
                                    <div class="input-group">
                                        @Html.EditorFor(model => model.AssetTaxParcelNumbers[i].TaxParcelNumber)
                                        @Html.ValidationMessageFor(model => model.AssetTaxParcelNumbers[i].TaxParcelNumber)
                                    </div>
                                </div>
                            </div>
                            @Html.HiddenFor(x => x.AssetTaxParcelNumbers[i].AssetId)
                            @Html.HiddenFor(x => x.AssetTaxParcelNumbers[i].AssetTaxParcelNumberId)
                        </div>
                    }
                </div>
            }
            <input type="button" id="addTaxParcelNumber" value="Add Tax Parcel Number" />
            <input type="button" id="removeTaxParcelNumber" value="Remove Tax Parcel Number" />
            <br />
            <br />
        </div>
        <div class="row">
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.LabelFor(model => model.PropertyCondition) <span style="color: red;">*</span>
                </div>
            </div>
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.EnumDropDownList("PropertyCondition", Model.PropertyCondition, "---")
                    @Html.ValidationMessageFor(model => model.PropertyCondition)
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.LabelFor(model => model.GradeClassification)
                </div>
            </div>
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.DropDownListFor(s => s.GradeClassification, @Model.Grades)
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.LabelFor(model => model.OccupancyType) <span style="color: red;">*</span>
                </div>
            </div>
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.EnumDropDownList("OccupancyType", Model.OccupancyType, "---")
                    @Html.ValidationMessageFor(model => model.OccupancyType)
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.LabelFor(model => model.YearBuilt) <span style="color: red;">*</span>
                </div>
            </div>
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.EditorFor(model => model.YearBuilt)
                    @Html.ValidationMessageFor(model => model.YearBuilt)
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.LabelFor(model => model.PropLastUpdatedYear)
                </div>
            </div>
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.EditorFor(model => model.PropLastUpdatedYear) <br />
                    <em>If the value is '0' the Last Updated year is unknown</em>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.LabelFor(s => s.RenovatedByOwner, new { @class = "control-label" })
                </div>
            </div>
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.RadioButtonFor(s => s.RenovatedByOwner, "true", new { onchange = "toggleRenovationsSection(true)" }) Yes
                    @Html.RadioButtonFor(s => s.RenovatedByOwner, "false", new { onchange = "toggleRenovationsSection(false)" }) No
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.LabelFor(model => model.BuildingsCount) <span style="color: red;">*</span>
                </div>
            </div>
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.EditorFor(model => model.BuildingsCount)
                    @Html.ValidationMessageFor(model => model.BuildingsCount)
                </div>
            </div>
        </div>
        @*Number of Buildings*@
        <div class="row">
            @if (Model.AssetType == AssetType.MHP)
            {
                <div class="col-sm-6">
                    <div class="input-group">
                        <label>Total Rentable Sq ft of Apts</label>
                    </div>
                </div>
            }
            else
            {
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(model => model.SquareFeet)
                    </div>
                </div>
            }
            <div class="col-sm-6">
                <div class="input-group" style="line-height: 34px">
                    @Html.TextBoxFor(model => model.SquareFeet, new { @class = "formatNumber", onchange = "calculatePricePer(this)" })
                    @Html.ValidationMessageFor(model => model.SquareFeet)
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-6">
                <div class="input-group" style="line-height: 34px">
                    @Html.LabelFor(model => model.LotSize)
                </div>
            </div>
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.EditorFor(model => model.LotSize) acres
                    @Html.ValidationMessageFor(model => model.LotSize)
                </div>
            </div>
        </div>
        <hr />
        <div class="row">
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.LabelFor(model => model.AnnualPropertyTax)
                </div>
            </div>
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.TextBoxFor(model => model.AnnualPropertyTax, new { @class = "formatNumber" })
                    @Html.ValidationMessageFor(model => model.AnnualPropertyTax)
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.LabelFor(model => model.PropertyTaxYear)
                </div>
            </div>
            <div class="col-sm-6">
                <div class="input-group" style="line-height: 34px">
                    <span class="calculateYear">@Html.DisplayFor(model => model.PropertyTaxYear)@Html.HiddenFor(s => s.PropertyTaxYear)</span>
                    @Html.ValidationMessageFor(model => model.PropertyTaxYear)
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-6">
                <div class="input-group">
                    <label>Calculated Market Value (<a title="[Calculated Market Value is based solely on either (1) comparable sales data provided by the Listing Agent or Seller in their Offering Memorandum, or, in the absence thereof, (2) calculated to the displayed CAP Rate only if the offering price for the asset is TBD by Market.]">CMV</a>)</label>
                </div>
            </div>
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.TextBoxFor(model => model.CurrentBpo, new { @onblur = "calcCapRate()", @class = "formatNumber" })
                    @Html.ValidationMessageFor(model => model.CurrentBpo)
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.LabelFor(model => model.AskingPrice)
                </div>
            </div>
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.TextBoxFor(model => model.AskingPrice, new { @onblur = "calcCapRate()", @class = "formatNumber" })
                    @Html.ValidationMessageFor(model => model.AskingPrice)
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.LabelFor(model => model.IsTBDMarket)
                </div>
            </div>
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.RadioButtonFor(s => s.IsTBDMarket, "true", new { onchange = "toggleActionDetails(true)" }) Yes
                    @Html.RadioButtonFor(s => s.IsTBDMarket, "false", new { onchange = "toggleActionDetails(false)" }) No
                </div>
            </div>
        </div>
        <div class="row" id="auctionDetails">
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.LabelFor(s => s.AuctionDate)
                </div>
            </div>
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.TextBoxFor(s => s.AuctionDate, new { @class = "datepicker" }) <em>MM/dd/yyyy</em>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.LabelFor(s => s.CallforOffersDate)
                </div>
            </div>
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.TextBoxFor(s => s.CallforOffersDate, new { @class = "datepicker" }) <em>MM/dd/yyyy</em>
                </div>
            </div>
        </div>


        @* \\below if condition commented due to Issue EFUOA-05
            @if (Model.AssetType != AssetType.MHP) {*@



        <div class="row">
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.LabelFor(s => s.SellerTerms, new { @class = "control-label" })
                </div>
            </div>
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.EnumDropDownList("SellerTerms", Model.SellerTerms, "---")
                    @Html.ValidationMessageFor(model => model.HasIncome)
                </div>
            </div>
        </div>
        <div class="row" id="sellerTermsOtherDiv">
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.LabelFor(s => s.SellerTermsOther, new { @class = "control-label" })
                </div>
            </div>
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.TextAreaFor(s => s.SellerTermsOther, new { @class = "form-control", @rows = "4", @cols = "95" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.LabelFor(model => model.isParticipateTaxExchange)
                </div>
            </div>
            <div class="col-sm-6">
                <div class="input-group" style="line-height: 34px">
                    @Html.RadioButtonFor(s => s.isParticipateTaxExchange, "true") Yes
                    @Html.RadioButtonFor(s => s.isParticipateTaxExchange, "false") No
                </div>
            </div>
        </div>

        @*}*@
        <div class="row">
            <div class="col-sm-6">
                <div class="input-group">
                    <label>Does this property produce income?</label>
                </div>
            </div>
            <div class="col-sm-6">
                <div class="input-group" style="padding-top: 5px">
                    @Html.RadioButtonFor(s => s.HasIncome, "true", new { onclick = "toggleIncomeReason(false)" }) Yes
                    @Html.RadioButtonFor(s => s.HasIncome, "false", new { onclick = "toggleIncomeReason(true)" }) No
                    @Html.ValidationMessageFor(model => model.HasIncome)
                </div>
            </div>
        </div>
        <div id="incomeDetails">
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(model => model.AnnualGrossIncome)
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.TextBoxFor(model => model.AnnualGrossIncome, new { @onblur = "calcMonthlyIncome(this, 'calculateMonthlyIncome', 'MonthlyGrossIncome')", @class = "formatNumber" })
                        @Html.ValidationMessageFor(model => model.AnnualGrossIncome)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(model => model.MonthlyGrossIncome)
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group" style="line-height: 34px">
                        <span id="calculateMonthlyIncome" class="pad formatNumber">@Model.MonthlyGrossIncome</span>
                        @Html.HiddenFor(s => s.MonthlyGrossIncome)
                    </div>
                </div>
            </div>
        </div>
        <div id="incomeReason" style="display: none;">
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(model => model.HasIncomeReason)
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.TextAreaFor(model => model.HasIncomeReason, new { rows = "4", cols = "40" })
                        @Html.ValidationMessageFor(model => model.HasIncomeReason)
                    </div>
                </div>
            </div>
        </div>

        <hr />

        <div class="row">
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.LabelFor(model => model.ProformaAnnualIncome)
                </div>
            </div>
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.TextBoxFor(model => model.ProformaAnnualIncome, new { @onblur = "calcMonthlyIncome(this, 'calculateProformaMonthlyIncome', 'ProformaMonthlyIncome')", @class = "formatNumber" })
                    @Html.ValidationMessageFor(model => model.ProformaAnnualIncome)
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.LabelFor(model => model.ProformaMonthlyIncome)
                </div>
            </div>
            <div class="col-sm-6">
                <div class="input-group" style="line-height: 34px">
                    <span id="calculateProformaMonthlyIncome" class="pad formatNumber">@Model.ProformaMonthlyIncome</span>
                    @Html.HiddenFor(s => s.ProformaMonthlyIncome)
                    @Html.ValidationMessageFor(model => model.ProformaMonthlyIncome)
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.LabelFor(model => model.ProformaMiscIncome)
                </div>
            </div>
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.TextBoxFor(model => model.ProformaMiscIncome, new { @class = "formatNumber" })
                    @Html.ValidationMessageFor(model => model.ProformaMiscIncome)
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.LabelFor(model => model.CurrentVacancyFac)
                </div>
            </div>
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.TextBoxFor(model => model.CurrentVacancyFac, new { @onblur = "calcCapRate()", @class = "formatNumber" }) %
                    @Html.ValidationMessageFor(model => model.CurrentVacancyFac)
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.LabelFor(model => model.ProformaVacancyFac)
                </div>
            </div>
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.TextBoxFor(model => model.ProformaVacancyFac, new { @class = "formatNumber" }) %
                    @Html.ValidationMessageFor(model => model.ProformaVacancyFac)
                </div>
            </div>
        </div>

        @if (Model.AssetType != AssetType.MHP)
        {
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(model => model.isOfferingMemorandum)
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group" style="line-height: 34px">
                        @Html.RadioButtonFor(s => s.isOfferingMemorandum, "true") Yes
                        @Html.RadioButtonFor(s => s.isOfferingMemorandum, "false") No
                    </div>
                </div>
            </div>
        }


        <div class="row">
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.LabelFor(model => model.ProformaAnnualOperExpenses)
                </div>
            </div>
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.TextBoxFor(model => model.ProformaAnnualOperExpenses, new { @onblur = "calcProformaSGI()", @class = "formatNumber" })
                    @Html.ValidationMessageFor(model => model.ProformaAnnualOperExpenses)
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.LabelFor(model => model.ProformaAoeFactorAsPerOfSGI)
                </div>
            </div>
            <div class="col-sm-6">
                <div class="input-group" style="line-height: 34px">
                    <span id="aoeFactor">@Html.DisplayFor(model => model.ProformaAoeFactorAsPerOfSGI)</span><div style="margin-left: 5px; display: inline">%</div>
                    @Html.HiddenFor(model => model.ProformaAoeFactorAsPerOfSGI)
                </div>
            </div>
        </div>
        <hr />

        @if (Model.AssetType == AssetType.MHP || Model.AssetType == AssetType.MultiFamily)
        {
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        <label>Proforma Pre Tax NOI</label>
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group" style="line-height: 34px">
                        <input type="text" style="border:0" class="pad formatNumber" id="proNOIMHP" readonly>

                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        <label>LP Proforma CAP Rate (%)</label>
                    </div>
                </div>
                @if (cashInvLP == 0)
                {
                    <div class="col-sm-6">
                        <div class="input-group" style="line-height: 34px">
                            <input type="text" id="capLP" style="border:0; width:34px" readonly><div style="margin-left: 5px; display: inline">%</div>
                            @*<span id="capLP">N/A</span><div style="margin-left: 5px; display: inline"></div>*@
                            @Html.HiddenFor(s => s.CashInvestmentApy)
                            @Html.ValidationMessageFor(model => model.CashInvestmentApy)
                        </div>
                    </div>
                }
                else
                {
                    <div class="col-sm-6">
                        <div class="input-group" style="line-height: 34px">
                            <input type="text" id="capinvLP" style="border:0; width:34px" readonly><div style="margin-left: 5px; display: inline">%</div>
                            @Html.HiddenFor(s => s.CashInvestmentApy)
                            @Html.ValidationMessageFor(model => model.CashInvestmentApy)
                        </div>
                    </div>

                }
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        <label>CMV Proforma CAP Rate (%)</label>
                    </div>
                </div>
                @if (cashInvCAP == 0)
                {
                    <div class="col-sm-6">
                        <div class="input-group" style="line-height: 34px">
                            <input type="text" id="capCAP" style="border:0; width:34px" readonly><div style="margin-left: 5px; display: inline">%</div>
                            @*<span id="capCAP">N/A</span><div style="margin-left: 5px; display: inline"></div>*@
                            @Html.HiddenFor(s => s.CashInvestmentApy)
                            @Html.ValidationMessageFor(model => model.CashInvestmentApy)
                        </div>
                    </div>
                }
                else
                {
                    <div class="col-sm-6">
                        <div class="input-group" style="line-height: 34px">
                            <input type="text" id="capinvCAP" style="border:0; width:34px" readonly><div style="margin-left: 5px; display: inline">%</div>
                            @Html.HiddenFor(s => s.CashInvestmentApy)
                            @Html.ValidationMessageFor(model => model.CashInvestmentApy)
                        </div>
                    </div>

                }
            </div>
        }
        else
        {
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        <label>Proforma Pre Tax NOI</label>
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group" style="line-height: 34px">
                        <input type="text" style="border:0" class="pad formatNumber" id="proNOIOther" readonly>

                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        <label>LP Proforma CAP Rate (%)</label>
                    </div>
                </div>
                @if (cashInvLP == 0)
                {
                    <div class="col-sm-6">
                        <div class="input-group" style="line-height: 34px">
                            <input type="text" id="capLPCOM" style="border:0; width:34px" readonly><div style="margin-left: 5px; display: inline">%</div>

                            @Html.HiddenFor(s => s.CashInvestmentApy)
                            @Html.ValidationMessageFor(model => model.CashInvestmentApy)
                        </div>
                    </div>
                }
                else
                {
                    <div class="col-sm-6">
                        <div class="input-group" style="line-height: 34px">
                            <input type="text" id="capinvLPCOM" style="border:0; width:34px" readonly><div style="margin-left: 5px; display: inline">%</div>
                            @Html.HiddenFor(s => s.CashInvestmentApy)
                            @Html.ValidationMessageFor(model => model.CashInvestmentApy)
                        </div>
                    </div>

                }
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        <label>CMV Proforma CAP Rate (%)</label>
                    </div>
                </div>
                @if (cashInvCAP == 0)
                {
                    <div class="col-sm-6">
                        <div class="input-group" style="line-height: 34px">
                            <input type="text" id="capCAPCOM" style="border:0; width:34px" readonly><div style="margin-left: 5px; display: inline">%</div>

                            @Html.HiddenFor(s => s.CashInvestmentApy)
                            @Html.ValidationMessageFor(model => model.CashInvestmentApy)
                        </div>
                    </div>
                }
                else
                {
                    <div class="col-sm-6">
                        <div class="input-group" style="line-height: 34px">
                            <input type="text" id="capinvCAPCOM" style="border:0; width:34px" readonly><div style="margin-left: 5px; display: inline">%</div>
                            @Html.HiddenFor(s => s.CashInvestmentApy)
                            @Html.ValidationMessageFor(model => model.CashInvestmentApy)
                        </div>
                    </div>

                }
            </div>
        }
        <hr />
        <div class="row">
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.LabelFor(model => model.isPendingForeclosure)
                </div>
            </div>
            <div class="col-sm-6">
                <div class="input-group" style="line-height: 34px">
                    @Html.RadioButtonFor(s => s.isPendingForeclosure, "true", new { onchange = "toggleForeclosureSection(true)" }) Yes
                    @Html.RadioButtonFor(s => s.isPendingForeclosure, "false", new { onchange = "toggleForeclosureSection(false)" }) No
                </div>
            </div>
        </div>
        <div id="foreclosureSection" style="display: none;">
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(model => model.ForeclosureLender)
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group" style="line-height: 34px">
                        @Html.EditorFor(model => model.ForeclosureLender)
                        @Html.ValidationMessageFor(model => model.ForeclosureLender)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(model => model.ForeclosurePosition)
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group" style="line-height: 34px">
                        @Html.EnumDropDownList("Position", Model.ForeclosurePosition, "---")
                        @Html.ValidationMessageFor(model => model.ForeclosurePosition)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(model => model.ForeclosureRecordNumber)
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group" style="line-height: 34px">
                        @Html.EditorFor(model => model.ForeclosureRecordNumber)
                        @Html.ValidationMessageFor(model => model.ForeclosureRecordNumber)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(model => model.ForeclosureOriginalMortgageAmount)
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group" style="line-height: 34px">
                        @Html.TextBoxFor(model => model.ForeclosureOriginalMortgageAmount, new { @class = "formatNumber" })
                        @Html.ValidationMessageFor(model => model.ForeclosureOriginalMortgageAmount)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(model => model.ForeclosureOriginalMortageDate)
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group" style="line-height: 34px">
                        @Html.EditorFor(model => model.ForeclosureOriginalMortageDate, new { @class = "datepicker" }) <em>MM/dd/yyyy</em>
                        @Html.ValidationMessageFor(model => model.ForeclosureOriginalMortageDate)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(model => model.ForeclosureSaleDate)
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group" style="line-height: 34px">
                        @Html.EditorFor(model => model.ForeclosureSaleDate, new { @class = "datepicker" }) <em>MM/dd/yyyy</em>
                        @Html.ValidationMessageFor(model => model.ForeclosureSaleDate)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(model => model.ForeclosureRecordDate)
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group" style="line-height: 34px">
                        @Html.EditorFor(model => model.ForeclosureRecordDate, new { @class = "datepicker" }) <em>MM/dd/yyyy</em>
                        @Html.ValidationMessageFor(model => model.ForeclosureRecordDate)
                    </div>
                </div>
            </div>
        </div>
        @if (isCorpAdmin)
        {
            <hr />
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(model => model.GeneralComments)
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.TextAreaFor(model => model.GeneralComments, 4, 40, new { maxlength = "1000", onkeyup = "countChar(this);" }) <span id="charcounter" style="font-style: italic;">0 characters <em>(1000 characters maximum)</em></span><br />
                    </div>
                </div>
            </div>
        }
        else
        {
            @Html.HiddenFor(model => model.ClosingDate)

            @Html.HiddenFor(model => model.OwnerHoldingCompany)
            @Html.HiddenFor(model => model.OwnerHoldingCompanyId)
            @Html.HiddenFor(model => model.OwnerHoldingCompanyFirst)
            @Html.HiddenFor(model => model.OwnerHoldingCompanyLast)
            @Html.HiddenFor(model => model.OwnerHoldingCompanyAddressLine1)
            @Html.HiddenFor(model => model.OwnerHoldingCompanyAddressLine2)
            @Html.HiddenFor(model => model.OwnerHoldingCompanyCity)
            @Html.HiddenFor(model => model.OwnerHoldingCompanyState)
            @Html.HiddenFor(model => model.OwnerHoldingCompanyZip)
            @Html.HiddenFor(model => model.OwnerHoldingCompanyCountry)
            @Html.HiddenFor(model => model.OwnerHoldingCompanyWorkPhone)
            @Html.HiddenFor(model => model.OwnerHoldingCompanyCellPhone)
            @Html.HiddenFor(model => model.OwnerHoldingCompanyFax)
            @Html.HiddenFor(model => model.OwnerHoldingCompanyEmail)
            @Html.HiddenFor(model => model.OwnerHoldingCompanyIsActive)

            @Html.HiddenFor(model => model.OwnerOperatingCompany)
            @Html.HiddenFor(model => model.OwnerOperatingCompanyId)
            @Html.HiddenFor(model => model.OwnerOperatingCompanyFirst)
            @Html.HiddenFor(model => model.OwnerOperatingCompanyLast)
            @Html.HiddenFor(model => model.OwnerOperatingCompanyAddressLine1)
            @Html.HiddenFor(model => model.OwnerOperatingCompanyAddressLine2)
            @Html.HiddenFor(model => model.OwnerOperatingCompanyCity)
            @Html.HiddenFor(model => model.OwnerOperatingCompanyState)
            @Html.HiddenFor(model => model.OwnerOperatingCompanyZip)
            @Html.HiddenFor(model => model.OwnerOperatingCompanyCountry)
            @Html.HiddenFor(model => model.OwnerOperatingCompanyWorkPhone)
            @Html.HiddenFor(model => model.OwnerOperatingCompanyCellPhone)
            @Html.HiddenFor(model => model.OwnerOperatingCompanyFax)
            @Html.HiddenFor(model => model.OwnerOperatingCompanyEmail)
            @Html.HiddenFor(model => model.OwnerOperatingCompanyIsActive)

            @Html.HiddenFor(model => model.OwnerHoldingCompanyUpdate)
            @Html.HiddenFor(model => model.OwnerHoldingCompanyUpdateId)
            @Html.HiddenFor(model => model.OwnerHoldingCompanyUpdateFirst)
            @Html.HiddenFor(model => model.OwnerHoldingCompanyUpdateLast)
            @Html.HiddenFor(model => model.OwnerHoldingCompanyUpdateAddressLine1)
            @Html.HiddenFor(model => model.OwnerHoldingCompanyUpdateAddressLine2)
            @Html.HiddenFor(model => model.OwnerHoldingCompanyUpdateCity)
            @Html.HiddenFor(model => model.OwnerHoldingCompanyUpdateState)
            @Html.HiddenFor(model => model.OwnerHoldingCompanyUpdateZip)
            @Html.HiddenFor(model => model.OwnerHoldingCompanyUpdateCountry)
            @Html.HiddenFor(model => model.OwnerHoldingCompanyUpdateWorkPhone)
            @Html.HiddenFor(model => model.OwnerHoldingCompanyUpdateCellPhone)
            @Html.HiddenFor(model => model.OwnerHoldingCompanyUpdateFax)
            @Html.HiddenFor(model => model.OwnerHoldingCompanyUpdateEmail)
            @Html.HiddenFor(model => model.OwnerHoldingCompanyUpdateIsActive)

            @Html.HiddenFor(model => model.OwnerOperatingCompanyUpdate)
            @Html.HiddenFor(model => model.OwnerOperatingCompanyUpdateId)
            @Html.HiddenFor(model => model.OwnerOperatingCompanyUpdateFirst)
            @Html.HiddenFor(model => model.OwnerOperatingCompanyUpdateLast)
            @Html.HiddenFor(model => model.OwnerOperatingCompanyUpdateAddressLine1)
            @Html.HiddenFor(model => model.OwnerOperatingCompanyUpdateAddressLine2)
            @Html.HiddenFor(model => model.OwnerOperatingCompanyUpdateCity)
            @Html.HiddenFor(model => model.OwnerOperatingCompanyUpdateState)
            @Html.HiddenFor(model => model.OwnerOperatingCompanyUpdateZip)
            @Html.HiddenFor(model => model.OwnerOperatingCompanyUpdateCountry)
            @Html.HiddenFor(model => model.OwnerOperatingCompanyUpdateWorkPhone)
            @Html.HiddenFor(model => model.OwnerOperatingCompanyUpdateCellPhone)
            @Html.HiddenFor(model => model.OwnerOperatingCompanyUpdateFax)
            @Html.HiddenFor(model => model.OwnerOperatingCompanyUpdateEmail)
            @Html.HiddenFor(model => model.OwnerOperatingCompanyUpdateIsActive)


            @Html.HiddenFor(model => model.ActualClosingDate)
            @Html.HiddenFor(model => model.CommissionShareAgr)
            @Html.HiddenFor(model => model.DateCommissionToEpiReceived)
        }
        <div class="row">
            <div class="col-sm-12">
                @if (Model.User.UserType == UserType.CREBroker || Model.User.UserType == UserType.CRELender || Model.User.UserType == UserType.Investor)
                {
                    <input type="button" class="btn btn-warning" onclick="if (confirm('If you click ok, you will lose all of the data you entered and be returned to the manage assets page.')) goBackSeller()" value="Cancel" />
                }
                else
                {
                    <input type="button" class="btn btn-warning" onclick="if (confirm('If you click ok, you will lose all of the data you entered and be returned to the manage assets page.')) goBack()" value="Cancel" />
                }
                <input type="button" class="btn btn-primary" onclick="nextTab($(this));" value="Next" />
            </div>
        </div>
    </div>

    @if (Model.IsPaper)
    {
        <div class="tab-pane" id="paper">
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.TypeOfNote, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.DropDownListFor(model => model.TypeOfNote, Model.NoteTypes as IEnumerable<SelectListItem>)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.NoteOrigination, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.TextBoxFor(s => s.NoteOrigination, new { @class = "control-label datepicker" }) <em>MM/dd/yyyy</em>
                        @Html.ValidationMessageFor(model => model.NoteOrigination)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.NotePrincipal, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.TextBoxFor(s => s.NotePrincipal, new { @class = "control-label formatNumber" })
                        @Html.ValidationMessageFor(model => model.NotePrincipal)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.CurrentNotePrincipal, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.TextBoxFor(s => s.CurrentNotePrincipal, new { @class = "control-label formatNumber" })
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        <label class="control-label"><a title="Broker Price Opinion" style="color: blue; text-decoration: underline;">BPO</a> of Property at Note Origination (if available)</label>

                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.TextBoxFor(s => s.BPOOfProperty, new { @class = "control-label formatNumber" })
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.HasCopyOfAppraisal, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.DropDownListFor(model => model.HasCopyOfAppraisal, Model.PropertyAppraisals as IEnumerable<SelectListItem>, "---")
                        @Html.HiddenFor(model => Model.DocumentNumberOriAppr)
                        <div id="apprdocumentDisplay">
                            @if (Model.DocumentNumberOriAppr > -1)
                            {
                                <a target='_blank' href="@Url.Action("DownloadDocument", "Admin", new { fileName = Model.Documents[Model.DocumentNumberOriAppr].FileName, assetId = Model.AssetId, contentType = Model.Documents[Model.DocumentNumberOriAppr].ContentType, title = Model.Documents[Model.DocumentNumberOriAppr].Title })">@(Model.Documents[Model.DocumentNumberOriAppr].Title)</a>
                            }
                        </div>
                        <div id="apprdocumentExists">
                            <em> Original Appraisal already exists, please <b>delete the existing file from Documents tab and save first</b> if it needs to be re-uploaded</em>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row" id="uploadApprModal">



                <div id="uploadAppr" class="layer1" style="width: 100%; margin-bottom: 20px;">
                    <h4 style="margin-top: 10px;">Upload PDF Document</h4>
                    <div class="docSetup" id="uploadDiv" style="width: 100%; background-color: #f7f7f7; border: 1px solid #eee; padding: 15px;">
                        <div class="row">
                            <div class="col-sm-12">
                                @Html.TextBoxFor(s => s.SelectedDocumentType, new { @class = "control-label", @Value = "OriginalAppraisal", id = "UploadDocumentType1", @type = "hidden" })

                            </div>
                            <div class="col-sm-12">
                                <label>Title</label>
                            </div>
                            <div class="col-sm-12">
                                <input type="text" id="docTitle1" value="Original Appraisal " style="width: 250px;" />
                            </div>
                            <div class="col-sm-12">
                                <label>Description</label>
                            </div>
                            <div class="col-sm-12">
                                <textarea cols="10" rows="4" id="docDescription1"></textarea>
                            </div>
                            <div class="col-sm-6">
                                <input type="file" data-type="" id="docUploadAppr" value="Upload" />
                            </div>
                            <div class="col-sm-6">
                                <div id="progressbarAppr" class="progressbar">
                                </div>
                            </div>
                            <div class="col-sm-12">
                                <div style="color: #18904B; margin-top: 20px; display: none;" id="successDoc1">
                                    <i class="fa fa-check" style="color: #27ae60; margin-right: 3px; display: inline;"></i>
                                    <span>The file has been uploaded successfully.</span>
                                </div>
                            </div>
                        </div>

                    </div>
                </div>




            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.MethodOfAppraisal, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.DropDownListFor(model => model.MethodOfAppraisal, Model.AppraisalMethods as IEnumerable<SelectListItem>, "---")
                    </div>
                </div>
            </div>
            <div class="row" id="appraisalOtherDiv" style="display:none">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.AppraisalOther, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.TextAreaFor(s => s.AppraisalOther, new { @class = "form-control", @rows = "2", @cols = "95", @maxlength = "25" })
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.NoteInterestRate, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.TextBoxFor(s => s.NoteInterestRate, new { @class = "control-label formatNumber" }) %
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.PaymentAmount, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.TextBoxFor(s => s.PaymentAmount, new { @class = "control-label formatNumber", onchange = "addCommasToInput(this)" })
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.PaymentFrequency, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.DropDownListFor(model => model.PaymentFrequency, Model.PaymentFrequencies as IEnumerable<SelectListItem>, "---")
                    </div>
                </div>
            </div>
            <div class="row" id="frequencyOtherDiv" style="display:none">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.FrequencyOther, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.TextAreaFor(s => s.FrequencyOther, new { @class = "form-control", @rows = "2", @cols = "95", @maxlength = "25" })
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.TypeOfMTGInstrument, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.DropDownListFor(model => model.TypeOfMTGInstrument, Model.MortgageInstruments as IEnumerable<SelectListItem>, "---")
                    </div>
                </div>
            </div>
            <div class="row" id="instrumentOtherDiv" style="display:none">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.InstrumentOther, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.TextAreaFor(s => s.InstrumentOther, new { @class = "form-control", @rows = "2", @cols = "95", @maxlength = "25" })
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.AmortType, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.DropDownListFor(model => model.AmortType, Model.AmortTypes as IEnumerable<SelectListItem>, "---")
                    </div>
                </div>
            </div>
            <div class="row" id="amortOtherDiv" style="display:none">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.AmortOther, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.TextAreaFor(s => s.AmortOther, new { @class = "form-control", @rows = "2", @cols = "95", @maxlength = "25" })
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.PaymentsMadeOnNote, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.TextBoxFor(s => s.PaymentsMadeOnNote, new { @class = "control-label formatNumber" })
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.PaymentsRemainingOnNote, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.TextBoxFor(s => s.PaymentsRemainingOnNote, new { @class = "control-label formatNumber" })
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.IsNoteCurrent, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.RadioButtonFor(s => s.IsNoteCurrent, "true") Yes
                        @Html.RadioButtonFor(s => s.IsNoteCurrent, "false") No
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.LastPaymentRecievedOnNote, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.TextBoxFor(s => s.LastPaymentRecievedOnNote, new { @class = "control-label datepicker" }) <em>MM/dd/yyyy</em>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.NextPaymentOnNote, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.TextBoxFor(s => s.NextPaymentOnNote, new { @class = "control-label datepicker" }) <em>MM/dd/yyyy</em>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.BalloonDateForPayoffOfNote, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.TextBoxFor(s => s.BalloonDateForPayoffOfNote, new { @class = "control-label datepicker" }) <em>MM/dd/yyyy</em>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.SecuringPropertyAppraisal, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.TextBoxFor(s => s.SecuringPropertyAppraisal, new { @class = "control-label formatNumber" })
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.WasPropertyDistressed, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.RadioButtonFor(s => s.WasPropertyDistressed, "true") Yes
                        @Html.RadioButtonFor(s => s.WasPropertyDistressed, "false") No
                        @Html.RadioButtonFor(s => s.WasPropertyDistressed, "false") Unknown
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.PaymentHistory, new { @class = "control-label" })<span style="color: red;">*</span>
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.DropDownListFor(model => model.PaymentHistory, Model.PaymentHistories as IEnumerable<SelectListItem>, "---")
                    </div>
                </div>
            </div>
            <div class="row" id="payHistoryOtherDiv" style="display:none">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.PayHistoryOther, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.TextAreaFor(s => s.PayHistoryOther, new { @class = "form-control", @rows = "2", @cols = "95", @maxlength = "25" })
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.SellerCarryNoteSalesDate, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.TextBoxFor(s => s.SellerCarryNoteSalesDate, new { @class = "control-label datepicker" }) <em>MM/dd/yyyy</em>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.SellerCarryNotePrice, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.TextBoxFor(s => s.SellerCarryNotePrice, new { @class = "control-label formatNumber" })
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.SellerCarryNoteCashDown, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.TextBoxFor(s => s.SellerCarryNoteCashDown, new { @class = "control-label formatNumber" })
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.NoteServicedByAgent, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group" style="padding-top: 5px">
                        @Html.RadioButtonFor(s => s.NoteServicedByAgent, "true") Yes
                        @Html.RadioButtonFor(s => s.NoteServicedByAgent, "false") No
                        @Html.ValidationMessageFor(model => model.NoteServicedByAgent)
                    </div>
                </div>
            </div>
            <hr />

            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.IsNoteWRAP, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group" style="padding-top: 5px">
                        @Html.RadioButtonFor(s => s.IsNoteWRAP, "true", new { onclick = "toggleWRAP(true)" }) Yes
                        @Html.RadioButtonFor(s => s.IsNoteWRAP, "false", new { onclick = "toggleWRAP(false)" }) No
                        @Html.ValidationMessageFor(model => model.IsNoteWRAP)
                    </div>
                </div>
            </div>

            <div id="wrapFields">
                <div class="row">
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.LabelFor(s => s.OriginalPrincipalBalanceWRAP, new { @class = "control-label" })
                        </div>
                    </div>
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.TextBoxFor(s => s.OriginalPrincipalBalanceWRAP, new { @class = "control-label formatNumber" })
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.LabelFor(s => s.TotalMonthlyPaymentWRAP, new { @class = "control-label" })
                        </div>
                    </div>
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.TextBoxFor(s => s.TotalMonthlyPaymentWRAP, new { @class = "control-label formatNumber" })
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.LabelFor(s => s.FirstmortgageBalanceWRAP, new { @class = "control-label" })
                        </div>
                    </div>
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.TextBoxFor(s => s.FirstmortgageBalanceWRAP, new { @class = "control-label formatNumber" })
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.LabelFor(s => s.FirstInterestRateWRAP, new { @class = "control-label" })
                        </div>
                    </div>
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.TextBoxFor(s => s.FirstInterestRateWRAP, new { @class = "control-label formatNumber" })
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.LabelFor(s => s.FirstMortgagePaymentWRAP, new { @class = "control-label" })
                        </div>
                    </div>
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.TextBoxFor(s => s.FirstMortgagePaymentWRAP, new { @class = "control-label formatNumber" })
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.LabelFor(s => s.SecondMortgageBalanceWRAP, new { @class = "control-label" })
                        </div>
                    </div>
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.TextBoxFor(s => s.SecondMortgageBalanceWRAP, new { @class = "control-label formatNumber" })
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.LabelFor(s => s.SecondInterestRateWRAP, new { @class = "control-label" })
                        </div>
                    </div>
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.TextBoxFor(s => s.SecondInterestRateWRAP, new { @class = "control-label formatNumber" })
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.LabelFor(s => s.SecondMortgagePaymentWRAP, new { @class = "control-label" })
                        </div>
                    </div>
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.TextBoxFor(s => s.SecondMortgagePaymentWRAP, new { @class = "control-label formatNumber" })
                        </div>
                    </div>
                </div>
            </div>
            @if (Model.User.UserType == UserType.CREBroker || Model.User.UserType == UserType.CRELender || Model.User.UserType == UserType.Investor)
            {
                <input type="button" class="btn btn-warning" onclick="if (confirm('If you click ok, you will lose all of the data you entered and be returned to the manage assets page.')) goBackSeller()" value="Cancel" />
            }
            else
            {
                <input type="button" class="btn btn-warning" onclick="if (confirm('If you click ok, you will lose all of the data you entered and be returned to the manage assets page.')) goBack()" value="Cancel" />
            }
            <input type="button" class="btn btn-default" onclick="backTab($(this));" value="Back" />
            <input type="button" class="btn btn-primary" onclick="nextTab($(this));" value="Next" />
        </div>
    }

    <div class="tab-pane" id="details">
        @if (Model.GetType() == typeof(MultiFamilyAssetViewModel))
        {
            if (Model.AssetType == AssetType.MHP)
            {
                <div class="row">
                    <div class="col-sm-6">
                        <div class="input-group">
                            @Html.LabelFor(model => model.NumberRentableSpace)
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="input-group">
                            @Html.EditorFor(model => model.NumberRentableSpace, new { @class = "formatNumber" })
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-6">
                        <div class="input-group">
                            @Html.LabelFor(model => model.NumberNonRentableSpace)
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="input-group">
                            @Html.EditorFor(model => model.NumberNonRentableSpace, new { @class = "formatNumber" })
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-6">
                        <div class="input-group">
                            @Html.LabelFor(model => model.NumberParkOwnedMH)
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="input-group">
                            @Html.EditorFor(model => model.NumberParkOwnedMH, new { @class = "formatNumber", onchange = "calculatePricePer(this)" })
                        </div>
                    </div>
                </div>
            }
            else
            {
                <div class="row">
                    <div class="col-sm-6">
                        <div class="input-group">
                            <label>Number of Units</label>
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="input-group">
                            @Html.TextBoxFor(model => (model as MultiFamilyAssetViewModel).TotalUnits, new { @class = "formatNumber", onchange = "calculatePricePer(this)" })
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="input-group">
                            @Html.ValidationMessageFor(model => (model as MultiFamilyAssetViewModel).TotalUnits)
                        </div>
                    </div>
                </div>
            }





            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        <label>Number of Parking Spaces</label>
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.TextBoxFor(model => (model as MultiFamilyAssetViewModel).ParkingSpaces)
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.ValidationMessageFor(model => (model as MultiFamilyAssetViewModel).ParkingSpaces)
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        <label>Number of Covered Parking Spaces</label>
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.TextBoxFor(model => (model as MultiFamilyAssetViewModel).CoveredParkingSpaces)
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.ValidationMessageFor(model => (model as MultiFamilyAssetViewModel).CoveredParkingSpaces)
                    </div>
                </div>
            </div>@*
                if (Model.AssetType == AssetType.MHP)
                {
                <div class="row">
                    <div class="col-sm-6">
                        <div class="input-group">
                            <label>Number of Spaces</label>
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="input-group">
                            @Html.TextBoxFor(model => (model as MultiFamilyAssetViewModel).ParkOwnedMHUnits, new { @class = "formatNumber", onChange = "calculatePricePer(this)" })
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="input-group">
                            @Html.ValidationMessageFor(model => (model as MultiFamilyAssetViewModel).ParkOwnedMHUnits)
                        </div>
                    </div>
                </div>
                }*@




            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(model => (model as MultiFamilyAssetViewModel).OccupancyPercentage)
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.EditorFor(model => (model as MultiFamilyAssetViewModel).OccupancyPercentage)<div style="margin-left: 5px; display: inline">%</div>
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.ValidationMessageFor(model => (model as MultiFamilyAssetViewModel).OccupancyPercentage)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(model => model.LastReportedOccupancyDate)
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.TextBoxFor(model => model.LastReportedOccupancyDate, new { @class = "datepicker" }) <em>MM/dd/yyyy</em>


                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.ValidationMessageFor(model => model.LastReportedOccupancyDate)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        <label>Electric Meter Method</label>
                        <span style="color: red;">*</span>
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.EnumDropDownList("ElectricMeterMethod", (Model as MultiFamilyAssetViewModel).ElectricMeterMethod, "---")
                        &nbsp;&nbsp;@Html.TextBoxFor(model => (Model as MultiFamilyAssetViewModel).ElectricMeterServProvider, new { @placeholder = "Service Provider" })
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.ValidationMessageFor(model => (model as MultiFamilyAssetViewModel).ElectricMeterMethod)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(model => (model as MultiFamilyAssetViewModel).GasMeterMethod) <span style="color: red;">*</span>
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.EnumDropDownList("GasMeterMethod", (Model as MultiFamilyAssetViewModel).GasMeterMethod, "---")
                        &nbsp;&nbsp;@Html.TextBoxFor(model => (Model as MultiFamilyAssetViewModel).GasMeterServProvider, new { @placeholder = "Service Provider" })
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.ValidationMessageFor(model => (model as MultiFamilyAssetViewModel).GasMeterMethod)
                    </div>
                </div>
            </div>
            <div>
                @if (Model.AssetType == AssetType.MHP)
                {
                    <h4>MHP Space Rental Mix:</h4>

                    <div id="mhpUnitSpecList" data-unitcount="@((Model as MultiFamilyAssetViewModel).MHPUnitSpecifications.Count)">
                        @for (int item = 0; item < (Model as MultiFamilyAssetViewModel).MHPUnitSpecifications.Count(); item++)
                        {
                            <div class="unitSpecDiv" id="mhpUnitSpecDivSingle">
                                <div class="row">
                                    <div class="col-sm-6">
                                        <div class="input-group">
                                            @Html.LabelFor(model => (model as MultiFamilyAssetViewModel).MHPUnitSpecifications[item].NumberSingleWide)
                                        </div>
                                    </div>
                                    <div class="col-sm-6">
                                        <div class="input-group">
                                            @Html.TextBoxFor(model => (model as MultiFamilyAssetViewModel).MHPUnitSpecifications[item].NumberSingleWide, new { @class = "formatNumber" })
                                            @Html.ValidationMessageFor(model => (model as MultiFamilyAssetViewModel).MHPUnitSpecifications[item].NumberSingleWide)
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-sm-6">
                                        <div class="input-group">
                                            @Html.LabelFor(model => (model as MultiFamilyAssetViewModel).MHPUnitSpecifications[item].CurrentSingleBaseRent)
                                        </div>
                                    </div>
                                    <div class="col-sm-6">
                                        <div class="input-group">
                                            @Html.TextBoxFor(model => (model as MultiFamilyAssetViewModel).MHPUnitSpecifications[item].CurrentSingleBaseRent, new { onchange = "addCommasToInput(this)", @class = "formatNumber" })
                                            @Html.ValidationMessageFor(model => (model as MultiFamilyAssetViewModel).MHPUnitSpecifications[item].CurrentSingleBaseRent)
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-sm-6">
                                        <div class="input-group">
                                            @Html.LabelFor(model => (model as MultiFamilyAssetViewModel).MHPUnitSpecifications[item].NumberSingleWideOwned)
                                        </div>
                                    </div>
                                    <div class="col-sm-6">
                                        <div class="input-group">
                                            @Html.TextBoxFor(model => (model as MultiFamilyAssetViewModel).MHPUnitSpecifications[item].NumberSingleWideOwned, new { onchange = "addCommasToInput(this)", @class = "formatNumber" })
                                            @Html.ValidationMessageFor(model => (model as MultiFamilyAssetViewModel).MHPUnitSpecifications[item].NumberSingleWideOwned)
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-sm-6">
                                        <div class="input-group">
                                            @Html.LabelFor(model => (model as MultiFamilyAssetViewModel).MHPUnitSpecifications[item].CurrentSingleOwnedBaseRent)
                                        </div>
                                    </div>
                                    <div class="col-sm-6">
                                        <div class="input-group">
                                            @Html.TextBoxFor(model => (model as MultiFamilyAssetViewModel).MHPUnitSpecifications[item].CurrentSingleOwnedBaseRent, new { onchange = "addCommasToInput(this)", @class = "formatNumber" })
                                            @Html.ValidationMessageFor(model => (model as MultiFamilyAssetViewModel).MHPUnitSpecifications[item].CurrentSingleOwnedBaseRent)
                                        </div>
                                    </div>
                                </div>
                                <hr />
                            </div>
                            if ((Model as MultiFamilyAssetViewModel).MHPUnitSpecifications[item].NumberDoubleWide > 0)
                            {
                                <div class="unitSpecDiv" id="mhpUnitSpecDivDouble2">
                                    <div class="row">
                                        <div class="col-sm-6">
                                            <div class="input-group">
                                                @Html.LabelFor(model => (model as MultiFamilyAssetViewModel).MHPUnitSpecifications[item].NumberDoubleWide)
                                            </div>
                                        </div>
                                        <div class="col-sm-6">
                                            <div class="input-group">
                                                @Html.TextBoxFor(model => (model as MultiFamilyAssetViewModel).MHPUnitSpecifications[item].NumberDoubleWide, new { @class = "formatNumber" })
                                                @Html.ValidationMessageFor(model => (model as MultiFamilyAssetViewModel).MHPUnitSpecifications[item].NumberDoubleWide)
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-sm-6">
                                            <div class="input-group">
                                                @Html.LabelFor(model => (model as MultiFamilyAssetViewModel).MHPUnitSpecifications[item].CurrentDoubleBaseRent)
                                            </div>
                                        </div>
                                        <div class="col-sm-6">
                                            <div class="input-group">
                                                @Html.TextBoxFor(model => (model as MultiFamilyAssetViewModel).MHPUnitSpecifications[item].CurrentDoubleBaseRent, new { onchange = "addCommasToInput(this)", @class = "formatNumber" })
                                                @Html.ValidationMessageFor(model => (model as MultiFamilyAssetViewModel).MHPUnitSpecifications[item].CurrentDoubleBaseRent)
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-sm-6">
                                            <div class="input-group">
                                                @Html.LabelFor(model => (model as MultiFamilyAssetViewModel).MHPUnitSpecifications[item].NumberDoubleWideOwned)
                                            </div>
                                        </div>
                                        <div class="col-sm-6">
                                            <div class="input-group">
                                                @Html.TextBoxFor(model => (model as MultiFamilyAssetViewModel).MHPUnitSpecifications[item].NumberDoubleWideOwned, new { onchange = "addCommasToInput(this)", @class = "formatNumber" })
                                                @Html.ValidationMessageFor(model => (model as MultiFamilyAssetViewModel).MHPUnitSpecifications[item].NumberDoubleWideOwned)
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-sm-6">
                                            <div class="input-group">
                                                @Html.LabelFor(model => (model as MultiFamilyAssetViewModel).MHPUnitSpecifications[item].CurrentDoubleOwnedBaseRent)
                                            </div>
                                        </div>
                                        <div class="col-sm-6">
                                            <div class="input-group">
                                                @Html.TextBoxFor(model => (model as MultiFamilyAssetViewModel).MHPUnitSpecifications[item].CurrentDoubleOwnedBaseRent, new { onchange = "addCommasToInput(this)", @class = "formatNumber" })
                                                @Html.ValidationMessageFor(model => (model as MultiFamilyAssetViewModel).MHPUnitSpecifications[item].CurrentDoubleOwnedBaseRent)
                                            </div>
                                        </div>
                                    </div>
                                    <hr />
                                </div>
                                <input type="button" id="removeDoubleSpecs2" value="Remove Double Space Spec" />
                            }
                            if ((Model as MultiFamilyAssetViewModel).MHPUnitSpecifications[item].NumberTripleWide > 0)
                            {
                                <div class="unitSpecDiv" id="mhpUnitSpecDivTriple2">
                                    <div class="row">
                                        <div class="col-sm-6">
                                            <div class="input-group">
                                                @Html.LabelFor(model => (model as MultiFamilyAssetViewModel).MHPUnitSpecifications[item].NumberTripleWide)
                                            </div>
                                        </div>
                                        <div class="col-sm-6">
                                            <div class="input-group">
                                                @Html.TextBoxFor(model => (model as MultiFamilyAssetViewModel).MHPUnitSpecifications[item].NumberTripleWide, new { @class = "formatNumber" })
                                                @Html.ValidationMessageFor(model => (model as MultiFamilyAssetViewModel).MHPUnitSpecifications[item].NumberTripleWide)
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-sm-6">
                                            <div class="input-group">
                                                @Html.LabelFor(model => (model as MultiFamilyAssetViewModel).MHPUnitSpecifications[item].CurrentTripleBaseRent)
                                            </div>
                                        </div>
                                        <div class="col-sm-6">
                                            <div class="input-group">
                                                @Html.TextBoxFor(model => (model as MultiFamilyAssetViewModel).MHPUnitSpecifications[item].CurrentTripleBaseRent, new { onchange = "addCommasToInput(this)", @class = "formatNumber" })
                                                @Html.ValidationMessageFor(model => (model as MultiFamilyAssetViewModel).MHPUnitSpecifications[item].CurrentTripleBaseRent)
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-sm-6">
                                            <div class="input-group">
                                                @Html.LabelFor(model => (model as MultiFamilyAssetViewModel).MHPUnitSpecifications[item].NumberTripleWideOwned)
                                            </div>
                                        </div>
                                        <div class="col-sm-6">
                                            <div class="input-group">
                                                @Html.TextBoxFor(model => (model as MultiFamilyAssetViewModel).MHPUnitSpecifications[item].NumberTripleWideOwned, new { onchange = "addCommasToInput(this)", @class = "formatNumber" })
                                                @Html.ValidationMessageFor(model => (model as MultiFamilyAssetViewModel).MHPUnitSpecifications[item].NumberTripleWideOwned)
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-sm-6">
                                            <div class="input-group">
                                                @Html.LabelFor(model => (model as MultiFamilyAssetViewModel).MHPUnitSpecifications[item].CurrentTripleOwnedBaseRent)
                                            </div>
                                        </div>
                                        <div class="col-sm-6">
                                            <div class="input-group">
                                                @Html.TextBoxFor(model => (model as MultiFamilyAssetViewModel).MHPUnitSpecifications[item].CurrentTripleOwnedBaseRent, new { onchange = "addCommasToInput(this)", @class = "formatNumber" })
                                                @Html.ValidationMessageFor(model => (model as MultiFamilyAssetViewModel).MHPUnitSpecifications[item].CurrentTripleOwnedBaseRent)
                                            </div>
                                        </div>
                                    </div>
                                    <hr />
                                </div>
                                <input type="button" id="removeTripleSpecs2" value="Remove Triple Space Spec" />
                            }
                            <br />
                            if ((Model as MultiFamilyAssetViewModel).MHPUnitSpecifications[item].NumberDoubleWide < 1)
                            {
                                <div class="unitSpecDiv" id="mhpUnitSpecDivDouble" style="display: none">
                                    <div class="row">
                                        <div class="col-sm-6">
                                            <div class="input-group">
                                                @Html.LabelFor(model => (model as MultiFamilyAssetViewModel).MHPUnitSpecifications[item].NumberDoubleWide)
                                            </div>
                                        </div>
                                        <div class="col-sm-6">
                                            <div class="input-group">
                                                @Html.TextBoxFor(model => (model as MultiFamilyAssetViewModel).MHPUnitSpecifications[item].NumberDoubleWide, new { @class = "formatNumber" })
                                                @Html.ValidationMessageFor(model => (model as MultiFamilyAssetViewModel).MHPUnitSpecifications[item].NumberDoubleWide)
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-sm-6">
                                            <div class="input-group">
                                                @Html.LabelFor(model => (model as MultiFamilyAssetViewModel).MHPUnitSpecifications[item].CurrentDoubleBaseRent)
                                            </div>
                                        </div>
                                        <div class="col-sm-6">
                                            <div class="input-group">
                                                @Html.TextBoxFor(model => (model as MultiFamilyAssetViewModel).MHPUnitSpecifications[item].CurrentDoubleBaseRent, new { onchange = "addCommasToInput(this)", @class = "formatNumber" })
                                                @Html.ValidationMessageFor(model => (model as MultiFamilyAssetViewModel).MHPUnitSpecifications[item].CurrentDoubleBaseRent)
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-sm-6">
                                            <div class="input-group">
                                                @Html.LabelFor(model => (model as MultiFamilyAssetViewModel).MHPUnitSpecifications[item].NumberDoubleWideOwned)
                                            </div>
                                        </div>
                                        <div class="col-sm-6">
                                            <div class="input-group">
                                                @Html.TextBoxFor(model => (model as MultiFamilyAssetViewModel).MHPUnitSpecifications[item].NumberDoubleWideOwned, new { onchange = "addCommasToInput(this)", @class = "formatNumber" })
                                                @Html.ValidationMessageFor(model => (model as MultiFamilyAssetViewModel).MHPUnitSpecifications[item].NumberDoubleWideOwned)
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-sm-6">
                                            <div class="input-group">
                                                @Html.LabelFor(model => (model as MultiFamilyAssetViewModel).MHPUnitSpecifications[item].CurrentDoubleOwnedBaseRent)
                                            </div>
                                        </div>
                                        <div class="col-sm-6">
                                            <div class="input-group">
                                                @Html.TextBoxFor(model => (model as MultiFamilyAssetViewModel).MHPUnitSpecifications[item].CurrentDoubleOwnedBaseRent, new { onchange = "addCommasToInput(this)", @class = "formatNumber" })
                                                @Html.ValidationMessageFor(model => (model as MultiFamilyAssetViewModel).MHPUnitSpecifications[item].CurrentDoubleOwnedBaseRent)
                                            </div>
                                        </div>
                                    </div>
                                    <hr />
                                </div>
                                <input type="button" id="addDoubleSpecs" value="Add a Double Space Spec" />
                                <input type="button" id="removeDoubleSpecs" value="Remove Double Space Spec" style="display: none" />
                            }
                            if ((Model as MultiFamilyAssetViewModel).MHPUnitSpecifications[item].NumberTripleWide < 1)
                            {
                                <div class="unitSpecDiv" id="mhpUnitSpecDivTriple" style="display: none">
                                    <div class="row">
                                        <div class="col-sm-6">
                                            <div class="input-group">
                                                @Html.LabelFor(model => (model as MultiFamilyAssetViewModel).MHPUnitSpecifications[item].NumberTripleWide)
                                            </div>
                                        </div>
                                        <div class="col-sm-6">
                                            <div class="input-group">
                                                @Html.TextBoxFor(model => (model as MultiFamilyAssetViewModel).MHPUnitSpecifications[item].NumberTripleWide, new { @class = "formatNumber" })
                                                @Html.ValidationMessageFor(model => (model as MultiFamilyAssetViewModel).MHPUnitSpecifications[item].NumberTripleWide)
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-sm-6">
                                            <div class="input-group">
                                                @Html.LabelFor(model => (model as MultiFamilyAssetViewModel).MHPUnitSpecifications[item].CurrentTripleBaseRent)
                                            </div>
                                        </div>
                                        <div class="col-sm-6">
                                            <div class="input-group">
                                                @Html.TextBoxFor(model => (model as MultiFamilyAssetViewModel).MHPUnitSpecifications[item].CurrentTripleBaseRent, new { onchange = "addCommasToInput(this)", @class = "formatNumber" })
                                                @Html.ValidationMessageFor(model => (model as MultiFamilyAssetViewModel).MHPUnitSpecifications[item].CurrentTripleBaseRent)
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-sm-6">
                                            <div class="input-group">
                                                @Html.LabelFor(model => (model as MultiFamilyAssetViewModel).MHPUnitSpecifications[item].NumberTripleWideOwned)
                                            </div>
                                        </div>
                                        <div class="col-sm-6">
                                            <div class="input-group">
                                                @Html.TextBoxFor(model => (model as MultiFamilyAssetViewModel).MHPUnitSpecifications[item].NumberTripleWideOwned, new { onchange = "addCommasToInput(this)", @class = "formatNumber" })
                                                @Html.ValidationMessageFor(model => (model as MultiFamilyAssetViewModel).MHPUnitSpecifications[item].NumberTripleWideOwned)
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-sm-6">
                                            <div class="input-group">
                                                @Html.LabelFor(model => (model as MultiFamilyAssetViewModel).MHPUnitSpecifications[item].CurrentTripleOwnedBaseRent)
                                            </div>
                                        </div>
                                        <div class="col-sm-6">
                                            <div class="input-group">
                                                @Html.TextBoxFor(model => (model as MultiFamilyAssetViewModel).MHPUnitSpecifications[item].CurrentTripleOwnedBaseRent, new { onchange = "addCommasToInput(this)", @class = "formatNumber" })
                                                @Html.ValidationMessageFor(model => (model as MultiFamilyAssetViewModel).MHPUnitSpecifications[item].CurrentTripleOwnedBaseRent)
                                            </div>
                                        </div>
                                    </div>
                                    <hr />
                                </div>
                                <input type="button" id="addTripleSpecs" value="Add a Triple Space Spec" />
                                <input type="button" id="removeTripleSpecs" value="Remove Triple Space Spec" style="display: none" />
                            }
                            <input type="button" id="addDoubleSpecs2" value="Add a Double Space Spec" style="display: none" />
                            <br />
                            <input type="button" id="addTripleSpecs2" value="Add a Triple Space Spec" style="display: none" />
                            <br />
                        }
                    </div>
                    <label>Apt/Misc Unit Mix:</label>
                    <div id="unitSpecList" data-unitcount="@((Model as MultiFamilyAssetViewModel).UnitSpecifications.Count)">
                        @for (int item = 0; item < (Model as MultiFamilyAssetViewModel).UnitSpecifications.Count(); item++)
                        {
                            <div class="unitSpecDiv">
                                <div class="row">
                                    <div class="col-sm-6">
                                        <div class="input-group">
                                            <label>Number of Non-MH rental Units</label>
                                        </div>
                                    </div>
                                    <div class="col-sm-6">
                                        <div class="input-group">
                                            @Html.TextBoxFor(model => (model as MultiFamilyAssetViewModel).UnitSpecifications[item].CountOfUnits, new { @class = "formatNumber" })
                                            @Html.ValidationMessageFor(model => (model as MultiFamilyAssetViewModel).UnitSpecifications[item].CountOfUnits)
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-sm-6">
                                        <div class="input-group">
                                            @Html.LabelFor(model => (model as MultiFamilyAssetViewModel).UnitSpecifications[item].BedCount)
                                        </div>
                                    </div>
                                    <div class="col-sm-6">
                                        <div class="input-group">
                                            @Html.EnumDropDownList("UnitSpecifications[" + item + "].BedCount", (Model as MultiFamilyAssetViewModel).UnitSpecifications[item].BedCount)
                                            @Html.ValidationMessageFor(model => (model as MultiFamilyAssetViewModel).UnitSpecifications[item].BedCount)
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-sm-6">
                                        <div class="input-group">
                                            @Html.LabelFor(model => (model as MultiFamilyAssetViewModel).UnitSpecifications[item].BathCount)
                                        </div>
                                    </div>
                                    <div class="col-sm-6">
                                        <div class="input-group">
                                            @Html.EnumDropDownList("UnitSpecifications[" + item + "].BathCount", (Model as MultiFamilyAssetViewModel).UnitSpecifications[item].BathCount)
                                            @Html.ValidationMessageFor(model => (model as MultiFamilyAssetViewModel).UnitSpecifications[item].BathCount)
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-sm-6">
                                        <div class="input-group">
                                            @Html.LabelFor(model => (model as MultiFamilyAssetViewModel).UnitSpecifications[item].UnitBaseRent)
                                        </div>
                                    </div>
                                    <div class="col-sm-6">
                                        <div class="input-group">
                                            @Html.TextBoxFor(model => (model as MultiFamilyAssetViewModel).UnitSpecifications[item].UnitBaseRent, new { onchange = "addCommasToInput(this)", @class = "formatNumber" })
                                            @Html.ValidationMessageFor(model => (model as MultiFamilyAssetViewModel).UnitSpecifications[item].UnitBaseRent)
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-sm-6">
                                        <div class="input-group">
                                            @Html.LabelFor(model => (model as MultiFamilyAssetViewModel).UnitSpecifications[item].UnitSquareFeet)
                                        </div>
                                    </div>
                                    <div class="col-sm-6">
                                        <div class="input-group">
                                            @Html.TextBoxFor(model => (model as MultiFamilyAssetViewModel).UnitSpecifications[item].UnitSquareFeet, new { onchange = "addCommasToInput(this)", @class = "formatNumber" })
                                            @Html.ValidationMessageFor(model => (model as MultiFamilyAssetViewModel).UnitSpecifications[item].UnitSquareFeet)
                                        </div>
                                    </div>
                                </div>
                                <hr />
                            </div>
                        }
                    </div>
                }
                else
                {
                    <label>Unit Mix:</label>
                    <div id="unitSpecList" data-unitcount="@((Model as MultiFamilyAssetViewModel).UnitSpecifications.Count)">
                        @for (int item = 0; item < (Model as MultiFamilyAssetViewModel).UnitSpecifications.Count(); item++)
                        {
                            <div class="unitSpecDiv">
                                <div class="row">
                                    <div class="col-sm-6">
                                        <div class="input-group">
                                            @Html.LabelFor(model => (model as MultiFamilyAssetViewModel).UnitSpecifications[item].CountOfUnits)
                                        </div>
                                    </div>
                                    <div class="col-sm-6">
                                        <div class="input-group">
                                            @Html.TextBoxFor(model => (model as MultiFamilyAssetViewModel).UnitSpecifications[item].CountOfUnits, new { @class = "formatNumber" })
                                            @Html.ValidationMessageFor(model => (model as MultiFamilyAssetViewModel).UnitSpecifications[item].CountOfUnits)
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-sm-6">
                                        <div class="input-group">
                                            @Html.LabelFor(model => (model as MultiFamilyAssetViewModel).UnitSpecifications[item].BedCount)
                                        </div>
                                    </div>
                                    <div class="col-sm-6">
                                        <div class="input-group">
                                            @Html.EnumDropDownList("UnitSpecifications[" + item + "].BedCount", (Model as MultiFamilyAssetViewModel).UnitSpecifications[item].BedCount)
                                            @Html.ValidationMessageFor(model => (model as MultiFamilyAssetViewModel).UnitSpecifications[item].BedCount)
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-sm-6">
                                        <div class="input-group">
                                            @Html.LabelFor(model => (model as MultiFamilyAssetViewModel).UnitSpecifications[item].BathCount)
                                        </div>
                                    </div>
                                    <div class="col-sm-6">
                                        <div class="input-group">
                                            @Html.EnumDropDownList("UnitSpecifications[" + item + "].BathCount", (Model as MultiFamilyAssetViewModel).UnitSpecifications[item].BathCount)
                                            @Html.ValidationMessageFor(model => (model as MultiFamilyAssetViewModel).UnitSpecifications[item].BathCount)
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-sm-6">
                                        <div class="input-group">
                                            @Html.LabelFor(model => (model as MultiFamilyAssetViewModel).UnitSpecifications[item].UnitBaseRent)
                                        </div>
                                    </div>
                                    <div class="col-sm-6">
                                        <div class="input-group">
                                            @Html.TextBoxFor(model => (model as MultiFamilyAssetViewModel).UnitSpecifications[item].UnitBaseRent, new { onchange = "addCommasToInput(this)", @class = "formatNumber" })
                                            @Html.ValidationMessageFor(model => (model as MultiFamilyAssetViewModel).UnitSpecifications[item].UnitBaseRent)
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-sm-6">
                                        <div class="input-group">
                                            @Html.LabelFor(model => (model as MultiFamilyAssetViewModel).UnitSpecifications[item].UnitSquareFeet)
                                        </div>
                                    </div>
                                    <div class="col-sm-6">
                                        <div class="input-group">
                                            @Html.TextBoxFor(model => (model as MultiFamilyAssetViewModel).UnitSpecifications[item].UnitSquareFeet, new { onchange = "addCommasToInput(this)", @class = "formatNumber" })
                                            @Html.ValidationMessageFor(model => (model as MultiFamilyAssetViewModel).UnitSpecifications[item].UnitSquareFeet)
                                        </div>
                                    </div>
                                </div>
                                <hr />
                            </div>
                        }
                    </div>
                }

                <br />
                <input type="button" id="addUnitSpecs" value="Add a Unit Specification" />
                <input type="button" id="removeUnitSpecs" value="Remove Last" />
                <hr />
            </div>

            if (Model.AssetType == AssetType.MHP)
            {
                <div class="row">
                    <div class="col-sm-6">
                        <div class="input-group">
                            @Html.LabelFor(model => (model as MultiFamilyAssetViewModel).MHPDetails)
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="input-group layer1">
                            @if (@ViewBag.MFMHPCnt > 0)
                            {
                                <p class="detailsHeading"><b>MHP</b> @ViewBag.MFMHPSel/@ViewBag.MFMHPCnt <a style="float: right; color: white; font-size: medium">-</a> <a style="float: right; color: white; font-size: medium">/</a> <a style="float: right; color: white; font-size: medium">+</a></p>
                                <div class="detailsContent">
                                    @Html.CheckBoxList("MHPDetails", ViewBag.MFMHPPropertyDetails as IEnumerable<SelectListItem>)
                                </div>}
                            @if (@ViewBag.MFArchCnt1 > 0)
                            {
                                <p class="detailsHeading"><b>MHP Community Buildings</b> @ViewBag.MFArchSel1/@ViewBag.MFArchCnt1 <a style="float: right; color: white; font-size: medium">-</a> <a style="float: right; color: white; font-size: medium">/</a> <a style="float: right; color: white; font-size: medium">+</a></p>
                                <div class="detailsContent">
                                    @Html.CheckBoxList("MHPDetails", ViewBag.MFArchPropertyDetails1 as IEnumerable<SelectListItem>)
                                </div> }
                            @*@if(@ViewBag.MFArchCnt > 0)
                                {
                                <p class="detailsHeading"><b>MF Architecture</b> @ViewBag.MFArchSel/@ViewBag.MFArchCnt <a style="float:right;color:white;font-size:medium">-</a> <a style="float:right;color:white;font-size:medium">/</a> <a style="float:right; color:white;font-size:medium">+</a></p>
                                <div class="detailsContent">@Html.CheckBoxList("MHPDetails", ViewBag.MFArchPropertyDetails as IEnumerable<SelectListItem>)
                                </div> }*@
                            @if (@ViewBag.MFFComplCnt > 0)
                            {
                                <p class="detailsHeading"><b>Complex Features</b> @ViewBag.MFComplSel/@ViewBag.MFFComplCnt <a style="float: right; color: white; font-size: medium">-</a> <a style="float: right; color: white; font-size: medium">/</a> <a style="float: right; color: white; font-size: medium">+</a></p>
                                <div class="detailsContent">
                                    @Html.CheckBoxList("MHPDetails", ViewBag.MFComplPropertyDetails as IEnumerable<SelectListItem>)
                                </div>}
                            @if (@ViewBag.MFGenCnt > 0)
                            {
                                <p class="detailsHeading"><b>General Features</b> @ViewBag.MFGenSel/@ViewBag.MFGenCnt <a style="float: right; color: white; font-size: medium">-</a> <a style="float: right; color: white; font-size: medium">/</a> <a style="float: right; color: white; font-size: medium">+</a></p>
                                <div class="detailsContent">
                                    @Html.CheckBoxList("MHPDetails", ViewBag.MFGenPropertyDetails as IEnumerable<SelectListItem>)
                                </div>}
                            @if (@ViewBag.MFSecuCnt > 0)
                            {
                                <p class="detailsHeading"><b>Security Features</b> @ViewBag.MFSecuSel/@ViewBag.MFSecuCnt <a style="float: right; color: white; font-size: medium">-</a> <a style="float: right; color: white; font-size: medium">/</a> <a style="float: right; color: white; font-size: medium">+</a></p>
                                <div class="detailsContent">
                                    @Html.CheckBoxList("MHPDetails", ViewBag.MFSecuPropertyDetails as IEnumerable<SelectListItem>)
                                </div>}
                            @if (@ViewBag.MFParkCnt > 0)
                            {
                                <p class="detailsHeading"><b>Parking Features</b> @ViewBag.MFParkSel/@ViewBag.MFParkCnt <a style="float: right; color: white; font-size: medium">-</a> <a style="float: right; color: white; font-size: medium">/</a> <a style="float: right; color: white; font-size: medium">+</a></p>
                                <div class="detailsContent">
                                    @Html.CheckBoxList("MHPDetails", ViewBag.MFParkingPropertyDetails as IEnumerable<SelectListItem>)
                                </div>}
                            @if (@ViewBag.MFConstCnt > 0)
                            {
                                <p class="detailsHeading"><b>Community Building Construction Detail</b>  @ViewBag.MFConstSel/@ViewBag.MFConstCnt <a style="float: right; color: white; font-size: medium">-</a> <a style="float: right; color: white; font-size: medium">/</a> <a style="float: right; color: white; font-size: medium">+</a></p>
                                <div class="detailsContent">
                                    @Html.CheckBoxList("MHPDetails", ViewBag.MFConstPropertyDetails as IEnumerable<SelectListItem>)
                                </div>}
                            @if (@ViewBag.MFHVACCnt > 0)
                            {
                                <p class="detailsHeading"><b>Community Building HVAC Detail</b>  @ViewBag.MFHVACSel/@ViewBag.MFHVACCnt <a style="float: right; color: white; font-size: medium">-</a> <a style="float: right; color: white; font-size: medium">/</a> <a style="float: right; color: white; font-size: medium">+</a></p>
                                <div class="detailsContent">
                                    @Html.CheckBoxList("MHPDetails", ViewBag.MFHVACPropertyDetails as IEnumerable<SelectListItem>)
                                </div>}
                            @if (@ViewBag.MFPropCnt > 0)
                            {
                                <p class="detailsHeading"><b>Property Updates</b>  @ViewBag.MFPropSel/@ViewBag.MFPropCnt <a style="float: right; color: white; font-size: medium">-</a> <a style="float: right; color: white; font-size: medium">/</a> <a style="float: right; color: white; font-size: medium">+</a></p>
                                <div class="detailsContent">
                                    @Html.CheckBoxList("MHPDetails", ViewBag.MFPropPropertyDetails as IEnumerable<SelectListItem>)
                                </div>}
                            @if (@ViewBag.MFRoofCnt > 0)
                            {
                                <p class="detailsHeading"><b>Community Building Roofing Detail</b> @ViewBag.MFRoofSel/@ViewBag.MFRoofCnt <a style="float: right; color: white; font-size: medium">-</a> <a style="float: right; color: white; font-size: medium">/</a> <a style="float: right; color: white; font-size: medium">+</a></p>
                                <div class="detailsContent">
                                    @Html.CheckBoxList("MHPDetails", ViewBag.MFRoofPropertyDetails as IEnumerable<SelectListItem>)
                                </div>}
                            @if (@ViewBag.MFMFCnt > 0)
                            {
                                <p class="detailsHeading"><b>Community Apartment Unit Detail</b> @ViewBag.MFMFlSel/@ViewBag.MFMFCnt <a style="float: right; color: white; font-size: medium">-</a> <a style="float: right; color: white; font-size: medium">/</a> <a style="float: right; color: white; font-size: medium">+</a></p>
                                <div class="detailsContent">
                                    @Html.CheckBoxList("MHPDetails", ViewBag.MFMFPropertyDetails as IEnumerable<SelectListItem>)
                                </div>}
                            @if (@ViewBag.MFKitcCnt > 0)
                            {
                                <p class="detailsHeading"><b>Kitchen Features</b> @ViewBag.MFKitcSel/@ViewBag.MFKitcCnt <a style="float: right; color: white; font-size: medium">-</a> <a style="float: right; color: white; font-size: medium">/</a> <a style="float: right; color: white; font-size: medium">+</a></p>
                                <div class="detailsContent">
                                    @Html.CheckBoxList("MHPDetails", ViewBag.MFKitcPropertyDetails as IEnumerable<SelectListItem>)
                                </div>}
                            @if (@ViewBag.MFIntCnt > 0)
                            {
                                <p class="detailsHeading"><b>Interior Upgrades</b> @ViewBag.MFIntSel/@ViewBag.MFIntCnt <a style="float: right; color: white; font-size: medium">-</a> <a style="float: right; color: white; font-size: medium">/</a> <a style="float: right; color: white; font-size: medium">+</a></p>
                                <div class="detailsContent">
                                    @Html.CheckBoxList("MHPDetails", ViewBag.MFIntPropertyDetails as IEnumerable<SelectListItem>)
                                </div>}
                            @if (@ViewBag.MFExtCnt > 0)
                            {
                                <p class="detailsHeading"><b>Exterior Upgrades</b>  @ViewBag.MFExtlSel/@ViewBag.MFExtCnt <a style="float: right; color: white; font-size: medium">-</a> <a style="float: right; color: white; font-size: medium">/</a> <a style="float: right; color: white; font-size: medium">+</a></p>
                                <div class="detailsContent">
                                    @Html.CheckBoxList("MHPDetails", ViewBag.MFExtPropertyDetails as IEnumerable<SelectListItem>)
                                </div>}
                            @if (@ViewBag.MFTechCnt > 0)
                            {
                                <p class="detailsHeading"><b>Tech Features</b>  @ViewBag.MFTechSel/@ViewBag.MFExtCnt <a style="float: right; color: white; font-size: medium">-</a> <a style="float: right; color: white; font-size: medium">/</a> <a style="float: right; color: white; font-size: medium">+</a></p>
                                <div class="detailsContent">
                                    @Html.CheckBoxList("MHPDetails", ViewBag.MFTechPropertyDetails as IEnumerable<SelectListItem>)
                                </div>}

                        </div>
                    </div>
                </div>
            }
            else
            {
                <div class="row">
                    <div class="col-sm-6">
                        <div class="input-group">
                            @Html.LabelFor(model => (model as MultiFamilyAssetViewModel).MFDetails)
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="input-group layer1">
                            @if (@ViewBag.MFArchCnt > 0)
                            {
                                <p class="detailsHeading"><b>MF Architecture</b>  @ViewBag.MFArchSel/@ViewBag.MFArchCnt <a style="float: right; color: white; font-size: medium">-</a> <a style="float: right; color: white; font-size: medium">/</a> <a style="float: right; color: white; font-size: medium">+</a></p>
                                <div class="detailsContent">
                                    @Html.CheckBoxList("MFDetails", ViewBag.MFArchPropertyDetails as IEnumerable<SelectListItem>)
                                </div>}
                            @if (@ViewBag.MFFComplCnt > 0)
                            {
                                <p class="detailsHeading"><b>Complex Features</b>  @ViewBag.MFComplSel/@ViewBag.MFFComplCnt <a style="float: right; color: white; font-size: medium">-</a> <a style="float: right; color: white; font-size: medium">/</a> <a style="float: right; color: white; font-size: medium">+</a></p>
                                <div class="detailsContent">
                                    @Html.CheckBoxList("MFDetails", ViewBag.MFComplPropertyDetails as IEnumerable<SelectListItem>)
                                </div>}
                            @if (@ViewBag.MFGenCnt > 0)
                            {
                                <p class="detailsHeading"><b>General Features</b>  @ViewBag.MFGenSel/@ViewBag.MFGenCnt <a style="float: right; color: white; font-size: medium">-</a> <a style="float: right; color: white; font-size: medium">/</a> <a style="float: right; color: white; font-size: medium">+</a></p>
                                <div class="detailsContent">
                                    @Html.CheckBoxList("MFDetails", ViewBag.MFGenPropertyDetails as IEnumerable<SelectListItem>)
                                </div>}
                            @if (@ViewBag.MFSecuCnt > 0)
                            {
                                <p class="detailsHeading"><b>Security Features</b> @ViewBag.MFSecuSel/@ViewBag.MFSecuCnt <a style="float: right; color: white; font-size: medium">-</a> <a style="float: right; color: white; font-size: medium">/</a> <a style="float: right; color: white; font-size: medium">+</a></p>
                                <div class="detailsContent">
                                    @Html.CheckBoxList("MFDetails", ViewBag.MFSecuPropertyDetails as IEnumerable<SelectListItem>)
                                </div>}
                            @if (@ViewBag.MFParkCnt > 0)
                            {
                                <p class="detailsHeading"><b>Parking Features</b>  @ViewBag.MFParkSel/@ViewBag.MFParkCnt <a style="float: right; color: white; font-size: medium">-</a> <a style="float: right; color: white; font-size: medium">/</a> <a style="float: right; color: white; font-size: medium">+</a></p>
                                <div class="detailsContent">
                                    @Html.CheckBoxList("MFDetails", ViewBag.MFParkingPropertyDetails as IEnumerable<SelectListItem>)
                                </div>}
                            @if (@ViewBag.MFConstCnt > 0)
                            {
                                <p class="detailsHeading"><b>Community Building Construction Detail</b>  @ViewBag.MFConstSel/@ViewBag.MFConstCnt <a style="float: right; color: white; font-size: medium">-</a> <a style="float: right; color: white; font-size: medium">/</a> <a style="float: right; color: white; font-size: medium">+</a></p>
                                <div class="detailsContent">
                                    @Html.CheckBoxList("MFDetails", ViewBag.MFConstPropertyDetails as IEnumerable<SelectListItem>)
                                </div>}
                            @if (@ViewBag.MFHVACCnt > 0)
                            {
                                <p class="detailsHeading"><b>Community Building HVAC Detail</b>  @ViewBag.MFHVACSel/@ViewBag.MFHVACCnt <a style="float: right; color: white; font-size: medium">-</a> <a style="float: right; color: white; font-size: medium">/</a> <a style="float: right; color: white; font-size: medium">+</a></p>
                                <div class="detailsContent">
                                    @Html.CheckBoxList("MFDetails", ViewBag.MFHVACPropertyDetails as IEnumerable<SelectListItem>)
                                </div>}
                            @if (@ViewBag.MFPropCnt > 0)
                            {
                                <p class="detailsHeading"><b>Property Updates</b>   @ViewBag.MFPropSel/@ViewBag.MFPropCnt <a style="float: right; color: white; font-size: medium">-</a> <a style="float: right; color: white; font-size: medium">/</a> <a style="float: right; color: white; font-size: medium">+</a></p>
                                <div class="detailsContent">
                                    @Html.CheckBoxList("MFDetails", ViewBag.MFPropPropertyDetails as IEnumerable<SelectListItem>)
                                </div>}
                            @if (@ViewBag.MFRoofCnt > 0)
                            {
                                <p class="detailsHeading"><b>Community Building Roofing Detail</b>   @ViewBag.MFRoofSel/@ViewBag.MFRoofCnt <a style="float: right; color: white; font-size: medium">-</a> <a style="float: right; color: white; font-size: medium">/</a> <a style="float: right; color: white; font-size: medium">+</a></p>
                                <div class="detailsContent">
                                    @Html.CheckBoxList("MFDetails", ViewBag.MFRoofPropertyDetails as IEnumerable<SelectListItem>)
                                </div>}
                            @if (@ViewBag.MFMFCnt > 0)
                            {
                                <p class="detailsHeading"><b>Community Apartment Unit Detail</b>  @ViewBag.MFMFlSel/@ViewBag.MFMFCnt <a style="float: right; color: white; font-size: medium">-</a> <a style="float: right; color: white; font-size: medium">/</a> <a style="float: right; color: white; font-size: medium">+</a></p>
                                <div class="detailsContent">
                                    @Html.CheckBoxList("MFDetails", ViewBag.MFMFPropertyDetails as IEnumerable<SelectListItem>)
                                </div>}
                            @if (@ViewBag.MFKitcCnt > 0)
                            {
                                <p class="detailsHeading"><b>Kitchen Features</b>  @ViewBag.MFKitcSel/@ViewBag.MFKitcCnt <a style="float: right; color: white; font-size: medium">-</a> <a style="float: right; color: white; font-size: medium">/</a> <a style="float: right; color: white; font-size: medium">+</a></p>
                                <div class="detailsContent">
                                    @Html.CheckBoxList("MFDetails", ViewBag.MFKitcPropertyDetails as IEnumerable<SelectListItem>)
                                </div>}
                            @if (@ViewBag.MFIntCnt > 0)
                            {
                                <p class="detailsHeading"><b>Interior Upgrades</b>   @ViewBag.MFIntSel/@ViewBag.MFIntCnt <a style="float: right; color: white; font-size: medium">-</a> <a style="float: right; color: white; font-size: medium">/</a> <a style="float: right; color: white; font-size: medium">+</a></p>
                                <div class="detailsContent">
                                    @Html.CheckBoxList("MFDetails", ViewBag.MFIntPropertyDetails as IEnumerable<SelectListItem>)
                                </div>}
                            @if (@ViewBag.MFExtCnt > 0)
                            {
                                <p class="detailsHeading"><b>Exterior Upgrades</b>   @ViewBag.MFExtlSel/@ViewBag.MFExtCnt <a style="float: right; color: white; font-size: medium">-</a> <a style="float: right; color: white; font-size: medium">/</a> <a style="float: right; color: white; font-size: medium">+</a></p>
                                <div class="detailsContent">
                                    @Html.CheckBoxList("MFDetails", ViewBag.MFExtPropertyDetails as IEnumerable<SelectListItem>)
                                </div>}
                            @if (@ViewBag.MFTechCnt > 0)
                            {
                                <p class="detailsHeading"><b>Tech Features</b>  @ViewBag.MFTechSel/@ViewBag.MFTechCnt <a style="float: right; color: white; font-size: medium">-</a> <a style="float: right; color: white; font-size: medium">/</a> <a style="float: right; color: white; font-size: medium">+</a></p>
                                <div class="detailsContent">
                                    @Html.CheckBoxList("MFDetails", ViewBag.MFTechPropertyDetails as IEnumerable<SelectListItem>)
                                </div>}

                        </div>
                    </div>
                </div>
            }
        }

        else if (Model.GetType() == typeof(CommercialAssetViewModel))
        {

            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(model => (model as CommercialAssetViewModel).Type) <span style="color: red;">*</span>
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.EnumDropDownList("Type", (Model as CommercialAssetViewModel).Type, "---")
                        @Html.ValidationMessageFor(model => (model as CommercialAssetViewModel).Type)
                    </div>
                </div>
            </div>
            @*<div class="row">
                    <div class="col-sm-6">
                        <div class="input-group">
                            @Html.LabelFor(model => (model as CommercialAssetViewModel).RentableSquareFeet)
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="input-group">
                            @Html.EditorFor(model => (model as CommercialAssetViewModel).RentableSquareFeet)
                            @Html.ValidationMessageFor(model => (model as CommercialAssetViewModel).RentableSquareFeet)
                        </div>
                    </div>
                </div>*@
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        <label class="mfLabel">Number of Parking Spaces</label>
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.TextBoxFor(model => (model as CommercialAssetViewModel).ParkingSpaces, new { @class = "formatNumber" })
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.ValidationMessageFor(model => (model as CommercialAssetViewModel).ParkingSpaces)
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        <label>Number of Covered Parking Spaces</label>
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.TextBoxFor(model => (model as CommercialAssetViewModel).CoveredParkingSpaces, new { @class = "formatNumber" })
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.ValidationMessageFor(model => (model as CommercialAssetViewModel).CoveredParkingSpaces)
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(model => (model as CommercialAssetViewModel).ProformaSgi)
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.TextBoxFor(model => (model as CommercialAssetViewModel).ProformaSgi, new { @class = "formatNumber" })
                        @Html.ValidationMessageFor(model => (model as CommercialAssetViewModel).ProformaSgi)
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(model => (model as CommercialAssetViewModel).ProformaAnnualNoi)
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.TextBoxFor(model => (model as CommercialAssetViewModel).ProformaAnnualNoi, new { @class = "formatNumber" })
                        @Html.ValidationMessageFor(model => (model as CommercialAssetViewModel).ProformaAnnualNoi)
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(model => (model as CommercialAssetViewModel).NumberOfTenants)
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.TextBoxFor(model => (model as CommercialAssetViewModel).NumberOfTenants, new { @class = "formatNumber" })
                        @Html.ValidationMessageFor(model => (model as CommercialAssetViewModel).NumberOfTenants)
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(model => (model as CommercialAssetViewModel).HasAAARatedMajorTenant)
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group" style="padding-top: 5px">
                        @Html.RadioButtonFor(model => (model as CommercialAssetViewModel).HasAAARatedMajorTenant, "true", new { onclick = "toggleMajorTenant(true)" }) Yes
                        @Html.RadioButtonFor(model => (model as CommercialAssetViewModel).HasAAARatedMajorTenant, "false", new { onclick = "toggleMajorTenant(false)" }) No
                        @Html.ValidationMessageFor(model => (model as CommercialAssetViewModel).HasAAARatedMajorTenant)
                    </div>
                </div>
            </div>
            <div id="majorTenant">
                <div class="row">
                    <div class="col-sm-6">
                        <div class="input-group">
                            @Html.LabelFor(model => (model as CommercialAssetViewModel).NameOfAAARatedMajorTenant)
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="input-group">
                            @Html.EditorFor(model => (model as CommercialAssetViewModel).NameOfAAARatedMajorTenant)
                            @Html.ValidationMessageFor(model => (model as CommercialAssetViewModel).NameOfAAARatedMajorTenant)
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-6">
                        <div class="input-group">
                            @Html.LabelFor(model => (model as CommercialAssetViewModel).IsMajorTenantAAARated)
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="input-group" style="padding-top: 5px">
                            @Html.RadioButtonFor(model => (model as CommercialAssetViewModel).IsMajorTenantAAARated, "true") Yes
                            @Html.RadioButtonFor(model => (model as CommercialAssetViewModel).IsMajorTenantAAARated, "false") No
                            @Html.ValidationMessageFor(model => (model as CommercialAssetViewModel).IsMajorTenantAAARated)
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-6">
                        <div class="input-group">
                            @Html.LabelFor(model => (model as CommercialAssetViewModel).LeasedSquareFootageByMajorTenant)
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="input-group">
                            @Html.TextBoxFor(model => (model as CommercialAssetViewModel).LeasedSquareFootageByMajorTenant, new { @class = "formatNumber" })
                            @Html.ValidationMessageFor(model => (model as CommercialAssetViewModel).LeasedSquareFootageByMajorTenant)
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-6">
                        <div class="input-group">
                            @Html.LabelFor(model => (model as CommercialAssetViewModel).BaseRentPerSqFtMajorTenant)
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="input-group">
                            @Html.TextBoxFor(model => (model as CommercialAssetViewModel).BaseRentPerSqFtMajorTenant, new { @class = "formatNumber" })
                            @Html.ValidationMessageFor(model => (model as CommercialAssetViewModel).BaseRentPerSqFtMajorTenant)
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(model => (model as CommercialAssetViewModel).CurrentMarkerRentPerSqFt)
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.TextBoxFor(model => (model as CommercialAssetViewModel).CurrentMarkerRentPerSqFt, new { @class = "formatNumber" })
                        @Html.ValidationMessageFor(model => (model as CommercialAssetViewModel).CurrentMarkerRentPerSqFt)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(model => (model as CommercialAssetViewModel).NumberofSuites)
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.TextBoxFor(model => (model as CommercialAssetViewModel).NumberofSuites, new { @class = "formatNumber" })
                        @Html.ValidationMessageFor(model => (model as CommercialAssetViewModel).NumberofSuites)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(model => (model as CommercialAssetViewModel).OccupancyPercentage)
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.EditorFor(model => (model as CommercialAssetViewModel).OccupancyPercentage)<div style="margin-left: 5px; display: inline">%</div>
                        @Html.ValidationMessageFor(model => (model as CommercialAssetViewModel).OccupancyPercentage)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(model => (model as CommercialAssetViewModel).OccupancyDate)
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.EditorFor(model => (model as CommercialAssetViewModel).OccupancyDate)
                        @Html.ValidationMessageFor(model => (model as CommercialAssetViewModel).OccupancyDate)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(model => (model as CommercialAssetViewModel).NumberOfRentableSuites)
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.TextBoxFor(model => (model as CommercialAssetViewModel).NumberOfRentableSuites, new { @class = "formatNumber" })
                        @Html.ValidationMessageFor(model => (model as CommercialAssetViewModel).NumberOfRentableSuites)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(model => (model as CommercialAssetViewModel).VacantSuites) <span style="color: red;">*</span>
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.EnumDropDownList("VacantSuites", (Model as CommercialAssetViewModel).VacantSuites, "---")
                        @Html.ValidationMessageFor(model => (model as CommercialAssetViewModel).VacantSuites)
                    </div>
                </div>
            </div>


            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(model => model.CompleteRentRoll)
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.RadioButtonFor(model => model.CompleteRentRoll, "true", new { style = "margin-top: 10px;" }) Yes
                        @Html.RadioButtonFor(model => model.CompleteRentRoll, "false", new { style = "margin-top: 10px;" }) No
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(model => (model as CommercialAssetViewModel).PropertyDetails)
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group layer1">
                        @if (@ViewBag.CommArchCnt > 0)
                        {
                            <p class="detailsHeading"><b>Architecture</b> @ViewBag.CommArchSel/@ViewBag.CommArchCnt <a style="float: right; color: white; font-size: medium">-</a> <a style="float: right; color: white; font-size: medium">/</a> <a style="float: right; color: white; font-size: medium">+</a></p>
                            <div class="detailsContent">
                                @Html.CheckBoxList("PropertyDetails", ViewBag.CommArchPropertyDetails as IEnumerable<SelectListItem>)
                                @Html.ValidationMessageFor(model => (model as CommercialAssetViewModel).PropertyDetails)
                            </div>
                        }
                        @if (@ViewBag.CommComplCnt > 0)
                        {
                            <p class="detailsHeading"><b>Complex Features</b>  @ViewBag.CommComplSel/@ViewBag.CommComplCnt <a style="float: right; color: white; font-size: medium">-</a> <a style="float: right; color: white; font-size: medium">/</a> <a style="float: right; color: white; font-size: medium">+</a></p>
                            <div class="detailsContent">
                                @Html.CheckBoxList("PropertyDetails", ViewBag.CommComplPropertyDetails as IEnumerable<SelectListItem>)
                                @Html.ValidationMessageFor(model => (model as CommercialAssetViewModel).PropertyDetails)
                            </div>
                        }
                        @if (@ViewBag.CommGenCnt > 0)
                        {
                            <p class="detailsHeading"><b>General Features</b>  @ViewBag.CommGenSel/@ViewBag.CommGenCnt <a style="float: right; color: white; font-size: medium">-</a> <a style="float: right; color: white; font-size: medium">/</a> <a style="float: right; color: white; font-size: medium">+</a></p>
                            <div class="detailsContent">
                                @Html.CheckBoxList("PropertyDetails", ViewBag.CommGenPropertyDetails as IEnumerable<SelectListItem>)
                                @Html.ValidationMessageFor(model => (model as CommercialAssetViewModel).PropertyDetails)
                            </div>}
                        @if (@ViewBag.CommSecuCnt > 0)
                        {
                            <p class="detailsHeading"><b>Security Features</b> @ViewBag.CommSecuSel/@ViewBag.CommSecuCnt <a style="float: right; color: white; font-size: medium">-</a> <a style="float: right; color: white; font-size: medium">/</a> <a style="float: right; color: white; font-size: medium">+</a></p>
                            <div class="detailsContent">
                                @Html.CheckBoxList("PropertyDetails", ViewBag.CommSecuPropertyDetails as IEnumerable<SelectListItem>)
                                @Html.ValidationMessageFor(model => (model as CommercialAssetViewModel).PropertyDetails)
                            </div>}
                        @if (@ViewBag.CommParkCnt > 0)
                        {
                            <p class="detailsHeading"><b>Parking Features</b>  @ViewBag.CommParkSel/@ViewBag.CommParkCnt <a style="float: right; color: white; font-size: medium">-</a> <a style="float: right; color: white; font-size: medium">/</a> <a style="float: right; color: white; font-size: medium">+</a></p>
                            <div class="detailsContent">
                                @Html.CheckBoxList("PropertyDetails", ViewBag.CommParkingPropertyDetails as IEnumerable<SelectListItem>)
                                @Html.ValidationMessageFor(model => (model as CommercialAssetViewModel).PropertyDetails)
                            </div>}
                        @if (@ViewBag.CommConstCnt > 0)
                        {
                            <p class="detailsHeading"><b>Construction</b> @ViewBag.CommConstSel@ViewBag.CommConstCnt <a style="float: right; color: white; font-size: medium">-</a> <a style="float: right; color: white; font-size: medium">/</a> <a style="float: right; color: white; font-size: medium">+</a></p>
                            <div class="detailsContent">
                                @Html.CheckBoxList("PropertyDetails", ViewBag.CommConstPropertyDetails as IEnumerable<SelectListItem>)
                                @Html.ValidationMessageFor(model => (model as CommercialAssetViewModel).PropertyDetails)
                            </div>}
                        @if (@ViewBag.CommHVACCnt > 0)
                        {
                            <p class="detailsHeading"><b>HVAC</b>  @ViewBag.CommHVACSel/@ViewBag.CommHVACCnt <a style="float: right; color: white; font-size: medium">-</a> <a style="float: right; color: white; font-size: medium">/</a> <a style="float: right; color: white; font-size: medium">+</a></p>
                            <div class="detailsContent">
                                @Html.CheckBoxList("PropertyDetails", ViewBag.CommHVACPropertyDetails as IEnumerable<SelectListItem>)
                                @Html.ValidationMessageFor(model => (model as CommercialAssetViewModel).PropertyDetails)
                            </div>}
                        @if (@ViewBag.CommPropCnt > 0)
                        {
                            <p class="detailsHeading"><b>Property Updates</b>  @ViewBag.CommPropSel/@ViewBag.CommPropCnt <a style="float: right; color: white; font-size: medium">-</a> <a style="float: right; color: white; font-size: medium">/</a> <a style="float: right; color: white; font-size: medium">+</a></p>
                            <div class="detailsContent">
                                @Html.CheckBoxList("PropertyDetails", ViewBag.CommPropPropertyDetails as IEnumerable<SelectListItem>)
                                @Html.ValidationMessageFor(model => (model as CommercialAssetViewModel).PropertyDetails)
                            </div>}
                        @if (@ViewBag.CommRoofCnt > 0)
                        {
                            <p class="detailsHeading"><b>Roofing</b>   @ViewBag.CommRoofSel/@ViewBag.CommRoofCnt <a style="float: right; color: white; font-size: medium">-</a> <a style="float: right; color: white; font-size: medium">/</a> <a style="float: right; color: white; font-size: medium">+</a></p>
                            <div class="detailsContent">
                                @Html.CheckBoxList("PropertyDetails", ViewBag.CommRoofPropertyDetails as IEnumerable<SelectListItem>)
                                @Html.ValidationMessageFor(model => (model as CommercialAssetViewModel).PropertyDetails)
                            </div>}
                        @if (@ViewBag.CommMFCnt > 0)
                        {
                            <p class="detailsHeading"><b>MF Unit</b>  @ViewBag.CommMFlSel/@ViewBag.CommMFCnt <a style="float: right; color: white; font-size: medium">-</a> <a style="float: right; color: white; font-size: medium">/</a> <a style="float: right; color: white; font-size: medium">+</a></p>
                            <div class="detailsContent">
                                @Html.CheckBoxList("PropertyDetails", ViewBag.CommMFPropertyDetails as IEnumerable<SelectListItem>)
                                @Html.ValidationMessageFor(model => (model as CommercialAssetViewModel).PropertyDetails)
                            </div>
                        }
                        @if (@ViewBag.CommKitcCnt > 0)
                        {
                            <p class="detailsHeading"><b>Kitchen Features</b>   @ViewBag.CommKitcSel/@ViewBag.CommKitcCnt <a style="float: right; color: white; font-size: medium">-</a> <a style="float: right; color: white; font-size: medium">/</a> <a style="float: right; color: white; font-size: medium">+</a></p>
                            <div class="detailsContent">
                                @Html.CheckBoxList("PropertyDetails", ViewBag.CommKitcPropertyDetails as IEnumerable<SelectListItem>)
                                @Html.ValidationMessageFor(model => (model as CommercialAssetViewModel).PropertyDetails)
                            </div>}
                        @if (@ViewBag.CommIntCnt > 0)
                        {
                            <p class="detailsHeading"><b>Interior Upgrades</b>  @ViewBag.CommIntSel/@ViewBag.CommIntCnt <a style="float: right; color: white; font-size: medium">-</a> <a style="float: right; color: white; font-size: medium">/</a> <a style="float: right; color: white; font-size: medium">+</a></p>
                            <div class="detailsContent">
                                @Html.CheckBoxList("PropertyDetails", ViewBag.CommIntPropertyDetails as IEnumerable<SelectListItem>)
                                @Html.ValidationMessageFor(model => (model as CommercialAssetViewModel).PropertyDetails)
                            </div>}
                        @if (@ViewBag.CommExtCnt > 0)
                        {
                            <p class="detailsHeading"><b>Exterior Upgrades</b>   @ViewBag.CommExtlSel/@ViewBag.CommExtCnt <a style="float: right; color: white; font-size: medium">-</a> <a style="float: right; color: white; font-size: medium">/</a> <a style="float: right; color: white; font-size: medium">+</a></p>
                            <div class="detailsContent">
                                @Html.CheckBoxList("PropertyDetails", ViewBag.CommExtPropertyDetails as IEnumerable<SelectListItem>)
                                @Html.ValidationMessageFor(model => (model as CommercialAssetViewModel).PropertyDetails)
                            </div>}
                        @if (@ViewBag.CommTechCnt > 0)
                        {
                            <p class="detailsHeading"><b>Tech Features</b>   @ViewBag.CommTechSel/@ViewBag.CommTechCnt <a style="float: right; color: white; font-size: medium">-</a> <a style="float: right; color: white; font-size: medium">/</a> <a style="float: right; color: white; font-size: medium">+</a></p>
                            <div class="detailsContent">
                                @Html.CheckBoxList("PropertyDetails", ViewBag.CommTechPropertyDetails as IEnumerable<SelectListItem>)
                                @Html.ValidationMessageFor(model => (model as CommercialAssetViewModel).PropertyDetails)
                            </div>}

                    </div>
                </div>
            </div>
        }
        @if (Model.GetType() == typeof(MultiFamilyAssetViewModel))
        {
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(model => model.CompleteRentRoll)
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.RadioButtonFor(model => model.CompleteRentRoll, "true", new { style = "margin-top: 10px;" }) Yes
                        @Html.RadioButtonFor(model => model.CompleteRentRoll, "false", new { style = "margin-top: 10px;" }) No
                    </div>
                </div>
            </div>


            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(model => model.HasDeferredMaintenance)
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.RadioButtonFor(model => model.HasDeferredMaintenance, "true", new { style = "margin-top: 10px;", onclick = "toggleDeferredMaintenanceDetails(true)" }) Yes
                        @Html.RadioButtonFor(model => model.HasDeferredMaintenance, "false", new { style = "margin-top: 10px;", onclick = "toggleDeferredMaintenanceDetails(false)" }) No
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.ValidationMessageFor(model => model.HasDeferredMaintenance)
                    </div>
                </div>
            </div>
            <div id="deferredMaintenanaceDetails" style="display: none;">
                <div class="row">
                    <div class="col-sm-6">
                        <div class="input-group">
                            @Html.LabelFor(s => s.AverageAdjustmentToBaseRentalIncomePerUnitAfterRenovations)
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="input-group">
                            @Html.TextBoxFor(s => s.AverageAdjustmentToBaseRentalIncomePerUnitAfterRenovations, new { @class = "formatNumber" })
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-6">
                        <div class="input-group">
                            @Html.LabelFor(model => model.EstDeferredMaintenance)
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="input-group">
                            @Html.TextBoxFor(s => s.EstDeferredMaintenance, new { @readonly = "readonly", @class = "formatNumber" })
                            @*<input type="text" name="EstDeferredMaintenance" id="EstDeferredMaintenance" class="formatNumber" value="@((Model as MultiFamilyAssetViewModel).EstDeferredMaintenance)" readonly />*@
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="input-group">
                        </div>
                    </div>
                </div>
                @for (int i = 0; i < Model.DeferredMaintenanceItems.Count; i++)
                {
                    <div class="document-item">
                        <div class="row">
                            <div class="col-sm-5">
                                @Html.CheckBoxFor(s => Model.DeferredMaintenanceItems[i].Selected, new { onchange = "calculateEstimatedDeferredMaintenance()" })
                                <label>@Model.DeferredMaintenanceItems[i].ItemTitle</label>
                            </div>
                            @if (Model.DeferredMaintenanceItems[i].ItemTitle != null && Model.DeferredMaintenanceItems[i].ItemTitle.Contains("Other"))
                            {
                                <div class="col-sm-7" style="text-align: right;">
                                    <label>Description:</label>
                                    @Html.TextBoxFor(s => Model.DeferredMaintenanceItems[i].ItemDescription, new { onchange = "checkText(this)" })
                                    <label>Unit Cost:</label>
                                    @Html.TextBoxFor(s => Model.DeferredMaintenanceItems[i].UnitCost, new { @class = "formatMaint", style = "width: 60px; margin-right:5px;", onchange = "addCommasToInputAndCalculate(this)" })
                                    @Html.HiddenFor(s => Model.DeferredMaintenanceItems[i].NumberOfUnits, new { Value = "1" })
                                </div>

                            }
                            else if (Model.DeferredMaintenanceItems[i].ItemTitle != null && Model.DeferredMaintenanceItems[i].ItemTitle.Contains("Parking Structure"))
                            {
                                <div class="col-sm-7" style="text-align: right;">
                                    <label>Unit Cost:</label>
                                    @Html.TextBoxFor(s => Model.DeferredMaintenanceItems[i].UnitCost, new { @class = "formatMaint", style = "width: 60px; margin-right:5px;", onchange = "addCommasToInputAndCalculate(this)" })
                                </div>
                            }
                            else
                            {
                                <div class="col-sm-7" style="text-align: right;">
                                    <label>Unit Cost:</label>
                                    @Html.TextBoxFor(s => Model.DeferredMaintenanceItems[i].UnitCost, new { @class = "formatMaint", style = "width: 60px; margin-right:5px;", onchange = "addCommasToInputAndCalculate(this)" })
                                    @if (Model.DeferredMaintenanceItems[i].UnitTypeLabel != null)
                                    {
                                        <label>Number of @Model.DeferredMaintenanceItems[i].UnitTypeLabel:</label>
                                        @Html.TextBoxFor(s => Model.DeferredMaintenanceItems[i].NumberOfUnits, new { @class = "formatMaint", style = "margin-left: 5px; width: 60px;", onchange = "addCommasToInputAndCalculate(this)" })
                                    }
                                </div>
                            }
                        </div>
                        @Html.HiddenFor(s => Model.DeferredMaintenanceItems[i].MaintenanceDetail)
                        @Html.HiddenFor(s => Model.DeferredMaintenanceItems[i].UnitCost)
                        @Html.HiddenFor(s => Model.DeferredMaintenanceItems[i].UnitTypeLabel)
                        @Html.HiddenFor(s => Model.DeferredMaintenanceItems[i].NumberOfUnits)
                        @Html.HiddenFor(s => Model.DeferredMaintenanceItems[i].ItemTitle)
                    </div>
                }

                @*@Html.EditorFor(s => Model.DeferredMaintenanceItems, "DeferredMaintenanceEditorTemplate")*@
            </div>
        }
        @if (Model.GetType() == typeof(CommercialAssetViewModel))
        {
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        <label>Does the Property Have a Tenant Improvement Budget?</label>
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.RadioButtonFor(model => model.HasDeferredMaintenance, "true", new { style = "margin-top: 10px;", onclick = "toggleDeferredMaintenanceDetails(true)" }) Yes
                        @Html.RadioButtonFor(model => model.HasDeferredMaintenance, "false", new { style = "margin-top: 10px;", onclick = "toggleDeferredMaintenanceDetails(false)" }) No
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.ValidationMessageFor(model => model.HasDeferredMaintenance)
                    </div>
                </div>
            </div>
            <div id="deferredMaintenanaceDetails" style="display: none;">
                <div class="row">
                    <div class="col-sm-6">
                        <div class="input-group">
                            <label>Average Adjustment to Base Rental Income after Renovations</label>
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="input-group">
                            @Html.TextBoxFor(s => s.AverageAdjustmentToBaseRentalIncomePerUnitAfterRenovations, new { @class = "formatNumber" })
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-6">
                        <div class="input-group">
                            <label>Estimated Deferred Maintenance</label>
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="input-group">
                            @Html.TextBoxFor(s => s.EstDeferredMaintenance, new { @readonly = "readonly", @class = "formatNumber" })
                            @*<input type="text" name="EstDeferredMaintenance" id="EstDeferredMaintenance" class="formatNumber" value="@((Model as MultiFamilyAssetViewModel).EstDeferredMaintenance)" readonly />*@
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="input-group">
                        </div>
                    </div>
                </div>
                @for (int i = 0; i < Model.DeferredMaintenanceItems.Count; i++)
                {
                    <div class="document-item">
                        <div class="row">
                            <div class="col-sm-5">
                                @Html.CheckBoxFor(s => Model.DeferredMaintenanceItems[i].Selected, new { onchange = "calculateEstimatedDeferredMaintenance()" })
                                <label>@Model.DeferredMaintenanceItems[i].ItemTitle</label>
                            </div>

                            @if (Model.DeferredMaintenanceItems[i].UnitTypeLabel != null && Model.DeferredMaintenanceItems[i].UnitTypeLabel.Contains("Sq.Ft"))
                            {
                                <div class="col-sm-7" style="text-align: right;">
                                    <label>Base Cost per Sq.Ft.:</label>
                                    @Html.TextBoxFor(s => Model.DeferredMaintenanceItems[i].UnitCost, new { @class = "formatMaint", style = "width: 60px; margin-right:5px;", onchange = "addCommasToInputAndCalculate(this)" })
                                    @if (Model.DeferredMaintenanceItems[i].UnitTypeLabel != null)
                                    {
                                        <label>@Model.DeferredMaintenanceItems[i].UnitTypeLabel:</label>
                                        @Html.TextBoxFor(s => Model.DeferredMaintenanceItems[i].NumberOfUnits, new { @class = "formatMaint", style = "margin-left: 5px; width: 60px;", onchange = "addCommasToInputAndCalculate(this)" })
                                    }
                                </div>
                            }
                            else if (Model.DeferredMaintenanceItems[i].UnitTypeLabel != null && Model.DeferredMaintenanceItems[i].UnitTypeLabel.Contains("Base Estimate"))
                            {
                                <div class="col-sm-7" style="text-align: right;">
                                    @if (Model.DeferredMaintenanceItems[i].UnitTypeLabel != null)
                                    {
                                        <label>Base Estimate Per List Agent/Ownership:</label>
                                        @Html.TextBoxFor(s => Model.DeferredMaintenanceItems[i].UnitCost, new { @class = "formatMaint", style = "margin-left: 5px; width: 60px;", onchange = "addCommasToInputAndCalculate(this)" })
                                    }
                                </div>

                            }
                            else if (Model.DeferredMaintenanceItems[i].ItemTitle != null && Model.DeferredMaintenanceItems[i].ItemTitle.Contains("Other"))
                            {
                                <div class="col-sm-7" style="text-align: right;">
                                    <label>Description:</label>
                                    @Html.TextBoxFor(s => Model.DeferredMaintenanceItems[i].ItemDescription, new { onchange = "checkText(this)" })
                                    <label>Unit Cost:</label>
                                    @Html.TextBoxFor(s => Model.DeferredMaintenanceItems[i].UnitCost, new { @class = "formatMaint", style = "width: 60px; margin-right:5px;", onchange = "addCommasToInputAndCalculate(this)" })
                                    @Html.HiddenFor(s => Model.DeferredMaintenanceItems[i].NumberOfUnits, new { Value = "1" })
                                </div>

                            }
                            else if (Model.DeferredMaintenanceItems[i].ItemTitle != null && Model.DeferredMaintenanceItems[i].ItemTitle.Contains("Parking Structure"))
                            {
                                <div class="col-sm-7" style="text-align: right;">
                                    <label>Unit Cost:</label>
                                    @Html.TextBoxFor(s => Model.DeferredMaintenanceItems[i].UnitCost, new { @class = "formatMaint", style = "width: 60px; margin-right:5px;", onchange = "addCommasToInputAndCalculate(this)" })
                                </div>
                            }
                            else
                            {
                                <div class="col-sm-7" style="text-align: right;">
                                    <label>Unit Cost:</label>
                                    @Html.TextBoxFor(s => Model.DeferredMaintenanceItems[i].UnitCost, new { @class = "formatMaint", style = "width: 60px; margin-right:5px;", onchange = "addCommasToInputAndCalculate(this)" })
                                    @if (Model.DeferredMaintenanceItems[i].UnitTypeLabel != null)
                                    {
                                        <label>Number of @Model.DeferredMaintenanceItems[i].UnitTypeLabel:</label>
                                        @Html.TextBoxFor(s => Model.DeferredMaintenanceItems[i].NumberOfUnits, new { @class = "formatMaint", style = "margin-left: 5px; width: 60px;", onchange = "addCommasToInputAndCalculate(this)" })
                                    }
                                </div>

                            }
                        </div>
                        @Html.HiddenFor(s => Model.DeferredMaintenanceItems[i].MaintenanceDetail)
                        @Html.HiddenFor(s => Model.DeferredMaintenanceItems[i].UnitCost)
                        @Html.HiddenFor(s => Model.DeferredMaintenanceItems[i].UnitTypeLabel)
                        @Html.HiddenFor(s => Model.DeferredMaintenanceItems[i].NumberOfUnits)
                        @Html.HiddenFor(s => Model.DeferredMaintenanceItems[i].ItemTitle)
                    </div>
                }

                @*@Html.EditorFor(s => Model.DeferredMaintenanceItems, "DeferredMaintenanceEditorTemplate")*@
            </div>
        }
        @if (Model.AssetType == AssetType.MHP)
        {
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(model => model.FloodPlainLocated)
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.RadioButtonFor(s => s.FloodPlainLocated, "true", new { onchange = "toggleActionDetails(true)" }) Yes
                        @Html.RadioButtonFor(s => s.FloodPlainLocated, "false", new { onchange = "toggleActionDetails(false)" }) No
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(model => model.AccessRoadTypeId)
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.DropDownListFor(model => model.AccessRoadTypeId, Model.AccessRoadTypes as IEnumerable<SelectListItem>)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(model => model.InteriorRoadTypeId)
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.DropDownListFor(model => model.InteriorRoadTypeId, Model.InteriorRoadTypes as IEnumerable<SelectListItem>)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(model => model.WaterServTypeId)
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.DropDownListFor(model => model.WaterServTypeId, Model.WaterServTypes as IEnumerable<SelectListItem>)
                        &nbsp;&nbsp;@Html.TextBoxFor(model => model.WaterServProvider, new { @placeholder = "Service Provider" })
                    </div>

                </div>

            </div>

            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(model => model.WasteWaterTypeId)
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.DropDownListFor(model => model.WasteWaterTypeId, Model.WasteWaterTypes as IEnumerable<SelectListItem>)
                        &nbsp;&nbsp;@Html.TextBoxFor(model => model.WasteWaterServProvider, new { @placeholder = "Service Provider" })
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(model => model.MHPadTypeId)
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.DropDownListFor(model => model.MHPadTypeId, Model.MHPadTypes as IEnumerable<SelectListItem>)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        <label>How is title to acreage held?</label>
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.DropDownListFor(model => model.PropHoldTypeId, Model.PropHoldTypes as IEnumerable<SelectListItem>)
                        @*@Html.EnumDropDownList("PropHoldTypeId", Model.PropHoldTypeId, "---")*@
                    </div>
                </div>
            </div>
        }
        <div class="row">
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.LabelFor(s => s.AdditionalInformation, new { @class = "control-label" })
                </div>
            </div>
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.RadioButtonFor(s => s.isAdditionalInfo, "true", new { onchange = "toggleAdditionalInfo(true)" }) Yes
                    @Html.RadioButtonFor(s => s.isAdditionalInfo, "false", new { onchange = "toggleAdditionalInfo(false)" }) No
                </div>
            </div>
        </div>
        <div class="row">
            <div id="AdditionalInfo" style="display: none;">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.TextAreaFor(s => s.AdditionalInformation, new { @class = "control-label", @cols = 100, @rows = 4 })<div id="textarea_feedback" style="font-size: smaller"></div>

                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.LabelFor(s => s.HasEnvironmentalIssues, new { @class = "control-label" })
                </div>
            </div>
            <div class="col-sm-6">
                <div class="input-group" style="padding-top: 5px">
                    @Html.RadioButtonFor(s => s.HasEnvironmentalIssues, "true", new { onclick = "toggleEnv(true)" }) Yes
                    @Html.RadioButtonFor(s => s.HasEnvironmentalIssues, "false", new { onclick = "toggleEnv(false)" }) No
                    @Html.ValidationMessageFor(model => model.HasEnvironmentalIssues)
                    @Html.HiddenFor(model => Model.DocumentNumberEnvi)
                    <div id="envidocumentDisplay">
                        @if (Model.DocumentNumberEnvi > -1)
                        {
                            <a target='_blank' href="@Url.Action("DownloadDocument", "Admin", new { fileName = Model.Documents[Model.DocumentNumberEnvi].FileName, assetId = Model.AssetId, contentType = Model.Documents[Model.DocumentNumberEnvi].ContentType, title = Model.Documents[Model.DocumentNumberEnvi].Title })">@(Model.Documents[Model.DocumentNumberEnvi].Title)</a>
                        }
                    </div>
                    <div id="envidocumentExists">
                        <em> Env Report already exists, please <b>delete the existing file from Documents tab and save first</b> if it needs to be re-uploaded</em>
                    </div>
                </div>
            </div>
        </div>
        <div class="row" id="uploadEnvModal">

            <div class="row">

                <div id="uploadEnv" class="layer1" style="width: 100%; margin-bottom: 20px;">
                    <h4 style="margin-top: 10px;">Upload PDF Report</h4>
                    <div class="docSetup" id="uploadDiv" style="width: 100%; background-color: #f7f7f7; border: 1px solid #eee; padding: 15px;">
                        <div class="row">
                            <div class="col-sm-12">

                                @Html.TextBoxFor(s => s.SelectedDocumentType, new { @class = "control-label", @Value = "EnvironmentalReport", id = "UploadDocumentType2", @type = "hidden" })
                            </div>
                            <div class="col-sm-12">
                                <label>Title</label>
                            </div>
                            <div class="col-sm-12">
                                <input type="text" id="docTitle2" value="Environmental Report " style="width: 250px;" />
                            </div>
                            <div class="col-sm-12">
                                <label>Description</label>
                            </div>
                            <div class="col-sm-12">
                                <textarea cols="10" rows="4" id="docDescription2"></textarea>
                            </div>
                            <div class="col-sm-6">
                                <input type="file" data-type="" id="docUploadEnv" value="Upload" />
                            </div>
                            <div class="col-sm-6">
                                <div id="progressbarEnv" class="progressbarEnv">
                                </div>
                            </div>
                            <div class="col-sm-12">
                                <div style="color: #18904B; margin-top: 20px; display: none;" id="successDoc2">
                                    <i class="fa fa-check" style="color: #27ae60; margin-right: 3px; display: inline;"></i>
                                    <span>The file has been uploaded successfully.</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

            </div>

        </div>
        <div class="row">
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.LabelFor(model => model.GeneralCommentsDtlInfo)
                </div>
            </div>
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.TextAreaFor(model => model.GeneralCommentsDtlInfo, 4, 40, new { maxlength = "1000", onkeyup = "countCharDtlInfo(this);" }) <span id="charcounterDtlInfo" style="font-style: italic;">0 characters <em>(1000 characters maximum)</em></span><br />
                </div>
            </div>
        </div>

        <div class="row" style="margin-top: 10px;">
            <div class="col-sm-12">
                @if (Model.User.UserType == UserType.CREBroker || Model.User.UserType == UserType.CRELender || Model.User.UserType == UserType.Investor)
                {
                    <input type="button" class="btn btn-warning" onclick="if (confirm('If you click ok, you will lose all of the data you entered and be returned to the manage assets page.')) goBackSeller()" value="Cancel" />
                }
                else
                {
                    <input type="button" class="btn btn-warning" onclick="if (confirm('If you click ok, you will lose all of the data you entered and be returned to the manage assets page.')) goBack()" value="Cancel" />
                }
                <input type="button" class="btn btn-default" onclick="backTab($(this));" value="Back" />
                <input type="button" class="btn btn-primary" onclick="nextTab($(this));" value="Next" />
            </div>
        </div>


    </div>

    <div class="tab-pane" id="mortgage">
        <div class="row">
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.LabelFor(s => s.HasPositionMortgage, new { @class = "control-label" }) <span style="color: red;">*</span>
                </div>
            </div>
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.RadioButtonFor(s => s.HasPositionMortgage, Inview.Epi.EpiFund.Domain.Enum.PositionMortgageType.Yes, new { onchange = "toggleMortgage(1)" }) Yes
                    @Html.RadioButtonFor(s => s.HasPositionMortgage, Inview.Epi.EpiFund.Domain.Enum.PositionMortgageType.No, new { onchange = "toggleMortgage(4)" }) No
                    @Html.RadioButtonFor(s => s.HasPositionMortgage, Inview.Epi.EpiFund.Domain.Enum.PositionMortgageType.Unknown, new { onchange = "toggleMortgage(4)" }) Unknown
                    @Html.ValidationMessageFor(model => model.HasPositionMortgage)
                </div>
            </div>
        </div>
        <div id="hasMortgage">
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.MortgageLienType, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.RadioButtonFor(s => s.MortgageLienType, Inview.Epi.EpiFund.Domain.Enum.MortgageLienType.Recourse, new { @class = "mltRecourse" }) Recourse
                        @Html.RadioButtonFor(s => s.MortgageLienType, Inview.Epi.EpiFund.Domain.Enum.MortgageLienType.NonRecourse, new { @class = "mltNonRecourse" }) Non-Recourse
                        @Html.RadioButtonFor(s => s.MortgageLienType, Inview.Epi.EpiFund.Domain.Enum.MortgageLienType.Unknown, new { @class = "mltUnknown" }) Unknown
                        @Html.ValidationMessageFor(model => model.MortgageLienType)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.MortgageLienAssumable, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.RadioButtonFor(s => s.MortgageLienAssumable, Inview.Epi.EpiFund.Domain.Enum.MortgageLienAssumable.Yes, new { @class = "mlaYes" }) Yes
                        @Html.RadioButtonFor(s => s.MortgageLienAssumable, Inview.Epi.EpiFund.Domain.Enum.MortgageLienAssumable.No, new { @class = "mlaNo" }) No
                        @Html.RadioButtonFor(s => s.MortgageLienAssumable, Inview.Epi.EpiFund.Domain.Enum.MortgageLienAssumable.Unknown, new { @class = "mlaUnknown" }) Unknown
                        @Html.ValidationMessageFor(model => model.MortgageLienAssumable)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.FirstMortgageCompany, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.TextBoxFor(s => s.FirstMortgageCompany, new { @class = "control-label" })
                        @Html.ValidationMessageFor(model => model.FirstMortgageCompany)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.MortgageCompanyAddress, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.TextBoxFor(s => s.MortgageCompanyAddress, new { @class = "control-label" })
                        @Html.ValidationMessageFor(model => model.MortgageCompanyAddress)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.MortgageCompanyCity, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.TextBoxFor(s => s.MortgageCompanyCity, new { @class = "control-label" })
                        @Html.ValidationMessageFor(model => model.MortgageCompanyCity)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.MortgageCompanyState, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.DropDownListFor(model => model.MortgageCompanyState, Model.States as IEnumerable<SelectListItem>, "---")
                        @Html.ValidationMessageFor(model => model.MortgageCompanyState)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.MortgageCompanyZip, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.TextBoxFor(s => s.MortgageCompanyZip, new { @class = "control-label" })
                        @Html.ValidationMessageFor(model => model.MortgageCompanyZip)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.LenderPhone, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.TextBoxFor(s => s.LenderPhone, new { @class = "control-label" })
                        @Html.ValidationMessageFor(model => model.LenderPhone)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.LenderPhoneOther, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.TextBoxFor(s => s.LenderPhoneOther, new { @class = "control-label" })
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.AccountNumber, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.TextBoxFor(s => s.AccountNumber, new { @class = "control-label" })
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.CurrentPrincipalBalance, new { @class = "control-label" })
                        <span style="color: red;">*</span>
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.TextBoxFor(s => s.CurrentPrincipalBalance, new { @class = "control-label formatNumber ConvertToDoller" })
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(model => model.SelectedAmortSchedule)
                        <span style="color: red;">*</span>
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.DropDownListFor(model => model.SelectedAmortSchedule, Model.AmortizationScheduleList as IEnumerable<SelectListItem>, "---")
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.MonthlyPayment, new { @class = "control-label" })
                        <span style="color: red;">*</span>
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.TextBoxFor(s => s.MonthlyPayment, new { @class = "control-label formatNumber ConvertToDoller" })
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.PaymentIncludes, new { @class = "control-label" }) <span style="color: red;">*</span>
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.DropDownListFor(model => model.PaymentIncludes, Model.PaymentTypes as IEnumerable<SelectListItem>, "---")
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.InterestRate, new { @class = "control-label" }) <span style="color: red;">*</span>
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.TextBoxFor(s => s.InterestRate, new { @class = "control-label inputDecimalNumber" }) %
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.IsMortgageAnARM, new { @class = "control-label" }) <span style="color: red;">*</span>
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group rdMandatory">
                        @Html.RadioButtonFor(model => model.IsMortgageAnARM, "true") Yes
                        @Html.RadioButtonFor(model => model.IsMortgageAnARM, "false") No
                        @Html.RadioButtonFor(model => model.IsMortgageAnARM, "false") Unknown
                        @*@Html.RadioButtonFor(s => s.IsMortgageAnARM, "Yes") Yes
                            @Html.RadioButtonFor(s => s.IsMortgageAnARM, "No") No
                            @Html.RadioButtonFor(s => s.IsMortgageAnARM, "Unknown") Unknown*@
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.MortgageAdjustIfARM, new { @class = "control-label" }) 
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.TextBoxFor(s => s.MortgageAdjustIfARM, new { @class = "control-label datepicker" })
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.BalloonDateOfNote, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.TextBoxFor(s => s.BalloonDateOfNote, new { @class = "control-label datepicker" }) <em>MM/dd/yyyy</em>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.NumberOfMissedPayments, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.TextBoxFor(s => s.NumberOfMissedPayments, new { @class = "control-label" })
                    </div>
                </div>
            </div>
        </div>

        @if (Model.User.UserType == UserType.CREBroker || Model.User.UserType == UserType.CRELender || Model.User.UserType == UserType.Investor)
        {
            <input type="button" class="btn btn-warning" onclick="if (confirm('If you click ok, you will lose all of the data you entered and be returned to the manage assets page.')) goBackSeller()" value="Cancel" />
        }
        else
        {
            <input type="button" class="btn btn-warning" onclick="if (confirm('If you click ok, you will lose all of the data you entered and be returned to the manage assets page.')) goBack()" value="Cancel" />
        }
        <input type="button" class="btn btn-default" onclick="backTab($(this));" value="Back" />
        <input type="button" class="btn btn-primary" onclick="nextTab($(this));" value="Next" />
    </div>

    <div class="tab-pane" id="media">
        <h3>Images</h3>
        <div class="row">
            <div class="col-sm-6">
                <label for="imgUploader">Upload Image:</label>
                <i><b>Drag and drop images into the image zone or click an empty space in the image zone and select the images you want to upload.</b></i>
            </div>
        </div>
        <div id="simpleUpload">
            <div class="meter red">
                <span class="roller"><span></span></span>
            </div>
            <div id="dropzone" class="dropzone">
            </div>
        </div>
        <br />
        @if (Model.User.UserType == UserType.CREBroker || Model.User.UserType == UserType.CRELender || Model.User.UserType == UserType.Investor)
        {
            <input type="button" class="btn btn-warning" onclick="if (confirm('If you click ok, you will lose all of the data you entered and be returned to the manage assets page.')) goBackSeller()" value="Cancel" />
        }
        else
        {
            <input type="button" class="btn btn-warning" onclick="if (confirm('If you click ok, you will lose all of the data you entered and be returned to the manage assets page.')) goBack()" value="Cancel" />
        }
        <input type="button" class="btn btn-default" onclick="backTab($(this));" value="Back" />
        <input type="button" class="btn btn-primary" onclick="nextTab($(this));" value="Next" />
    </div>

    <div class="tab-pane" id="documents">
        <h3>Documents</h3>
        <div id="uploadDocs" class="layer1" style="width: 100%; margin-bottom: 20px;">
            <h4 style="margin-top: 10px;">Upload Documents</h4>
            <div class="docSetup" id="uploadDiv" style="width: 100%; background-color: #f7f7f7; border: 1px solid #eee; padding: 15px;">
                <div class="row">
                    <div class="col-sm-12">
                        <label>Document Type</label>
                    </div>
                    <div class="col-sm-12">
                        @Html.DropDownListFor(model => model.SelectedDocumentType, Model.AssetDocumentTypes as IEnumerable<SelectListItem>, new { id = "AssetDocumentType" })
                        @*@Html.EnumDropDownList("AssetDocumentType", Model.AssetDocumentType, "---")*@
                    </div>
                    <div class="col-sm-12">
                        <label>Title</label>
                    </div>
                    <div class="col-sm-12">
                        <input type="text" id="docTitle" style="width: 250px;" value="" />
                    </div>
                    <div class="col-sm-12">
                        <label>Description</label>
                    </div>
                    <div class="col-sm-12">
                        <textarea cols="10" rows="4" id="docDescription"></textarea>
                    </div>
                    <div class="col-sm-6">
                        <input type="file" data-type="" id="docUpload" value="Upload" />
                    </div>
                    <div class="col-sm-6">
                        <div id="progressbar" class="progressbar">
                        </div>
                    </div>
                    <div class="col-sm-12">
                        <div style="color: #18904B; margin-top: 20px; display: none;" id="successDoc">
                            <i class="fa fa-check" style="color: #27ae60; margin-right: 3px; display: inline;"></i>
                            <span>The file has been uploaded successfully.</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div id="docManager" data-doccount="@Model.Documents.Count">
            <div id="PendingUploads" style="display: none; margin-bottom: 40px;">
                <h4 id="UploadQueueTitle">Pending Uploads</h4>
                <div id="uploadDocId" style="display: none;" class="document-item-expanded">
                    <div class="docSetup" style="width: 100%">
                        <div class="row">
                            <div class="col-sm-12">
                                <input type="hidden" id="uploadFileId" />
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            @if (Model.availablecurrentRentRoll)
            {
                //this type all hidden field added below on a bug mail on date 2016-07-14
                @Html.HiddenFor(model => Model.availablecurrentRentRoll)
                <div class="document-item">
                    <div id="linkCRR">
                        <h4>Current Rent Roll</h4>
                    </div>
                    <div id="currentRentRollDocs" class="document-item-expanded">
                        @for (int item = 0; item < Model.Documents.Count; item++)
                        {
                            if (Model.Documents[item].Type == (int)Inview.Epi.EpiFund.Domain.Enum.AssetDocumentType.CurrentRentRoll)
                            {
                                <div class="docPreviewDiv row">
                                    <div class="col-sm-10">
                                        <a target='_blank' href="@Url.Action("DownloadDocument", "Admin", new { fileName = Model.Documents[item].FileName, assetId = Model.AssetId, contentType = Model.Documents[item].ContentType, title = Model.Documents[item].Title })">@Model.Documents[item].Title</a>
                                        <p class="description">@Model.Documents[item].Description</p>
                                    </div>
                                    <div class="col-sm-2">
                                        @Html.HiddenFor(s => Model.Documents[item].Title)
                                        @Html.HiddenFor(s => Model.Documents[item].Description)
                                        @Html.HiddenFor(s => Model.Documents[item].AssetDocumentId)
                                        @Html.HiddenFor(s => Model.Documents[item].Size)
                                        @Html.HiddenFor(s => Model.Documents[item].ContentType)
                                        @Html.HiddenFor(s => Model.Documents[item].AssetId)
                                        @Html.HiddenFor(s => Model.Documents[item].Type)
                                        @Html.HiddenFor(x => Model.Documents[item].Viewable)
                                        @Html.HiddenFor(s => Model.Documents[item].FileName, new { @class = "docName" })
                                        <input type='button' class='deleteDocUpload delCRR' value='Delete' data-button="@Model.Documents[item].FileName" onclick='docDelete(this, "#currentRentRollDocs", ".delCRR", "#linkCRR")' />
                                    </div>
                                </div>
                            }
                        }
                    </div>
                </div>
            }
            @if (Model.availablecurrentOperatingReport)
            {@Html.HiddenFor(model => Model.availablecurrentOperatingReport)
            <div class="document-item">
                <div id="linkCOR">
                    <h4>Current Operating Report</h4>
                </div>
                <div id="currentOperatingReportDocs" class="document-item-expanded">
                    @for (int item = 0; item < Model.Documents.Count; item++)
                    {
                        if (Model.Documents[item].Type == (int)Inview.Epi.EpiFund.Domain.Enum.AssetDocumentType.CurrentOperatingReport)
                        {
                            <div class="docPreviewDiv row">
                                <div class="col-sm-10">
                                    <a target='_blank' href="@Url.Action("DownloadDocument", "Admin", new { fileName = Model.Documents[item].FileName, assetId = Model.AssetId, contentType = Model.Documents[item].ContentType, title = Model.Documents[item].Title })">@Model.Documents[item].Title</a>
                                    <p class="description">@Model.Documents[item].Description</p>
                                </div>
                                <div class="col-sm-2">
                                    @Html.HiddenFor(s => Model.Documents[item].Title)
                                    @Html.HiddenFor(s => Model.Documents[item].Description)
                                    @Html.HiddenFor(s => Model.Documents[item].Type)
                                    @Html.HiddenFor(s => Model.Documents[item].AssetDocumentId)
                                    @Html.HiddenFor(s => Model.Documents[item].Size)
                                    @Html.HiddenFor(s => Model.Documents[item].ContentType)
                                    @Html.HiddenFor(s => Model.Documents[item].AssetId)
                                    @Html.HiddenFor(x => Model.Documents[item].Viewable)
                                    @Html.HiddenFor(s => Model.Documents[item].FileName, new { @class = "docName" })
                                    <input type='button' class='deleteDocUpload delCOR' value='Delete' data-button="@Model.Documents[item].FileName" onclick='docDelete(this, "#currentOperatingReportDocs", ".delCOR", "#linkCOR")' />
                                </div>
                            </div>
                        }
                    }
                </div>
            </div>
        }
            @if (Model.availablepriorFiscalYearOperReport)
            {@Html.HiddenFor(model => Model.availablepriorFiscalYearOperReport)
            <div class="document-item">
                <div id="linkPFYOR">
                    <h4>Prior Fiscal Year Oper Report</h4>
                </div>
                <div id="priorFiscalYearOperReportDocs" class="document-item-expanded">
                    @for (int item = 0; item < Model.Documents.Count; item++)
                    {
                        if (Model.Documents[item].Type == (int)Inview.Epi.EpiFund.Domain.Enum.AssetDocumentType.PriorFiscalYearOperReport)
                        {
                            <div class="docPreviewDiv row">
                                <div class="col-sm-10">
                                    <a target='_blank' href="@Url.Action("DownloadDocument", "Admin", new { fileName = Model.Documents[item].FileName, assetId = Model.AssetId, contentType = Model.Documents[item].ContentType, title = Model.Documents[item].Title })">@Model.Documents[item].Title</a>
                                    <p class="description">@Model.Documents[item].Description</p>
                                </div>
                                <div class="col-sm-2">
                                    @Html.HiddenFor(s => Model.Documents[item].Title)
                                    @Html.HiddenFor(s => Model.Documents[item].Description)
                                    @Html.HiddenFor(s => Model.Documents[item].Type)
                                    @Html.HiddenFor(s => Model.Documents[item].AssetDocumentId)
                                    @Html.HiddenFor(s => Model.Documents[item].Size)
                                    @Html.HiddenFor(s => Model.Documents[item].ContentType)
                                    @Html.HiddenFor(s => Model.Documents[item].AssetId)
                                    @Html.HiddenFor(x => Model.Documents[item].Viewable)
                                    @Html.HiddenFor(s => Model.Documents[item].FileName, new { @class = "docName" })
                                    <input type='button' class='deleteDocUpload delPFYOR' value='Delete' data-button="@Model.Documents[item].FileName" onclick='docDelete(this, "#priorFiscalYearOperReportDocs", ".delPFYOR", "#linkPFYOR")' />
                                </div>
                            </div>
                        }
                    }
                </div>
            </div>
        }
            @if (Model.availablepreliminaryTitleReport)
            {@Html.HiddenFor(model => Model.availablepreliminaryTitleReport)
            <div class="document-item">
                <div id="linkPTR">
                    <h4>Preliminary Title Report</h4>
                </div>
                <div id="preliminaryTitleReportDocs" class="document-item-expanded">
                    @for (int item = 0; item < Model.Documents.Count; item++)
                    {
                        if (Model.Documents[item].Type == (int)Inview.Epi.EpiFund.Domain.Enum.AssetDocumentType.PreliminaryTitleReport)
                        {
                            <div class="docPreviewDiv row">
                                <div class="col-sm-10">
                                    <a target='_blank' href="@Url.Action("DownloadDocument", "Admin", new { fileName = Model.Documents[item].FileName, assetId = Model.AssetId, contentType = Model.Documents[item].ContentType, title = Model.Documents[item].Title })">@Model.Documents[item].Title</a>
                                    <p class="description">@Model.Documents[item].Description</p>
                                </div>
                                <div class="col-sm-2">

                                    @Html.HiddenFor(s => Model.Documents[item].Title)
                                    @Html.HiddenFor(s => Model.Documents[item].Description)
                                    @Html.HiddenFor(s => Model.Documents[item].Type)
                                    @Html.HiddenFor(s => Model.Documents[item].AssetDocumentId)
                                    @Html.HiddenFor(s => Model.Documents[item].Size)
                                    @Html.HiddenFor(s => Model.Documents[item].ContentType)
                                    @Html.HiddenFor(s => Model.Documents[item].AssetId)
                                    @Html.HiddenFor(x => Model.Documents[item].Viewable)
                                    @Html.HiddenFor(s => Model.Documents[item].FileName, new { @class = "docName" })
                                    <input type='button' class='deleteDocUpload delPTR' value='Delete' data-button="@Model.Documents[item].FileName" onclick='docDelete(this, "#preliminaryTitleReportDocs", ".delPTR", "#linkPTR")' />
                                </div>
                            </div>
                        }
                    }
                </div>
            </div>
        }
            @if (Model.availableplatMap)
            {@Html.HiddenFor(model => Model.availableplatMap)
            <div class="document-item">
                <div id="linkPM">
                    <h4>Plat Map</h4>
                </div>
                <div id="platMapDocs" class="document-item-expanded">
                    @for (int item = 0; item < Model.Documents.Count; item++)
                    {
                        if (Model.Documents[item].Type == (int)Inview.Epi.EpiFund.Domain.Enum.AssetDocumentType.PlatMap)
                        {
                            <div class="docPreviewDiv row">
                                <div class="col-sm-10">
                                    <a target='_blank' href="@Url.Action("DownloadDocument", "Admin", new { fileName = Model.Documents[item].FileName, assetId = Model.AssetId, contentType = Model.Documents[item].ContentType, title = Model.Documents[item].Title })">@Model.Documents[item].Title</a>
                                    <p class="description">@Model.Documents[item].Description</p>
                                </div>
                                <div class="col-sm-2">

                                    @Html.HiddenFor(s => Model.Documents[item].Title)
                                    @Html.HiddenFor(s => Model.Documents[item].Description)
                                    @Html.HiddenFor(s => Model.Documents[item].Type)
                                    @Html.HiddenFor(s => Model.Documents[item].AssetDocumentId)
                                    @Html.HiddenFor(s => Model.Documents[item].Size)
                                    @Html.HiddenFor(s => Model.Documents[item].ContentType)
                                    @Html.HiddenFor(s => Model.Documents[item].AssetId)
                                    @Html.HiddenFor(x => Model.Documents[item].Viewable)
                                    @Html.HiddenFor(s => Model.Documents[item].FileName, new { @class = "docName" })
                                    <input type='button' class='deleteDocUpload delPM' value='Delete' data-button="@Model.Documents[item].FileName" onclick='docDelete(this, "#platMapDocs", ".delPM", "#linkPM")' />
                                </div>
                            </div>
                        }
                    }
                </div>
            </div>
        }
            @if (Model.availablearialMap)
            {@Html.HiddenFor(model => Model.availablearialMap)
            <div class="document-item">
                <div id="linkAM">
                    <h4>Aerial Map</h4>
                </div>
                <div id="arialMapDocs" class="document-item-expanded">
                    @for (int item = 0; item < Model.Documents.Count; item++)
                    {
                        if (Model.Documents[item].Type == (int)Inview.Epi.EpiFund.Domain.Enum.AssetDocumentType.ArialMap)
                        {
                            <div class="docPreviewDiv row">
                                <div class="col-sm-10">
                                    <a target='_blank' href="@Url.Action("DownloadDocument", "Admin", new { fileName = Model.Documents[item].FileName, assetId = Model.AssetId, contentType = Model.Documents[item].ContentType, title = Model.Documents[item].Title })">@Model.Documents[item].Title</a>
                                    <p class="description">@Model.Documents[item].Description</p>
                                </div>
                                <div class="col-sm-2">
                                    @Html.HiddenFor(s => Model.Documents[item].Title)
                                    @Html.HiddenFor(s => Model.Documents[item].Type)
                                    @Html.HiddenFor(s => Model.Documents[item].Description)
                                    @Html.HiddenFor(x => Model.Documents[item].Viewable)
                                    @Html.HiddenFor(s => Model.Documents[item].AssetDocumentId)
                                    @Html.HiddenFor(s => Model.Documents[item].Size)
                                    @Html.HiddenFor(s => Model.Documents[item].ContentType)
                                    @Html.HiddenFor(s => Model.Documents[item].AssetId)
                                    @Html.HiddenFor(s => Model.Documents[item].FileName, new { @class = "docName" })
                                    <input type='button' class='deleteDocUpload delAM' value='Delete' data-button="@Model.Documents[item].FileName" onclick='docDelete(this, "#arialMapDocs", ".delAM", "#linkAM")' />
                                </div>
                            </div>
                        }
                    }
                </div>
            </div>
        }
            @if (Model.availableoriginalAppraisal)
            {@Html.HiddenFor(model => Model.availableoriginalAppraisal)
            <div class="document-item">
                <div id="linkAOA">
                    <h4>Original Appraisal/BPO</h4>
                </div>
                <div id="originalAppraisalDocs" class="document-item-expanded">
                    @for (int item = 0; item < Model.Documents.Count; item++)
                    {
                        if (Model.Documents[item].Type == (int)Inview.Epi.EpiFund.Domain.Enum.AssetDocumentType.OriginalAppraisal)
                        {
                            <div class="docPreviewDiv row">
                                <div class="col-sm-10">
                                    <a target='_blank' href="@Url.Action("DownloadDocument", "Admin", new { fileName = Model.Documents[item].FileName, assetId = Model.AssetId, contentType = Model.Documents[item].ContentType, title = Model.Documents[item].Title })">@Model.Documents[item].Title</a>
                                    <p class="description">@Model.Documents[item].Description</p>
                                </div>
                                <div class="col-sm-2">
                                    @Html.HiddenFor(s => Model.Documents[item].Title)
                                    @Html.HiddenFor(s => Model.Documents[item].Description)
                                    @Html.HiddenFor(s => Model.Documents[item].Type)
                                    @Html.HiddenFor(s => Model.Documents[item].AssetDocumentId)
                                    @Html.HiddenFor(s => Model.Documents[item].Size)
                                    @Html.HiddenFor(s => Model.Documents[item].ContentType)
                                    @Html.HiddenFor(s => Model.Documents[item].AssetId)
                                    @Html.HiddenFor(x => Model.Documents[item].Viewable)
                                    @Html.HiddenFor(s => Model.Documents[item].FileName, new { @class = "docName" })
                                    <input type='button' class='deleteDocUpload delAOA' value='Delete' data-button="@Model.Documents[item].FileName" onclick='docDelete(this, "#originalAppraisalDocs", ".delAOA", "#linkAOA")' />
                                </div>
                            </div>
                        }
                    }
                </div>
            </div>
        }
            @if (Model.availablecurrentAppraisal)
            {@Html.HiddenFor(model => Model.availablecurrentAppraisal)
            <div class="document-item">
                <div id="linkCA">
                    <h4>Current Appraisal</h4>
                </div>
                <div id="currentAppraisalDocs" class="document-item-expanded">
                    @for (int item = 0; item < Model.Documents.Count; item++)
                    {
                        if (Model.Documents[item].Type == (int)Inview.Epi.EpiFund.Domain.Enum.AssetDocumentType.CurrentAppraisal)
                        {
                            <div class="docPreviewDiv row">
                                <div class="col-sm-10">
                                    <a target='_blank' href="@Url.Action("DownloadDocument", "Admin", new { fileName = Model.Documents[item].FileName, assetId = Model.AssetId, contentType = Model.Documents[item].ContentType, title = Model.Documents[item].Title })">@Model.Documents[item].Title</a>
                                    <p class="description">@Model.Documents[item].Description</p>
                                </div>
                                <div class="col-sm-2">
                                    @Html.HiddenFor(s => Model.Documents[item].Title)
                                    @Html.HiddenFor(s => Model.Documents[item].Description)
                                    @Html.HiddenFor(s => Model.Documents[item].Type)
                                    @Html.HiddenFor(s => Model.Documents[item].AssetDocumentId)
                                    @Html.HiddenFor(s => Model.Documents[item].Size)
                                    @Html.HiddenFor(s => Model.Documents[item].ContentType)
                                    @Html.HiddenFor(s => Model.Documents[item].AssetId)
                                    @Html.HiddenFor(x => Model.Documents[item].Viewable)
                                    @Html.HiddenFor(s => Model.Documents[item].FileName, new { @class = "docName" })
                                    <input type='button' class='deleteDocUpload delCA' value='Delete' data-button="@Model.Documents[item].FileName" onclick='docDelete(this, "#currentAppraisalDocs", ".delCA", "#linkCA")' />
                                </div>
                            </div>
                        }
                    }
                </div>
            </div>
        }
            @if (Model.availableListingAgentMarketingBrochure)
            {@Html.HiddenFor(model => Model.availableListingAgentMarketingBrochure)
            <div class="document-item">
                <div id="linkMB">
                    <h4>Marketing Brochure</h4>
                </div>
                <div id="marketingBrochureDocs" class="document-item-expanded">
                    @for (int item = 0; item < Model.Documents.Count; item++)
                    {
                        if (Model.Documents[item].Type == (int)Inview.Epi.EpiFund.Domain.Enum.AssetDocumentType.ListingAgentMarketingBrochure)
                        {
                            <div class="docPreviewDiv row">
                                <div class="col-sm-10">
                                    <a target='_blank' href="@Url.Action("DownloadDocument", "Admin", new { fileName = Model.Documents[item].FileName, assetId = Model.AssetId, contentType = Model.Documents[item].ContentType, title = Model.Documents[item].Title })">@Model.Documents[item].Title</a>
                                    <p class="description">@Model.Documents[item].Description</p>
                                </div>
                                <div class="col-sm-2">
                                    @Html.HiddenFor(s => Model.Documents[item].Title)
                                    @Html.HiddenFor(s => Model.Documents[item].Description)
                                    @Html.HiddenFor(s => Model.Documents[item].Type)
                                    @Html.HiddenFor(s => Model.Documents[item].AssetDocumentId)
                                    @Html.HiddenFor(s => Model.Documents[item].Size)
                                    @Html.HiddenFor(s => Model.Documents[item].ContentType)
                                    @Html.HiddenFor(s => Model.Documents[item].AssetId)
                                    @Html.HiddenFor(x => Model.Documents[item].Viewable)
                                    @Html.HiddenFor(s => Model.Documents[item].FileName, new { @class = "docName" })
                                    <input type='button' class='deleteDocUpload delMB' value='Delete' data-button="@Model.Documents[item].FileName" onclick='docDelete(this, "#marketingBrochureDocs", ".delMB", "#linkMB")' />
                                </div>
                            </div>
                        }
                    }
                </div>
            </div>
        }
            @if (Model.AvailableEnvironmentalRep)
            {@Html.HiddenFor(model => Model.AvailableEnvironmentalRep)
            <div class="document-item">
                <div id="linkER">
                    <h4>Environmental Report</h4>
                </div>
                <div id="envRepDocs" class="document-item-expanded">
                    @for (int item = 0; item < Model.Documents.Count; item++)
                    {
                        if (Model.Documents[item].Type == (int)Inview.Epi.EpiFund.Domain.Enum.AssetDocumentType.EnvironmentalReport)
                        {
                            <div class="docPreviewDiv row">
                                <div class="col-sm-10">
                                    <a target='_blank' href="@Url.Action("DownloadDocument", "Admin", new { fileName = Model.Documents[item].FileName, assetId = Model.AssetId, contentType = Model.Documents[item].ContentType, title = Model.Documents[item].Title })">@Model.Documents[item].Title</a>
                                    <p class="description">@Model.Documents[item].Description</p>
                                </div>
                                <div class="col-sm-2">
                                    @Html.HiddenFor(s => Model.Documents[item].Title)
                                    @Html.HiddenFor(s => Model.Documents[item].Type)
                                    @Html.HiddenFor(s => Model.Documents[item].Description)
                                    @Html.HiddenFor(x => Model.Documents[item].Viewable)
                                    @Html.HiddenFor(s => Model.Documents[item].AssetDocumentId)
                                    @Html.HiddenFor(s => Model.Documents[item].Size)
                                    @Html.HiddenFor(s => Model.Documents[item].ContentType)
                                    @Html.HiddenFor(s => Model.Documents[item].AssetId)
                                    @Html.HiddenFor(s => Model.Documents[item].FileName, new { @class = "docName" })
                                    <input type='button' class='deleteDocUpload delER' value='Delete' data-button="@Model.Documents[item].FileName" onclick='docDelete(this, "#envRepDocs", ".delER", "#linkER")' />
                                </div>
                            </div>
                        }
                    }
                </div>
            </div>
        }
            @if (Model.availableOtherDocument)
            {@Html.HiddenFor(model => Model.availableOtherDocument)
            <div class="document-item">
                <div id="linkOD">
                    <h4>Other</h4>
                </div>
                <div id="otherDocumentsDocs" class="document-item-expanded">
                    @for (int item = 0; item < Model.Documents.Count; item++)
                    {
                        if (Model.Documents[item].Type == (int)Inview.Epi.EpiFund.Domain.Enum.AssetDocumentType.Other)
                        {
                            <div class="docPreviewDiv row">
                                <div class="col-sm-10">
                                    <a target='_blank' href="@Url.Action("DownloadDocument", "Admin", new { fileName = Model.Documents[item].FileName, assetId = Model.AssetId, contentType = Model.Documents[item].ContentType, title = Model.Documents[item].Title })">@Model.Documents[item].Title</a>
                                    <p class="description">@Model.Documents[item].Description</p>
                                </div>
                                <div class="col-sm-2">
                                    @Html.HiddenFor(s => Model.Documents[item].Title)
                                    @Html.HiddenFor(s => Model.Documents[item].Description)
                                    @Html.HiddenFor(s => Model.Documents[item].Type)
                                    @Html.HiddenFor(s => Model.Documents[item].AssetDocumentId)
                                    @Html.HiddenFor(s => Model.Documents[item].Size)
                                    @Html.HiddenFor(s => Model.Documents[item].ContentType)
                                    @Html.HiddenFor(s => Model.Documents[item].AssetId)
                                    @Html.HiddenFor(x => Model.Documents[item].Viewable)
                                    @Html.HiddenFor(s => Model.Documents[item].FileName, new { @class = "docName" })
                                    <input type='button' class='deleteDocUpload delOD' value='Delete' data-button="@Model.Documents[item].FileName" onclick='docDelete(this, "#otherDocumentsDocs", ".delOD", "#linkOD")' />
                                </div>
                            </div>
                        }
                    }
                </div>
            </div>
        }

            @if (Model.availableMortgageInstrumentRecord)
            {@Html.HiddenFor(model => Model.availableMortgageInstrumentRecord)
            <div class="document-item">
                <div id="linkMIR">
                    <h4>Title Company Mortgage Instrument of Record</h4>
                </div>
                <div id="mgInstRecDocs" class="document-item-expanded">
                    @for (int item = 0; item < Model.Documents.Count; item++)
                    {
                        if (Model.Documents[item].Type == (int)Inview.Epi.EpiFund.Domain.Enum.AssetDocumentType.MortgageInstrumentOfRecord)
                        {
                            <div class="docPreviewDiv row">
                                <div class="col-sm-10">
                                    <a target='_blank' href="@Url.Action("DownloadDocument", "Admin", new { fileName = Model.Documents[item].FileName, assetId = Model.AssetId, contentType = Model.Documents[item].ContentType, title = Model.Documents[item].Title })">@Model.Documents[item].Title</a>
                                    <p class="description">@Model.Documents[item].Description</p>
                                </div>
                                <div class="col-sm-2">
                                    @Html.HiddenFor(s => Model.Documents[item].Title)
                                    @Html.HiddenFor(s => Model.Documents[item].Description)
                                    @Html.HiddenFor(s => Model.Documents[item].AssetDocumentId)
                                    @Html.HiddenFor(s => Model.Documents[item].Size)
                                    @Html.HiddenFor(s => Model.Documents[item].ContentType)
                                    @Html.HiddenFor(s => Model.Documents[item].AssetId)
                                    @Html.HiddenFor(s => Model.Documents[item].Type)
                                    @Html.HiddenFor(x => Model.Documents[item].Viewable)
                                    @Html.HiddenFor(s => Model.Documents[item].FileName, new { @class = "docName" })
                                    <input type='button' class='deleteDocUpload delMIR' value='Delete' data-id="#instrumentRecord" data-button="@Model.Documents[item].FileName" onclick='docDelete(this, "#mgInstRecDocs", ".delMIR", "#linkMIR")' />
                                </div>
                            </div>
                        }
                    }
                </div>
            </div>
        }
            @if (Model.availableRecordedLiens)
            {@Html.HiddenFor(model => Model.availableRecordedLiens)
            <div class="document-item">
                <div id="linkRL">
                    <h4>Title Company Recorded Liens</h4>
                </div>
                <div id="recordedLiensDocs" class="document-item-expanded">
                    @for (int item = 0; item < Model.Documents.Count; item++)
                    {
                        if (Model.Documents[item].Type == (int)Inview.Epi.EpiFund.Domain.Enum.AssetDocumentType.RecordedLiens)
                        {
                            <div class="docPreviewDiv row">
                                <div class="col-sm-10">
                                    <a target='_blank' href="@Url.Action("DownloadDocument", "Admin", new { fileName = Model.Documents[item].FileName, assetId = Model.AssetId, contentType = Model.Documents[item].ContentType, title = Model.Documents[item].Title })">@Model.Documents[item].Title</a>
                                    <p class="description">@Model.Documents[item].Description</p>
                                </div>
                                <div class="col-sm-2">
                                    @Html.HiddenFor(s => Model.Documents[item].Title)
                                    @Html.HiddenFor(s => Model.Documents[item].Description)
                                    @Html.HiddenFor(s => Model.Documents[item].AssetDocumentId)
                                    @Html.HiddenFor(s => Model.Documents[item].Size)
                                    @Html.HiddenFor(s => Model.Documents[item].ContentType)
                                    @Html.HiddenFor(s => Model.Documents[item].AssetId)
                                    @Html.HiddenFor(s => Model.Documents[item].Type)
                                    @Html.HiddenFor(x => Model.Documents[item].Viewable)
                                    @Html.HiddenFor(s => Model.Documents[item].FileName, new { @class = "docName" })
                                    <input type='button' class='deleteDocUpload delRL' value='Delete' data-id="#recLiens" data-button="@Model.Documents[item].FileName" onclick='docDelete(this, "#recordedLiensDocs", ".delRL", "#linkRL")' />
                                </div>
                            </div>
                        }
                    }
                </div>
            </div>
        }
            @if (Model.availableTaxLiens)
            {@Html.HiddenFor(model => Model.availableTaxLiens)
            <div class="document-item">
                <div id="linkTL">
                    <h4>Title Company Assessor's Annual Tax Billing Statement</h4>
                </div>
                <div id="taxLiensDocs" class="document-item-expanded">
                    @for (int item = 0; item < Model.Documents.Count; item++)
                    {
                        if (Model.Documents[item].Type == (int)Inview.Epi.EpiFund.Domain.Enum.AssetDocumentType.TaxLiens)
                        {
                            <div class="docPreviewDiv row">
                                <div class="col-sm-10">
                                    <a target='_blank' href="@Url.Action("DownloadDocument", "Admin", new { fileName = Model.Documents[item].FileName, assetId = Model.AssetId, contentType = Model.Documents[item].ContentType, title = Model.Documents[item].Title })">@Model.Documents[item].Title</a>
                                    <p class="description">@Model.Documents[item].Description</p>
                                </div>
                                <div class="col-sm-2">
                                    @Html.HiddenFor(s => Model.Documents[item].Title)
                                    @Html.HiddenFor(s => Model.Documents[item].Description)
                                    @Html.HiddenFor(s => Model.Documents[item].Type)
                                    @Html.HiddenFor(s => Model.Documents[item].AssetDocumentId)
                                    @Html.HiddenFor(s => Model.Documents[item].Size)
                                    @Html.HiddenFor(s => Model.Documents[item].ContentType)
                                    @Html.HiddenFor(s => Model.Documents[item].AssetId)
                                    @Html.HiddenFor(x => Model.Documents[item].Viewable)
                                    @Html.HiddenFor(s => Model.Documents[item].FileName, new { @class = "docName" })
                                    <input type='button' class='deleteDocUpload delTL' value='Delete' data-id="#txLiens" data-button="@Model.Documents[item].FileName" onclick='docDelete(this, "#taxLiensDocs", ".delTL", "#linkTL")' />
                                </div>
                            </div>
                        }
                    }
                </div>
            </div>
        }
            @if (Model.availableBKRelated)
            {@Html.HiddenFor(model => Model.availableBKRelated)
            <div class="document-item">
                <div id="linkBKR">
                    <h4>Title Company BK Related Filings</h4>
                </div>
                <div id="bkRelatedDocs" class="document-item-expanded">
                    @for (int item = 0; item < Model.Documents.Count; item++)
                    {
                        if (Model.Documents[item].Type == (int)Inview.Epi.EpiFund.Domain.Enum.AssetDocumentType.BKRelated)
                        {
                            <div class="docPreviewDiv row">
                                <div class="col-sm-10">
                                    <a target='_blank' href="@Url.Action("DownloadDocument", "Admin", new { fileName = Model.Documents[item].FileName, assetId = Model.AssetId, contentType = Model.Documents[item].ContentType, title = Model.Documents[item].Title })">@Model.Documents[item].Title</a>
                                    <p class="description">@Model.Documents[item].Description</p>
                                </div>
                                <div class="col-sm-2">
                                    @Html.HiddenFor(s => Model.Documents[item].Title)
                                    @Html.HiddenFor(s => Model.Documents[item].Description)
                                    @Html.HiddenFor(s => Model.Documents[item].Type)
                                    @Html.HiddenFor(s => Model.Documents[item].AssetDocumentId)
                                    @Html.HiddenFor(s => Model.Documents[item].Size)
                                    @Html.HiddenFor(s => Model.Documents[item].ContentType)
                                    @Html.HiddenFor(s => Model.Documents[item].AssetId)
                                    @Html.HiddenFor(x => Model.Documents[item].Viewable)
                                    @Html.HiddenFor(s => Model.Documents[item].FileName, new { @class = "docName" })
                                    <input type='button' class='deleteDocUpload delBKR' value='Delete' data-id="#related" data-button="@Model.Documents[item].FileName" onclick='docDelete(this, "#bkRelatedDocs", ".delBKR", "#linkBKR")' />
                                </div>
                            </div>
                        }
                    }
                </div>
            </div>
        }
            @if (Model.availablePreliminaryTitleReportTitle)
            {@Html.HiddenFor(model => Model.availablePreliminaryTitleReportTitle)
            <div class="document-item">
                <div id="linkPTRT">
                    <h4>Title Company Preliminary Title Report</h4>
                </div>
                <div id="preliminaryTitleReportTitleDocs" class="document-item-expanded">
                    @for (int item = 0; item < Model.Documents.Count; item++)
                    {
                        if (Model.Documents[item].Type == (int)Inview.Epi.EpiFund.Domain.Enum.AssetDocumentType.PreliminaryTitleReportTitle)
                        {
                            <div class="docPreviewDiv row">
                                <div class="col-sm-10">
                                    <a target='_blank' href="@Url.Action("DownloadDocument", "Admin", new { fileName = Model.Documents[item].FileName, assetId = Model.AssetId, contentType = Model.Documents[item].ContentType, title = Model.Documents[item].Title })">@Model.Documents[item].Title</a>
                                    <p class="description">@Model.Documents[item].Description</p>
                                </div>
                                <div class="col-sm-2">
                                    @Html.HiddenFor(s => Model.Documents[item].Title)
                                    @Html.HiddenFor(s => Model.Documents[item].Description)
                                    @Html.HiddenFor(s => Model.Documents[item].Type)
                                    @Html.HiddenFor(s => Model.Documents[item].AssetDocumentId)
                                    @Html.HiddenFor(s => Model.Documents[item].Size)
                                    @Html.HiddenFor(s => Model.Documents[item].ContentType)
                                    @Html.HiddenFor(s => Model.Documents[item].AssetId)
                                    @Html.HiddenFor(x => Model.Documents[item].Viewable)
                                    @Html.HiddenFor(s => Model.Documents[item].FileName, new { @class = "docName" })
                                    <input type='button' class='deleteDocUpload delPTRT' value='Delete' data-id="#ptrTitle" data-button="@Model.Documents[item].FileName" onclick='docDelete(this, "#preliminaryTitleReportTitleDocs", ".delPTRT", "#linkPTRT")' />
                                </div>
                            </div>
                        }
                    }
                </div>
            </div>
        }
            @if (Model.availableDOTMTG)
            {@Html.HiddenFor(model => Model.availableDOTMTG)
            <div class="document-item">
                <div id="linkDOTMG">
                    <h4>Title Company Recorded DOTs & MTGs</h4>
                </div>
                <div id="recDOTMTGDocs" class="document-item-expanded">
                    @for (int item = 0; item < Model.Documents.Count; item++)
                    {
                        if (Model.Documents[item].Type == (int)Inview.Epi.EpiFund.Domain.Enum.AssetDocumentType.DOTMTG)
                        {
                            <div class="docPreviewDiv row">
                                <div class="col-sm-10">
                                    <a target='_blank' href="@Url.Action("DownloadDocument", "Admin", new { fileName = Model.Documents[item].FileName, assetId = Model.AssetId, contentType = Model.Documents[item].ContentType, title = Model.Documents[item].Title })">@Model.Documents[item].Title</a>
                                    <p class="description">@Model.Documents[item].Description</p>
                                </div>
                                <div class="col-sm-2">
                                    @Html.HiddenFor(s => Model.Documents[item].Title)
                                    @Html.HiddenFor(s => Model.Documents[item].Description)
                                    @Html.HiddenFor(s => Model.Documents[item].Type)
                                    @Html.HiddenFor(s => Model.Documents[item].AssetDocumentId)
                                    @Html.HiddenFor(s => Model.Documents[item].Size)
                                    @Html.HiddenFor(s => Model.Documents[item].ContentType)
                                    @Html.HiddenFor(s => Model.Documents[item].AssetId)
                                    @Html.HiddenFor(x => Model.Documents[item].Viewable)
                                    @Html.HiddenFor(s => Model.Documents[item].FileName, new { @class = "docName" })
                                    <input type='button' class='deleteDocUpload delDOTMTG' value='Delete' data-id="#dotMG" data-button="@Model.Documents[item].FileName" onclick='docDelete(this, "#recDOTMTGDocs", ".delDOTMTG", "#linkDOTMG")' />
                                </div>
                            </div>
                        }
                    }
                </div>
            </div>
        }
            @if (Model.availableOtherTitle)
            {@Html.HiddenFor(model => Model.availableOtherTitle)
            <div class="document-item">
                <div id="linkODT">
                    <h4>Title Company Other</h4>
                </div>
                <div id="otherDocumentsTitleDocs" class="document-item-expanded">
                    @for (int item = 0; item < Model.Documents.Count; item++)
                    {
                        if (Model.Documents[item].Type == (int)Inview.Epi.EpiFund.Domain.Enum.AssetDocumentType.OtherTitle)
                        {
                            <div class="docPreviewDiv row">
                                <div class="col-sm-10">
                                    <a target='_blank' href="@Url.Action("DownloadDocument", "Admin", new { fileName = Model.Documents[item].FileName, assetId = Model.AssetId, contentType = Model.Documents[item].ContentType, title = Model.Documents[item].Title })">@Model.Documents[item].Title</a>
                                    <p class="description">@Model.Documents[item].Description</p>
                                </div>
                                <div class="col-sm-2">
                                    @Html.HiddenFor(s => Model.Documents[item].Title)
                                    @Html.HiddenFor(s => Model.Documents[item].Description)
                                    @Html.HiddenFor(s => Model.Documents[item].Type)
                                    @Html.HiddenFor(s => Model.Documents[item].AssetDocumentId)
                                    @Html.HiddenFor(s => Model.Documents[item].Size)
                                    @Html.HiddenFor(s => Model.Documents[item].ContentType)
                                    @Html.HiddenFor(s => Model.Documents[item].AssetId)
                                    @Html.HiddenFor(x => Model.Documents[item].Viewable)
                                    @Html.HiddenFor(s => Model.Documents[item].FileName, new { @class = "docName" })
                                    <input type='button' class='deleteDocUpload delODT' value='Delete' data-id="#othTitle" data-button="@Model.Documents[item].FileName" onclick='docDelete(this, "#otherDocumentsTitleDocs", ".delODT", "#linkODT")' />
                                </div>
                            </div>
                        }
                    }
                </div>
            </div>
        }
            @if (Model.AvailableInsurance)
            {@Html.HiddenFor(model => Model.AvailableInsurance)
            <div class="document-item">
                <div id="linkIns">
                    <h4>CRE P&C Coverage Quote</h4>
                </div>
                <div id="insuranceDocs" class="document-item-expanded">
                    @for (int item = 0; item < Model.Documents.Count; item++)
                    {
                        if (Model.Documents[item].Type == (int)Inview.Epi.EpiFund.Domain.Enum.AssetDocumentType.Insurance)
                        {
                            <div class="docPreviewDiv row">
                                <div class="col-sm-10">
                                    <a target='_blank' href="@Url.Action("DownloadDocument", "Admin", new { fileName = Model.Documents[item].FileName, assetId = Model.AssetId, contentType = Model.Documents[item].ContentType, title = Model.Documents[item].Title })">@Model.Documents[item].Title</a>
                                    <p class="description">@Model.Documents[item].Description</p>
                                </div>
                                <div class="col-sm-2">
                                    @Html.HiddenFor(s => Model.Documents[item].Title)
                                    @Html.HiddenFor(s => Model.Documents[item].Description)
                                    @Html.HiddenFor(s => Model.Documents[item].Type)
                                    @Html.HiddenFor(s => Model.Documents[item].AssetDocumentId)
                                    @Html.HiddenFor(s => Model.Documents[item].Size)
                                    @Html.HiddenFor(s => Model.Documents[item].ContentType)
                                    @Html.HiddenFor(s => Model.Documents[item].AssetId)
                                    @Html.HiddenFor(x => Model.Documents[item].Viewable)
                                    @Html.HiddenFor(s => Model.Documents[item].FileName, new { @class = "docName" })
                                    <input type='button' class='deleteDocUpload delIns' value='Delete' data-id="#ins" data-button="@Model.Documents[item].FileName" onclick='docDelete(this, "#insuranceDocs", ".delIns", "#linkIns")' />
                                </div>
                            </div>
                        }
                    }
                </div>
            </div>

        }
            @if (Model.availableInsuranceOther)
            {@Html.HiddenFor(model => Model.availableInsuranceOther)
            <div class="document-item">
                <div id="linkInsOther">
                    <h4>Other Insurance Coverage Related</h4>
                </div>
                <div id="insuranceOtherDocs" class="document-item-expanded">
                    @for (int item = 0; item < Model.Documents.Count; item++)
                    {
                        if (Model.Documents[item].Type == (int)Inview.Epi.EpiFund.Domain.Enum.AssetDocumentType.InsuranceOther)
                        {
                            <div class="docPreviewDiv row">
                                <div class="col-sm-10">
                                    <a target='_blank' href="@Url.Action("DownloadDocument", "Admin", new { fileName = Model.Documents[item].FileName, assetId = Model.AssetId, contentType = Model.Documents[item].ContentType, title = Model.Documents[item].Title })">@Model.Documents[item].Title</a>
                                    <p class="description">@Model.Documents[item].Description</p>
                                </div>
                                <div class="col-sm-2">
                                    @Html.HiddenFor(s => Model.Documents[item].Title)
                                    @Html.HiddenFor(s => Model.Documents[item].Description)
                                    @Html.HiddenFor(s => Model.Documents[item].Type)
                                    @Html.HiddenFor(s => Model.Documents[item].AssetDocumentId)
                                    @Html.HiddenFor(s => Model.Documents[item].Size)
                                    @Html.HiddenFor(s => Model.Documents[item].ContentType)
                                    @Html.HiddenFor(s => Model.Documents[item].AssetId)
                                    @Html.HiddenFor(x => Model.Documents[item].Viewable)
                                    @Html.HiddenFor(s => Model.Documents[item].FileName, new { @class = "docName" })
                                    <input type='button' class='deleteDocUpload delInsOther' value='Delete' data-id="#insOther" data-button="@Model.Documents[item].FileName" onclick='docDelete(this, "#insuranceOtherDocs", ".delInsOther", "#linkInsOther")' />
                                </div>
                            </div>
                        }
                    }
                </div>
            </div>
        }
        </div>
        <br />
        @if (Model.User.UserType == UserType.CREBroker || Model.User.UserType == UserType.CRELender || Model.User.UserType == UserType.Investor)
        {
            <input type="button" class="btn btn-warning" onclick="if (confirm('If you click ok, you will lose all of the data you entered and be returned to the manage assets page.')) goBackSeller()" value="Cancel" />
        }
        else
        {
            <input type="button" class="btn btn-warning" onclick="if (confirm('If you click ok, you will lose all of the data you entered and be returned to the manage assets page.')) goBack()" value="Cancel" />
        }
        <input type="button" class="btn btn-default" onclick="backTab($(this));" value="Back" />
        <input type="button" class="btn btn-primary" onclick="nextTab($(this));" value="Next" />
    </div>

    <div class="tab-pane" id="videos">
        <h3>Videos</h3>
        <div class="row">
            <div class="col-sm-12">
                <button id="addVideoBtn" class="btn btn-primary" type="button">Add Video</button>

                <table class="table table-bordered table-hover videoLinkTable">
                    <thead>
                        <tr>
                            <th width="70%">Videos</th>
                            <th></th>
                            <th></th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @{
                            Model.Videos.Sort((x, y) => x.Index.CompareTo(y.Index));
                            foreach (var vid in Model.Videos)
                            {
                                <tr>
                                    <td>
                                        <p class="videoDesc">@vid.Description</p>
                                        <p class="videoUrl">
                                            @vid.Url
                                        </p>
                                    </td>
                                    <td><button type="button" class="btn btn-info btn-block previewVideoBtn" rel="@vid.Url">Preview</button>
                                    <td><button type="button" class="btn btn-success btn-block editVideoBtn">Edit</button>
                                    <td>
                                        <button type="button" class="btn btn-danger btn-block removeVideoBtn">Remove</button>
                                        <div class="inputTd" style="display:none;"></div>
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>

                <!--new / edit video modal-->
                <div class="modal fade" id="newVideoModal" tabindex="-1" role="dialog">
                    <div class="modal-dialog" role="document">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h4 class="modal-title"></h4>
                            </div>
                            <div class="modal-body">
                                <label>Video Description:</label>
                                <input class="form-control" id="videoDescription" name="videoDescription" />

                                <label>Video Link:</label>
                                <input class="form-control" id="videoUrl" placeholder="https://www.youtube.com/watch?v=YOUR_VIDEO_ID" name="videoUrl" />
                                <div class="alert alert-warning newVideoLinkWarning" style="display:none">
                                    <b>Only YouTube and Vimeo links are supported for the moment.</b>
                                </div>
                                <hr />
                                <div class="panel-group" id="videoAccordion">
                                    <div class="panel panel-default">
                                        <div class="panel-heading">
                                            <h4 class="panel-title">
                                                <a role="button" data-toggle="collapse" data-parent="#videoAccordion" href="#examples">
                                                    Video Link Examples
                                                </a>
                                            </h4>
                                        </div>
                                        <div id="examples" class="panel-collapse collapse" role="tabpanel" aria-labelledby="headingOne">
                                            <div class="panel-body">
                                                <p>Only YouTube and Vimeo links are supported for the moment.</p>
                                                <img src="@Url.Content("~/Content/images/youTubeVideoLinkExample.jpg")" style="width:100%; border:1px solid grey;margin-bottom:10px;" />
                                                <img src="@Url.Content("~/Content/images/vimeoVideoLinkExample.jpg")" style="width:100%; border:1px solid grey;" />
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-default" data-dismiss="modal">Cancel</button>
                                <button type="button" class="btn btn-primary saveNewVideoBtn">Save</button>
                            </div>
                        </div><!-- /.modal-content -->
                    </div><!-- /.modal-dialog -->
                </div><!-- /.modal -->
                <!--priview video modal-->
                <div class="modal fade" id="previewVideoModal" tabindex="-1" role="dialog">
                    <div class="modal-dialog" role="document">
                        <div class="modal-content">
                            <div class="modal-body preivewVideoBody">
                                <!--this is where we insert the preview iframe-->
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                            </div>
                        </div><!-- /.modal-content -->
                    </div><!-- /.modal-dialog -->
                </div><!-- /.modal -->

                <script>
                    $(function () {
                        //rearrange the ordering of the videos
                        function updateVideoIndexes() {
                            var rows = $(".videoLinkTable tbody tr");
                            $.each(rows, function (i, r) {
                                $(this).find("input").remove();
                                //update index, input names
                                //aa the inputs
                                var idInput = '<input id="Videos_' + i + '__AssetId" name="Videos[' + i + '].AssetId" type="hidden" value="' + $("#AssetId").val() + '">';
                                var descInput = '<input id="Videos_' + i + '__Description" name="Videos[' + i + '].Description" type="hidden" value="' + $(this).find(".videoDesc").text().trim() + '">';
                                var urlInput = '<input id="Videos_' + i + '__Url" name="Videos[' + i + '].Url" type="hidden" value="' + $(this).find(".videoUrl").text().trim() + '">';
                                var indexInput = '<input id="Videos_' + i + '__Index" name="Videos[' + i + '].Index" type="hidden" value="' + i + '">';

                                $(this).find(".inputTd").append(idInput);
                                $(this).find(".inputTd").append(descInput);
                                $(this).find(".inputTd").append(urlInput);
                                $(this).find(".inputTd").append(indexInput);
                            });
                        }
                        updateVideoIndexes();

                        //this will return the video iframe if the url is ok
                        function checkVideoFormat(url, returnType, autoplay, size) {

                            //we just want the video id
                            var youtubeRegex = /youtube.com\/watch\?v=([a-zA-Z0-9-_]+)/;
                            var vimeoRegex = /vimeo.com\/([a-zA-Z0-9-_]+)/;

                            var isYouTube = url.indexOf("https://www.youtube.com/") > -1;
                            var isVimeo = url.indexOf("https://vimeo.com/") > -1;

                            var found = [];
                            if (isYouTube) {
                                found = url.match(youtubeRegex);
                            } else if (isVimeo) {
                                found = url.match(vimeoRegex);
                            } else {
                                return null; //not found then return null
                            }

                            var auto = autoplay === true ? 1 : 0;

                            if (returnType == "thumbnail") {
                                if (isYouTube) {
                                    //https://img.youtube.com/vi/mRqDWkIhMBM/
                                    //https://img.youtube.com/vi/mRqDWkIhMBM/0.jpg/
                                    return '<div rel=' + url + ' class="viewVideo"><img style="width:100%; min-height:50px;" src="https://img.youtube.com/vi/' + found[1] + '/0.jpg"/></div>';
                                } else if (isVimeo) {

                                    //for vimeo, you'll need to call vimeo api
                                    $.getJSON('https://vimeo.com/api/oembed.json?url=https%3A//vimeo.com/' + found[1], {
                                        format: "json",
                                        width: "640"
                                    },
                                        function (data) {
                                            $(".vimeo-image-" + found[1]).html('<img style="width:100%; min-height:50px;" src="' + data.thumbnail_url + '"/>');
                                        });

                                    return '<div class="vimeo-image-' + found[1] + ' viewVideo" rel=' + url + ' class="viewVideo"></div>'
                                }
                            } else if (returnType == "video") {

                                if (isYouTube) {
                                    return '<iframe class="previewVideoIframe" allowfullscreen frameborder="0" scrolling="no" marginheight="0" marginwidth="0" width="100%" height="300" type="text/html" src="https://www.youtube.com/embed/' + found[1] + '?autoplay=' + auto + '&fs=1&iv_load_policy=3&showinfo=0&rel=0&cc_load_policy=0&start=0&end=0"></iframe>';
                                } else if (isVimeo) {
                                    return '<iframe class="previewVideoIframe" src="https://player.vimeo.com/video/' + found[1] + '?autoplay=' + auto + '" width="100%" height="300" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>';
                                }
                            }
                        }

                        //sorting is not ready
                        //make the tr sortable
                        $(".videoLinkTable tbody").sortable({
                            placeholder: "ui-state-highlight",
                            update: function () { updateVideoIndexes(); }
                        });
                        $(".videoLinkTable tbody").disableSelection();

                        var isNew = false;
                        var currentVideoRow = null;

                        //add new video
                        $("#addVideoBtn").click(function () {
                            isNew = true;

                            $("#newVideoModal .modal-title").text("Add New Video Link");
                            $("#newVideoModal").modal("show");
                        });

                        //edit video
                        $(".videoLinkTable").on("click", ".editVideoBtn", function () {

                            currentVideoRow = $(this).parents("tr");

                            $("#newVideoModal .modal-title").text("Edit Video Link");
                            $("#newVideoModal #videoUrl").val($(currentVideoRow).find(".videoUrl").text().trim());
                            $("#newVideoModal #videoDescription").val($(currentVideoRow).find(".videoDesc").text().trim());

                            isNew = false;
                            $("#newVideoModal").modal("show");
                        });

                        //save video
                        $(".saveNewVideoBtn").click(function () {
                            //we'll need to hack the mvc list here
                            var url = $("#videoUrl").val();
                            var desc = $("#videoDescription").val();

                            var iframeStr = checkVideoFormat(url, "video");
                            if (iframeStr == null) {
                                $(".newVideoLinkWarning").slideDown();
                                return;
                            } else {

                                if (isNew === true) {
                                    var node =
                                        '<tr>' +
                                        '<td>' +
                                        '<p class="videoDesc">' + desc + '</p>' +
                                        '<p class="videoUrl">' +
                                        url +
                                        '</p>' +
                                        '</td>' +
                                        '<td><button type="button" class="btn btn-info btn-block previewVideoBtn" rel="' + url + '">Preview</button>' +
                                        '<td><button type="button" class="btn btn-success btn-block editVideoBtn">Edit</button></td>' +
                                        '<td>' +
                                        '<button type="button" class="btn btn-danger btn-block removeVideoBtn">Remove</button>' +
                                        '<div class="inputTd" style="display:none;"></div>' +
                                        '</td>' +
                                        '</tr>';

                                    //add the tr to the tbody
                                    $(".videoLinkTable tbody").append($(node));
                                } else {
                                    $(currentVideoRow).find(".videoUrl").text($("#newVideoModal #videoUrl").val().trim());
                                    $(currentVideoRow).find(".videoDesc").text($("#newVideoModal #videoDescription").val().trim());
                                    //update rel in preview button
                                    $(currentVideoRow).find(".previewVideoBtn").attr('rel', $("#newVideoModal #videoUrl").val().trim());
                                }

                                //close the modal
                                $("#newVideoModal").modal("hide");

                                updateVideoIndexes();
                            }
                        });

                        //remove video
                        $("#videos").on("click", ".removeVideoBtn", function (e) {
                            var r = confirm("Are you sure?");
                            if (r == true) {
                                $($(this).parents("tr")).remove();
                                updateVideoIndexes();
                            }
                        });

                        //preview video
                        $("#videos").on("click", ".previewVideoBtn", function (e) {
                            var url = $(this).attr("rel");
                            var iframeStr = checkVideoFormat(url, "video", true);
                            if (iframeStr != null) {
                                $(".preivewVideoBody").html(iframeStr);
                                $("#previewVideoModal").modal("show");
                            } else {
                                alert("Failed to read url. Only YouTube url is supported.");
                            }
                        });

                        //clear the video modal inputs on close
                        $('#newVideoModal').on('hidden.bs.modal', function () {
                            $("#newVideoModal #videoUrl").val("");
                            $("#newVideoModal #videoDescription").val("");

                            //reset it
                            currentVideoRow = null;
                            //hide the warning alert
                            $(".newVideoLinkWarning").hide();
                        });

                        //clear the preview iframe on closed
                        $('#previewVideoModal').on('hidden.bs.modal', function () {
                            $(".previewVideoIframe").remove();
                        });
                    });
                </script>

            </div>
        </div>
        <hr />
        @if (Model.User.UserType == UserType.CREBroker || Model.User.UserType == UserType.CRELender || Model.User.UserType == UserType.Investor)
        {
            <input type="button" class="btn btn-warning" onclick="if (confirm('If you click ok, you will lose all of the data you entered and be returned to the manage assets page.')) goBackSeller()" value="Cancel" />
        }
        else
        {
            <input type="button" class="btn btn-warning" onclick="if (confirm('If you click ok, you will lose all of the data you entered and be returned to the manage assets page.')) goBack()" value="Cancel" />
        }
        <input type="button" class="btn btn-default" onclick="backTab($(this));" value="Back" />
        <input type="button" class="btn btn-primary" onclick="nextTab($(this));" value="Next" />
    </div>

    <div class="tab-pane" id="finish">
        <h3 style="border-bottom: 0 !important">End</h3>
        <div id="divError" style="display:none;color:red;font-weight:bold;"></div>
        <br />
        @if (Model.User.UserType == UserType.CREBroker || Model.User.UserType == UserType.CRELender || Model.User.UserType == UserType.Investor)
        {
            <input type="button" class="btn btn-warning" onclick="if (confirm('If you click ok, you will lose all of the data you entered and be returned to the manage assets page.')) goBackSeller()" value="Cancel" />
        }
        else
        {
            <input type="button" class="btn btn-warning" onclick="if (confirm('If you click ok, you will lose all of the data you entered and be returned to the manage assets page.')) goBack()" value="Cancel" />
        }
        <input type="button" class="btn btn-default" onclick="backTab($(this));" value="Back" />
        <input type="submit" class="btn btn-primary" onclick="return SaveAsset('User')" name="action:Save" value="Save Asset">

        @if (!Model.IsSubmitted)
        {
            if (isCorpAdmin)
            {
                <input type="submit" class="btn btn-primary" onclick="return SaveAsset('User')" name="action:Submit" value="Save & Submit">
            }
            else
            {
                <input type="submit" class="btn btn-primary" onclick="return SaveAsset('User')" name="action:Submit" value="Save & Submit to Corp Admin">
            }
        }
    </div>

</div>

@Html.HiddenFor(s => s.CreationDate)
@Html.HiddenFor(s => s.IsActive)
@Html.HiddenFor(s => s.ListedByUserId)
@Html.HiddenFor(s => s.AssetNumber)

<input type="hidden" value="@(Model.AssetId)" data-asset="@(Model.AssetId)" id="AssetId" name="AssetId" />
<input type="hidden" value="@(Model.GetType())" name="TypeOfAsset" />

<script>
    var isValidForm = true;
    var valErrorMSg = '';
    function formValidation(tabText) {
        valErrorMSg = '';
        isValidForm = true;
        let input = document.getElementsByTagName('input');
        let select = document.getElementsByTagName('select');
        $('.rdMandatory').css("border", "none");
        if ($('#HasPositionMortgage:checked').val() == 'Yes') {
            $(select).css("borderColor", "#B1A795");
            if (tabText === 'Existing Mortgages' || tabText === 'Finish' || tabText === '#finish') {
                if ($('#CurrentPrincipalBalance').val() === '') {
                    $('#CurrentPrincipalBalance').css("borderColor", "red");
                    valErrorMSg += $("label[for='" + $('#CurrentPrincipalBalance').attr('id') + "']").text() + ' is required <br/>';
                    isValidForm = false;
                }

                if ($('#SelectedAmortSchedule option:selected').val() === '') {
                    $('#SelectedAmortSchedule').css('borderColor', 'red');
                    valErrorMSg += $("label[for='" + $('#SelectedAmortSchedule').attr('id') + "']").text() + ' is required <br/>';
                    isValidForm = false;
                }

                if ($('#MonthlyPayment').val() === '') {
                    $('#MonthlyPayment').css("borderColor", "red");
                    valErrorMSg += $("label[for='" + $('#MonthlyPayment').attr('id') + "']").text() + ' is required <br/>';
                    isValidForm = false;
                }
                if ($('#PaymentIncludes option:selected').val() === '') {
                    $('#PaymentIncludes').css("borderColor", "red");
                    valErrorMSg += $("label[for='" + $('#PaymentIncludes').attr('id') + "']").text() + ' is required <br/>';
                    isValidForm = false;
                }
                if ($('#InterestRate').val() === '') {
                    $('#InterestRate').css("borderColor", "red");
                    valErrorMSg += $("label[for='" + $('#InterestRate').attr('id') + "']").text() + ' is required <br/>';
                    isValidForm = false;
                }
                if (!$('#IsMortgageAnARM').is(':checked')) {
                    $('.rdMandatory').css("border", "1px solid red");
                    valErrorMSg += $("label[for='" + $('#IsMortgageAnARM').attr('id') + "']").text() + ' is required <br/>';
                    isValidForm = false;
                }
                //if ($('#MortgageAdjustIfARM').val() === '') {
                //    $('#MortgageAdjustIfARM').css("borderColor", "red");
                //    valErrorMSg += $("label[for='" + $('#MortgageAdjustIfARM').attr('id') + "']").text();
                //    isValidForm = false;
                //}
            }
        }
        return isValidForm;
    }
    function ShowHCpopup() {

        clearOwnerHolding();

        $("#AssetHCOwnershipId").val('');
        $("#OwnerHoldingCompany").val('');
        $("#divSelectHC").hide();
        $(".fields").hide();
        $('.loadFields').show();

        $('#NotOnHoldingList').show();
        $('.hideOnDisabledHolding').show();

        $('#addnewHC').modal('show');
    }
    function HideHCpopup() {
        $('#addnewHC').modal('hide');
    }

    $('.loadFields').click(function () {
        var type = $(this).attr('data-type')
        var name = $(`#Owner${type}Company`).val();
        if (name && name.length > 0) {
            name = name.trim()
            if (name.length > 2)
                fetchApplicableOwnerCompanyOptions(name, type);
            else
                alert('Please type at least 3 characters');
        } else {
            $(`#Owner${type}Company`).addClass('err')
            setTimeout(function () {
                $(`#Owner${type}Company`).removeClass('err')
            }, 1500);
        }
    });

    function fetchApplicableOwnerCompanyOptions(name, type) {
        $.ajax({
            type: "POST",
            url: "/Admin/GetApplicableOwnerCompanyOptions/",
            data: JSON.stringify({ name, type }),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            async: false,
            cache: false,
            success: function (response) {
                if (response.Options && Object.keys(response.Options).length > 0) {
                    $('#SelectOwnerCompanyType').val(type)
                    if (Object.keys(response.Options).length === 1) {
                        // populate company immediately
                        for (var property in response.Options) {
                            populateCompany(property, type);
                            break;
                        }
                    } else {
                        if (type == 'Holding') {
                            $('#ddlSelectOwnerCompanyType option:gt(0)').remove();
                            $.each(response.Options, function (key, value) {
                                $('#ddlSelectOwnerCompanyType').append($("<option></option>").attr("value", key).text(value));
                            });
                            $('#divSelectHC').show();
                        }
                        else {
                            $('#ddlSelectOwnerCompanyOCType option:gt(0)').remove();
                            $.each(response.Options, function (key, value) {
                                $('#ddlSelectOwnerCompanyOCType').append($("<option></option>").attr("value", key).text(value));
                            });
                            $('#divSelectOC').show();
                            $('#selectPIModal').hide();
                            $('.fields').hide();
                        }
                    }
                } else {
                    $(`#Owner${type}Company`).addClass('err')
                    setTimeout(function () {
                        $(`#Owner${type}Company`).removeClass('err')
                    }, 1500);
                }
            },
            error: function (jqXHR, exception) {
                console.error(jqXHR, exception)
            },
            failure: function (response) {
                console.error(response)
            }
        });
    }

    $('#ddlSelectOwnerCompanyType').change(function () {
        if ($(this).val() && $(this).val().length > 0)
            populateCompany($(this).val(), $('#SelectOwnerCompanyType').val());
    });

    $('#ddlSelectOwnerCompanyOCType').change(function () {
        if ($(this).val() && $(this).val().length > 0)
            populateCompany($(this).val(), $('#SelectOwnerCompanyType').val());
    });

    function populateCompany(id, type) {
        var url;
        if (type === 'Holding')
            url = '/Admin/GetHoldingCompanyInformation';
        else if (type === 'Operating')
            url = '/Admin/GetOperatingCompanyInformation';
        if (url) {
            $.ajax({
                type: "POST",
                url: url,
                data: JSON.stringify({ id }),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                async: false,
                cache: false,
                success: function (response) {

                    $(`#Owner${type}CompanyNewId`).val(response.Id);
                    $(`#Owner${type}Company`).val(response.CompanyName);



                    $(`#Owner${type}CompanyFirst`).val(response.FirstName);
                    $(`#Owner${type}CompanyLast`).val(response.LastName);
                    $(`#Owner${type}CompanyAddressLine1`).val(response.AddressLine1);
                    $(`#Owner${type}CompanyAddressLine2`).val(response.AddressLine2);
                    $(`#Owner${type}CompanyCity`).val(response.City);
                    $(`#Owner${type}CompanyState`).val(response.State);
                    $(`#Owner${type}CompanyZip`).val(response.Zip);
                    $(`#Owner${type}CompanyCountry`).val(response.Country);
                    $(`#Owner${type}CompanyWorkPhone`).val(response.WorkPhone);
                    $(`#Owner${type}CompanyCellPhone`).val(response.CellPhone);

                    //$(`#Owner${type}CompanyFax`).val(response.Fax);
                    $(`#Owner${type}CompanyLinkedIn`).val(response.LinkedIn);
                    $(`#Owner${type}CompanyFacebook`).val(response.Facebook);
                    $(`#Owner${type}CompanyInstagram`).val(response.Instagram);
                    $(`#Owner${type}CompanyTwitter`).val(response.Twitter);

                    $(`#Owner${type}CompanyEmail`).val(response.Email);
                    $(`#Owner${type}CompanyIsActive`).val(response.IsActive);

                    if (type === 'Holding') {
                        //Set visibility Holding
                        $('.fields').show();
                        $("#OwnerISRA").prop('checked', response.ISRA);
                    }
                    else {
                        //Set visibility Operting
                        $('.fields').show();
                    }
                },
                error: function (jqXHR, exception) {
                    console.log('populateCompany error', exception)
                },
                failure: function (response) {
                    console.log('populateCompany failure', exception)
                }
            });
        } else {
            alert('Error populating company. Please contact administration for assistance.')
        }
    }

    function validateHCAddEdit() {

        debugger;

        var rtn = true;
        var assetId = $("#AssetId").val();
        var date = $("#ActualClosingDate").val();
        if (date && date.length > 0) {
            $.ajax({
                type: "POST",
                url: '/Admin/CheckHCDate',
                data: JSON.stringify({ date, assetId }),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                async: false,
                cache: false,
                success: function (response) {
                    if (response.Status) {
                        rtn = true;
                    }
                    else {

                        $("#ActualClosingDate").addClass('err')
                        setTimeout(function () {
                            $("#ActualClosingDate").removeClass('err')
                        }, 1500);

                        $("#errorMsgActualClosingDate").html("Actual Closing Date should be grater then last added Actual Closing Date.");
                        setTimeout(function () {
                            $("#errorMsgActualClosingDate").html('');
                        }, 3000);

                        rtn = false;
                    }
                },
                error: function (jqXHR, exception) {
                    console.log('Check Date', exception);
                    rtn = false;
                },
                failure: function (response) {
                    console.log('Check Date failure', exception);
                    rtn = false;
                }
            });
        }
        else {
            $("#ActualClosingDate").addClass('err')
            setTimeout(function () {
                $("#ActualClosingDate").removeClass('err')
            }, 1500);
            rtn = false;
        }

        var SalesPriceNotProvided = $("#SalesPriceNotProvided").is(":checked");
        var SalesPrice = $("#SalesPrice").val();

        if (!SalesPriceNotProvided && SalesPrice.length < 1) {
            $("#SalesPrice").addClass('err')
            setTimeout(function () {
                $("#SalesPrice").removeClass('err')
            }, 1500);

            $("#CalculatedPPU").addClass('err')
            setTimeout(function () {
                $("#CalculatedPPU").removeClass('err')
            }, 1500);

            rtn = false;
        }
        else if (SalesPrice == "0") {
            $("#SalesPrice").addClass('err')
            setTimeout(function () {
                $("#SalesPrice").removeClass('err')
            }, 1500);

            $("#CalculatedPPU").addClass('err')
            setTimeout(function () {
                $("#CalculatedPPU").removeClass('err')
            }, 1500);

            rtn = false;
        }

        return rtn;
    }


    function UpdateCreateHCInsertHCOwnership() {

        debugger;
        var validate = validateHCAddEdit();
        if (validate) {

            var data = JSON.stringify({
                //new data for AssetHCOwnerships
                AssetHCOwnershipId: $("#AssetHCOwnershipId").val(),
                AssetId: $('#AssetId').val(),
                Terms: $("#Terms").val(),
                ActualClosingDate: $("#ActualClosingDate").val(),
                SalesPrice: $("#SalesPrice").val().replace(/,/g, ''),
                SalesPriceNotProvided: ($("#SalesPriceNotProvided").prop("checked") == true) ? true : false,
                CalculatedPPU: $("#CalculatedPPU").length > 0 ? $("#CalculatedPPU").val().replace(/,/g, '') : null,
                CalculatedPPSqFt: $("#CalculatedPPSqFt").length > 0 ? $("#CalculatedPPSqFt").val().replace(/,/g, '') : null,
                CashInvestmentApy: $("#CashInvestmentApy").val(),
                TermsOther: $("#TermsOther").val(),
                CapRate: $("#CapRate").val(),

                //HC Data
                HoldingCompany: {
                    HoldingCompanyId: $("#OwnerHoldingCompanyNewId").val(),
                    ISRA: $("#OwnerISRA").is(":checked"),
                    CompanyName: $("#OwnerHoldingCompany").val(),
                    FirstName: $("#OwnerHoldingCompanyFirst").val(),
                    LastName: $("#OwnerHoldingCompanyLast").val(),
                    Email: $("#OwnerHoldingCompanyEmail").val(),
                    AddressLine1: $("#OwnerHoldingCompanyAddressLine1").val(),
                    AddressLine2: $("#OwnerHoldingCompanyAddressLine2").val(),
                    City: $("#OwnerHoldingCompanyCity").val(),
                    State: $("#OwnerHoldingCompanyState").val(),
                    Country: $("#OwnerHoldingCompanyCountry").val(),
                    Zip: $("#OwnerHoldingCompanyZip").val(),
                    WorkNumber: $("#OwnerHoldingCompanyWorkPhone").val(),
                    CellNumber: $("#OwnerHoldingCompanyCellPhone").val(),
                    //FaxNumber: $("#OwnerHoldingCompanyFax").val(),
                    LinkedIn: $("#OwnerHoldingCompanyLinkedIn").val(),
                    Facebook: $("#OwnerHoldingCompanyFacebook").val(),
                    Instagram: $("#OwnerHoldingCompanyInstagram").val(),
                    Twitter: $("#OwnerHoldingCompanyTwitter").val()
                }
            });

            $.ajax({
                type: "POST",
                url: '/Admin/UpdateCreateHCnAssetHCOwnerships',
                data: data,
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                async: false,
                cache: false,
                success: function (response) {
                    if (response.Status) {

                        RebindAssetHCData();

                        //hide pop up
                        $('#addnewHC').modal('hide');
                        //refresh
                    }

                },
                error: function (jqXHR, exception) {
                    console.log('Save HC', exception)
                },
                failure: function (response) {
                    console.log('Save HC failure', exception)
                }
            });

        }
    }

    $('#NotOnHoldingList').change(function () {
        if ($(this).prop("checked") == true) {
            clearOwnerHolding();
            $(".loadFields").hide();
            $("#divSelectHC").hide();
            $('.fields').show();
        }
        else {
            clearOwnerHolding();
            $(".loadFields").show();
            $('.fields').hide();
        }
    })

    function clearOwnerHolding() {

        $("#OwnerHoldingCompanyNewId").val("");
        $("#OwnerHoldingCompany").val("");
        $("#OwnerISRA").prop('checked', false);
        $("#OwnerHoldingCompanyEmail").val("");
        $("#OwnerHoldingCompanyWorkPhone").val("");
        $("#OwnerHoldingCompanyCellPhone").val("");
        //$("#OwnerHoldingCompanyFax").val("");

        $("#OwnerHoldingCompanyLinkedIn").val("");
        $("#OwnerHoldingCompanyFacebook").val("");
        $("#OwnerHoldingCompanyInstagram").val("");
        $("#OwnerHoldingCompanyTwitter").val("");

        $("#OwnerHoldingCompanyFirst").val("");
        $("#OwnerHoldingCompanyLast").val("");
        $("#OwnerHoldingCompanyAddressLine1").val("");
        $("#OwnerHoldingCompanyAddressLine2").val("");
        $("#OwnerHoldingCompanyCity").val("");
        $("#OwnerHoldingCompanyState").val("");
        $("#OwnerHoldingCompanyZip").val("");
        $("#OwnerHoldingCompanyCountry").val("");

        $("#Terms").val("");
        $("#ActualClosingDate").val("");
        $("#SalesPrice").val("");
        $("#SalesPriceNotProvided").val("");
        $("#CalculatedPPU").val("");
        $("#CalculatedPPSqFt").val("");
        $("#CashInvestmentApy").val("");
        $("#TermsOther").val("");
        $("#CapRate").val("");
    }

    function EditHC(AssetHCOwnershipId) {

        $.ajax({
            type: "GET",
            url: '/Admin/GetOwnerHCByAssetHCOwnershipId',
            data: { AssetHCOwnershipId: AssetHCOwnershipId },
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            async: false,
            cache: false,
            success: function (response) {

                var AssetHCOwnership = response.result;

                $("#AssetHCOwnershipId").val(AssetHCOwnership.AssetHCOwnershipId);
                $("#OwnerHoldingCompanyNewId").val(AssetHCOwnership.HoldingCompanyId);

                $("#Terms").val(AssetHCOwnership.Terms);
                $("#TermsOther").val(AssetHCOwnership.TermsOther);
                $("#ActualClosingDate").val(AssetHCOwnership.ActualClosingDate != null ? getFormattedDate(AssetHCOwnership.ActualClosingDate) : '');

                $("#SalesPrice").val(AssetHCOwnership.SalesPrice);
                $("#CalculatedPPU").val(AssetHCOwnership.CalculatedPPU);
                $("#CalculatedPPSqFt").val(AssetHCOwnership.CalculatedPPSqFt);
                $("#CashInvestmentApy").val(AssetHCOwnership.CashInvestmentApy);
                $("#CapRate").val(AssetHCOwnership.CapRate);

                $("#OwnerHoldingCompany").val(AssetHCOwnership.OwnerHoldingCompany);

                $("#OwnerISRA").prop('checked', AssetHCOwnership.OwnerISRA);

                $("#OwnerHoldingCompanyEmail").val(AssetHCOwnership.OwnerHoldingCompanyEmail);
                $("#OwnerHoldingCompanyFirst").val(AssetHCOwnership.OwnerHoldingCompanyFirst);
                $("#OwnerHoldingCompanyLast").val(AssetHCOwnership.OwnerHoldingCompanyLast);
                $("#OwnerHoldingCompanyAddressLine1").val(AssetHCOwnership.OwnerHoldingCompanyAddressLine1);
                $("#OwnerHoldingCompanyAddressLine2").val(AssetHCOwnership.OwnerHoldingCompanyAddressLine2);
                $("#OwnerHoldingCompanyCity").val(AssetHCOwnership.OwnerHoldingCompanyCity);
                $("#OwnerHoldingCompanyState").val(AssetHCOwnership.OwnerHoldingCompanyState);
                $("#OwnerHoldingCompanyZip").val(AssetHCOwnership.OwnerHoldingCompanyZip);
                $("#OwnerHoldingCompanyCountry").val(AssetHCOwnership.OwnerHoldingCompanyCountry);
                $("#OwnerHoldingCompanyWorkPhone").val(AssetHCOwnership.OwnerHoldingCompanyWorkPhone);
                $("#OwnerHoldingCompanyCellPhone").val(AssetHCOwnership.OwnerHoldingCompanyCellPhone);
                //$("#OwnerHoldingCompanyFax").val(AssetHCOwnership.OwnerHoldingCompanyFax);

                $("#OwnerHoldingCompanyLinkedIn").val(AssetHCOwnership.OwnerHoldingCompanyLinkedIn);
                $("#OwnerHoldingCompanyFacebook").val(AssetHCOwnership.OwnerHoldingCompanyFacebook);
                $("#OwnerHoldingCompanyInstagram").val(AssetHCOwnership.OwnerHoldingCompanyInstagram);
                $("#OwnerHoldingCompanyTwitter").val(AssetHCOwnership.OwnerHoldingCompanyTwitter);

                $('#addnewHC').modal('show');
                $('.fields').show();
                $('.loadFields').hide();
                $('#divSelectHC').hide();

                $('#NotOnHoldingList').hide();
                $('.hideOnDisabledHolding').hide();

                $("input.formatNumber").each(function (index) {"$"
                    $(this).val(addCommas($(this).val(), true));
                    $(this).on("input", null, null, function () {
                        $(this).val(addCommas($(this).val(), true));
                    });
                });

            },
            error: function (jqXHR, exception) {
                console.log('Save HC', exception)
            },
            failure: function (response) {
                console.log('Save HC failure', exception)
            }
        });

    }

    function RebindAssetHCData() {

        //clear table
        $("#divtblAssetHC").show();
        $("#tblAssetHC tbody").empty();
        $("#btnAddHoldingCompany").prop('value', 'Change Ownership');

        $.ajax({
            type: "GET",
            url: '/Admin/GetAssetHCByAssetId',
            data: { assetId: $('#AssetId').val() },
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            async: false,
            cache: false,
            success: function (response) {
                var innerHTML = '';
                $.each(response.result, function (k, v) {
                    var assetHC = v;
                    var date = assetHC.ActualClosingDate != null ? getFormattedDate(assetHC.ActualClosingDate) : "N/A";
                    if (k == 0) {
                        innerHTML += "<tr><td>" + assetHC.OwnerHoldingCompany + "</td><td>" + (assetHC.Terms == "0" ? "--" : assetHC.Terms) + "</td><td>" + date + "</td><td><span class='padmoney'>" + assetHC.SalesPrice + "</span></td><td><span class='padmoney'>" + assetHC.CalculatedPPU + "</span></td><td>" + assetHC.SalesPriceNotProvided + "</td><td><a onclick='EditHC(" + assetHC.AssetHCOwnershipId + ")' style = 'cursor:pointer' title = 'eidt Holding company'><span class='glyphicon glyphicon-pencil'></span></a></td></tr> ";
                    }
                    else {
                        innerHTML += "<tr><td>" + assetHC.OwnerHoldingCompany + "</td><td>" + (assetHC.Terms == "0" ? "--" : assetHC.Terms) + "</td><td>" + date + "</td><td><span class='padmoney'>" + assetHC.SalesPrice + "</span></td><td><span class='padmoney'>" + assetHC.CalculatedPPU + "</span></td><td>" + assetHC.SalesPriceNotProvided + "</td><td><a onclick='EditHC(" + assetHC.AssetHCOwnershipId + ")' style = 'cursor:pointer' title = 'eidt Holding company'><span class='glyphicon glyphicon-pencil'></span></a></td></tr>";
                    }
                });

                $("#tblAssetHC tbody").html(innerHTML);

                //hide pop up
                $('#addnewHC').modal('hide');
                //add comma
                $('.padmoney').each(function (index) {
                    padCommas(this, true);
                });

            },
            error: function (jqXHR, exception) {
                console.log('Save HC', exception)
            },
            failure: function (response) {
                console.log('Save HC failure', exception)
            }
        });

    }

    function getFormattedDate(d) {
        try {
            const date = new Date(d.match(/\d+/)[0] * 1);
            var year = date.getFullYear();

            var month = (1 + date.getMonth()).toString();
            month = month.length > 1 ? month : '0' + month;

            var day = date.getDate().toString();
            day = day.length > 1 ? day : '0' + day;

            return month + '/' + day + '/' + year;
        } catch (e) {
            return "N/A";
        }
    }

    //OC reslated Scripts
    function ShowOCpopup() {
        clearOperatingComapny();

        $("#AssetOCId").val('');
        $('#addnewOC').modal('show');
        $(".hideOnOperatingUpdate").show();

        $('#NotOnOperatingList').show();
        $('.hideOnDisabledOperating').show();

        $('#divSelectOC').hide();
        $('#selectPIModal').hide();
        $('.fields').hide();
    }

    function HideOCpopup() {
        $('#addnewOC').modal('hide');
    }

    function UpdateCreateOCInsertOC() {

        var data = JSON.stringify({
            //new data for AssetHCOwnerships
            AssetOCId: $("#AssetOCId").val(),
            AssetId: $('#AssetId').val(),
            OperatingCompanyId: $("#OwnerOperatingCompanyNewId").val(),

            CompanyName: $("#OwnerOperatingCompany").val(),
            FirstName: $("#OwnerOperatingCompanyFirst").val(),
            LastName: $("#OwnerOperatingCompanyLast").val(),
            Email: $("#OwnerOperatingCompanyEmail").val(),

            AddressLine1: $("#OwnerOperatingCompanyAddressLine1").val(),
            AddressLine2: $("#OwnerOperatingCompanyAddressLine2").val(),
            City: $("#OwnerOperatingCompanyCity").val(),
            State: $("#OwnerOperatingCompanyState").val(),
            Zip: $("#OwnerOperatingCompanyZip").val(),
            Country: $("#OwnerOperatingCompanyCountry").val(),

            WorkNumber: $("#OwnerOperatingCompanyWorkPhone").val(),
            CellNumber: $("#OwnerOperatingCompanyCellPhone").val(),
            //FaxNumber: $("#OwnerOperatingCompanyFax").val(),
            LinkedIn: $("#OwnerOperatingCompanyLinkedIn").val(),
            Facebook: $("#OwnerOperatingCompanyFacebook").val(),
            Instagram: $("#OwnerOperatingCompanyInstagram").val(),
            Twitter: $("#OwnerOperatingCompanyTwitter").val()
        });

        $.ajax({
            type: "POST",
            url: '/Admin/UpdateCreateOC',
            data: data,
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            async: false,
            cache: false,
            success: function (response) {
                if (response.Status) {
                    RebindAssetOCData();
                    //hide pop up
                    $('#addnewOC').modal('hide');
                    //refresh
                }
            },
            error: function (jqXHR, exception) {
                console.log('Save HC', exception)
            },
            failure: function (response) {
                console.log('Save HC failure', exception)
            }
        });
    }

    function RebindAssetOCData() {

        //clear table
        $("#divtblAssetOC").show();
        $("#tblAssetOC tbody").empty();
        $("#btnAddOperatingCompany").prop('value', 'Change Operating Company');

        $.ajax({
            type: "GET",
            url: '/Admin/GetAssetOCByAssetId',
            data: { assetId: $('#AssetId').val() },
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            async: false,
            cache: false,
            success: function (response) {
                var innerHTML = '';
                $.each(response.result, function (k, v) {
                    var assetOC = v;
                    if (k == 0) {
                        innerHTML += "<tr><td>" + assetOC.OwnerOperatingCompany + "</td><td>" + assetOC.FullName + "</td><td>" + assetOC.City + "</td><td>" + assetOC.State + "</td><td>" + assetOC.Zip + "</td><td><a onclick='EditOC(" + assetOC.AssetOCId + ")' style = 'cursor:pointer' title = 'eidt Holding company'><span class='glyphicon glyphicon-pencil'></span></a></td></tr> ";
                    }
                    else {
                        innerHTML += "<tr><td>" + assetOC.OwnerOperatingCompany + "</td><td>" + assetOC.FullName + "</td><td>" + assetOC.City + "</td><td>" + assetOC.State + "</td><td>" + assetOC.Zip + "</td><td><a onclick='EditOC(" + assetOC.AssetOCId + ")' style = 'cursor:pointer' title = 'eidt Holding company'><span class='glyphicon glyphicon-pencil'></span></a></td></tr>";
                    }
                });

                $("#tblAssetOC tbody").html(innerHTML);

                //hide pop up
                $('#addnewOC').modal('hide');
                //add comma
                $('.padmoney').each(function (index) {
                    padCommas(this, true);
                });

            },
            error: function (jqXHR, exception) {
                console.log('Save HC', exception)
            },
            failure: function (response) {
                console.log('Save HC failure', exception)
            }
        });
    }

    function EditOC(AssetOCId) {

        $.ajax({
            type: "GET",
            url: '/Admin/GetOCByAssetOCId',
            data: { AssetOCId: AssetOCId },
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            async: false,
            cache: false,
            success: function (response) {

                console.log(response);
                var AssetOC = response.result;

                $("#AssetOCId").val(AssetOC.AssetOCId);
                $("#OwnerOperatingCompanyNewId").val(AssetOC.OperatingCompanyId);

                $("#OwnerOperatingCompany").val(AssetOC.OwnerOperatingCompany);
                $("#OwnerOperatingCompanyFirst").val(AssetOC.FirstName);
                $("#OwnerOperatingCompanyLast").val(AssetOC.LastName);

                $("#OwnerOperatingCompanyEmail").val(AssetOC.Email);

                $("#OwnerOperatingCompanyAddressLine1").val(AssetOC.AddressLine1);
                $("#OwnerOperatingCompanyAddressLine2").val(AssetOC.AddressLine2);

                $("#OwnerOperatingCompanyCity").val(AssetOC.City);
                $("#OwnerOperatingCompanyState").val(AssetOC.State);
                $("#OwnerOperatingCompanyZip").val(AssetOC.Zip);
                $("#OwnerOperatingCompanyCountry").val(AssetOC.Country);

                $("#OwnerOperatingCompanyWorkPhone").val(AssetOC.WorkNumber);
                $("#OwnerOperatingCompanyCellPhone").val(AssetOC.CellNumber);

                //$("#OwnerOperatingCompanyFax").val(AssetOC.FaxNumber);

                $("#OwnerOperatingCompanyLinkedIn").val(AssetOC.LinkedIn);
                $("#OwnerOperatingCompanyFacebook").val(AssetOC.Facebook);
                $("#OwnerOperatingCompanyInstagram").val(AssetOC.Instagram);
                $("#OwnerOperatingCompanyTwitter").val(AssetOC.Twitter);

                $('#addnewOC').modal('show');

                $('.hideOnOperatingUpdate').hide();
                $('.fields').show();
                $('.loadFields').hide();
                $('#divSelectOC').hide();

                $('#NotOnOperatingList').hide();
                $('.hideOnDisabledOperating').hide();

            },
            error: function (jqXHR, exception) {
                console.log('Save HC', exception)
            },
            failure: function (response) {
                console.log('Save HC failure', exception)
            }
        });
    }

    $('#NotOnOperatingList').change(function () {
        if ($(this).prop("checked") == true) {
            clearOperatingComapny();
            $(".hideOnOperatingUpdate").hide();
            $("#divSelectOC").hide();
            $('.fields').show();
        }
        else {
            clearOperatingComapny();
            $(".hideOnOperatingUpdate").show();
            $('.fields').hide();
        }
    })

    function clearOperatingComapny() {

        $("#OwnerHoldingCompanyNewId").val("");
        $("#AssetOCId").val("");
        $("#OwnerOperatingCompanyNewId").val("");

        $("#OwnerOperatingCompany").val("");
        $("#OwnerOperatingCompanyFirst").val("");
        $("#OwnerOperatingCompanyLast").val("");

        $("#OwnerOperatingCompanyEmail").val("");

        $("#OwnerOperatingCompanyAddressLine1").val("");
        $("#OwnerOperatingCompanyAddressLine2").val("");

        $("#OwnerOperatingCompanyCity").val("");
        $("#OwnerOperatingCompanyState").val("");
        $("#OwnerOperatingCompanyZip").val("");
        $("#OwnerOperatingCompanyCountry").val("");

        $("#OwnerOperatingCompanyWorkPhone").val("");
        $("#OwnerOperatingCompanyCellPhone").val("");

        //$("#OwnerOperatingCompanyFax").val("");
        $("#OwnerOperatingCompanyLinkedIn").val("");
        $("#OwnerOperatingCompanyFacebook").val("");
        $("#OwnerOperatingCompanyInstagram").val("");
        $("#OwnerOperatingCompanyTwitter").val("");
    }

    $('#cbOperatingCreate').change(function () {
        if ($(this).prop("checked") == true) {

            $.ajax({
                type: "GET",
                url: '/Admin/GetHCAddressByAssetId',
                data: { AssetId: $('#AssetId').val() },
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                async: false,
                cache: false,
                success: function (response) {

                    console.log(response);
                    var AssetOC = response.result;

                    $("#OwnerOperatingCompanyAddressLine1").val(AssetOC.AddressLine1);
                    $("#OwnerOperatingCompanyAddressLine2").val(AssetOC.AddressLine2);
                    $("#OwnerOperatingCompanyCity").val(AssetOC.City);
                    $("#OwnerOperatingCompanyState").val(AssetOC.State);
                    $("#OwnerOperatingCompanyZip").val(AssetOC.Zip);
                    $("#OwnerOperatingCompanyCountry").val(AssetOC.Country);
                    $("#OwnerOperatingCompanyWorkPhone").val(AssetOC.WorkNumber);
                    $("#OwnerOperatingCompanyCellPhone").val(AssetOC.CellNumber);

                    //$("#OwnerOperatingCompanyFax").val(AssetOC.FaxNumber);
                    $("#OwnerOperatingCompanyLinkedIn").val(AssetOC.LinkedIn);
                    $("#OwnerOperatingCompanyFacebook").val(AssetOC.Facebook);
                    $("#OwnerOperatingCompanyInstagram").val(AssetOC.Instagram);
                    $("#OwnerOperatingCompanyTwitter").val(AssetOC.Twitter);

                },
                error: function (jqXHR, exception) {
                    console.log('Save HC', exception)
                },
                failure: function (response) {
                    console.log('Save HC failure', exception)
                }
            });
        }
    });

    $("#CapRate").blur(function () {
        var num = parseFloat($("#CapRate").val());
        $("#CapRate").val(num.toFixed(2));
    });

    $(document).ready(function () {
        $("#tblAssetHC").children('tbody').children('tr').hide(600);
        $("#tblAssetHC").children('tbody').children('tr:first').show(600);
        $("#tblAssetOC").children('tbody').children('tr').hide(600);
        $("#tblAssetOC").children('tbody').children('tr:first').show(600);
    });

    $("#spanHCCollapse").click(function () {
        if ($(this).hasClass("fa-arrow-down")) {
            $(this).removeClass("fa-arrow-down");
            $(this).addClass("fa-arrow-up");
            $("#tblAssetHC").children('tbody').children('tr').show(600);
        }
        else {
            $(this).addClass("fa-arrow-down");
            $(this).removeClass("fa-arrow-up");
            $("#tblAssetHC").children('tbody').children('tr').hide(600);
            $("#tblAssetHC").children('tbody').children('tr:first').show(600);
        }
    });

    $("#spanOCCollapse").click(function () {
        if ($(this).hasClass("fa-arrow-down")) {
            $(this).removeClass("fa-arrow-down");
            $(this).addClass("fa-arrow-up");
            $("#tblAssetOC").children('tbody').children('tr').show(600);
        }
        else {
            $(this).addClass("fa-arrow-down");
            $(this).removeClass("fa-arrow-up");
            $("#tblAssetOC").children('tbody').children('tr').hide(600);
            $("#tblAssetOC").children('tbody').children('tr:first').show(600);
        }
    });

</script>

<script>
    function RemoveFile(file) {
        file.previewElement.className += ' hide';
        // remove the filename so we can remove the file on post
        file.previewElement.children[0].children[3].children[0].value = '';
    }

    function addCommasToInputAndCalculate(control, index) {
        $(control).val(addCommas($(control).val(), false));
        calculateEstimatedDeferredMaintenance(index);
    };
    $('.ConvertToDoller').on('input', function () {
        if ($(this).val().trim() != '') {
            var dolNum = '$' + $(this).val().replace('$', '');
            $(this).val(dolNum == '$' ? '' : dolNum)
        }
    });
    $('.inputDecimalNumber').on('blur', function () {
       
        $(this).val(parseFloat($(this).val()).toFixed(2))
    });
    function SaveAsset(method) {

        $('#divError').hide();
        $('#divError').html('');
        if (isValidForm) {
            $('#Method').val(method);
            fixNumbers();
        }
        else {
            $('#divError').html(valErrorMSg);
            $('#divError').show();
            return false;
        }
    }

    function fixNumbers() {
        $("input.formatNumber").each(function (index) {
            $(this).val($(this).val().replace(/,/g, ""));
        });
        $("input.formatMaint").each(function (index) {
            $(this).val($(this).val().replace(/,/g, ""));
        });
    };

    $('#myTab a').click(function (e) {
        e.preventDefault()
        $(this).tab('show')
    })

    $("[name = 'rbIsPaperAsset']").change(togglePaperTab);

    function togglePaperTab() {
        $("#tabPaper").toggle();
    }

    function goBack() {
        window.location.href = "/Admin/ManageAssets";
    }

    function goBackSeller() {
        window.location.href = "/Investors/SellerManageAssets";
    }

    function nextTab(button) {
        if (formValidation($('.nav li.active').text())) {
            $('.nav li.active').removeClass('active');
            var currentId = button.closest('.tab-pane');
            var nextId = button.closest('.tab-pane').next('.tab-pane');
            currentId.removeClass('active');
            nextId.addClass('active');
            var tabLink = '#' + nextId.attr('id');

            $("[href = '" + tabLink + "']").closest('li').addClass('active');
        }

    }

    function backTab(button) {
        $('.nav li.active').removeClass('active');
        var currentId = button.closest('.tab-pane');
        var prevId = button.closest('.tab-pane').prev('.tab-pane');
        currentId.removeClass('active');
        prevId.addClass('active');
        var tabLink = '#' + prevId.attr('id');
        $("[href = '" + tabLink + "']").closest('li').addClass('active');
    }

    function toggleWRAP(show) {
        if (show) {
            $("#wrapFields").show();

        } else {
            $("#wrapFields").hide();

        }
    }

    function toggleEnv(show) {
        var docEnvNumber = $("#DocumentNumberEnvi").val();
        if (show) {
            if (docEnvNumber > -1) {
                $('#envidocumentExists').show();}
            else {
                $('#uploadEnvModal').show();
            }

            $('#envidocumentDisplay').show();

        } else {
            $('#envidocumentDisplay').hide();
            $('#uploadEnvModal').hide();
            $('#envidocumentExists').hide();
        }
    }

    $("#imgUploader").change(function () {
        var path = $(this).val();
        var fileName = path.match(/[^\/\\]+$/);
        readIMG(this, fileName);
    });

    $("#videoUploader").change(function () {
        var path = $(this).val();
        var fileName = path.match(/[^\/\\]+$/);
        readVideo(this, fileName);
    });

    function showExtraListingAgentBox(item) {
        $("#FirstName-" + item).val("");
        $("#LastName-" + item).val("");
        $("#Email-" + item).val("");
        $("#CompanyName-" + item).val("");
        $("#CompanyAddressLine1-" + item).val("");
        $("#CompanyAddressLine2-" + item).val("");
        $("#CompanyCity-" + item).val("");
        $("#CompanyState-" + item).val("");
        $("#CompanyZip-" + item).val("");
        $("#CellPhoneNumber-" + item).val("");
        $("#WorkPhoneNumber-" + item).val("");
        $("#FaxNumber-" + item).val("");
        $("#CommissionShareAgr-" + item).val("");
        $("#CommissionAmount-" + item).val("");
        $("#DateOfCsaConfirm-" + item).val("");

        $("#NARMemberId-" + item).val("0");
        $("#ReferredByUserId-" + item).val("");
        $("#IsActive-" + item).val("false");
        $("#Website-" + item).val("");
        $("#Registered-" + item).val("");
        $("#agentId-" + item).val("0");

        $("#AssetNARMemberId-" + item).val("00000000-0000-0000-0000-000000000000");
        $("#OptionName-" + item).toggle();
    }

    $('#addListingAgent').click(function () {
        listingAgentCount++;
        $('#listingAgentList').append("<div class='iterateListingAgents'>  <input id='agentId-" + listingAgentCount + "' name='AssetNARMembers[" + listingAgentCount + "].NARMemberId' type='text' style='display:none;'><input id='NARMemberId-" + listingAgentCount + "' name='AssetNARMembers[" + listingAgentCount + "].NARMember.NARMemberId' type='text' style='display:none;'><input id='ReferredByUserId-" + listingAgentCount + "' name='AssetNARMembers[" + listingAgentCount + "].NARMember.ReferredByUserId' type='text' style='display:none;'><input id='IsActive-" + listingAgentCount + "' name='AssetNARMembers[" + listingAgentCount + "].NARMember.IsActive' type='text' style='display:none;'><input id='Website-" + listingAgentCount + "' name='AssetNARMembers[" + listingAgentCount + "].NARMember.Website' type='text' style='display:none;'><input id='Registered-" + listingAgentCount + "' name='AssetNARMembers[" + listingAgentCount + "].NARMember.Registered' type='text' style='display:none;'>  <input id='AssetNARMemberId-" + listingAgentCount + "' name='AssetNARMembers[" + listingAgentCount + "].AssetNARMemberId' type='text' style='display:none;' value='00000000-0000-0000-0000-000000000000'> <input id='AssetId-" + listingAgentCount + "' name='AssetNARMembers[" + listingAgentCount + "].AssetId' type='text' style='display:none;' value='" + $('#AssetId').val() + "'> <div class='row'> <div class='col-sm-6'> <div class='input-group'> <label>Listing Agent Company</label> </div> </div> <div class='col-sm-6'> <div class='input-group'> <input id='CompanyName-" + listingAgentCount + "' name='AssetNARMembers[" + listingAgentCount + "].NARMember.CompanyName' type='text' value=''> </div> </div> <div class='col-sm-6'> <div class='input-group'> <span class='field-validation-valid' data-valmsg-for='AssetNARMembers[" + listingAgentCount + "].NARMember.CompanyName' data-valmsg-replace='true'></span> </div> </div> </div>  <div class='row'> <div class='col-sm-6'> <div class='input-group'> <label>Listing Agent Name</label> </div> </div> <div class='col-sm-6'> <div class='input-group'> <select id='SelectedNarMemberId-" + listingAgentCount + "' name='AssetNARMembers[" + listingAgentCount + "].NARMember.SelectedNarMemberId' onchange='fillListingUserInformation(" + listingAgentCount + ")'></select> <input class='NotOnList' style='margin-left: 10px;' type='checkbox' name='AssetNARMembers[" + listingAgentCount + "].NARMember.NotOnList' onchange='showExtraListingAgentBox(" + listingAgentCount + ")' value='true'/> <input  type='hidden' name='AssetNARMembers[" + listingAgentCount + "].NARMember.NotOnList' value='false'/>Not on list? <span class='field-validation-valid' data-valmsg-for='AssetNARMembers[" + listingAgentCount + "].NARMember.FullName' data-valmsg-replace='true'></span> </div> </div> </div>  <div id='OptionName-" + listingAgentCount + "' style='display: none;'> <div class='row'> <div class='col-sm-6'> <div class='input-group'><em>Type new listing agent first name here:</em></div> </div> <div class='col-sm-6'> <div class='input-group'> <input id='FirstName-" + listingAgentCount + "' name='AssetNARMembers[" + listingAgentCount + "].NARMember.FirstName' type='text' value=''> </div> </div> </div> <div class='row'> <div class='col-sm-6'> <div class='input-group'><em>Type new listing agent last name here:</em></div> </div> <div class='col-sm-6'> <div class='input-group'> <input id='LastName-" + listingAgentCount + "' name='AssetNARMembers[" + listingAgentCount + "].NARMember.LastName' type='text' value=''> </div> </div> </div> </div>  <div class='row'> <div class='col-sm-6'> <div class='input-group'> <label>Listing Agent Email</label> </div> </div> <div class='col-sm-6'> <div class='input-group'> <input id='Email-" + listingAgentCount + "' name='AssetNARMembers[" + listingAgentCount + "].NARMember.Email' type='text' value=''> <span class='field-validation-valid' data-valmsg-for='AssetNARMembers[" + listingAgentCount + "].NARMember.Email' data-valmsg-replace='true'></span> </div> </div> </div>  <div class='row'> <div class='col-sm-6'> <div class='input-group'> <label>Listing Agent Corp Address 1</label> </div> </div> <div class='col-sm-6'> <div class='input-group'> <input id='CompanyAddressLine1-" + listingAgentCount + "' name='AssetNARMembers[" + listingAgentCount + "].NARMember.CompanyAddressLine1' type='text' value=''> </div> </div> <div class='col-sm-6'> <div class='input-group'> <span class='field-validation-valid' data-valmsg-for='AssetNARMembers[" + listingAgentCount + "].NARMember.CompanyAddressLine1' data-valmsg-replace='true'></span> </div> </div> </div>  <div class='row'> <div class='col-sm-6'> <div class='input-group'> <label>Listing Agent Corp Address 2</label> </div> </div> <div class='col-sm-6'> <div class='input-group'> <input id='CompanyAddressLine2-" + listingAgentCount + "' name='AssetNARMembers[" + listingAgentCount + "].NARMember.CompanyAddressLine2' type='text' value=''> </div> </div> <div class='col-sm-6'> <div class='input-group'> <span class='field-validation-valid' data-valmsg-for='AssetNARMembers[" + listingAgentCount + "].NARMember.CompanyAddressLine2' data-valmsg-replace='true'></span> </div> </div> </div>  <div class='row'> <div class='col-sm-6'> <div class='input-group'> <label>Listing Agent City</label> </div> </div> <div class='col-sm-6'> <div class='input-group'> <input id='CompanyCity-" + listingAgentCount + "' name='AssetNARMembers[" + listingAgentCount + "].NARMember.CompanyCity' type='text' value=''> </div> </div> <div class='col-sm-6'> <div class='input-group'> <span class='field-validation-valid' data-valmsg-for='AssetNARMembers[" + listingAgentCount + "].NARMember.CompanyCity' data-valmsg-replace='true'></span> </div> </div> </div>  <div class='row'> <div class='col-sm-6'> <div class='input-group'> <label>Listing Agent State</label> </div> </div> <div class='col-sm-6'> <div class='input-group'> <input id='CompanyState-" + listingAgentCount + "' name='AssetNARMembers[" + listingAgentCount + "].NARMember.CompanyState' type='text' value=''> </div> </div> <div class='col-sm-6'> <div class='input-group'> <span class='field-validation-valid' data-valmsg-for='AssetNARMembers[" + listingAgentCount + "].NARMember.CompanyState' data-valmsg-replace='true'></span> </div> </div> </div>  <div class='row'> <div class='col-sm-6'> <div class='input-group'> <label>Listing Agent Zip</label> </div> </div> <div class='col-sm-6'> <div class='input-group'> <input id='CompanyZip-" + listingAgentCount + "' name='AssetNARMembers[" + listingAgentCount + "].NARMember.CompanyZip' type='text' value=''> </div> </div> <div class='col-sm-6'> <div class='input-group'> <span class='field-validation-valid' data-valmsg-for='AssetNARMembers[" + listingAgentCount + "].NARMember.CompanyZip' data-valmsg-replace='true'></span> </div> </div> </div>  <div class='row'> <div class='col-sm-6'> <div class='input-group'> <label>Listing Agent Work Number</label> </div> </div> <div class='col-sm-6'> <div class='input-group'> <input id='WorkPhoneNumber-" + listingAgentCount + "' name='AssetNARMembers[" + listingAgentCount + "].NARMember.WorkPhoneNumber' type='text' value=''> </div> </div> <div class='col-sm-6'> <div class='input-group'> <span class='field-validation-valid' data-valmsg-for='AssetNARMembers[" + listingAgentCount + "].NARMember.WorkPhoneNumber' data-valmsg-replace='true'></span> </div> </div> </div>  <div class='row'> <div class='col-sm-6'> <div class='input-group'> <label>Listing Agent Cell Number</label> </div> </div> <div class='col-sm-6'> <div class='input-group'> <input id='CellPhoneNumber-" + listingAgentCount + "' name='AssetNARMembers[" + listingAgentCount + "].NARMember.CellPhoneNumber' type='text' value=''> </div> </div> <div class='col-sm-6'> <div class='input-group'> <span class='field-validation-valid' data-valmsg-for='AssetNARMembers[" + listingAgentCount + "].NARMember.CellPhoneNumber' data-valmsg-replace='true'></span> </div> </div> </div> <div class='row'> <div class='col-sm-6'> <div class='input-group'> <label>Listing Agent Fax Number</label> </div> </div> <div class='col-sm-6'> <div class='input-group'> <input id='FaxNumber-" + listingAgentCount + "' name='AssetNARMembers[" + listingAgentCount + "].NARMember.FaxNumber' type='text' value=''> </div> </div> <div class='col-sm-6'> <div class='input-group'> <span class='field-validation-valid' data-valmsg-for='AssetNARMembers[" + listingAgentCount + "].NARMember.FaxNumber' data-valmsg-replace='true'></span> </div> </div> </div> <div class='row'> <div class='col-sm-6'> <div class='input-group'> <label>Commission Share Agr</label> </div> </div> <div class='col-sm-6'> <div class='input-group' style='padding-top: 5px'> <input class='csa' data-val='true' data-val-required='The Commission Share Agreement field is required.' name='AssetNARMembers[" + listingAgentCount + "].NARMember.CommissionShareAgr' onchange='toggleCommissionDetails(true, " + listingAgentCount + ")' type='radio' value='True'> Yes <input class='csa' data-val='true' data-val-required='The Commission Share Agreement field is required.' name='AssetNARMembers[" + listingAgentCount + "].NARMember.CommissionShareAgr' type='radio' onchange='toggleCommissionDetails(false, " + listingAgentCount + ")' value='False'> No <span class='field-validation-valid' data-valmsg-for='AssetNARMembers[" + listingAgentCount + "].NARMember.CommissionShareAgr' data-valmsg-replace='true'></span> </div> </div> </div> <div id='commissionDetails-" + listingAgentCount + "' class='commissionDetailItem' style='display: none;'> <div class='row'> <div class='col-sm-6'> <div class='input-group'> <label>Listing Agent Commission Amount</label> </div> </div> <div class='col-sm-6'> <div class='input-group'> <input id='CommissionAmount-" + listingAgentCount + "' name='AssetNARMembers[" + listingAgentCount + "].NARMember.CommissionAmount' type='text' value=''> % </div> </div> <div class='col-sm-6'> <div class='input-group'> <span class='field-validation-valid' data-valmsg-for='AssetNARMembers[" + listingAgentCount + "].NARMember.CommissionAmount' data-valmsg-replace='true'></span> </div> </div> </div> <div class='row'> <div class='col-sm-6'> <div class='input-group'> <label>Date of CSA Confirm</label> </div> </div> <div class='col-sm-6'> <div class='input-group'> <input id='DateOfCsaConfirm-" + listingAgentCount + "' name='AssetNARMembers[" + listingAgentCount + "].NARMember.DateOfCsaConfirm' type='text' value='' class='datepicker'> <span class='field-validation-valid' data-valmsg-for='AssetNARMembers[" + listingAgentCount + "].NARMember.DateOfCsaConfirm' data-valmsg-replace='true'></span> </div> </div> </div> </div> <hr /> </div>");

        document.getElementById("SelectedNarMemberId-" + listingAgentCount).innerHTML = document.getElementById("SelectedNarMemberId-0").innerHTML;
        $('#SelectedNarMemberId-' + listingAgentCount).val('');
        //rebind datepickers
        $(".datepicker").datepicker({
            yearRange: "c-10:c+112",
            changeMonth: true,
            changeYear: true,
            dateFormat: 'mm/dd/yy',
            gotoCurrent: true
        });

        if (listingAgentCount > 0) {
            $('#removeListingAgent').show();
        }
    });

    $('#removeListingAgent').click(function () {
        if (listingAgentCount > 0) {
            listingAgentCount--;
            $('#listingAgentList').children('.iterateListingAgents').last().remove();
        }
    });

    function combineNames(first, last, dest) {
        var firstName = $("#" + first).val() + " ";
        var lastName = $("#" + last).val();
        var fullName = firstName.concat(lastName);
        $("#" + dest).val(fullName);
    }


    $('#addTaxParcelNumber').click(function () {
        taxParcelNumberCount++;
        $('#taxParcelNumberList').append("<div class='iterateTaxParcelNumbers'> <div class='row'> <div class='col-sm-6'> <div class='input-group'> <label>Tax Parcel Number</label> </div> </div> <div class='col-sm-6'> <div class='input-group'> <input class='text-box single-line' id='AssetTaxParcelNumbers_" + taxParcelNumberCount + "__TaxParcelNumber' name='AssetTaxParcelNumbers[" + taxParcelNumberCount + "].TaxParcelNumber' type='text' value=''> <span class='field-validation-valid' data-valmsg-for='AssetTaxParcelNumbers[" + taxParcelNumberCount + "].TaxParcelNumber' data-valmsg-replace='true'></span> </div> </div> </div> </div>");
    });

    $('#removeTaxParcelNumber').click(function () {
        if (taxParcelNumberCount > 0) {
            taxParcelNumberCount--;
            $('#taxParcelNumberList').children('.iterateTaxParcelNumbers').last().remove();
        }
    });

    function fillListingUserInformation(item) {
        var id = $("#SelectedNarMemberId-" + item).val();
        if (id != "0") {
            $.ajax({
                type: "POST",
                url: "/Admin/GetListingUserInformation/",
                data: JSON.stringify({ id: id }),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                async: false,
                cache: false,
                success: function (response) {
                    $("#WorkPhoneNumber-" + item).val(response.ListingAgentWorkNumber);
                    $("#FaxNumber-" + item).val(response.ListingAgentFaxNumber);
                    $("#CellPhoneNumber-" + item).val(response.ListingAgentCellNumber);
                    $("#FullName-" + item).val(response.ListingAgentName);
                    $("#CompanyName-" + item).val(response.ListingAgentCompany);
                    $("#Email-" + item).val(response.ListingAgentEmail);
                    $("#CompanyAddressLine1-" + item).val(response.ListingAgentCorpAddress);
                    $("#CompanyAddressLine2-" + item).val(response.ListingAgentCorpAddress2);
                    $("#CompanyCity-" + item).val(response.ListingAgentCity);
                    $("#CompanyState-" + item).val(response.ListingAgentState);
                    $("#CompanyZip-" + item).val(response.ListingAgentZip);

                    $("#FirstName-" + item).val(response.FirstName);
                    $("#LastName-" + item).val(response.LastName);
                    $("#CommissionShareAgr-" + item).val(response.CommissionShareAgr);
                    $("#CommissionAmount-" + item).val(response.CommissionAmount);
                    $("#DateOfCsaConfirm-" + item).val(response.DateOfCsaConfirm);
                    $("#NARMemberId-" + item).val(response.NARMemberId);
                    $("#ReferredByUserId-" + item).val(response.ReferredByUserId);
                    $("#IsActive-" + item).val(response.IsActive);
                    $("#Website-" + item).val(response.Website);
                    $("#Registered-" + item).val(response.Registered);
                    $("#agentId-" + item).val(response.NARMemberId);
                    $("#AssetId-" + item).val($('#AssetId').val());
                    $("#AssetNARMemberId-" + item).val("00000000-0000-0000-0000-000000000000");
                },
                error: function (jqXHR, exception) {
                },
                failure: function (response) {
                }
            });
        }
        else {
            $("#WorkPhoneNumber-" + item).val("");
            $("#FaxNumber-" + item).val("");
            $("#CellPhoneNumber-" + item).val("");
            $("#FullName-" + item).val("");
            $("#CompanyName-" + item).val("");
            $("#Email-" + item).val("");
            $("#CompanyAddressLine1-" + item).val("");
            $("#CompanyAddressLine2-" + item).val("");
            $("#CompanyCity-" + item).val("");
            $("#CompanyState-" + item).val("");
            $("#CompanyZip-" + item).val("");
            $("#FirstName-" + item).val("");
            $("#LastName-" + item).val("");
            $("#CommissionShareAgr-" + item).val("");
            $("#CommissionAmount-" + item).val("");
            $("#DateOfCsaConfirm-" + item).val("");
            $("#NARMemberId-" + item).val("0");
            $("#agentId-" + item).val("0");
            $("#IsActive-" + item).val("false");
            $("#AssetId-" + item).val("00000000-0000-0000-0000-000000000000");
            $("#AssetNARMemberId-" + item).val("00000000-0000-0000-0000-000000000000");
        }
    }

    function fillOperatingCompanyFromPrincipalInvestor(id, type) {
        $.ajax({
            type: "POST",
            url: "/Admin/GetPIInformation/",
            data: JSON.stringify({ id: id }),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            async: false,
            cache: false,
            success: function (response) {
                $(`#${type}OperatingCompanyFirst`).val(response.FirstName);
                $(`#${type}OperatingCompanyLast`).val(response.LastName);
                $(`#${type}OperatingCompanyAddressLine1`).val(response.AddressLine1);
                $(`#${type}OperatingCompanyAddressLine2`).val(response.AddressLine2);
                $(`#${type}OperatingCompanyCity`).val(response.City);
                $(`#${type}OperatingCompanyState`).val(response.State);
                $(`#${type}OperatingCompanyZip`).val(response.Zip);
                $(`#${type}OperatingCompanyCountry`).val(response.Country);
                $(`#${type}OperatingCompanyWorkPhone`).val(response.WorkPhone);
                $(`#${type}OperatingCompanyCellPhone`).val(response.CellPhone);
                $(`#${type}OperatingCompanyFax`).val(response.Fax);
                $(`#${type}OperatingCompanyEmail`).val(response.Email);
                $(`#${type}OperatingCompany`).val(response.CompanyName);
                $(`#${type}OperatingCompanyIsActive`).val(response.IsActive);
                $(`#${type}OperatingCompanyFromPI`).val(true)

                // clear 'type' ddl, close modal
                $(`#${type}OperatingCompanyDDLId`).val("");
                $('#selectPIModal').hide();
                $('.fields').show();

                // show corresponding fields
                showOwnerCompanyFields('Operating');
            },
            error: function (jqXHR, exception) {
            },
            failure: function (response) {
            }
        });
    }

    $('#ddlPi').change(function () {
        if ($(this).val() && $(this).val().length > 0)
            fillOperatingCompanyFromPrincipalInvestor($(this).val(), $('#piOperatingCompanyType').val());
    });

    function cancelUploadAppraisal() {
		$('#uploadApprModal').modal('hide');
	}

    function cancelUploadEnvironmenal() {
        $('#uploadEnvModal').modal('hide');
    }

    function fetchApplicablePrincipalInvestorUserOptions(email, type) {
        $.ajax({
            type: "POST",
            url: "/Admin/GetApplicablePrincipalInvestorUserOptions/",
            data: JSON.stringify({ email: email }),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            async: false,
            cache: false,
            success: function (response) {
                if (response.Options && Object.keys(response.Options).length > 0) {
                    $('#piOperatingCompanyType').val(type)
                    if (Object.keys(response.Options).length === 1) {
                        // populate operating company immediately
                        fillOperatingCompanyFromPrincipalInvestor(response.Options[0].key, type)
                    } else {

                        $('#ddlPi option:gt(0)').remove();
                        $('#piOperatingCompanyLabel').val(`${Object.keys(response.Options).length} principal investors found`)
                        $.each(response.Options, function (key, value) {
                            $('#ddlPi').append($("<option></option>").attr("value", key).text(value));
                        });
                        $('#selectPIModal').show();
                        $('#divSelectOC').hide();
                        $('.fields').hide();
                    }
                } else {
                    $(`#${type}OperatingCompanyEmail`).addClass('err')
                    setTimeout(function () {
                        $(`#${type}OperatingCompanyEmail`).removeClass('err')
                    }, 1500);
                }
            },
            error: function (jqXHR, exception) {
                console.error(jqXHR, exception)
            },
            failure: function (response) {
                console.error(response)
            }
        });
    }

    function searchForPI(type) {
        if ($(`#${type}OperatingCompanyEmail`).val() && $(`#${type}OperatingCompanyEmail`).val().length > 0) {
            if ($(`#${type}OperatingCompanyEmail`).val().length > 2)
                fetchApplicablePrincipalInvestorUserOptions($(`#${type}OperatingCompanyEmail`).val(), type);
            else
                alert('Please type at least 3 characters');
        } else {
            $(`#${type}OperatingCompanyEmail`).addClass('err')
            setTimeout(function () {
                $(`#${type}OperatingCompanyEmail`).removeClass('err')
            }, 1500);
        }
    }

    function updateDisableStateOfOwnerCompanyFields(checked, type) {
        if (checked) {
            $(`.contract${type}Fields .detailsContent .fields`).hide();
            disableOwnerCompanyFields(type)
        }
        else {
            enableOwnerCompanyFields(type)
            if ($(`#NotOn${type}List`).prop('checked')) $(`.contract${type}Fields .detailsContent .fields`).show();
        }
    }

    function restoreOwnerCompanyState(type) {
        if ($(`#ChangeOwner${type}Company`).val() === 'true') {
            $(`.contract${type}Fields`).show();
            $(`.contract${type}Fields .detailsContent`).show();
            if ($(`#NotOn${type}List`).prop('checked')) {
                $(`.contract${type}Fields .detailsContent .fields`).show();
            }
        } else {
            if ($(`#Owner${type}CompanyId`).val() && $(`#Owner${type}CompanyId`).val().length > 0) {
                if ($(`#Owner${type}CompanyId`).val() === '00000000-0000-0000-0000-000000000000' ||
                    $(`IsOwner${type}CompanyDataNotAvailable`).prop('checked')) {
                    $(`.contract${type}Fields`).show();
                    //disableOwnerCompanyFields(type)
                    updateDisableStateOfOwnerCompanyFields(true, type);
                    $(`#ChangeOwner${type}Company`).val(true);
                } else {
                    $(`.contract${type}UpdateFields`).show();
                }

            }
        }
        $(`#cb${type}Create`).change(function() { if ($(this).prop('checked')) copyCompanyInfo(type, 'Create'); })
        $(`#cb${type}Update`).change(function() { if ($(this).prop('checked')) copyCompanyInfo(type, 'Update'); })
    }

    function readVideo(input, fileName) {

        if (input.files && input.files[0]) {

            var xhr = new XMLHttpRequest();
            var fd = new FormData();
            fd.append("file", input.files[0]);
            fd.append("assetId", $('#AssetId').attr('data-asset'));
            xhr.open("POST", "@Url.Action("VideoUpload", "Admin")", true);
            xhr.send(fd);
            xhr.addEventListener("load", function (event) {
                var response = JSON.parse(event.target.response);
                var success = response["message"];
                var newFilename = response["filename"];
                var fileSize = response["size"];
                if (success == "true") {
                    var reader = new FileReader();
                    reader.onload = function (e) {
                        $('#videosPreviewer').append("<div class='videoPreviewDiv'  style='display:inline-block;'><label>Uploaded Filename: " + newFilename + "<label/><br/><label>Size: " + fileSize + "<label/><input type='hidden' class='videoName'  name='Videos[" + videoCount + "].FilePath' value='" + newFilename + "'> <input type='hidden' name='Videos[" + videoCount + "].AssetId' value='@Model.AssetId'> <input type='button' class='deleteImgUpload' value='Delete' data-button=" + newFilename + " onclick='videoDelete(this)'> </div>")
                    };
                    reader.readAsDataURL(input.files[0]);
                    videoCount++;
                    $('#videosPreviewer .uploadPlaceholder').first().remove();
                }
                else {
                    $('#videosPreviewer .uploadPlaceholder').first().find('img').remove();
                    $('#videosPreviewer .uploadPlaceholder').first().html(success + " for " + fileName);
                }
            }, false);
            $('#videosPreviewer').append("<div class='uploadPlaceholder' style='display:inline-block;text-align:center'> <img src='@Url.Content("~/Content/images/fileUploadPlaceholder.gif")' style='width:20px;' /></div>");
        }
    }

    function readIMG(input, fileName) {

        if (input.files && input.files[0]) {

            var xhr = new XMLHttpRequest();
            var fd = new FormData();
            fd.append("file", input.files[0]);
            fd.append("assetId", $('#AssetId').attr('data-asset'));
            xhr.open("POST", "@Url.Action("ImageUpload", "Admin")", true);
            xhr.send(fd);
            xhr.addEventListener("load", function (event) {
                var response = JSON.parse(event.target.response);
                var success = response["message"];
                var contentType = response["contentType"];
                var isCorpAdmin = response["isCorpAdmin"];
                var isICAdmin = response["isICAdmin"];
                var newFilename = response["filename"];
                if (success == "true") {
                    var reader = new FileReader();
                    reader.onload = function (e) {
                        if (isCorpAdmin || isICAdmin) {
                            $('#imgsPreviewer').append("<div class='imgPreviewDiv' style='display:inline-block; height:235px;'><div class='imgPreviewImg' style='background-image: url(" + e.target.result + ")'></div><hr/><input type='checkbox' class='mainflyer' name='Images[" + imgCount + "].IsMainImage' value='true' style='margin:0' onclick='onlyOneCheckbox(this)'><input type='hidden' name='Images[" + imgCount + "].IsMainImage' value='false'/><span> Is Main Image?</span> <br/> <input type='checkbox' name='Images[" + imgCount + "].IsFlyerImage' value='true' style='margin:0'><input type='hidden' name='Images[" + imgCount + "].IsFlyerImage' value='false'/><span> Is Flyer Image?</span> <br/><input type='hidden' class='imgName'  name='Images[" + imgCount + "].FileName' value=" + newFilename + "> <br/><span>Order: </span><span class='currentpositionlabel'>" + imgCount.toString() + "</span><input class='currentposition' name='Images[" + imgCount + "].Order' value='" + imgCount + "' type='hidden'/><input type='hidden' name='Images[" + imgCount + "].ContentType' value=" + contentType + "> <input type='hidden' name='Images[" + imgCount + "].AssetId' value='@Model.AssetId'> <input type='button' class='deleteImgUpload' value='Delete' data-button=" + newFilename + " onclick='imgDelete(this)'> </div>")
                        }
                        else {
                            $('#imgsPreviewer').append("<div class='imgPreviewDiv' style='display:inline-block;'><div class='imgPreviewImg' style='background-image: url(" + e.target.result + ")'></div><hr/><input type='checkbox' style='display:none;' class='mainflyer' name='Images[" + imgCount + "].IsMainImage' value='true' style='margin:0' onclick='onlyOneCheckbox(this)'><input type='hidden' name='Images[" + imgCount + "].IsMainImage' value='false'/><br/> <input type='checkbox' style='display:none;' name='Images[" + imgCount + "].IsFlyerImage' value='true' style='margin:0'><input type='hidden' name='Images[" + imgCount + "].IsFlyerImage' value='false'/><br/><input type='hidden' class='imgName'  name='Images[" + imgCount + "].FileName' value=" + newFilename + ">  <input type='hidden' name='Images[" + imgCount + "].ContentType' value=" + contentType + "> <input type='hidden' name='Images[" + imgCount + "].AssetId' value='@Model.AssetId'> <input type='button' class='deleteImgUpload' value='Delete' data-button=" + newFilename + " onclick='imgDelete(this)'> </div>")
                        }
                    };
                    reader.readAsDataURL(input.files[0]);
                    imgCount++;
                    $('#imgsPreviewer .uploadPlaceholder').first().remove();
                }
                else {
                    $('#imgsPreviewer .uploadPlaceholder').first().find('img').remove();
                    $('#imgsPreviewer .uploadPlaceholder').first().html(success + " for " + fileName);
                }
            }, false);
            $('#imgsPreviewer').append("<div class='uploadPlaceholder' style='display:inline-block;text-align:center'> <img src='@Url.Content("~/Content/images/fileUploadPlaceholder.gif")' style='width:20px;' /></div>");
            $(".imgsPreviewer").sortable("refreshPositions");
        }
    }

    $('#addUnitSpecs').click(function () {
        unitSpecCount++;
        $('#unitSpecList').append("<div class='unitSpecDiv'><div class='row'><div class='col-sm-6'><div class='input-group'><label>Number of Unit Types</label></div></div><div class='col-sm-6'><div class='input-group'><input class='text-box single-line formatNumber' onchange='addCommasToInput(this)'  name='UnitSpecifications[" + unitSpecCount + "].CountOfUnits' type='text' value='0'></div></div> </div><div class='row'><div class='col-sm-6'><div class='input-group'><label>Bedrooms:</label> </div></div><div class='col-sm-6'><div class='input-group'><select name='UnitSpecifications[" + unitSpecCount + "].BedCount'><option value='Zero'>Studio</option><option value='One'>1</option><option value='Two'>2</option><option value='Three'>3</option><option value='Four'>4</option><option value='Five'>5</option><option value='Six'>6</option><option value='SevenPlus'>7+</option></select> </div></div></div><div class='row'><div class='col-sm-6'><div class='input-group'><label>Baths:</label> </div></div><div class='col-sm-6'><div class='input-group'><select name='UnitSpecifications[" + unitSpecCount + "].BathCount'><option value='Zero'>0</option><option value='One'>1.0</option><option value='OneAndHalf'>1.5</option><option value='Two'>2.0</option><option value='TwoAndHalf'>2.5</option><option value='Three'>3.0</option><option value='ThreeAndHalf'>3.5</option><option value='Four'>4.0</option><option value='FourAndHalf'>4.5</option><option value='Five'>5.0</option><option value='FiveAndHalf'>5.5</option><option value='Six'>6+</option></select> </div></div></div><div class='row'><div class='col-sm-6'><div class='input-group'><label>Unit Base Rent</label> </div></div><div class='col-sm-6'><div class='input-group'><input class='text-box single-line formatNumber' onchange='addCommasToInput(this)' name='UnitSpecifications[" + unitSpecCount + "].UnitBaseRent' type='text' value='0'></div></div></div><div class='row'><div class='col-sm-6'><div class='input-group'><label>Unit Square Feet</label></div></div><div class='col-sm-6'><div class='input-group'><input class='text-box single-line formatNumber' name='UnitSpecifications[" + unitSpecCount + "].UnitSquareFeet' type='text' onchange='addCommasToInput(this)' value='0'></div></div></div><hr></div></div>");
        if (unitSpecCount > 0) {
            $('#removeUnitSpecs').show();
        }
    });

    $('#removeUnitSpecs').click(function () {
        if (unitSpecCount > 0) {
            unitSpecCount--;
            $('#unitSpecList').children('.unitSpecDiv').last().remove();
        }
    });

    $('#addDoubleSpecs').click(function () {
        $('#mhpUnitSpecDivDouble').show();
        $('#removeDoubleSpecs').show();
        $('#addDoubleSpecs').hide();
    });

    $('#addDoubleSpecs2').click(function () {
        $('#mhpUnitSpecDivDouble2').show();
        $('#removeDoubleSpecs2').show();
        $('#addDoubleSpecs2').hide();

    });

    $('#removeDoubleSpecs').click(function () {
        $('#mhpUnitSpecDivDouble').hide();
        $('#removeDoubleSpecs').hide();
        $('#addDoubleSpecs').show();
        $('#MHPUnitSpecifications_0__NumberDoubleWide').val('0');
        $('#MHPUnitSpecifications_0__CurrentDoubleBaseRent').val('0');
        $('#MHPUnitSpecifications_0__NumberDoubleWideOwned').val('0');
        $('#MHPUnitSpecifications_0__CurrentDoubleOwnedBaseRent').val('0');
    });

    $('#removeDoubleSpecs2').click(function () {
        $('#mhpUnitSpecDivDouble2').hide();
        $('#removeDoubleSpecs2').hide();
        $('#addDoubleSpecs2').show();
        $('#MHPUnitSpecifications_0__NumberDoubleWide').val('0');
        $('#MHPUnitSpecifications_0__CurrentDoubleBaseRent').val('0');
        $('#MHPUnitSpecifications_0__NumberDoubleWideOwned').val('0');
        $('#MHPUnitSpecifications_0__CurrentDoubleOwnedBaseRent').val('0');
    });

    $('#addTripleSpecs').click(function () {
        $('#mhpUnitSpecDivTriple').show();
        $('#removeTripleSpecs').show();
        $('#addTripleSpecs').hide();
    });

    $('#addTripleSpecs2').click(function () {
        $('#mhpUnitSpecDivTriple2').show();
        $('#removeTripleSpecs2').show();
        $('#addTripleSpecs2').hide();
    });

    $('#removeTripleSpecs').click(function () {
        $('#mhpUnitSpecDivTriple').hide();
        $('#removeTripleSpecs').hide();
        $('#addTripleSpecs').show();
        $('#MHPUnitSpecifications_0__NumberTripleWide').val('0');
        $('#MHPUnitSpecifications_0__CurrentTripleBaseRent').val('0');
        $('#MHPUnitSpecifications_0__NumberTripleWideOwned').val('0');
        $('#MHPUnitSpecifications_0__CurrentTripleOwnedBaseRent').val('0');
    });

    $('#removeTripleSpecs2').click(function () {
        $('#mhpUnitSpecDivTriple2').hide();
        $('#removeTripleSpecs2').hide();
        $('#addTripleSpecs2').show();
        $('#MHPUnitSpecifications_0__NumberTripleWide').val('0');
        $('#MHPUnitSpecifications_0__CurrentTripleBaseRent').val('0');
        $('#MHPUnitSpecifications_0__NumberTripleWideOwned').val('0');
        $('#MHPUnitSpecifications_0__CurrentTripleOwnedBaseRent').val('0');
    });

    function onlyOneCheckbox(cb) {
        if (cb.checked) {
            $("input:checkbox[class='mainflyer']").not(cb).removeAttr("checked");
        }
    }

    $("#AssetDocumentType").change(function () {
        $('#successDoc').hide();
        var selected = $("#AssetDocumentType option:selected").text();
        $("#docTitle").val(selected);
    });

    $("#docUpload").change(function () {
        var path = $(this).val();
        var selDocType = $("#AssetDocumentType").val();
        var type = $("#docUpload").attr('data-type');
        var description = $('#docDescription').val();
        var docId = null;
        var fileID = null;
        switch (selDocType) {
            case 'CurrentRentRoll':
                $("docUpload").attr("data-type", 0); type = 0;
                //docId = '#currentRentRoll'; fileID =  "#rentRoll"
                break;
            case 'CurrentOperatingReport':
                $("docUpload").attr("data-type", 1); type = 1;
                //docId = '#currentOperatingReport'; fileID =  "#cor"
                break;
            case "PriorFiscalYearOperReport":
                $("docUpload").attr("data-type", 2); type = 2;
                //docId = '#priorFiscalYearOperReport'; fileID =  "#pfyor"
                break;
            case "PreliminaryTitleReport":
                $("docUpload").attr("data-type", 3); type = 3;
                //docId = '#preliminaryTitleReport'; fileID =  "#ptr"
                break;
            case "PlatMap":
                $("docUpload").attr("data-type", 4); type = 4;
                //docId = '#platMap'; fileID =  "#pm"
                break;
            case "ArialMap":
                $("docUpload").attr("data-type", 5); type = 5;
                //docId = '#arialMap'; fileID =  "#am"
                break;
            case "OriginalAppraisal":
                $("docUpload").attr("data-type", 6); type = 6;
                //docId = '#originalAppraisal'; fileID =  "#oa"
                break;
            case "CurrentAppraisal":
                $("docUpload").attr("data-type", 7); type = 7;
                // docId = '#currentAppraisal'; fileID =  "#ca"
                break;
            case "ListingAgentMarketingBrochure":
                $("docUpload").attr("data-type", 8); type = 8;
                //docId = '#marketingBrochure'; fileID =  "#mb"
                break;
            case "Other":
                $("docUpload").attr("data-type", 9); type = 9;
                //docId = '#otherDocuments'; fileID =  "#od"
                break;
            case "MortgageInstrumentOfRecord":
                $("docUpload").attr("data-type", 10); type = 10;
                //docId = '#mgInstRec'; fileID =  "#instrumentRecord"
                break;
            case "RecordedLiens":
                $("docUpload").attr("data-type", 11); type = 11;
                //docId = '#recordedLiens'; fileID =  "#recLiens"
                break;
            case "TaxLiens":
                $("docUpload").attr("data-type", 12); type = 12;
                //docId = '#taxLiens'; fileID =  "#txLiens"
                break;
            case "BKRelated":
                $("docUpload").attr("data-type", 13); type = 13;
                //docId = '#bkRelated'; fileID =  "#related"
                break;
            case "PreliminaryTitleReportTitle":
                $("docUpload").attr("data-type", 14); type = 14;
                //docId = '#preliminaryTitleReportTitle'; fileID =  "#ptrTitle"
                break;
            case "DOTMTG":
                $("docUpload").attr("data-type", 15); type = 15;
                //docId = '#recDOTMTG'; fileID =  "#dotMG"
                break;
            case "OtherTitle":
                $("docUpload").attr("data-type", 16); type = 16;
                //docId = '#otherDocumentsTitle'; fileID =  "#othTitle"
                break;
            case "Insurance":
                $("docUpload").attr("data-type", 17); type = 17;
                break;
            case "InsuranceOther":
                $("docUpload").attr("data-type", 18); type = 18;
                break;
        }
        var title = $('#docTitle').val();
        var description = $('#docDescription').val();
        docId = '#uploadDocId'; fileID = "#uploadFileId"
        var fileName = path.match(/[^\/\\]+$/);
        readDOC(this, fileName, title, description, type, docId, fileID, "Other");
    });

    $("#docUploadAppr").change(function () {
        var path = $(this).val();
        var fileExtension = path.substr((path.lastIndexOf('.') + 1));
        if (fileExtension != 'pdf') {
            alert("Only PDFs should be uploaded for this document type");
        }
        else {
        var selDocType = $("#UploadDocumentType1").val();
        var type = $("#docUploadAppr").attr('data-type');
        var description = $('#docDescription1').val();
        var docId = null;
        var fileID = null;
        switch (selDocType) {

            case "OriginalAppraisal":
                $("docUploadAppr").attr("data-type", 6); type = 6;
                //docId = '#originalAppraisal'; fileID =  "#oa"
                break;

        }
        var title = $('#docTitle1').val();
        var description = $('#docDescription1').val();
        docId = '#uploadDocId'; fileID = "#uploadFileId"
        var fileName = path.match(/[^\/\\]+$/);
        readDOC(this, fileName, title, description, type, docId, fileID, "NoteAppr");
        }
    });

    $("#docUploadEnv").change(function () {
        var path = $(this).val();
        var fileExtension = path.substr((path.lastIndexOf('.') + 1));
        if (fileExtension != 'pdf') {
            alert("Only PDFs should be uploaded for this document type");
        }
        else {
            var selDocType = $("#UploadDocumentType2").val();
            var type = $("#docUploadEnv").attr('data-type');
            var description = $('#docDescription2').val();
            var docId = null;
            var fileID = null;
            switch (selDocType) {

                case "EnvironmentalReport":
                    $("docUploadAppr").attr("data-type", 19); type = 19;
                    break;

            }
            var title = $('#docTitle2').val();
            var description = $('#docDescription2').val();
            docId = '#uploadDocId'; fileID = "#uploadFileId"
            var fileName = path.match(/[^\/\\]+$/);
            readDOC(this, fileName, title, description, type, docId, fileID, "EnvRpt");
        }
    });

    function readDOC(input, fileName, title, description, type, id, fileUploadId, docType) {

        if (input.files && input.files[0]) {
            var xhr = new XMLHttpRequest();
            var fd = new FormData();
            fd.append("file", input.files[0]);
            fd.append("assetId", $('#AssetId').attr('data-asset'));
            fd.append("title", title);
            xhr.addEventListener("progress", function (event) {
                if (event.lengthComputable) {
                    var progress = Math.round(event.loaded * 100 / event.total);
                    if (docType == "NoteAppr") {
                        $('#progressbarAppr').show();
                        $("#progressbarAppr").progressbar("value", progress);
                    }
                    else if (docType == "EnvRpt") {
                        $('#progressbarEnv').show();
                        $("#progressbarEnv").progressbar("value", progress);
                    }
                    else {
                        $('#progressbar').show();
                        $("#progressbar").progressbar("value", progress);
                    }

                }
            }, false);
            xhr.open("POST", "@Url.Action("DocumentUpload", "Admin")", true);
            xhr.send(fd);
            if (docType == "NoteAppr") {
                $("#progressbarAppr").progressbar({
                    max: 100,
                    change: function (event, ui) {
                        $("#progresslabel").text($("#progressbarAppr").progressbar("value") + "%");
                    },
                    complete: function (event, ui) {
                        $("#progresslabel").text("The file has been uploaded successfully");
                    }
                });
            }
            else if (docType == "EnvRpt") {
                $("#progressbarEnv").progressbar({
                    max: 100,
                    change: function (event, ui) {
                        $("#progresslabel").text($("#progressbarEnv").progressbar("value") + "%");
                    },
                    complete: function (event, ui) {
                        $("#progresslabel").text("The file has been uploaded successfully");
                    }
                });
            }
            else {
                $("#progressbar").progressbar({
                    max: 100,
                    change: function (event, ui) {
                        $("#progresslabel").text($("#progressbar").progressbar("value") + "%");
                    },
                    complete: function (event, ui) {
                        $("#progresslabel").text("The file has been uploaded successfully");
                    }
                });
            }
            xhr.addEventListener("load", function (event) {
                var response = JSON.parse(event.target.response);
                var success = response["message"];
                var contentType = response["contentType"];
                var newFilename = response["filename"];
                var size = response["size"];
                var downloadUrl = response["downloadUrl"];
                if (success.toLowerCase() == "true") {
                    var reader = new FileReader();
                    reader.onload = function (e) {
                        if (isNaN(docCount)) {
                            docCount = 0;
                        }
                        show(id.substring(1));
                        jQuery(".detailsContent").hide();
                        if (docType != "NoteAppr" || docType != "EnvRpt") {
                            $(id).append("<div class='docPreviewDiv row'><div class='col-sm-10'><a target='_blank' class='spaceLab' href=" + downloadUrl + ">" + title + "</a><label class='description' name='Documents[" + docCount + "].Description'>" + description + "</label></div><div class='col-sm-2'><input type='hidden' class='docTitle' name='Documents[" + docCount + "].Title' value=\"" + title + "\"><input type='hidden' class='docDescription' name='Documents[" + docCount + "].Description' value='" + description + "'><input type='hidden' class='docName' name='Documents[" + docCount + "].FileName' value=" + newFilename + "><input type='hidden' name='Documents[" + docCount + "].Size' value=" + size + "> <input type='hidden' name='Documents[" + docCount + "].ContentType' value=" + contentType + "> <input type='hidden' name='Documents[" + docCount + "].AssetId' value='@Model.AssetId'> <input type='hidden' name='Documents[" + docCount + "].Type' value='" + type + "'><input type='button' class='deleteDocUpload' value='Delete' data-id=" + fileUploadId + " data-button=" + newFilename + " onclick='docDelete(this)'></div></div>");

                            $('#successDoc').show();
                            $('#PendingUploads').show();
                        }
                        if (docType == "NoteAppr") {
                            $("#progressbarAppr").delay(1200).fadeOut(300);
                            document.getElementById('docUpload').value = '';
                        }
                        else if (docType == "EnvRpt") {
                            $("#progressbarEnv").delay(1200).fadeOut(300);
                            document.getElementById('docUpload').value = '';
                        }
                        else {
                            $("#progressbar").delay(1200).fadeOut(300);
                            document.getElementById('docUpload').value = '';
                        }
                    };
                    reader.readAsDataURL(input.files[0]);
                    docCount++;
                }
                else {
                    alert("This document already exists on the server for this asset and this document. Please change the filename of the file before uploading.");
                    $('#docsPreviewer').append("<div>" + success + " for " + fileName + "</div>")
                }
            }, false);
        }
    }

    function docDelete(param, enclosingDiv, classType, linkDiv) {
        var deleteDoc = confirm('Are you sure you want to delete?');
        if (deleteDoc) {
            var input = $($(param).attr('data-id'));
            var xhr = new XMLHttpRequest();
            var fd = new FormData();
            fd.append("docId", param.getAttribute("data-button"));
            fd.append("assetId", $('#AssetId').attr('data-asset'));
            xhr.open("POST", "@Url.Action("DocumentDelete", "Admin")", true);
            xhr.send(fd);
            xhr.addEventListener("load", function (event) {
                var response = JSON.parse(event.target.response);
                var success = response["message"];
                if (success == "true") {
                    $(param).closest('.docPreviewDiv').hide();
                    $(param).closest('.docPreviewDiv').find('.docName').val('');
                    var numItems = $(classType).length;
                    if (numItems < 2) {
                        $(enclosingDiv).hide();
                        $(linkDiv).hide();
                    }
                    //$(input).wrap('<form>').closest('form').get(0).reset();
                    $(input).unwrap();
                }
                else {
                    //alert("Data Saved: " + response["message"]);
                    $(param).closest('.docPreviewDiv').hide();
                    $(param).closest('.docPreviewDiv').find('.docName').val('');
                    //$(input).wrap('<form>').closest('form').get(0).reset();
                    $(input).unwrap();
                }
            }, false);
        }
    }

    $("#mb").change(function () {
        var path = $(this).val();
        var type = $("#mb").attr('data-type');
        var title = $('#mbTitle').val();
        var description = $('#mbDescription').val();
        var fileName = path.match(/[^\/\\]+$/);
        readDOC(this, fileName, title, description, type, '#marketingBrochure', "#mb");
    });

    $("#od").change(function () {
        var path = $(this).val();
        var type = $("#od").attr('data-type');
        var title = $('#odTitle').val();
        var description = $('#odDescription').val();
        var fileName = path.match(/[^\/\\]+$/);
        readDOC(this, fileName, title, description, type, '#otherDocuments', "#od");
    });

    $("#rentRoll").change(function () {
        var path = $(this).val();
        var type = $("#rentRoll").attr('data-type');
        var title = $('#rentRollTitle').val();
        var description = $('#rentRollDescription').val();
        var fileName = path.match(/[^\/\\]+$/);
        readDOC(this, fileName, title, description, type, '#currentRentRoll', "#rentRoll");
    });

    $("#cor").change(function () {
        var path = $(this).val();
        var type = $('#cor').attr('data-type');
        var title = $('#corTitle').val();
        var description = $('#corDescription').val();
        var fileName = path.match(/[^\/\\]+$/);
        readDOC(this, fileName, title, description, type, '#currentOperatingReport', "#cor");
    });

    $("#pfyor").change(function () {
        var path = $(this).val();
        var type = $('#pfyor').attr('data-type');
        var title = $('#pfyorTitle').val();
        var description = $('#pfyorDescription').val();
        var fileName = path.match(/[^\/\\]+$/);
        readDOC(this, fileName, title, description, type, '#priorFiscalYearOperReport', "#pfyor");
    });

    $("#ptr").change(function () {
        var path = $(this).val();
        var type = $('#ptr').attr('data-type');
        var title = $('#ptrTitle').val();
        var description = $('#ptrDescription').val();
        var fileName = path.match(/[^\/\\]+$/);
        readDOC(this, fileName, title, description, type, '#preliminaryTitleReport', "#ptr");
    });

    $("#pm").change(function () {
        var path = $(this).val();
        var type = $('#pm').attr('data-type');
        var title = $('#pmTitle').val();
        var description = $('#pmDescription').val();
        var fileName = path.match(/[^\/\\]+$/);
        readDOC(this, fileName, title, description, type, '#platMap', "#pm");
    });

    $("#am").change(function () {
        var path = $(this).val();
        var type = $('#am').attr('data-type');
        var title = $('#amTitle').val();
        var description = $('#amDescription').val();
        var fileName = path.match(/[^\/\\]+$/);
        readDOC(this, fileName, title, description, type, '#arialMap', "#am");
    });

    $("#oa").change(function () {
        var path = $(this).val();
        var type = $('#oa').attr('data-type');
        var title = $('#oaTitle').val();
        var description = $('#oaDescription').val();
        var fileName = path.match(/[^\/\\]+$/);
        readDOC(this, fileName, title, description, type, '#originalAppraisal', "#oa");
    });

    $("#ca").change(function () {
        var path = $(this).val();
        var type = $('#ca').attr('data-type');
        var title = $('#caTitle').val();
        var description = $('#caDescription').val();
        var fileName = path.match(/[^\/\\]+$/);
        readDOC(this, fileName, title, description, type, '#currentAppraisal', "#ca");
    });

    $("#instrumentRecord").change(function () {
        var path = $(this).val();
        var type = $('#instrumentRecord').attr('data-type');
        var title = $('#mgInstRecTitle').val();
        var description = $('#mgInstRecDescription').val();
        var fileName = path.match(/[^\/\\]+$/);
        readDOC(this, fileName, title, description, type, '#mgInstRec', "#instrumentRecord");
    });

    $("#recLiens").change(function () {
        var path = $(this).val();
        var type = $('#recLiens').attr('data-type');
        var title = $('#recLiensTitle').val();
        var description = $('#recLiensDescription').val();
        var fileName = path.match(/[^\/\\]+$/);
        readDOC(this, fileName, title, description, type, '#recordedLiens', "#recLiens");
    });

    $("#txLiens").change(function () {
        var path = $(this).val();
        var type = $('#txLiens').attr('data-type');
        var title = $('#taxLiensTitle').val();
        var description = $('#taxLiensDescription').val();
        var fileName = path.match(/[^\/\\]+$/);
        readDOC(this, fileName, title, description, type, '#taxLiens', "#txLiens");
    });

    $("#related").change(function () {
        var path = $(this).val();
        var type = $('#related').attr('data-type');
        var title = $('#bkRelatedTitle').val();
        var description = $('#bkRelatedDescription').val();
        var fileName = path.match(/[^\/\\]+$/);
        readDOC(this, fileName, title, description, type, '#bkRelated', "#related");
    });

    $("#ptrTitle").change(function () {
        var path = $(this).val();
        var type = $('#ptrTitle').attr('data-type');
        var title = $('#ptrTitleTitle').val();
        var description = $('#ptrTitleDescription').val();
        var fileName = path.match(/[^\/\\]+$/);
        readDOC(this, fileName, title, description, type, '#preliminaryTitleReportTitle', "#ptrTitle");
    });

    $("#dotMG").change(function () {
        var path = $(this).val();
        var type = $('#dotMG').attr('data-type');
        var title = $('#dotMGTitle').val();
        var description = $('#dotMGDescription').val();
        var fileName = path.match(/[^\/\\]+$/);
        readDOC(this, fileName, title, description, type, '#recDOTMTG', "#dotMG");
    });

    $("#othTitle").change(function () {
        var path = $(this).val();
        var type = $('#othTitle').attr('data-type');
        var title = $('#otherTitleTitle').val();
        var description = $('#otherTitleDescription').val();
        var fileName = path.match(/[^\/\\]+$/);
        readDOC(this, fileName, title, description, type, '#otherDocumentsTitle', "#othTitle");
    });

    $("#btnInsurance").change(function () {
        var path = $(this).val();
        var type = $('#btnInsurance').attr('data-type');
        var title = $('#insTitle').val();
        var description = $('#insDescription').val();
        var fileName = path.match(/[^\/\\]+$/);
        readDOC(this, fileName, title, description, type, '#ins', "#btnInsurance");
    });

    function videoDelete(param) {
        $.ajax({
            type: "POST",
            url: "../VideoDelete",
            data: {
                videoId: param.getAttribute("data-button"),
                assetId: $('#AssetId').attr('data-asset')
            },
            success: function (message) {
                var response = JSON.parse(JSON.stringify(message));
                if (response["message"] == "true") {
                    $(param).closest('.videoPreviewDiv').hide();
                    $(param).closest('.videoPreviewDiv').find('.videoName').val('');
                }
                else {
                    //alert("Data Saved: " + response["message"]);
                    $(param).closest('.videoPreviewDiv').hide();
                    $(param).closest('.videoPreviewDiv').find('.videoName').val('');
                }
            }
        });
    };
    function imgDelete(param) {
        $.ajax({
            type: "POST",
            url: "../ImageDelete",
            data: {
                imgId: param.getAttribute("data-button"),
                assetId: $('#AssetId').attr('data-asset')
            },
            success: function (message) {
                $(param).closest('.imgPreviewDiv').hide();
                $(param).closest('.imgPreviewDiv').find('.imgName').val('');
            }
        });
    };

    function toggleMortgage(level) {
        if (level == 1) {
            $("#hasMortgage").show();
            //$("#hasLienType").hide();
        }
        if (level == 2) {
            //$("#hasLienType").show();
        }
        // hiding
        if (level == 3) {
            //$("#hasLienType").hide();
            //$(".mltRecourse").prop('checked', false);
            //$(".mltNonRecourse").prop('checked', false);
            //$(".mltUnknown").prop('checked', false);
            //var mlt = document.getElementsByName("MortgageLienType");
            //$(mlt).removeProp('checked');
        }
        if (level == 4) {
            $("#hasMortgage").hide();
            $(".mltRecourse").prop('checked', false);
            $(".mltNonRecourse").prop('checked', false);
            $(".mltUnknown").prop('checked', false);

            $(".mlaYes").prop('checked', false);
            $(".mlaNo").prop('checked', false);
            $(".mlaUnknown").prop('checked', false);
            //var mlt = document.getElementsByName("MortgageLienType");
            //var mla = document.getElementsByName("MortgageLienAssumable");
            //$(mlt).removeProp('checked');
            //$(mla).removeProp('checked');

        }
    }

    var imgCount = 0;
    var docCount = 0;
    var unitSpecCount = 0;
    var videoCount = 0;
    var listingAgentCount = 0;
    var taxParcelNumberCount = 0;

    $(window).bind("load", function () {
        calcMonthlyIncome(document.getElementById("AnnualGrossIncome"), 'calculateMonthlyIncome', 'MonthlyGrossIncome');
        calcMonthlyIncome(document.getElementById("ProformaAnnualIncome"), 'calculateProformaMonthlyIncome', 'ProformaMonthlyIncome');
    });

    function autoSave() {
        var tab = $("ul.nav li.active a").text();
        if (tab != "Images" && tab != "Documents" && tab != "Videos" && tab != "Finish") {
            SaveAsset('AutoSave');
            var form = $('#assetform').serialize();
            $.ajax({
                type: "POST",
                url: "/Admin/SavePartialAsset/",
                data: form,
                async: false,
                cache: false,
                success: function (response) {
                    $("input.formatNumber").each(function (index) {
                        $(this).val(addCommas($(this).val(), true));
                        $(this).on("input", null, null, function () {
                            $(this).val(addCommas($(this).val(), true));
                        });
                    });
                    $("input.formatMaint").each(function (index) {
                        $(this).val(addCommas($(this).val(), true));
                    });
                    if (response.Status == "Created") {
                        $('#AssetNumber').val(response.Id);
                        var today = new Date();
                        $('#ListedByUserId').val(response.ListedByUserId);
                        $('#saveDate').text("Auto saved on: " + (new Date()));
                        $('#CreationDate').val(response.CreationDate);

                    } else if (response.Status == "Updated") {
                        $('#saveDate').text("Auto saved on: " + (new Date()));
                    } else {
                        $('#saveDate').text("Auto saved on: Problem auto saving.");
                    }
                },
                error: function (jqXHR, exception) {
                },
                failure: function (response) {
                }
            });
        }
    }

    //Prepare Image and Document index
    $(document).ready(function () {
        $('a[data-toggle="tab"]').on('click', function (e) {
            if ($(this).attr('href') == '#finish') {
                formValidation($(this).attr('href'));
                $('#divError').hide();
                $('#divError').html('');
                if (!isValidForm) {
                    $('#divError').html(valErrorMSg);
                    $('#divError').show();
                }
            }
        });
        // show the 'Date when Leasehold Agreement Matures' field/section if the Title Held By Owner field is 'Leasehold Title'
        if ($('#PropHoldTypeId').val() == "2") $("#maturityDiv").show();
        else $("#maturityDiv").hide();

        calcCapRate();

        // autocalc Est deffered value
        calculateEstimatedDeferredMaintenance();

        calculatePricePer($("#SalesPrice"));



        jQuery(".detailsContent").hide();
        //toggle the componenet with class msg_body
        jQuery(".detailsHeading").click(function () {
            jQuery(this).next(".detailsContent").slideToggle(500);
            $('#AssetDocumentType').val('---');
            $("#docTitle").val('');
            $('#docDescription').val('');
        });

        if ($("#HasPositionMortgage").prop('checked')) {
            toggleMortgage(1);
            //if (!$("#MortgageLienType").prop('checked')) {
            //    toggleMortgage(2);
            //}
            //else {
            //    toggleMortgage(3);
            //}
        } else {
            toggleMortgage(4);
        }

        if (!$("#IsNoteWRAP").prop('checked')) {
            toggleWRAP(false);
        } else {
            toggleWRAP(true);
        }

        var additionalInfo = $('#AdditionalInformation').val();
        if (!additionalInfo || 0 === additionalInfo.length) {
            toggleAdditionalInfo(false);
        } else {
            toggleAdditionalInfo(true);
            radiobtn = document.getElementById("isAdditionalInfo");
            radiobtn.checked = true;
        }


        //window.setInterval(function () {
        //    autoSave();
        //}, 30000);

        var subDiv = $("#Subdivision").val();
        if (subDiv.toLowerCase() == "meters & bounds") {
            $("#chkSubDiv").prop('checked', true);
        }

        $('#imgsPreviewer').sortable({
            stop: function (event, ui) {
                if ($(ui.item).find('.mainflyer').is(':checked')) {
                    $('#imgsPreviewer').sortable("cancel");
                    alert("Cannot change order of main flyer image. This image will always show first. Uncheck the Is Main Flyer image checkbox to change order of image.");
                } else {
                    var inputs = $('.currentposition');
                    var labels = $('.currentpositionlabel');
                    var nbElems = inputs.length;
                    $(inputs).each(function (idx) {
                        $(this).val(idx);
                    });
                    $(labels).each(function (idx) {
                        $(this).text(idx);
                    });
                }
            }
        }).disableSelection();
        videoCount = 0;
        imgCount = 0;
        docCount = 0;
        unitSpecCount = 0;
        listingAgentCount = 0;
        taxParcelNumberCount = 0;
        videoCount = $('#videosPreviewer').attr('data-videocount');
        imgCount = $('#imgsPreviewer').attr('data-imgcount');
        docCount = $('#docManager').attr('data-doccount');
        unitSpecCount = $('#unitSpecList').attr('data-unitcount');
        listingAgentCount = $('#listingAgentList').attr('data-unitcount');
        taxParcelNumberCount = $('#taxParcelNumberList').attr('data-count');
        imgCount--;
        docCount--;
        videoCount--;
        unitSpecCount--;
        listingAgentCount--;
        taxParcelNumberCount--;
        if ($("#isPendingForeclosure").is(':checked')) {
            $("#foreclosureSection").show();
        }
        else {
            $("#foreclosureSection").hide();
        }

        if (unitSpecCount < 1) {
            $('#removeUnitSpecs').hide();
        }

        if (!$("#HasIncome").prop('checked')) {
            toggleIncomeReason(true);
        }
        else {
            toggleIncomeReason(false);
        }

        if (!$("#IsTBDMarket").prop('checked')) {
            toggleActionDetails(false);
        }
        else {
            toggleActionDetails(true);
        }

        if (!$("#HasAAARatedMajorTenant").prop('checked')) {
            toggleMajorTenant(false);
        }
        else {
            toggleMajorTenant(true);
        }

        if (!$("#HasDeferredMaintenance").prop('checked')) {
            toggleDeferredMaintenanceDetails(false);
        } else {
            toggleDeferredMaintenanceDetails(true);
        }


        var additionalInfo = $('#AdditionalInformation').val();
        if (!additionalInfo || 0 === additionalInfo.length) {
            toggleAdditionalInfo(false);
        } else {
            toggleAdditionalInfo(true);
            radiobtn = document.getElementById("isAdditionalInfo");
            radiobtn.checked = true;
        }

        var text_max = 4000;
        $('#textarea_feedback').html(text_max + ' characters remaining');

        $('#AdditionalInformation').keyup(function () {
            var text_length = $('#AdditionalInformation').val().length;
            var text_remaining = text_max - text_length;

            $('#textarea_feedback').html(text_remaining + ' characters remaining');

        });
        //if ($("#CommissionShareAgr").prop('checked')) {
        //    toggleCommissionDetails(true);
        //} else {
        //    toggleCommissionDetails(false);
        //}

        $('.iterateListingAgents').each(function (index) {
            // this LOC sets the DDL value
            $("#ListingAgentNewName-" + index).val($("#agentId-" + index).val());
            var csa = $(this).find(".csa");
            var cdi = $(this).find(".commissionDetailItem");
            var nol = $(this).find(".NotOnList");
            if (csa.prop('checked')) {
                toggleCommissionDetails(true, index);
            }
            else {
                toggleCommissionDetails(false, index);
            }
            if (nol.prop('checked')) {
                $("#OptionName-" + index).show();
                //$("#SelectedNarMemberId-" + index).hide();
            }
            else {
                $("#OptionName-" + index).hide();
                $("#SelectedNarMemberId-" + index).show();
            }
        });

        jQuery(function ($) {
            $(document).on('nested:fieldRemoved', function (event) {
                $('[required]', event.field).removeAttr('required');
            });
        });

        $("input.formatNumber").each(function (index) {
            $(this).val(addCommas($(this).val(), true));
            $(this).on("input", null, null, function () {
                $(this).val(addCommas($(this).val(), true));
            });
        });
        $("input.formatMaint").each(function (index) {
            $(this).val(addCommas($(this).val(), true));
        });
        $("span.formatNumber").each(function (index) {
            $(this).text(addCommas($(this).text(), false));
        });


        $("#HasIncome").change('checked', function () {
            $('.IncomeObject').toggle();
            $('.NoIncome').toggle();
        });
        //Setup Calendar UI
        $(function () {
            $(".datepicker").datepicker({
                yearRange: "c-10:c+112",
                changeMonth: true,
                changeYear: true,
                dateFormat: 'mm/dd/yy',
                gotoCurrent: true
            });
        });

        if ($("#GeneralComments").val()) {
            $("#charcounter").text($("#GeneralComments").val().length + " characters");
        }
        if ($("#GeneralCommentsDtlInfo").val()) {
            $("#charcounterDtlInfo").text($("#GeneralCommentsDtlInfo").val().length + " characters");
        }



        var value = $('#ProformaVacancyFac').val();
        if (value == "0") {
            $('#isOfferingProformaVF').prop('checked', true);
        }
        if ($('#Terms').val() === "Other") { $('#termsOtherDiv').show(); }
        else { $('#termsOtherDiv').hide(); }
        if ($('#SellerTerms').val() === "Other") { $('#sellerTermsOtherDiv').show(); }
        else { $('#sellerTermsOtherDiv').hide(); }
        if ($('#MethodOfAppraisal').val() === "Other") { $('#appraisalOtherDiv').show(); }
        else { $('#appraisalOtherDiv').hide(); }
        if ($('#PaymentFrequency').val() === "Other") { $('#frequencyOtherDiv').show(); }
        else { $('#frequencyOtherDiv').hide(); }
        if ($('#AmortType').val() === "Other") { $('#amortOtherDiv').show(); }
        else { $('#amortOtherDiv').hide(); }
        if ($('#TypeOfMTGInstrument').val() === "Other") { $('#instrumentOtherDiv').show(); }
        else { $('#instrumentOtherDiv').hide(); }
        if ($('#PaymentHistory').val() === "Other") { $('#payHistoryOtherDiv').show(); }
        else { $('#payHistoryOtherDiv').hide(); }

        $('#uploadApprModal').hide();
        $('#uploadEnvModal').hide();


        var docApprNumber = $("#DocumentNumberOriAppr").val();
        if (docApprNumber > -1) {
            $('#apprdocumentDisplay').show();
            $('#apprdocumentExists').show();
        }
        else {
            $('#apprdocumentDisplay').hide();
            $('#apprdocumentExists').hide();
            $('#HasCopyOfAppraisal').val('No');

        }
        var docEnvNumber = $("#DocumentNumberEnvi").val();
        if (docEnvNumber > -1) {
            $('#envidocumentDisplay').show();
            $('#envidocumentExists').show();
        }
        else {
            $('#envidocumentDisplay').hide();
            $('#envidocumentExists').hide();
            document.getElementById("HasEnvironmentalIssues").checked = false;

        }

        if ($("#SalesPriceNotProvided").prop('checked')) { clearFieldsBecauseSalesPriceNotProvided(); }
    });

    function toggleMajorTenant(show) {
        if (show) {
            $("#majorTenant").show();
        } else {
            $("#majorTenant").hide();
        }
    }

    function calcMonthlyIncome(input, idOfFieldToShow, idOfFieldToSave) {
        if (input.value) {
            var num = getNumber(input);
            var intVal = (num / 12).toFixed(0); // he wants whole numbers so we round up if we have to
            var val = (num / 12).toFixed(2);
            $('#' + idOfFieldToShow).text(addCommas(intVal.toString()));
            $('#' + idOfFieldToSave).val(intVal);
            calcProformaSGI();
        }
    }

    function calcProformaSGI() {
        var aoe = $('#ProformaAnnualOperExpenses').val();
        var pagi = $('#ProformaAnnualIncome').val();
        var pami = $('#ProformaMiscIncome').val();
        if (aoe && pagi) {
            aoe = getNumberFromValue(aoe);
            pagi = getNumberFromValue(pagi);
            if (pami) {
                pami = getNumberFromValue(pami);
            } else {
                pami = 0;
            }
            var totalIncome = pagi + pami;
            if (totalIncome > 0) {
                //var calc = ((aoe / totalIncome) * 100).toFixed(2);
                var calc = ((aoe / pagi) * 100).toFixed(2);
                document.getElementById('aoeFactor').innerHTML = calc;
                $('#ProformaAoeFactorAsPerOfSGI').val(addCommas(calc.toString(), true));
            }
            else {
                $('#ProformaAoeFactorAsPerOfSGI').val("0 %");
            }
            calcCapRate();
        }
    }

    function calcCapRate() {
        var assetType = $("#AssetType").val();
        var aoe = getNumberFromValue($('#ProformaAnnualOperExpenses').val());
        var vf = getNumberFromValue($('#ProformaVacancyFac').val());
        var pagi = getNumberFromValue($('#ProformaAnnualIncome').val());
        var sgi = getNumberFromValue($('#ProformaAoeFactorAsPerOfSGI').val());
        var pami = getNumberFromValue($('#ProformaMiscIncome').val());
        var lp = getNumberFromValue($('#AskingPrice').val());
        var bpo = getNumberFromValue($('#CurrentBpo').val());
        var sp = getNumberFromValue($('#SalesPrice').val());

        var totalIncome = pagi + pami;

        var pvf = (vf / 100) * totalIncome;
        var pretax = Math.round((totalIncome - pvf) - aoe);

        var calc = 0;
        var calc2 = 0;
        if (assetType == "MultiFamily" || assetType == "MHP") {
            var EstDeferredMaintenance = getNumberFromValue($('#EstDeferredMaintenance').val());
            var AverageAdjustmentToBaseRentalIncomePerUnitAfterRenovations = getNumberFromValue($('#AverageAdjustmentToBaseRentalIncomePerUnitAfterRenovations').val());
            var units = getNumberFromValue($("#TotalUnits").val());
            var defAnnualRevenueAdjustment = EstDeferredMaintenance == 0 ? 0 : (AverageAdjustmentToBaseRentalIncomePerUnitAfterRenovations * units * 12);
            var defProformaSGI = EstDeferredMaintenance == 0 ? pagi : pagi + defAnnualRevenueAdjustment + pami;
            var adjDefPvf = (vf / 100) * defProformaSGI;
            var defProformaNOI = EstDeferredMaintenance == 0 ? pretax : Math.round(defProformaSGI - adjDefPvf - aoe);
            var zeroRate = 0;
            if (lp != 0 && bpo != 0) {
                calc = ((defProformaNOI / lp) * 100).toFixed(2);
                calc2 = ((defProformaNOI / bpo) * 100).toFixed(2);
                $("#capinvLP").val(addCommas(calc.toString(), true));
                $("#capinvCAP").val(addCommas(calc2.toString(), true));
                $("#capCAP").val(addCommas(calc2.toString(), true));
                $("#capLP").val(addCommas(calc.toString(), true));

            }
            else if (lp != 0) {
                calc = ((defProformaNOI / lp) * 100).toFixed(2);
                $("#capinvLP").val(addCommas(calc.toString(), true));
                $("#capinvCAP").val(addCommas(zeroRate.toString(), true));
                $("#capCAP").val(addCommas(zeroRate.toString(), true));
                $("#capLP").val(addCommas(calc.toString(), true));
            }
            else if (bpo != 0) {
                calc = ((defProformaNOI / bpo) * 100).toFixed(2);
                $("#capinvLP").val(addCommas(zeroRate.toString(), true));
                $("#capinvCAP").val(addCommas(calc.toString(), true));
                $("#capCAP").val(addCommas(calc.toString(), true));
                $("#capLP").val(addCommas(zeroRate.toString(), true));
            }

            $("#cap").val(addCommas(calc.toString(), true));
            $("#CashInvestmentApy").val(calc);
            $("#proNOIMHP").val(addCommas(defProformaNOI.toString(), true));
        }
        else {

            if (lp != 0 && bpo != 0) {
                calc = ((pretax / lp) * 100).toFixed(2);
                calc2 = ((pretax / bpo) * 100).toFixed(2);
                $("#capinvLPCOM").val(addCommas(calc.toString(), true));
                $("#capinvCAPCOM").val(addCommas(calc2.toString(), true));
                $("#capLPCOM").val(addCommas(calc.toString(), true));
                $("#capCAPCOM").val(addCommas(calc2.toString(), true));
            }
            else if (lp != 0) {
                calc = ((pretax / lp) * 100).toFixed(2);
                $("#capinvLPCOM").val(addCommas(calc.toString(), true));
                $("#capinvCAPCOM").val("0");
                $("#capLPCOM").val(addCommas(calc.toString(), true));
                $("#capCAPCOM").val("0");
            }
            else if (bpo != 0) {
                calc = ((pretax / bpo) * 100).toFixed(2);
                $("#capinvLPCOM").val("0");
                $("#capinvCAPCOM").val(addCommas(calc.toString(), true));
                $("#capLPCOM").val("0");
                $("#capCAPCOM").val(addCommas(calc.toString(), true));
            }

            $("#cap").val(addCommas(calc.toString(), true));

            // Only calculate the cap rate from the sales price for fuel and *only* update the first cap rate field.
            if (assetType === 'ConvenienceStoreFuel') {
                if (sp && sp != 0) {
                    var fuelCalc = ((pretax / sp) * 100).toFixed(2);
                    $("#CashInvestmentApy").val(fuelCalc);
                }
                else {
                    $("#CashInvestmentApy").val(0);
                }
            } else {
                $("#CashInvestmentApy").val(calc);
            }

            $("#proNOIOther").val(addCommas(pretax.toString(), true));
        }
        calculateOccupancyPercentage();
    }

    function calculateOccupancyPercentage() {
        var vf = getNumberFromValue($('#CurrentVacancyFac').val());
        $("#OccupancyPercentage").val((100 - vf).toFixed(2));
    }

    function show(id) {
        $('#' + id).show();
    }
    function hide(id) {
        $('#' + id).hide();
    }

    function toggleForeclosureSection(show) {
        if (show) {
            $("#foreclosureSection").show();
        }
        else {
            $("#foreclosureSection").hide();
        }
    }

    function toggleIncomeReason(show) {
        if (show) {
            $("#incomeDetails").hide();
            $("#incomeReason").show();
        } else {
            $("#incomeDetails").show();
            $("#incomeReason").hide();
        }
    }

    function toggleDeferredMaintenanceDetails(show) {
        if (show) {
            $("#deferredMaintenanaceDetails").show();
        } else {
            $("#deferredMaintenanaceDetails").hide();
        }
    }

    function toggleCommissionDetails(show, item) {
        if (show) {
            $("#commissionDetails-" + item).show();
        } else {
            $("#commissionDetails-" + item).hide();
        }
    }

    function toggleActionDetails(show) {
        if (show) {
            $("#auctionDetails").show();
        }
        else {
            $("#auctionDetails").hide();
        }
    }

    function toggleAdditionalInfo(show) {
        if (show) {
            $("#AdditionalInfo").show();
        }
        else {
            $("#AdditionalInfo").hide();
        }
    }

    $("#PropHoldTypeId").on("change", function () {
        var temp = $(this).val();
        if ($(this).val() == "2") {
            $("#maturityDiv").show();
        } else {
            $("#maturityDiv").hide();
        }
    });

    function checkText(field) {
        if (field.value.length < 1) {
            alert("Please provide a description for the Other item");
        }
    }

    document.getElementById("chkSubDiv").onclick = function () {
        if ((document.getElementById('chkSubDiv').checked)) {
            $("#Subdivision").val("Meters & Bounds");
        }
        else {
            $("#Subdivision").val("");
        }
    }

    function calculateEstimatedDeferredMaintenance() {

        var total = 0;

        //issue#58-------------------------------
        //for (var i = 0; i < 17; i++) {
        for (var i = 0; i < 20; i++) {
            //////////--------------------------------
            var itemName = $("#DeferredMaintenanceItems_" + i + "__ItemTitle").val();
            var unitCost = getNumberFromValue($("#DeferredMaintenanceItems_" + i + "__UnitCost").val());
            var units = getNumberFromValue($("#DeferredMaintenanceItems_" + i + "__NumberOfUnits").val());
            if (!units) {
                units = 1;
            }
            if ($("#DeferredMaintenanceItems_" + i + "__Selected").is(':checked')) {
                if (itemName.toLowerCase() == "other" && (getNumberFromValue($("#DeferredMaintenanceItems_" + i + "__UnitCost").val()) == 0 || getNumberFromValue($("#DeferredMaintenanceItems_" + i + "__UnitCost").val()) == null)) {
                    alert("Please provide a value for the Other item");
                }
                else if (itemName.toLowerCase() == "other" && getNumberFromValue($("#DeferredMaintenanceItems_" + i + "__UnitCost").val()) != 0 && $("#DeferredMaintenanceItems_" + i + "__ItemDescription").val() == "") {
                    alert("Please provide a description for the Other item");
                }
                else { total += (unitCost * units); }

            }
        }
        if (total > 0) {
            $("#EstDeferredMaintenance").val(addCommas(Math.round(total.toFixed(2)).toString(), false));
        } else {
            $("#EstDeferredMaintenance").val(0);
        }
    }

    function clear_form_elements(ele) {

        $(ele).find(':input').each(function () {
            switch (this.type) {
                //case 'password':
                //case 'select-multiple':
                //case 'select-one':
                //case 'text':
                case 'textarea':
                    $(this).val('');
                    $("#charcounter").text("0 characters");
                    $("#charcounterDtlInfo").text("0 characters");
                    break;
                    //case 'checkbox':
                    //case 'radio':
                    //    this.checked = false;
            }
        });

    };
    function countChar(val) {
        var len = val.value.length;
        $("#charcounter").text(len + " characters");
    };
    function countCharDtlInfo(val) {
        var len = val.value.length;
        $("#charcounterDtlInfo").text(len + " characters");
    };

    function calculatePricePer(element) {
        try {
            var salesPrice = getNumberFromValue($("#SalesPrice").val());
            var assetType = $("#AssetType").val();

            if (assetType == "MultiFamily") {
                var units = getNumberFromValue($("#TotalUnits").val());
                if (units) $("#CalculatedPPU").val(addCommas(Math.round((salesPrice / units).toFixed(2)).toString(), false));
                else $("#CalculatedPPU").val(0);
            }
            else if (assetType == "MHP") {
                var units = getNumberFromValue($("#NumberRentableSpace").val());
                if (units) $("#CalculatedPPU").val(addCommas(Math.round((salesPrice / units).toFixed(2)).toString(), false));
                else $("#CalculatedPPU").val(0);
            }
            else {
                var units = getNumberFromValue($("#SquareFeet").val());
                if (units) $("#CalculatedPPSqFt").val(addCommas(Math.round((salesPrice / units).toFixed(2)).toString(), false));
                else $("#CalculatedPPSqFt").val(0);
            }

            calcCapRate();
        }
        catch (err) {
            $("#CalculatedPPU").val(0);
        }
    }
    $('#Terms').change(function () {
        if ($(this).val() === "Other") {
            $('#termsOtherDiv').show();
        } else {
            $('#termsOtherDiv').hide();
        }
    });
    $('#SellerTerms').change(function () {
        if ($(this).val() === "Other") {
            $('#sellerTermsOtherDiv').show();
        } else {
            $('#sellerTermsOtherDiv').hide();
        }
    });
    $('#MethodOfAppraisal').change(function () {
        if ($(this).val() === "Other") {
            $('#appraisalOtherDiv').show();
        } else {
            $('#appraisalOtherDiv').hide();
        }
    });
    $('#PaymentFrequency').change(function () {
        if ($(this).val() === "Other") {
            $('#frequencyOtherDiv').show();
        } else {
            $('#frequencyOtherDiv').hide();
        }
    });
    $('#AmortType').change(function () {
        if ($(this).val() === "Other") {
            $('#amortOtherDiv').show();
        } else {
            $('#amortOtherDiv').hide();
        }
    });
    $('#TypeOfMTGInstrument').change(function () {
        if ($(this).val() === "Other") {
            $('#instrumentOtherDiv').show();
        } else {
            $('#instrumentOtherDiv').hide();
        }
    });
    $('#PaymentHistory').change(function () {
        if ($(this).val() === "Other") {
            $('#payHistoryOtherDiv').show();
        } else {
            $('#payHistoryOtherDiv').hide();
        }
    });
    $('#HasCopyOfAppraisal').change(function () {
        if ($(this).val() === "Yes") {
            var docNumber = $("#DocumentNumberOriAppr").val();
            if (docNumber > -1) {
                $('#apprdocumentExists').toggle();}
            else {
                $('#uploadApprModal').toggle();
            }
            $('#apprdocumentDisplay').toggle();

        } else {
            $('#uploadApprModal').hide();
            $('#apprdocumentDisplay').hide();
            $('#apprdocumentExists').hide();
        }
    });
    document.getElementById("SalesPriceNotProvided").onclick = function () {
        if ((document.getElementById('SalesPriceNotProvided').checked)) { clearFieldsBecauseSalesPriceNotProvided(); }
    }
    $('#SalesPrice').change(function () {
        // if the user updates the contract sales price, uncheck the No SP provided cb
        $('#SalesPriceNotProvided').removeAttr("checked");
    });
    function clearFieldsBecauseSalesPriceNotProvided() {
        $("#SalesPrice").val(0);
        if ($('#CalculatedPPU').is(":visible")) { $("#CalculatedPPU").val(0); }
        if ($('#CalculatedPPSqFt').is(":visible")) { $("#CalculatedPPSqFt").val(0); }
        if ($('#CashInvestmentApy').is(":visible")) { $("#CashInvestmentApy").val(0); }
    }

    $('#NumberRentableSpace').change(function () { calculatePricePer(this) })
</script>

