@model AssetViewModel
@using MVCVideo
@using Inview.Epi.EpiFund.Domain.Helpers
@using Inview.Epi.EpiFund.Domain.Entity
@using Inview.Epi.EpiFund.Domain.ViewModel
@using Inview.Epi.EpiFund.Domain.Enum
@{    
    bool isCorpAdmin = ViewBag.IsCorpAdmin;
    bool isICAdmin = ViewBag.IsICAdmin;
    var costDetails = (ViewBag.DefMaintenanceDetails as IEnumerable<SelectListItem>);
    string dataRoot = ViewBag.VideoRoot;
}
<style>
    .field-validation-error
    {
        color: red;
        font-weight: bold;
    }
</style>
<!-- Nav tabs -->
<ul class="nav nav-pills">
    <li class="active"><a href="#basic" data-toggle="pill">Basic Info</a></li>
    @if (Model.IsPaper)
    {
        <li><a href="#paper" data-toggle="tab">CRE Note Data</a></li>
    }
    <li><a href="#details" data-toggle="tab">Detailed Info</a></li>
    <li><a href="#mortgage" data-toggle="tab">Existing Mortgages</a></li>
    <li><a href="#media" data-toggle="tab">Images</a></li>
    <li><a href="#documents" data-toggle="tab">Documents</a></li>
    <li><a href="#videos" data-toggle="tab">Videos</a></li>
    <li><a href="#finish" data-toggle="tab">Finish</a></li>
</ul>

<!-- Tab panes -->
<div class="tab-content">
    <div class="tab-pane active" id="basic">
        <div class="row">
            <div class="col-sm-6 text-right">
                <div class="input-group">
                    @Html.LabelFor(model => model.AssetType)
                </div>
            </div>
            <div class="col-sm-6">
                <div class="input-group" style="padding-top: 10px">
                    @Inview.Epi.EpiFund.Domain.Helpers.EnumHelper.GetEnumDescription(@Model.AssetType)
                    @Html.HiddenFor(model => model.AssetType)
                    @Html.HiddenFor(s => s.ExistingListingStatus)
                    @Html.HiddenFor(model => Model.AssetNumber)
                    @Html.HiddenFor(model => Model.IsPaper)
                    @Html.HiddenFor(model => Model.IsSubmitted)
                    @Html.HiddenFor(model => Model.Show)

                    @Html.HiddenFor(model => Model.TitleCompanyId)
                    @Html.HiddenFor(model => Model.TitleCompanyUserId)
                    @Html.HiddenFor(model => Model.OrderId)
                    @Html.HiddenFor(model => Model.OrderStatus)
                    @Html.HiddenFor(model => Model.OrderDate)
                    @Html.HiddenFor(model => Model.OrderedByUserId)
                    @Html.HiddenFor(model => Model.DateOfOrderSubmit)

                    @Html.HiddenFor(model => Model.AssetSellerId)
                    @Html.HiddenFor(model => Model.Method)
@Html.HiddenFor(model => Model.DateForTempImages)
@Html.HiddenFor(model => Model.UserId)
                    <input id="JsonPictures" name="JsonPictures" style="display:none" value="@Model.JsonPictures"/>
                    @for (int i = 0; i < Model.ListingAgents.Count; i++)
                    {
                        @Html.HiddenFor(model => Model.ListingAgents[i].Text)
                        @Html.HiddenFor(model => Model.ListingAgents[i].Value)
                        @Html.HiddenFor(model => Model.ListingAgents[i].Selected) 
                    }
                </div> 
            </div>
        </div> 
        @*            <div> 
                Is this a Paper Asset?  
                @Html.RadioButton("rbIsPaperAsset", new { isPaper = true })
                Yes
                @Html.RadioButton("rbIsPaperAsset", new { isPaper = false })
                No
            </div>*@

        <div class="row">
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.LabelFor(model => model.ListingStatus)
                </div> 
            </div>  
            <div class="col-sm-6"> 
                <div class="input-group">  
                    @Html.EnumDropDownList("ListingStatus", Model.ListingStatus, "---")
                    @Html.ValidationMessageFor(model => model.ListingStatus)
                </div> 
            </div>
        </div>

        <div class="row">
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.LabelFor(model => model.OperatingStatus)
                </div>
            </div> 
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.EnumDropDownList("OperatingStatus", Model.OperatingStatus, "---")
                    @Html.ValidationMessageFor(model => model.OperatingStatus)
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.LabelFor(model => model.Owner)
                </div>
            </div>
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.EditorFor(model => model.Owner)
                    @Html.ValidationMessageFor(model => model.Owner)
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.LabelFor(model => model.ContactPhoneNumber)
                </div>
            </div>
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.EditorFor(model => model.ContactPhoneNumber) 
                    @Html.ValidationMessageFor(model => model.ContactPhoneNumber)
                </div>
            </div>
        </div>

        @*<div class="row">
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.LabelFor(model => model.OfficerOfSeller)
                </div>
            </div>
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.EditorFor(model => model.OfficerOfSeller)
                    @Html.ValidationMessageFor(model => model.OfficerOfSeller)
                </div>
            </div>
        </div>*@


          <div class="row">
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.LabelFor(model => model.CorporateOwnershipAddress)
                </div>
            </div>
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.EditorFor(model => model.CorporateOwnershipAddress)
                 </div>
            </div> 
        </div>

        <div class="row">
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.LabelFor(model => model.CorporateOwnershipAddress2)
                </div>
            </div>
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.EditorFor(model => model.CorporateOwnershipAddress2)
                 </div>
            </div> 
        </div>

        <div class="row">
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.LabelFor(model => model.CorporateOwnershipCity)
                </div>
            </div>
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.EditorFor(model => model.CorporateOwnershipCity)
                 </div>
            </div> 
        </div>

        <div class="row">
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.LabelFor(model => model.CorporateOwnershipState)
                </div>
            </div>
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.DropDownListFor(model => model.CorporateOwnershipState, Model.States as IEnumerable<SelectListItem>, "---")
                 </div>
            </div> 
        </div>

        <div class="row">
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.LabelFor(model => model.CorporateOwnershipZip)
                </div>
            </div>
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.EditorFor(model => model.CorporateOwnershipZip)
                 </div>
            </div> 
        </div>

          <div class="row">
            <div class="col-sm-6">
                <div class="input-group"> 
                    @Html.LabelFor(model => model.CorporateOwnershipOfficer)
                </div>
            </div>
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.EditorFor(model => model.CorporateOwnershipOfficer)
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-sm-6">
                <div class="input-group"> 
                    @Html.LabelFor(model => model.PropHoldTypeId)
                </div>
            </div>
            <div class="col-sm-6">
                <div class="input-group">
@Html.DropDownListFor(model => model.PropHoldTypeId, Model.PropHoldTypes as IEnumerable<SelectListItem>)
                </div>
            </div>
        </div>

        <div id="maturityDiv" style="display: none;">       
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(model => model.LeaseholdMaturityDate)
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.EditorFor(model => model.LeaseholdMaturityDate)
                    </div>
                </div>
            </div>
        </div>
        
        
        <div class="row">
            <div class="col-sm-6">
                <div class="input-group">   
                    @Html.LabelFor(model => model.WebsiteEmail)
                </div>
            </div>
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.EditorFor(model => model.WebsiteEmail)
                    @Html.ValidationMessageFor(model => model.WebsiteEmail)
                </div>
            </div>
        </div>

        @if (isCorpAdmin)
        {
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(model => model.DateOfSale)
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.TextBoxFor(s => s.DateOfSale, new { @class = "control-label datepicker" }) <em>MM/dd/yyyy</em>
                        @Html.ValidationMessageFor(model => model.DateOfSale)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(model => model.SalesPrice)
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.TextBoxFor(s => s.SalesPrice, new { @class = "control-label formatNumber", onchange = "calculatePricePer()" })
                        @Html.ValidationMessageFor(model => model.SalesPrice)
                    </div>
                </div>
            </div>

            if (Model.GetType() == typeof(MultiFamilyAssetViewModel))
            {
                <div class="row">
                    <div class="col-sm-6">
                        <div class="input-group">
                            @Html.LabelFor(model => (model as MultiFamilyAssetViewModel).CalculatedPPU)
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="input-group">
                            @Html.TextBoxFor(model => (model as MultiFamilyAssetViewModel).CalculatedPPU, new { @class = "formatNumber" })
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="input-group">
                            @Html.ValidationMessageFor(model => (model as MultiFamilyAssetViewModel).CalculatedPPU)
                        </div>
                    </div>
                </div>
            }
            else
            {
                <div class="row">
                    <div class="col-sm-6">
                        <div class="input-group">
                            @Html.LabelFor(model => (model as CommercialAssetViewModel).CalculatedPPSqFt)
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="input-group">
                            @Html.TextBoxFor(model => (model as CommercialAssetViewModel).CalculatedPPSqFt, new { @class = "formatNumber" })
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="input-group">
                            @Html.ValidationMessageFor(model => (model as CommercialAssetViewModel).CalculatedPPSqFt)
                        </div>
                    </div>
                </div>
            }
            @*
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(model => model.BuyerName)
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.TextBoxFor(model => model.BuyerName, new { @class = "control-label" })
                        @Html.ValidationMessageFor(model => model.BuyerName)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(model => model.BuyerAddress)
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.TextBoxFor(model => model.BuyerAddress)
                        @Html.ValidationMessageFor(model => model.BuyerAddress)
                    </div>
                </div>
            </div>*@
             <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(model => model.Terms)
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.DropDownListFor(s => s.Terms, @Model.TermsOptions)
                        @Html.ValidationMessageFor(model => model.Terms)
                    </div>
                </div>
            </div>
        }

        <hr />
        
        <div>
            Listing Agents:
	        <div id="listingAgentList" data-unitcount="@(Model.AssetNARMembers.Count)" style="background-color: #f7f7f7;padding: 10px;border: 1px solid #ddd;">
                @for (int item = 0; item < Model.AssetNARMembers.Count; item++)
                {
                    <div class="iterateListingAgents">
                        @Html.HiddenFor(model => model.AssetNARMembers[item].AssetNARMemberId, new { @id = "AssetNARMemberId-" + item })
                        @Html.HiddenFor(model => model.AssetNARMembers[item].AssetId, new { @id = "AssetId-" + item })
                        @Html.HiddenFor(model => model.AssetNARMembers[item].NarMemberId, new { @id = "agentId-" + item })
                        @Html.HiddenFor(model => model.AssetNARMembers[item].NARMember.NarMemberId, new { @id = "NARMemberId-" + item })
                        @Html.HiddenFor(model => model.AssetNARMembers[item].NARMember.ReferredByUserId, new { @id = "ReferredByUserId-" + item })
                        @Html.HiddenFor(model => model.AssetNARMembers[item].NARMember.IsActive, new { @id = "IsActive-" + item })
                        @Html.HiddenFor(model => model.AssetNARMembers[item].NARMember.Website, new { @id = "Website-" + item })
                        @Html.HiddenFor(model => model.AssetNARMembers[item].NARMember.Registered, new { @id = "Registered-" + item })
                        <div class="row">
                            <div class="col-sm-6">
                                <div class="input-group">
                                    @Html.LabelFor(model => model.AssetNARMembers[item].NARMember.CompanyName)
                                </div>
                            </div>
                            <div class="col-sm-6">
                                <div class="input-group">
                                    @Html.TextBoxFor(model => model.AssetNARMembers[item].NARMember.CompanyName, new { @id = "CompanyName-" + item })
                                </div>
                            </div>
                            <div class="col-sm-6">
                                <div class="input-group">
                                    @Html.ValidationMessageFor(model => model.AssetNARMembers[item].NARMember.CompanyName)
                                </div>
                            </div>
                        </div>
						
                        <div class="row">
                            <div class="col-sm-6">
                                <div class="input-group">
                                    @Html.LabelFor(model => model.AssetNARMembers[item].NARMember.FullName)
                                </div>
                            </div>
                            <div class="col-sm-6">
                                <div class="input-group">
                                    @Html.DropDownListFor(model => model.AssetNARMembers[item].SelectedNARMemberId, new SelectList(Model.ListingAgents, "Value", "Text", Model.AssetNARMembers[item].SelectedNARMemberId), new { onchange = "fillListingUserInformation(" + @item + ")", @id = "SelectedNarMemberId-" + item })
                                    
                                    @Html.CheckBoxFor(x => x.AssetNARMembers[item].NARMember.NotOnList, new { onchange = "showExtraListingAgentBox(" + item + ")", @class = "NotOnList" })
                                    Not on list?
							        @Html.ValidationMessageFor(model => model.AssetNARMembers[item].NARMember.FullName)
                                </div>
                            </div>
                        </div>
						
                        <div id="OptionName-@item" style="display: none;">
							<div class="row">
								<div class="col-sm-6">
									<div class="input-group"><em>Type new listing agent first name here:</em></div>
								</div>
								<div class="col-sm-6">
									<div class="input-group">
										@Html.TextBoxFor(model => model.AssetNARMembers[item].NARMember.FirstName, new { @id = "FirstName-" + item })
									</div>
								</div>
							</div>
							<div class="row">
								<div class="col-sm-6">
									<div class="input-group"><em>Type new listing agent last name here:</em></div>
								</div>
								<div class="col-sm-6">
									<div class="input-group">
										@Html.TextBoxFor(model => model.AssetNARMembers[item].NARMember.LastName, new { @id = "LastName-" + item })
									</div>
								</div>
							</div>
						</div>
						
                        <div class="row">
                            <div class="col-sm-6">
                                <div class="input-group">
                                    @Html.LabelFor(model => model.AssetNARMembers[item].NARMember.Email)
                                </div>
                            </div>
                            <div class="col-sm-6">
                                <div class="input-group">
                                    @Html.TextBoxFor(model => model.AssetNARMembers[item].NARMember.Email, new { @id = "Email-" + item })
                                    @Html.ValidationMessageFor(model => model.AssetNARMembers[item].NARMember.Email)
                                </div>
                            </div>
                        </div>
						
                        <div class="row">
                            <div class="col-sm-6">
                                <div class="input-group">
                                    @Html.LabelFor(model => model.AssetNARMembers[item].NARMember.CompanyAddressLine1)
                                </div>
                            </div>
                            <div class="col-sm-6">
                                <div class="input-group">
                                    @Html.TextBoxFor(model => model.AssetNARMembers[item].NARMember.CompanyAddressLine1, new { @id = "CompanyAddressLine1-" + item })
                                </div>
                            </div>
                            <div class="col-sm-6">
                                <div class="input-group">
                                    @Html.ValidationMessageFor(model => model.AssetNARMembers[item].NARMember.CompanyAddressLine1)
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-sm-6">
                                <div class="input-group">
                                    @Html.LabelFor(model => model.AssetNARMembers[item].NARMember.CompanyAddressLine2)
                                </div>
                            </div>
                            <div class="col-sm-6">
                                <div class="input-group">
                                    @Html.TextBoxFor(model => model.AssetNARMembers[item].NARMember.CompanyAddressLine2, new { @id = "CompanyAddressLine2-" + item })
                                </div>
                            </div>
                            <div class="col-sm-6">
                                <div class="input-group">
                                    @Html.ValidationMessageFor(model => model.AssetNARMembers[item].NARMember.CompanyAddressLine2)
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-sm-6">
                                <div class="input-group">
                                    @Html.LabelFor(model => model.AssetNARMembers[item].NARMember.CompanyCity)
                                </div>
                            </div>
                            <div class="col-sm-6">
                                <div class="input-group">
                                    @Html.TextBoxFor(model => model.AssetNARMembers[item].NARMember.CompanyCity, new { @id = "CompanyCity-" + item })
                                </div>
                            </div>
                            <div class="col-sm-6">
                                <div class="input-group">
                                    @Html.ValidationMessageFor(model => model.AssetNARMembers[item].NARMember.CompanyCity)
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-sm-6">
                                <div class="input-group">
                                    @Html.LabelFor(model => model.AssetNARMembers[item].NARMember.CompanyState)
                                </div>
                            </div>
                            <div class="col-sm-6">
                                <div class="input-group">
                                    @Html.TextBoxFor(model => model.AssetNARMembers[item].NARMember.CompanyState, new { @id = "CompanyState-" + item })
                                </div>
                            </div>
                            <div class="col-sm-6">
                                <div class="input-group">
                                    @Html.ValidationMessageFor(model => model.AssetNARMembers[item].NARMember.CompanyState)
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-sm-6">
                                <div class="input-group">
                                    @Html.LabelFor(model => model.AssetNARMembers[item].NARMember.CompanyZip)
                                </div>
                            </div>
                            <div class="col-sm-6">
                                <div class="input-group">
                                    @Html.TextBoxFor(model => model.AssetNARMembers[item].NARMember.CompanyZip, new { @id = "CompanyZip-" + item })
                                </div>
                            </div>
                            <div class="col-sm-6">
                                <div class="input-group">
                                    @Html.ValidationMessageFor(model => model.AssetNARMembers[item].NARMember.CompanyZip)
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-sm-6">
                                <div class="input-group">
                                    @Html.LabelFor(model => model.AssetNARMembers[item].NARMember.WorkPhoneNumber)
                                </div>
                            </div>
                            <div class="col-sm-6">
                                <div class="input-group">
                                    @Html.TextBoxFor(model => model.AssetNARMembers[item].NARMember.WorkPhoneNumber, new { @id = "WorkPhoneNumber-" + item })
                                </div>
                            </div>
                            <div class="col-sm-6">
                                <div class="input-group">
                                    @Html.ValidationMessageFor(model => model.AssetNARMembers[item].NARMember.WorkPhoneNumber)
                                </div>
                            </div>
                        </div>
						
                        <div class="row">
                            <div class="col-sm-6">
                                <div class="input-group">
                                    @Html.LabelFor(model => model.AssetNARMembers[item].NARMember.CellPhoneNumber)
                                </div>
                            </div>
                            <div class="col-sm-6">
                                <div class="input-group">
                                    @Html.TextBoxFor(model => model.AssetNARMembers[item].NARMember.CellPhoneNumber, new { @id = "CellPhoneNumber-" + item })
                                </div>
                            </div>
                            <div class="col-sm-6">
                                <div class="input-group">
                                    @Html.ValidationMessageFor(model => model.AssetNARMembers[item].NARMember.CellPhoneNumber)
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-sm-6">
                                <div class="input-group">
                                    @Html.LabelFor(model => model.AssetNARMembers[item].NARMember.FaxNumber)
                                </div>
                            </div>
                            <div class="col-sm-6">
                                <div class="input-group">
                                    @Html.TextBoxFor(model => model.AssetNARMembers[item].NARMember.FaxNumber, new { @id = "FaxNumber-" + item })
                                </div>
                            </div>
                            <div class="col-sm-6">
                                <div class="input-group">
                                    @Html.ValidationMessageFor(model => model.AssetNARMembers[item].NARMember.FaxNumber)
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-sm-6">
                                <div class="input-group">
                                    @Html.LabelFor(model => model.AssetNARMembers[item].NARMember.CommissionShareAgr)
                                </div>
                            </div>
                            <div class="col-sm-6">
                                <div class="input-group" style="padding-top: 5px">
                                    @Html.RadioButtonFor(model => model.AssetNARMembers[item].NARMember.CommissionShareAgr, true, new { onchange = "toggleCommissionDetails(true, " + @item + ")", @class = "csa" }) Yes 
							        @Html.RadioButtonFor(model => model.AssetNARMembers[item].NARMember.CommissionShareAgr, false, new { onchange = "toggleCommissionDetails(false, " + @item + ")", @class = "csa" }) No
							        @Html.ValidationMessageFor(model => model.AssetNARMembers[item].NARMember.CommissionShareAgr)
                                </div>
                            </div>
                        </div>
                        <div id="commissionDetails-@item" class="commissionDetailItem" style="display: none;">
                            <div class="row">
                                <div class="col-sm-6">
                                    <div class="input-group">
                                        @Html.LabelFor(model => model.AssetNARMembers[item].NARMember.CommissionAmount)
                                    </div>
                                </div>
                                <div class="col-sm-6">
                                    <div class="input-group">
                                        @Html.TextBoxFor(model => model.AssetNARMembers[item].NARMember.CommissionAmount, new { @class = "formatNumber" }) %
                                    </div>
                                </div>
                                <div class="col-sm-6">
                                    <div class="input-group">
                                        @Html.ValidationMessageFor(model => model.AssetNARMembers[item].NARMember.CommissionAmount)
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-sm-6">
                                    <div class="input-group">
                                        @Html.LabelFor(model => model.AssetNARMembers[item].NARMember.DateOfCsaConfirm)
                                    </div>
                                </div>
                                <div class="col-sm-6">
                                    <div class="input-group">
                                        @Html.TextBoxFor(model => model.AssetNARMembers[item].NARMember.DateOfCsaConfirm, new { @class = "datepicker" })
                                        @Html.ValidationMessageFor(model => model.AssetNARMembers[item].NARMember.DateOfCsaConfirm)
                                    </div>
                                </div>
                            </div>
                        </div>
                        <hr />
                    </div>
                }
            </div>
            <input type="button" id="addListingAgent" value="Add Listing Agent" />
            <input type="button" id="removeListingAgent" value="Remove Listing Agent" />
        </div>

        <hr />
        <div class="row">
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.LabelFor(model => model.ProjectName)
                </div>
            </div>
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.TextBoxFor(s => s.ProjectName)
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.LabelFor(model => model.PropertyAddress)
                </div>
            </div>
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.EditorFor(model => model.PropertyAddress)
                    @Html.ValidationMessageFor(model => model.PropertyAddress)
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.LabelFor(model => model.PropertyAddress2)
                </div>
            </div>
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.EditorFor(model => model.PropertyAddress2)
                    @Html.ValidationMessageFor(model => model.PropertyAddress2)
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.LabelFor(model => model.City)
                </div>
            </div>
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.EditorFor(model => model.City)
                    @Html.ValidationMessageFor(model => model.City)
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.LabelFor(model => model.State)
                </div>
            </div>
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.DropDownListFor(model => model.State, Model.States as IEnumerable<SelectListItem>, "---")
                    @Html.ValidationMessageFor(model => model.State)
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.LabelFor(model => model.Zip)
                </div>
            </div>
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.EditorFor(model => model.Zip)
                    @Html.ValidationMessageFor(model => model.Zip)
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.LabelFor(model => model.County)
                </div>
            </div>
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.EditorFor(model => model.County)
                    @Html.ValidationMessageFor(model => model.County)
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.LabelFor(model => model.LotNumber)
                </div>
            </div>
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.EditorFor(model => model.LotNumber)
                    @Html.ValidationMessageFor(model => model.LotNumber)
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.LabelFor(model => model.Subdivision)
                </div>
            </div>
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.EditorFor(model => model.Subdivision)
                    @Html.ValidationMessageFor(model => model.Subdivision)
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.LabelFor(model => model.TaxBookMap)
                </div>
            </div>
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.EditorFor(model => model.TaxBookMap)
                    @Html.ValidationMessageFor(model => model.TaxBookMap)
                </div>
            </div>
        </div>

        <div>
            @if (Model.AssetTaxParcelNumbers != null)
            {
                <div id="taxParcelNumberList" data-count="@Model.AssetTaxParcelNumbers.Count" style="background-color: #f7f7f7;padding: 10px;border: 1px solid #ddd;">
                    @for (int i = 0; i < Model.AssetTaxParcelNumbers.Count; i++)
                    {
                        <div class="iterateTaxParcelNumbers">
                            <div class="row">
                                <div class="col-sm-6">
                                    <div class="input-group">
                                        <label>Tax Parcel Number</label>
                                    </div>
                                </div>
                                <div class="col-sm-6">
                                    <div class="input-group">
                                        @Html.EditorFor(model => model.AssetTaxParcelNumbers[i].TaxParcelNumber)
                                        @Html.ValidationMessageFor(model => model.AssetTaxParcelNumbers[i].TaxParcelNumber)
                                    </div>
                                </div>
                            </div>
                            @Html.HiddenFor(x => x.AssetTaxParcelNumbers[i].AssetId)
                            @Html.HiddenFor(x => x.AssetTaxParcelNumbers[i].AssetTaxParcelNumberId)
                        </div>
                    }
                </div>
            }
            <input type="button" id="addTaxParcelNumber" value="Add Tax Parcel Number" />
            <input type="button" id="removeTaxParcelNumber" value="Remove Tax Parcel Number" />
            <br />
            <br />
        </div>
        <div class="row">
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.LabelFor(model => model.PropertyCondition)
                </div>
            </div>
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.EnumDropDownList("PropertyCondition", Model.PropertyCondition, "---")
                    @Html.ValidationMessageFor(model => model.PropertyCondition)
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.LabelFor(model => model.GradeClassification)
                </div>
            </div>
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.DropDownListFor(s => s.GradeClassification, @Model.Grades)
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.LabelFor(model => model.OccupancyType)
                </div>
            </div>
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.EnumDropDownList("OccupancyType", Model.OccupancyType, "---")
                    @Html.ValidationMessageFor(model => model.OccupancyType)
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.LabelFor(model => model.YearBuilt)
                </div>
            </div>
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.EditorFor(model => model.YearBuilt)
                    @Html.ValidationMessageFor(model => model.YearBuilt)
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.LabelFor(model => model.BuildingsCount)
                </div>
            </div>
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.EditorFor(model => model.BuildingsCount)
                    @Html.ValidationMessageFor(model => model.BuildingsCount)
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.LabelFor(model => model.SquareFeet)
                </div>
            </div>
            <div class="col-sm-6">
                <div class="input-group" style="line-height: 34px">
                    @Html.TextBoxFor(model => model.SquareFeet, new { @class = "formatNumber" })
                    @Html.ValidationMessageFor(model => model.SquareFeet)
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-6">
                <div class="input-group" style="line-height: 34px">
                    @Html.LabelFor(model => model.LotSize)
                </div>
            </div>
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.EditorFor(model => model.LotSize) acres
                    @Html.ValidationMessageFor(model => model.LotSize)
                </div>
            </div>
        </div>
        <hr />
        <div class="row">
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.LabelFor(model => model.AnnualPropertyTax)
                </div>
            </div>
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.TextBoxFor(model => model.AnnualPropertyTax, new { @class = "formatNumber" })
                    @Html.ValidationMessageFor(model => model.AnnualPropertyTax)
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.LabelFor(model => model.PropertyTaxYear)
                </div>
            </div>
            <div class="col-sm-6">
                <div class="input-group" style="line-height: 34px">
                    <span class="calculateYear">@Html.DisplayFor(model => model.PropertyTaxYear)@Html.HiddenFor(s => s.PropertyTaxYear)</span>
                    @Html.ValidationMessageFor(model => model.PropertyTaxYear)
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-6">
                <div class="input-group">
                    <label>Calculated Market Value (<a title="[Calculated Market Value is based solely on either (1) comparable sales data provided by the Listing Agent or Seller in their Offering Memorandum, or, in the absence thereof, (2) calculated to the displayed CAP Rate only if the offering price for the asset is TBD by Market.]">CMV</a>)</label>
                </div>
            </div>
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.TextBoxFor(model => model.CurrentBpo, new { @class = "formatNumber" })
                    @Html.ValidationMessageFor(model => model.CurrentBpo)
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.LabelFor(model => model.AskingPrice)
                </div>
            </div>
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.TextBoxFor(model => model.AskingPrice, new { @onblur = "calcCapRate()", @class = "formatNumber" })
                    @Html.ValidationMessageFor(model => model.AskingPrice)
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.LabelFor(model => model.PropLastUpdatedYear)
                </div>
            </div> 
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.TextBoxFor(model => model.PropLastUpdatedYear)
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.LabelFor(model => model.IsTBDMarket)
                </div>
            </div>
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.RadioButtonFor(s => s.IsTBDMarket, "true", new { onchange = "toggleActionDetails(true)" }) Yes
                    @Html.RadioButtonFor(s => s.IsTBDMarket, "false", new { onchange = "toggleActionDetails(false)" }) No
                </div>
            </div>
        </div>
        <div class="row" id="auctionDetails">
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.LabelFor(s => s.AuctionDate)
                </div>
            </div>
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.TextBoxFor(s => s.AuctionDate, new { @class = "datepicker" }) <em>MM/dd/yyyy</em>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-6">
                <div class="input-group">
                    <label>Does this property produce income?</label>
                </div>
            </div>
            <div class="col-sm-6">
                <div class="input-group" style="padding-top: 5px">
                    @Html.RadioButtonFor(s => s.HasIncome, "true", new { onclick = "toggleIncomeReason(false)" }) Yes
                    @Html.RadioButtonFor(s => s.HasIncome, "false", new { onclick = "toggleIncomeReason(true)" }) No                    
                    @Html.ValidationMessageFor(model => model.HasIncome)
                </div>
            </div>
        </div>
        <div id="incomeDetails">
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(model => model.AnnualGrossIncome)
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.TextBoxFor(model => model.AnnualGrossIncome, new { @onblur = "calcMonthlyIncome(this, 'calculateMonthlyIncome', 'MonthlyGrossIncome')", @class = "formatNumber" })
                        @Html.ValidationMessageFor(model => model.AnnualGrossIncome)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(model => model.MonthlyGrossIncome)
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group" style="line-height: 34px">
                        <span id="calculateMonthlyIncome" class="pad formatNumber">@Model.MonthlyGrossIncome</span>
                        @Html.HiddenFor(s => s.MonthlyGrossIncome)
                    </div>
                </div>
            </div>
        </div>
        <div id="incomeReason" style="display: none;">
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(model => model.HasIncomeReason)
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.TextAreaFor(model => model.HasIncomeReason, new { rows = "4", cols = "40" })
                        @Html.ValidationMessageFor(model => model.HasIncomeReason)
                    </div>
                </div>
            </div>
        </div>

        <hr />

        <div class="row">
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.LabelFor(model => model.ProformaAnnualIncome)
                </div>
            </div>
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.TextBoxFor(model => model.ProformaAnnualIncome, new { @onblur = "calcMonthlyIncome(this, 'calculateProformaMonthlyIncome', 'ProformaMonthlyIncome')", @class = "formatNumber" })
                    @Html.ValidationMessageFor(model => model.ProformaAnnualIncome)
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.LabelFor(model => model.ProformaMonthlyIncome)
                </div>
            </div>
            <div class="col-sm-6">
                <div class="input-group" style="line-height: 34px">
                    <span id="calculateProformaMonthlyIncome" class="pad formatNumber">@Model.ProformaMonthlyIncome</span>
                    @Html.HiddenFor(s => s.ProformaMonthlyIncome)
                    @Html.ValidationMessageFor(model => model.ProformaMonthlyIncome)
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.LabelFor(model => model.ProformaMiscIncome)
                </div>
            </div>
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.TextBoxFor(model => model.ProformaMiscIncome, new { @class = "formatNumber", @onblur = "calcMonthlyIncome(this, 'calculateProformaMonthlyIncome', 'ProformaMonthlyIncome')" })
                    @Html.ValidationMessageFor(model => model.ProformaMiscIncome)
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.LabelFor(model => model.CurrentVacancyFac)
                </div>
            </div>
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.TextBoxFor(model => model.CurrentVacancyFac, new { @onblur = "calcCapRate()", @class = "formatNumber" }) %
                    @Html.ValidationMessageFor(model => model.CurrentVacancyFac)
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.LabelFor(model => model.ProformaVacancyFac)
                </div>
            </div>
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.TextBoxFor(model => model.ProformaVacancyFac, new { @class = "formatNumber" }) %
                    @Html.ValidationMessageFor(model => model.ProformaVacancyFac)
                </div>
            </div>
        </div>

        @*<div class="row">
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.LabelFor(model => model.LastReportedOccPercent)
                </div>
            </div>
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.EditorFor(model => model.LastReportedOccPercent)<div style="margin-left: 5px; display: inline">%</div>
                    @Html.ValidationMessageFor(model => model.LastReportedOccPercent)
                </div>
            </div>
        </div>*@

        <div class="row">
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.LabelFor(model => model.ProformaAnnualOperExpenses)
                </div>
            </div>
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.TextBoxFor(model => model.ProformaAnnualOperExpenses, new { @onblur = "calcProformaSGI()", @class = "formatNumber" })
                    @Html.ValidationMessageFor(model => model.ProformaAnnualOperExpenses)
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.LabelFor(model => model.ProformaAoeFactorAsPerOfSGI)
                </div>
            </div>
            <div class="col-sm-6">
                <div class="input-group" style="line-height: 34px">
                    <span id="aoeFactor">@Html.DisplayFor(model => model.ProformaAoeFactorAsPerOfSGI)</span><div style="margin-left: 5px; display: inline">%</div>
                    @Html.HiddenFor(model => model.ProformaAoeFactorAsPerOfSGI)
                </div>
            </div>
        </div>
        <hr />
        <div class="row">
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.LabelFor(model => model.CashInvestmentApy)
                </div>
            </div>
            <div class="col-sm-6">
                <div class="input-group" style="line-height: 34px">
                    <span id="cap">@Model.CashInvestmentApy</span><div style="margin-left: 5px; display: inline">%</div>
                    @Html.HiddenFor(s => s.CashInvestmentApy)
                    @Html.ValidationMessageFor(model => model.CashInvestmentApy)
                </div>
            </div>
        </div>
        <hr />
        <div class="row">
            <div class="col-sm-6">
                <div class="input-group">
                    @Html.LabelFor(model => model.isPendingForeclosure)
                </div>
            </div>
            <div class="col-sm-6">
                <div class="input-group" style="line-height: 34px">
                    @Html.RadioButtonFor(s => s.isPendingForeclosure, "true", new { onchange = "toggleForeclosureSection(true)" }) Yes
                    @Html.RadioButtonFor(s => s.isPendingForeclosure, "false", new { onchange = "toggleForeclosureSection(false)" }) No
                </div>
            </div>
        </div>
        <div id="foreclosureSection" style="display: none;">
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(model => model.ForeclosureLender)
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group" style="line-height: 34px">
                        @Html.EditorFor(model => model.ForeclosureLender)
                        @Html.ValidationMessageFor(model => model.ForeclosureLender)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(model => model.ForeclosurePosition)
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group" style="line-height: 34px">
                        @Html.EnumDropDownList("Position", Model.ForeclosurePosition, "---")
                        @Html.ValidationMessageFor(model => model.ForeclosurePosition)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(model => model.ForeclosureRecordNumber)
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group" style="line-height: 34px">
                        @Html.EditorFor(model => model.ForeclosureRecordNumber)
                        @Html.ValidationMessageFor(model => model.ForeclosureRecordNumber)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(model => model.ForeclosureOriginalMortgageAmount)
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group" style="line-height: 34px">
                        @Html.TextBoxFor(model => model.ForeclosureOriginalMortgageAmount, new { @class = "formatNumber" })
                        @Html.ValidationMessageFor(model => model.ForeclosureOriginalMortgageAmount)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(model => model.ForeclosureOriginalMortageDate)
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group" style="line-height: 34px">
                        @Html.EditorFor(model => model.ForeclosureOriginalMortageDate, new { @class = "datepicker" }) <em>MM/dd/yyyy</em>
                        @Html.ValidationMessageFor(model => model.ForeclosureOriginalMortageDate)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(model => model.ForeclosureSaleDate)
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group" style="line-height: 34px">
                        @Html.EditorFor(model => model.ForeclosureSaleDate, new { @class = "datepicker" }) <em>MM/dd/yyyy</em>
                        @Html.ValidationMessageFor(model => model.ForeclosureSaleDate)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(model => model.ForeclosureRecordDate)
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group" style="line-height: 34px">
                        @Html.EditorFor(model => model.ForeclosureRecordDate, new { @class = "datepicker" }) <em>MM/dd/yyyy</em>
                        @Html.ValidationMessageFor(model => model.ForeclosureRecordDate)
                    </div>
                </div>
            </div>
        </div>
        @if (isCorpAdmin)
        {
            <hr />
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(model => model.ClosingDate)
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.EditorFor(model => model.ClosingDate, new { @class = "datepicker" }) <em>MM/dd/yyyy</em>
                        @Html.ValidationMessageFor(model => model.ClosingDate)
                    </div>
                </div>

            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(model => model.ProposedBuyer)
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.DropDownListFor(s => s.ProposedBuyer, @Model.Users, new { onchange = "fillUserInformation()" })
                        @*@Html.EditorFor(model => model.ProposedBuyer)*@
                        @Html.ValidationMessageFor(model => model.ProposedBuyer)
                    </div>
                </div>

            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(model => model.ProposedBuyerContact)
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.EditorFor(model => model.ProposedBuyerContact)
                        @Html.ValidationMessageFor(model => model.ProposedBuyerContact)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(model => model.ProposedBuyerAddress)
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.EditorFor(model => model.ProposedBuyerAddress)
                        @Html.ValidationMessageFor(model => model.ProposedBuyerAddress)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(model => model.ActualClosingDate)
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.EditorFor(model => model.ActualClosingDate, new { @class = "datepicker" }) <em>MM/dd/yyyy</em>
                        @Html.ValidationMessageFor(model => model.ActualClosingDate)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(model => model.CommissionShareToEPI)
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.TextBoxFor(model => model.CommissionShareToEPI, new { @class = "formatNumber" }) %
                        @Html.ValidationMessageFor(model => model.CommissionShareToEPI)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(model => model.DateCommissionToEpiReceived)
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.TextBoxFor(model => model.DateCommissionToEpiReceived, new { @class = "datepicker" })
                        @Html.ValidationMessageFor(model => model.DateCommissionToEpiReceived)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(model => model.GeneralComments)
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.TextAreaFor(model => model.GeneralComments, 4, 40, null)
                    </div>
                </div>
            </div>
            
            
            
        }
        else
        {
            @Html.HiddenFor(model => model.ClosingDate)
            @Html.HiddenFor(model => model.ProposedBuyer)
            @Html.HiddenFor(model => model.ProposedBuyerContact)
            @Html.HiddenFor(model => model.ProposedBuyerAddress)
            @Html.HiddenFor(model => model.ActualClosingDate)
            @Html.HiddenFor(model => model.CommissionShareAgr)
            @Html.HiddenFor(model => model.DateCommissionToEpiReceived)                
        }
        <div class="row">
            <div class="col-sm-12">
                <input type="button" class="btn btn-warning" onclick="if (confirm('If you click ok, you will lose all of the data you entered and be returned to the manage assets page.')) goBack()" value="Cancel" />
                <input type="button" class="btn btn-primary" onclick="nextTab($(this));" value="Next" />
            </div>
        </div>
    </div>

    @if (Model.IsPaper)
    {
        <div class="tab-pane" id="paper">
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.TypeOfNote, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.DropDownListFor(model => model.TypeOfNote, Model.NoteTypes as IEnumerable<SelectListItem>, "---")
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.NoteOrigination, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.TextBoxFor(s => s.NoteOrigination, new { @class = "control-label datepicker" }) <em>MM/dd/yyyy</em>
                        @Html.ValidationMessageFor(model => model.NoteOrigination)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.NotePrincipal, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.TextBoxFor(s => s.NotePrincipal, new { @class = "control-label formatNumber" })
                        @Html.ValidationMessageFor(model => model.NotePrincipal)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.CurrentNotePrincipal, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.TextBoxFor(s => s.CurrentNotePrincipal, new { @class = "control-label formatNumber" })
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        <label class="control-label"><a title="Broker Price Opinion" style="color: blue; text-decoration: underline;">BPO</a> of Property at Note Origination (if available)</label>

                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.TextBoxFor(s => s.BPOOfProperty, new { @class = "control-label formatNumber" })
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.HasCopyOfAppraisal, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.DropDownListFor(model => model.HasCopyOfAppraisal, Model.PropertyAppraisals as IEnumerable<SelectListItem>, "---")
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.MethodOfAppraisal, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.DropDownListFor(model => model.MethodOfAppraisal, Model.AppraisalMethods as IEnumerable<SelectListItem>, "---")
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.NoteInterestRate, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.TextBoxFor(s => s.NoteInterestRate, new { @class = "control-label formatNumber" }) %
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.PaymentAmount, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.TextBoxFor(s => s.PaymentAmount, new { @class = "control-label formatNumber", onchange = "addCommasToInput(this)" })
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.PaymentFrequency, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.DropDownListFor(model => model.PaymentFrequency, Model.PaymentFrequencies as IEnumerable<SelectListItem>, "---")
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.TypeOfMTGInstrument, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.DropDownListFor(model => model.TypeOfMTGInstrument, Model.MortgageInstruments as IEnumerable<SelectListItem>, "---")
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.AmortType, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.DropDownListFor(model => model.AmortType, Model.AmortTypes as IEnumerable<SelectListItem>, "---")
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.PaymentsMadeOnNote, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.TextBoxFor(s => s.PaymentsMadeOnNote, new { @class = "control-label formatNumber" })
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.PaymentsRemainingOnNote, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.TextBoxFor(s => s.PaymentsRemainingOnNote, new { @class = "control-label formatNumber" })
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.IsNoteCurrent, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.RadioButtonFor(s => s.IsNoteCurrent, "true") Yes
                    @Html.RadioButtonFor(s => s.IsNoteCurrent, "false") No
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.LastPaymentRecievedOnNote, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.TextBoxFor(s => s.LastPaymentRecievedOnNote, new { @class = "control-label datepicker" }) <em>MM/dd/yyyy</em>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.NextPaymentOnNote, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.TextBoxFor(s => s.NextPaymentOnNote, new { @class = "control-label datepicker" }) <em>MM/dd/yyyy</em>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.BalloonDateForPayoffOfNote, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.TextBoxFor(s => s.BalloonDateForPayoffOfNote, new { @class = "control-label datepicker" }) <em>MM/dd/yyyy</em>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.SecuringPropertyAppraisal, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.TextBoxFor(s => s.SecuringPropertyAppraisal, new { @class = "control-label formatNumber" })
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.WasPropertyDistressed, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.RadioButtonFor(s => s.WasPropertyDistressed, "true") Yes
                    @Html.RadioButtonFor(s => s.WasPropertyDistressed, "false") No
                        @Html.RadioButtonFor(s => s.WasPropertyDistressed, "false") Unknown
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.PaymentHistory, new { @class = "control-label" })<span style="color: red;">*</span>
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.DropDownListFor(model => model.PaymentHistory, Model.PaymentHistories as IEnumerable<SelectListItem>, "---")
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.SellerCarryNoteSalesDate, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.TextBoxFor(s => s.SellerCarryNoteSalesDate, new { @class = "control-label datepicker" }) <em>MM/dd/yyyy</em>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.SellerCarryNotePrice, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.TextBoxFor(s => s.SellerCarryNotePrice, new { @class = "control-label formatNumber" })
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.SellerCarryNoteCashDown, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.TextBoxFor(s => s.SellerCarryNoteCashDown, new { @class = "control-label formatNumber" })
                    </div>
                </div>
            </div>

            <hr />

            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.IsNoteWRAP, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group" style="padding-top: 5px">
                        @Html.RadioButtonFor(s => s.IsNoteWRAP, "true", new { onclick = "toggleWRAP(true)" }) Yes
                        @Html.RadioButtonFor(s => s.IsNoteWRAP, "false", new { onclick = "toggleWRAP(false)" }) No                    
                        @Html.ValidationMessageFor(model => model.IsNoteWRAP)
                    </div>
                </div>
            </div>
            <div id="wrapFields">
                <div class="row">
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.LabelFor(s => s.OriginalPrincipalBalanceWRAP, new { @class = "control-label" })
                        </div>
                    </div>
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.TextBoxFor(s => s.OriginalPrincipalBalanceWRAP, new { @class = "control-label formatNumber" })
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.LabelFor(s => s.TotalMonthlyPaymentWRAP, new { @class = "control-label" })
                        </div>
                    </div>
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.TextBoxFor(s => s.TotalMonthlyPaymentWRAP, new { @class = "control-label formatNumber" })
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.LabelFor(s => s.FirstmortgageBalanceWRAP, new { @class = "control-label" })
                        </div>
                    </div>
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.TextBoxFor(s => s.FirstmortgageBalanceWRAP, new { @class = "control-label formatNumber" })
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.LabelFor(s => s.FirstInterestRateWRAP, new { @class = "control-label" })
                        </div>
                    </div>
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.TextBoxFor(s => s.FirstInterestRateWRAP, new { @class = "control-label formatNumber" })
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.LabelFor(s => s.FirstMortgagePaymentWRAP, new { @class = "control-label" })
                        </div>
                    </div>
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.TextBoxFor(s => s.FirstMortgagePaymentWRAP, new { @class = "control-label formatNumber" })
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.LabelFor(s => s.SecondMortgageBalanceWRAP, new { @class = "control-label" })
                        </div>
                    </div>
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.TextBoxFor(s => s.SecondMortgageBalanceWRAP, new { @class = "control-label formatNumber" })
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.LabelFor(s => s.SecondInterestRateWRAP, new { @class = "control-label" })
                        </div>
                    </div>
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.TextBoxFor(s => s.SecondInterestRateWRAP, new { @class = "control-label formatNumber" })
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.LabelFor(s => s.SecondMortgagePaymentWRAP, new { @class = "control-label" })
                        </div>
                    </div>
                    <div class="col-lg-6">
                        <div class="input-group">
                            @Html.TextBoxFor(s => s.SecondMortgagePaymentWRAP, new { @class = "control-label formatNumber" })
                        </div>
                    </div>
                </div>
            </div>
            <input type="button" class="btn btn-warning" onclick="if (confirm('If you click ok, you will lose all of the data you entered and be returned to the manage assets page.')) goBack()" value="Cancel" />
            <input type="button" class="btn btn-default" onclick="backTab($(this));" value="Back" />
            <input type="button" class="btn btn-primary" onclick="nextTab($(this));" value="Next" />
        </div>
    }

    <div class="tab-pane" id="details">

        @if (Model.GetType() == typeof(MultiFamilyAssetViewModel))
        {
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        <label>Number of Units</label>
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.TextBoxFor(model => (model as MultiFamilyAssetViewModel).TotalUnits, new { @class = "formatNumber", onchange = "calculatePricePer()" })
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.ValidationMessageFor(model => (model as MultiFamilyAssetViewModel).TotalUnits)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        <label>Number of Parking Spaces</label>
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.TextBoxFor(model => (model as MultiFamilyAssetViewModel).ParkingSpaces)
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.ValidationMessageFor(model => (model as MultiFamilyAssetViewModel).ParkingSpaces)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        <label>Number of Covered Parking Spaces</label>
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.TextBoxFor(model => (model as MultiFamilyAssetViewModel).CoveredParkingSpaces)
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.ValidationMessageFor(model => (model as MultiFamilyAssetViewModel).CoveredParkingSpaces)
                    </div>
                </div>
            </div>
            if (Model.AssetType == AssetType.MHP)
            {
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        <label>Number of Spaces</label>
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.TextBoxFor(model => (model as MultiFamilyAssetViewModel).ParkOwnedMHUnits, new { @class = "formatNumber", onchange = "calculatePricePer()" })
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.ValidationMessageFor(model => (model as MultiFamilyAssetViewModel).ParkOwnedMHUnits)
                    </div>
                </div>
            </div>
            }
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(model => (model as MultiFamilyAssetViewModel).OccupancyPercentage)
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.EditorFor(model => (model as MultiFamilyAssetViewModel).OccupancyPercentage)<div style="margin-left: 5px; display: inline">%</div>
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.ValidationMessageFor(model => (model as MultiFamilyAssetViewModel).OccupancyPercentage)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(model => model.LastReportedOccupancyDate)
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.TextBoxFor(model => model.LastReportedOccupancyDate, new { @class = "datepicker" }) <em>MM/dd/yyyy</em>
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.ValidationMessageFor(model => model.LastReportedOccupancyDate)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        <label>Electric Meter Method</label>
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.EnumDropDownList("ElectricMeterMethod", (Model as MultiFamilyAssetViewModel).ElectricMeterMethod, "---")
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.ValidationMessageFor(model => (model as MultiFamilyAssetViewModel).ElectricMeterMethod)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(model => (model as MultiFamilyAssetViewModel).GasMeterMethod)
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.EnumDropDownList("GasMeterMethod", (Model as MultiFamilyAssetViewModel).GasMeterMethod, "---")
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.ValidationMessageFor(model => (model as MultiFamilyAssetViewModel).GasMeterMethod)
                    </div>
                </div>
            </div>
            <div>
                Unit Mix:
                    
            <div id="unitSpecList" data-unitcount="@((Model as MultiFamilyAssetViewModel).UnitSpecifications.Count)">
                @for (int item = 0; item < (Model as MultiFamilyAssetViewModel).UnitSpecifications.Count(); item++)
                {
                    <div class="unitSpecDiv">
                        <div class="row">
                            <div class="col-sm-6">
                                <div class="input-group">
                                    @Html.LabelFor(model => (model as MultiFamilyAssetViewModel).UnitSpecifications[item].CountOfUnits)
                                </div>
                            </div>
                            <div class="col-sm-6">
                                <div class="input-group">
                                    @Html.TextBoxFor(model => (model as MultiFamilyAssetViewModel).UnitSpecifications[item].CountOfUnits, new { @class = "formatNumber" })
                                    @Html.ValidationMessageFor(model => (model as MultiFamilyAssetViewModel).UnitSpecifications[item].CountOfUnits)
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-sm-6">
                                <div class="input-group">
                                    @Html.LabelFor(model => (model as MultiFamilyAssetViewModel).UnitSpecifications[item].BedCount)
                                </div>
                            </div>
                            <div class="col-sm-6">
                                <div class="input-group">
                                    @Html.EnumDropDownList("UnitSpecifications[" + item + "].BedCount", (Model as MultiFamilyAssetViewModel).UnitSpecifications[item].BedCount)
                                    @Html.ValidationMessageFor(model => (model as MultiFamilyAssetViewModel).UnitSpecifications[item].BedCount)
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-sm-6">
                                <div class="input-group">
                                    @Html.LabelFor(model => (model as MultiFamilyAssetViewModel).UnitSpecifications[item].BathCount)
                                </div>
                            </div>
                            <div class="col-sm-6">
                                <div class="input-group">
                                    @Html.EnumDropDownList("UnitSpecifications[" + item + "].BathCount", (Model as MultiFamilyAssetViewModel).UnitSpecifications[item].BathCount)
                                    @Html.ValidationMessageFor(model => (model as MultiFamilyAssetViewModel).UnitSpecifications[item].BathCount)
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-sm-6">
                                <div class="input-group">
                                    @Html.LabelFor(model => (model as MultiFamilyAssetViewModel).UnitSpecifications[item].UnitBaseRent)
                                </div>
                            </div>
                            <div class="col-sm-6">
                                <div class="input-group">
                                    @Html.TextBoxFor(model => (model as MultiFamilyAssetViewModel).UnitSpecifications[item].UnitBaseRent, new { onchange = "addCommasToInput(this)", @class = "formatNumber" })
                                    @Html.ValidationMessageFor(model => (model as MultiFamilyAssetViewModel).UnitSpecifications[item].UnitBaseRent)
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-sm-6">
                                <div class="input-group">
                                    @Html.LabelFor(model => (model as MultiFamilyAssetViewModel).UnitSpecifications[item].UnitSquareFeet)
                                </div>
                            </div>
                            <div class="col-sm-6">
                                <div class="input-group">
                                    @Html.TextBoxFor(model => (model as MultiFamilyAssetViewModel).UnitSpecifications[item].UnitSquareFeet, new { onchange = "addCommasToInput(this)", @class = "formatNumber" })
                                    @Html.ValidationMessageFor(model => (model as MultiFamilyAssetViewModel).UnitSpecifications[item].UnitSquareFeet)
                                </div>
                            </div>
                        </div>
                        <hr />
                    </div>
                }
            </div>
                <br />
                <input type="button" id="addUnitSpecs" value="Add a Unit Specification" />
                <input type="button" id="removeUnitSpecs" value="Remove Last" />
                <hr />
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(model => (model as MultiFamilyAssetViewModel).MFDetails)
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.CheckBoxList("MFDetails", ViewBag.MultiFamilyDetails as IEnumerable<SelectListItem>)
                    </div>
                </div>
            </div>
                
        }
        else if (Model.GetType() == typeof(CommercialAssetViewModel))
        {
                
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(model => (model as CommercialAssetViewModel).Type)
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.EnumDropDownList("Type", (Model as CommercialAssetViewModel).Type, "---")
                        @Html.ValidationMessageFor(model => (model as CommercialAssetViewModel).Type)
                    </div>
                </div>
            </div>
            
           
@*<div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(model => (model as CommercialAssetViewModel).RentableSquareFeet)
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.EditorFor(model => (model as CommercialAssetViewModel).RentableSquareFeet)
                        @Html.ValidationMessageFor(model => (model as CommercialAssetViewModel).RentableSquareFeet)
                    </div>
                </div>
            </div>*@
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        <label class="mfLabel">Number of Parking Spaces</label>
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.TextBoxFor(model => (model as CommercialAssetViewModel).ParkingSpaces, new { @class = "formatNumber" })
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.ValidationMessageFor(model => (model as CommercialAssetViewModel).ParkingSpaces)
                    </div>
                </div>
            </div>
            
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        <label>Number of Covered Parking Spaces</label>
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.TextBoxFor(model => (model as CommercialAssetViewModel).CoveredParkingSpaces, new { @class = "formatNumber" })
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.ValidationMessageFor(model => (model as CommercialAssetViewModel).CoveredParkingSpaces)
                    </div>
                </div>
            </div>
            
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(model => (model as CommercialAssetViewModel).ProformaSgi)
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.TextBoxFor(model => (model as CommercialAssetViewModel).ProformaSgi, new { @class = "formatNumber" })
                        @Html.ValidationMessageFor(model => (model as CommercialAssetViewModel).ProformaSgi)
                    </div>
                </div>
            </div>
            
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(model => (model as CommercialAssetViewModel).ProformaAnnualNoi)
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.TextBoxFor(model => (model as CommercialAssetViewModel).ProformaAnnualNoi, new { @class = "formatNumber" })
                        @Html.ValidationMessageFor(model => (model as CommercialAssetViewModel).ProformaAnnualNoi)
                    </div>
                </div>
            </div>
            
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(model => (model as CommercialAssetViewModel).NumberOfTenants)
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.TextBoxFor(model => (model as CommercialAssetViewModel).NumberOfTenants, new { @class = "formatNumber" })
                        @Html.ValidationMessageFor(model => (model as CommercialAssetViewModel).NumberOfTenants)
                    </div>
                </div>
            </div>
            
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(model => (model as CommercialAssetViewModel).HasAAARatedMajorTenant)
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group" style="padding-top: 5px">
                        @Html.RadioButtonFor(model => (model as CommercialAssetViewModel).HasAAARatedMajorTenant, "true", new { onclick = "toggleMajorTenant(true)" }) Yes
                        @Html.RadioButtonFor(model => (model as CommercialAssetViewModel).HasAAARatedMajorTenant, "false", new { onclick = "toggleMajorTenant(false)" }) No
                        @Html.ValidationMessageFor(model => (model as CommercialAssetViewModel).HasAAARatedMajorTenant)
                    </div>
                </div>
            </div>
            <div id="majorTenant">
                <div class="row">
                    <div class="col-sm-6">
                        <div class="input-group">
                            @Html.LabelFor(model => (model as CommercialAssetViewModel).NameOfAAARatedMajorTenant)
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="input-group">
                            @Html.EditorFor(model => (model as CommercialAssetViewModel).NameOfAAARatedMajorTenant)
                            @Html.ValidationMessageFor(model => (model as CommercialAssetViewModel).NameOfAAARatedMajorTenant)
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-6">
                        <div class="input-group">
                            @Html.LabelFor(model => (model as CommercialAssetViewModel).IsMajorTenantAAARated)
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="input-group" style="padding-top: 5px">
                            @Html.RadioButtonFor(model => (model as CommercialAssetViewModel).IsMajorTenantAAARated, "true") Yes
                            @Html.RadioButtonFor(model => (model as CommercialAssetViewModel).IsMajorTenantAAARated, "false") No
                            @Html.ValidationMessageFor(model => (model as CommercialAssetViewModel).IsMajorTenantAAARated)
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-6">
                        <div class="input-group">
                            @Html.LabelFor(model => (model as CommercialAssetViewModel).LeasedSquareFootageByMajorTenant)
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="input-group">
                            @Html.TextBoxFor(model => (model as CommercialAssetViewModel).LeasedSquareFootageByMajorTenant, new { @class = "formatNumber" })
                            @Html.ValidationMessageFor(model => (model as CommercialAssetViewModel).LeasedSquareFootageByMajorTenant)
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-6">
                        <div class="input-group">
                            @Html.LabelFor(model => (model as CommercialAssetViewModel).BaseRentPerSqFtMajorTenant)
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="input-group">
                            @Html.TextBoxFor(model => (model as CommercialAssetViewModel).BaseRentPerSqFtMajorTenant, new { @class = "formatNumber" })
                            @Html.ValidationMessageFor(model => (model as CommercialAssetViewModel).BaseRentPerSqFtMajorTenant)
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(model => (model as CommercialAssetViewModel).CurrentMarkerRentPerSqFt)
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.TextBoxFor(model => (model as CommercialAssetViewModel).CurrentMarkerRentPerSqFt, new { @class = "formatNumber" })
                        @Html.ValidationMessageFor(model => (model as CommercialAssetViewModel).CurrentMarkerRentPerSqFt)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(model => (model as CommercialAssetViewModel).NumberofSuites)
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.TextBoxFor(model => (model as CommercialAssetViewModel).NumberofSuites, new { @class = "formatNumber" })
                        @Html.ValidationMessageFor(model => (model as CommercialAssetViewModel).NumberofSuites)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(model => (model as CommercialAssetViewModel).OccupancyPercentage)
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.EditorFor(model => (model as CommercialAssetViewModel).OccupancyPercentage)<div style="margin-left: 5px; display: inline">%</div>
                        @Html.ValidationMessageFor(model => (model as CommercialAssetViewModel).OccupancyPercentage)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(model => (model as CommercialAssetViewModel).OccupancyDate)
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.EditorFor(model => (model as CommercialAssetViewModel).OccupancyDate)
                        @Html.ValidationMessageFor(model => (model as CommercialAssetViewModel).OccupancyDate)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(model => (model as CommercialAssetViewModel).NumberOfRentableSuites)
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.TextBoxFor(model => (model as CommercialAssetViewModel).NumberOfRentableSuites, new { @class = "formatNumber" })
                        @Html.ValidationMessageFor(model => (model as CommercialAssetViewModel).NumberOfRentableSuites)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(model => (model as CommercialAssetViewModel).VacantSuites)
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.EnumDropDownList("VacantSuites", (Model as CommercialAssetViewModel).VacantSuites, "---")
                        @Html.ValidationMessageFor(model => (model as CommercialAssetViewModel).VacantSuites)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(model => (model as CommercialAssetViewModel).PropertyDetails)
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.CheckBoxList("PropertyDetails", ViewBag.CommercialPropertyDetails as IEnumerable<SelectListItem>)
                        @Html.ValidationMessageFor(model => (model as CommercialAssetViewModel).PropertyDetails)
                    </div>
                </div>
            </div>
        }
        @if (Model.GetType() == typeof(MultiFamilyAssetViewModel))
        {
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(model => model.HasDeferredMaintenance)
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.RadioButtonFor(model => model.HasDeferredMaintenance, "true", new { style = "margin-top: 10px;", onclick = "toggleDeferredMaintenanceDetails(true)" }) Yes
                        @Html.RadioButtonFor(model => model.HasDeferredMaintenance, "false", new { style = "margin-top: 10px;", onclick = "toggleDeferredMaintenanceDetails(false)" }) No
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.ValidationMessageFor(model => model.HasDeferredMaintenance)
                    </div>
                </div>
            </div>
            <div id="deferredMaintenanaceDetails" style="display: none;">
                <div class="row">
                    <div class="col-sm-6">
                        <div class="input-group">
                            @Html.LabelFor(s => s.AverageAdjustmentToBaseRentalIncomePerUnitAfterRenovations)
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="input-group">
                            @Html.TextBoxFor(s => s.AverageAdjustmentToBaseRentalIncomePerUnitAfterRenovations, new { @class = "formatNumber" })
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-6">
                        <div class="input-group">
                            @Html.LabelFor(model => model.EstDeferredMaintenance)
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="input-group">
                            @Html.TextBoxFor(s => s.EstDeferredMaintenance, new { @class = "formatNumber" })
                            @*<input type="text" name="EstDeferredMaintenance" id="EstDeferredMaintenance" class="formatNumber" value="@((Model as MultiFamilyAssetViewModel).EstDeferredMaintenance)" readonly />*@
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="input-group">
                        </div>
                    </div>
                </div>
                @for (int i = 0; i < Model.DeferredMaintenanceItems.Count; i++)
                {
                    <div class="document-item">
                        <div class="row">
                            <div class="col-sm-5">
                                @Html.CheckBoxFor(s => Model.DeferredMaintenanceItems[i].Selected, new { onchange = "calculateEstimatedDeferredMaintenance()" })
                                <label>@Model.DeferredMaintenanceItems[i].ItemTitle</label>
                            </div>
                            @if (Model.DeferredMaintenanceItems[i].ItemTitle != null && Model.DeferredMaintenanceItems[i].ItemTitle.Contains("Other"))
                            {
                                <div class="col-sm-7" style="text-align: right;">
                                    <label>Description:</label>       
                                        @Html.TextBoxFor(s => Model.DeferredMaintenanceItems[i].ItemDescription, new { onchange = "checkText(this)" })         
                                    <label>Unit Cost:</label> 
                                        @Html.TextBoxFor(s => Model.DeferredMaintenanceItems[i].UnitCost, new { @class = "formatMaint", style = "width: 60px; margin-right:5px;", onchange = "addCommasToInputAndCalculate(this)" })
                                        @Html.HiddenFor(s => Model.DeferredMaintenanceItems[i].NumberOfUnits, new { Value = "1" })
                                </div>
                        
                            }
                            else
                            {
                                <div class="col-sm-7" style="text-align: right;">
                                    <label>Unit Cost:</label>
                                        @Html.TextBoxFor(s => Model.DeferredMaintenanceItems[i].UnitCost, new { @class = "formatMaint", style = "width: 60px; margin-right:5px;", onchange = "addCommasToInputAndCalculate(this)" })
                                    @if (Model.DeferredMaintenanceItems[i].UnitTypeLabel != null)
                                    {
                                        <label>Number of @Model.DeferredMaintenanceItems[i].UnitTypeLabel:</label>
                                        @Html.TextBoxFor(s => Model.DeferredMaintenanceItems[i].NumberOfUnits, new { @class = "formatMaint", style = "margin-left: 5px; width: 60px;", onchange = "addCommasToInputAndCalculate(this)" })
                                    }
                                </div>
                            }
                        </div>
                        @Html.HiddenFor(s => Model.DeferredMaintenanceItems[i].MaintenanceDetail)
                        @Html.HiddenFor(s => Model.DeferredMaintenanceItems[i].UnitCost)
                        @Html.HiddenFor(s => Model.DeferredMaintenanceItems[i].UnitTypeLabel)
                        @Html.HiddenFor(s => Model.DeferredMaintenanceItems[i].NumberOfUnits)
                        @Html.HiddenFor(s => Model.DeferredMaintenanceItems[i].ItemTitle)
                    </div>
                }

                @*@Html.EditorFor(s => Model.DeferredMaintenanceItems, "DeferredMaintenanceEditorTemplate")*@
            </div>
        }
        @if (Model.GetType() == typeof(CommercialAssetViewModel))
        {
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        <label>Does the Property Have a Tenant Improvement Budget?</label>
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.RadioButtonFor(model => model.HasDeferredMaintenance, "true", new { style = "margin-top: 10px;", onclick = "toggleDeferredMaintenanceDetails(true)" }) Yes
                        @Html.RadioButtonFor(model => model.HasDeferredMaintenance, "false", new { style = "margin-top: 10px;", onclick = "toggleDeferredMaintenanceDetails(false)" }) No
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.ValidationMessageFor(model => model.HasDeferredMaintenance)
                    </div>
                </div>
            </div>
            <div id="deferredMaintenanaceDetails" style="display: none;">
                <div class="row">
                    <div class="col-sm-6">
                        <div class="input-group">
                            <label>Average Adjustment to Base Rental Income after Renovations</label>
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="input-group">
                            @Html.TextBoxFor(s => s.AverageAdjustmentToBaseRentalIncomePerUnitAfterRenovations, new { @class = "formatNumber" })
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-6">
                        <div class="input-group">
                            <label>Estimated Deferred Maintenance</label>
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="input-group">
                            @Html.TextBoxFor(s => s.EstDeferredMaintenance, new { @class = "formatNumber" })
                            @*<input type="text" name="EstDeferredMaintenance" id="EstDeferredMaintenance" class="formatNumber" value="@((Model as MultiFamilyAssetViewModel).EstDeferredMaintenance)" readonly />*@
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="input-group">
                        </div>
                    </div>
                </div>
                @for (int i = 0; i < Model.DeferredMaintenanceItems.Count; i++)
                {
                    <div class="document-item">
                        <div class="row">
                            <div class="col-sm-5">
                                @Html.CheckBoxFor(s => Model.DeferredMaintenanceItems[i].Selected, new { onchange = "calculateEstimatedDeferredMaintenance()" })
                                <label>@Model.DeferredMaintenanceItems[i].ItemTitle</label>
                            </div>
                            
                        @if (Model.DeferredMaintenanceItems[i].UnitTypeLabel != null && Model.DeferredMaintenanceItems[i].UnitTypeLabel.Contains("Sq.Ft"))
                        {
                            <div class="col-sm-7" style="text-align: right;">
                                <label>Base Cost per Sq.Ft.:</label>
                                @Html.TextBoxFor(s => Model.DeferredMaintenanceItems[i].UnitCost, new { @class = "formatMaint", style = "width: 60px; margin-right:5px;", onchange = "addCommasToInputAndCalculate(this)" })
                                @if (Model.DeferredMaintenanceItems[i].UnitTypeLabel != null)
                                {
                                    <label>@Model.DeferredMaintenanceItems[i].UnitTypeLabel:</label>
                                    @Html.TextBoxFor(s => Model.DeferredMaintenanceItems[i].NumberOfUnits, new { @class = "formatMaint", style = "margin-left: 5px; width: 60px;", onchange = "addCommasToInputAndCalculate(this)" })
                                }
                            </div>
                        }
                        else if (Model.DeferredMaintenanceItems[i].UnitTypeLabel != null && Model.DeferredMaintenanceItems[i].UnitTypeLabel.Contains("Base Estimate"))
                        {
                            <div class="col-sm-7" style="text-align: right;">
                                @if (Model.DeferredMaintenanceItems[i].UnitTypeLabel != null)
                                {
                                    <label>Base Estimate Per List Agent/Ownership:</label>
                                    @Html.TextBoxFor(s => Model.DeferredMaintenanceItems[i].UnitCost, new { @class = "formatMaint", style = "margin-left: 5px; width: 60px;", onchange = "addCommasToInputAndCalculate(this)" })
                                }
                            </div>
                        
                        }
                        else if (Model.DeferredMaintenanceItems[i].ItemTitle != null && Model.DeferredMaintenanceItems[i].ItemTitle.Contains("Other"))
                        {
                            <div class="col-sm-7" style="text-align: right;">
                               <label>Description:</label>       
                                @Html.TextBoxFor(s => Model.DeferredMaintenanceItems[i].ItemDescription, new { onchange = "checkText(this)" })         
                                <label>Unit Cost:</label> 
                                @Html.TextBoxFor(s => Model.DeferredMaintenanceItems[i].UnitCost, new { @class = "formatMaint", style = "width: 60px; margin-right:5px;", onchange = "addCommasToInputAndCalculate(this)" })
                                @Html.HiddenFor(s => Model.DeferredMaintenanceItems[i].NumberOfUnits, new { Value = "1" })
                            </div>
                        
                        }
                        else
                        {   
                            <div class="col-sm-7" style="text-align: right;">
                                    <label>Unit Cost:</label>
                                    @Html.TextBoxFor(s => Model.DeferredMaintenanceItems[i].UnitCost, new { @class = "formatMaint", style = "width: 60px; margin-right:5px;", onchange = "addCommasToInputAndCalculate(this)" })
                                    @if (Model.DeferredMaintenanceItems[i].UnitTypeLabel != null)
                                    {
                                        <label>Number of @Model.DeferredMaintenanceItems[i].UnitTypeLabel:</label>
                                        @Html.TextBoxFor(s => Model.DeferredMaintenanceItems[i].NumberOfUnits, new { @class = "formatMaint", style = "margin-left: 5px; width: 60px;", onchange = "addCommasToInputAndCalculate(this)" })
                                    }
                                </div>
                            
                        }   
                    </div>
                        @Html.HiddenFor(s => Model.DeferredMaintenanceItems[i].MaintenanceDetail)
                        @Html.HiddenFor(s => Model.DeferredMaintenanceItems[i].UnitCost)
                        @Html.HiddenFor(s => Model.DeferredMaintenanceItems[i].UnitTypeLabel)
                        @Html.HiddenFor(s => Model.DeferredMaintenanceItems[i].NumberOfUnits)
                        @Html.HiddenFor(s => Model.DeferredMaintenanceItems[i].ItemTitle)
                    </div>
                }

                @*@Html.EditorFor(s => Model.DeferredMaintenanceItems, "DeferredMaintenanceEditorTemplate")*@
            </div>
        }

        <div class="row" style="margin-top: 10px;">
            <div class="col-sm-12">
                <input type="button" class="btn btn-warning" onclick="if (confirm('If you click ok, you will lose all of the data you entered and be returned to the manage assets page.')) goBack()" value="Cancel" />
                <input type="button" class="btn btn-default" onclick="backTab($(this));" value="Back" />
                <input type="button" class="btn btn-primary" onclick="nextTab($(this));" value="Next" />
            </div>
        </div>


    </div>

    <div class="tab-pane" id="mortgage">
        <div class="row">
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.LabelFor(s => s.HasPositionMortgage, new { @class = "control-label" })
                </div>
            </div>
            <div class="col-lg-6">
                <div class="input-group">
                    @Html.RadioButtonFor(s => s.HasPositionMortgage, Inview.Epi.EpiFund.Domain.Enum.PositionMortgageType.Yes, new { onchange = "toggleMortgage(1)" }) Yes
                    @Html.RadioButtonFor(s => s.HasPositionMortgage, Inview.Epi.EpiFund.Domain.Enum.PositionMortgageType.No, new { onchange = "toggleMortgage(4)" }) No
                    @Html.RadioButtonFor(s => s.HasPositionMortgage, Inview.Epi.EpiFund.Domain.Enum.PositionMortgageType.Unknown, new { onchange = "toggleMortgage(4)" }) Unknown
                    @Html.ValidationMessageFor(model => model.HasPositionMortgage)
                </div>
            </div>
        </div>
        <div id="hasMortgage">
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.MortgageLienType, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.RadioButtonFor(s => s.MortgageLienType, Inview.Epi.EpiFund.Domain.Enum.MortgageLienType.Recourse, new { @class = "mltRecourse" }) Recourse
                        @Html.RadioButtonFor(s => s.MortgageLienType, Inview.Epi.EpiFund.Domain.Enum.MortgageLienType.NonRecourse, new { @class = "mltNonRecourse" }) Non-Recourse
                        @Html.RadioButtonFor(s => s.MortgageLienType, Inview.Epi.EpiFund.Domain.Enum.MortgageLienType.Unknown, new { @class = "mltUnknown" }) Unknown
                        @Html.ValidationMessageFor(model => model.MortgageLienType)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.MortgageLienAssumable, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.RadioButtonFor(s => s.MortgageLienAssumable, Inview.Epi.EpiFund.Domain.Enum.MortgageLienAssumable.Yes, new { @class = "mlaYes" }) Yes
                        @Html.RadioButtonFor(s => s.MortgageLienAssumable, Inview.Epi.EpiFund.Domain.Enum.MortgageLienAssumable.No, new { @class = "mlaNo" }) No
                        @Html.RadioButtonFor(s => s.MortgageLienAssumable, Inview.Epi.EpiFund.Domain.Enum.MortgageLienAssumable.Unknown, new { @class = "mlaUnknown" }) Unknown
                        @Html.ValidationMessageFor(model => model.MortgageLienAssumable)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.FirstMortgageCompany, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.TextBoxFor(s => s.FirstMortgageCompany, new { @class = "control-label" })
                        @Html.ValidationMessageFor(model => model.FirstMortgageCompany)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.MortgageCompanyAddress, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.TextBoxFor(s => s.MortgageCompanyAddress, new { @class = "control-label" })
                        @Html.ValidationMessageFor(model => model.MortgageCompanyAddress)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.MortgageCompanyCity, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.TextBoxFor(s => s.MortgageCompanyCity, new { @class = "control-label" })
                        @Html.ValidationMessageFor(model => model.MortgageCompanyCity)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.MortgageCompanyState, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.DropDownListFor(model => model.MortgageCompanyState, Model.States as IEnumerable<SelectListItem>, "---")
                        @Html.ValidationMessageFor(model => model.MortgageCompanyState)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.MortgageCompanyZip, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.TextBoxFor(s => s.MortgageCompanyZip, new { @class = "control-label" })
                        @Html.ValidationMessageFor(model => model.MortgageCompanyZip)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.LenderPhone, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.TextBoxFor(s => s.LenderPhone, new { @class = "control-label" })
                        @Html.ValidationMessageFor(model => model.LenderPhone)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.LenderPhoneOther, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.TextBoxFor(s => s.LenderPhoneOther, new { @class = "control-label" })
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.AccountNumber, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.TextBoxFor(s => s.AccountNumber, new { @class = "control-label" })
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.CurrentPrincipalBalance, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.TextBoxFor(s => s.CurrentPrincipalBalance, new { @class = "control-label formatNumber" })
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.MonthlyPayment, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.TextBoxFor(s => s.MonthlyPayment, new { @class = "control-label formatNumber" })
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.PaymentIncludes, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.DropDownListFor(model => model.PaymentIncludes, Model.PaymentTypes as IEnumerable<SelectListItem>, "---")
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.InterestRate, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.TextBoxFor(s => s.InterestRate, new { @class = "control-label" }) %
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.IsMortgageAnARM, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.RadioButtonFor(model => model.IsMortgageAnARM, "true") Yes
                        @Html.RadioButtonFor(model => model.IsMortgageAnARM, "false") No
                        @Html.RadioButtonFor(model => model.IsMortgageAnARM, "false") Unknown
                        @*@Html.RadioButtonFor(s => s.IsMortgageAnARM, "Yes") Yes
                    @Html.RadioButtonFor(s => s.IsMortgageAnARM, "No") No
                    @Html.RadioButtonFor(s => s.IsMortgageAnARM, "Unknown") Unknown*@
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.MortgageAdjustIfARM, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.TextBoxFor(s => s.MortgageAdjustIfARM, new { @class = "control-label datepicker" })
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.BalloonDateOfNote, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="input-group">
                        @Html.TextBoxFor(s => s.BalloonDateOfNote, new { @class = "control-label datepicker" }) <em>MM/dd/yyyy</em>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.LabelFor(s => s.NumberOfMissedPayments, new { @class = "control-label" })
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="input-group">
                        @Html.TextBoxFor(s => s.NumberOfMissedPayments, new { @class = "control-label" })
                    </div>
                </div>
            </div>
        </div>

        <input type="button" class="btn btn-warning" onclick="if (confirm('If you click ok, you will lose all of the data you entered and be returned to the manage assets page.')) goBack()" value="Cancel" />
        <input type="button" class="btn btn-default" onclick="backTab($(this));" value="Back" />
        <input type="button" class="btn btn-primary" onclick="nextTab($(this));" value="Next" />
    </div>

    <div class="tab-pane" id="media">
        <h3>Images</h3>
        <div class="row">
            <div class="col-sm-6">
                <label for="imgUploader">Upload Image:</label>
            </div>
        </div>
        <div id="simpleUpload">
            <div class="meter red">
              <span class="roller"><span></span></span>
            </div>
            <div id="dropzone" class="dropzone">
            </div>
        </div>
        <br />
        <input type="button" class="btn btn-warning" onclick="if (confirm('If you click ok, you will lose all of the data you entered and be returned to the manage assets page.')) goBack()" value="Cancel" />
        <input type="button" class="btn btn-default" onclick="backTab($(this));" value="Back" />
        <input type="button" class="btn btn-primary" onclick="nextTab($(this));" value="Next" />
    </div>

    <div class="tab-pane" id="documents">
        <h3>Documents</h3>
        <div id="docManager" data-doccount="@Model.Documents.Count">
            <div class="document-item">
                <span style="width: 40%; float: left;">Current Rent Roll:</span>
                @Html.RadioButtonFor(s => s.availablecurrentRentRoll, "false", new { onchange = "hide('currentRentRoll')", id = "rdBtnCurrRollNAvai1" })
                Data Not Available
                @Html.RadioButtonFor(s => s.availablecurrentRentRoll, "true", new { onchange = "show('currentRentRoll')", id = "rdBtnCurrRollAvai1" })
                Data Available
                @if (Model.availablecurrentRentRoll)
                {
                    <a onclick="show('currentRentRoll')" style="margin-left: 15px;">View Document(s)</a>
                }
                <div id="currentRentRoll" style="display: none;" class="document-item-expanded">
                    <div class="docSetup" style="width: 100%">
                        <a onclick="hide('currentRentRoll'); document.getElementById('rdBtnCurrRollNAvai1').checked = true; document.getElementById('rdBtnCurrRollAvai1').checked = false;" style="text-align: right; margin-left: 550px;"><span class="glyphicon glyphicon-remove"></span></a>
                        <h4 style="margin-top: 0px;">Upload New Document</h4>
                        <div class="row">
                            <div class="col-sm-12">
                                <label>Title</label>
                            </div>
                            <div class="col-sm-12">
                                <input type="text" id="rentRollTitle" value="Current Rent Roll" />
                            </div>
                            <div class="col-sm-12">
                                <label>Description</label>
                            </div>
                            <div class="col-sm-12"> 
                                <textarea cols="10" rows="4" id="rentRollDescription"></textarea>
                            </div>
                            <div class="col-sm-12">
                                <input type="file" data-type="@((int)Inview.Epi.EpiFund.Domain.Enum.AssetDocumentType.CurrentRentRoll)" id="rentRoll" />
                            </div>
                        </div>
                    </div>
                    @for (int item = 0; item < Model.Documents.Count; item++)
                    {
                        if (Model.Documents[item].Type == (int)Inview.Epi.EpiFund.Domain.Enum.AssetDocumentType.CurrentRentRoll)
                        {
                        <div class="docPreviewDiv">
                            <a target='_blank' href="@Url.Action("DownloadDocument", "Admin", new { fileName = Model.Documents[item].FileName, assetId = Model.AssetId, contentType = Model.Documents[item].ContentType, title = Model.Documents[item].Title })">Click here to download file</a>
                            <br />
                            <div class="row">
                                <div class="col-sm-12">
                                    <label style="font-weight: bold;">Title</label>
                                </div>
                                <div class="col-sm-12">
                                    @Html.TextBoxFor(s => Model.Documents[item].Title)
                                </div>
                                <div class="col-sm-12">
                                    <label style="font-weight: bold;">Description</label>
                                </div>
                                <div class="col-sm-12">
                                    @Html.TextAreaFor(s => Model.Documents[item].Description, 4, 10, null)
                                </div>
                            </div>
                            @Html.HiddenFor(s => Model.Documents[item].AssetDocumentId)
                            @Html.HiddenFor(s => Model.Documents[item].Size)
                            @Html.HiddenFor(s => Model.Documents[item].ContentType)
                            @Html.HiddenFor(s => Model.Documents[item].AssetId)
                            @Html.HiddenFor(s => Model.Documents[item].Type)
                            @Html.HiddenFor(x => Model.Documents[item].Viewable)
                            @Html.HiddenFor(s => Model.Documents[item].FileName, new { @class = "docName" })
                            <input type='button' class='deleteDocUpload' value='Delete' data-button="@Model.Documents[item].FileName" onclick='docDelete(this)'/>
                        </div>
                        }
                    }
                </div>
            </div>
            <div class="document-item">
                <span style="width: 40%; float: left;">Current Operating Report:</span>
                @Html.RadioButtonFor(s => s.availablecurrentOperatingReport, "false", new { onchange = "hide('currentOperatingReport')", id = "rdBtnCurrRollNAvai2" })
                Data Not Available
                @Html.RadioButtonFor(s => s.availablecurrentOperatingReport, "true", new { onchange = "show('currentOperatingReport')", id = "rdBtnCurrRollAvai2" })
                Data Available
                @if (Model.availablecurrentOperatingReport)
                {
                    <a onclick="show('currentOperatingReport')" style="margin-left: 15px;">View Document(s)</a>
                }
                <div id="currentOperatingReport" style="display: none;" class="document-item-expanded">
                    <div class="docSetup" style="width: 100%">
                        <a onclick="hide('currentOperatingReport'); document.getElementById('rdBtnCurrRollNAvai2').checked = true; document.getElementById('rdBtnCurrRollAvai2').checked = false;" style="text-align: right; margin-left: 550px;"><span class="glyphicon glyphicon-remove"></span></a>
                        <h4 style="margin-top: 0px;">Upload New Document</h4>
                        <div class="row">
                            <div class="col-sm-12">
                                <label>Title</label>
                            </div>
                            <div class="col-sm-12">
                                <input type="text" id="corTitle" value="Current Operating Report" />
                            </div>
                            <div class="col-sm-12">
                                <label>Description</label>
                            </div>
                            <div class="col-sm-12">
                                <textarea cols="10" rows="4" id="corDescription"></textarea>
                            </div>
                            <div class="col-sm-12">
                                <input type="file" data-type="@((int)Inview.Epi.EpiFund.Domain.Enum.AssetDocumentType.CurrentOperatingReport)" id="cor" />
                            </div>
                        </div>
                    </div>
                    @for (int item = 0; item < Model.Documents.Count; item++)
                    {
                        if (Model.Documents[item].Type == (int)Inview.Epi.EpiFund.Domain.Enum.AssetDocumentType.CurrentOperatingReport)
                        {
                        <div class="docPreviewDiv">
                            <a target='_blank' href="@Url.Action("DownloadDocument", "Admin", new { fileName = Model.Documents[item].FileName, assetId = Model.AssetId, contentType = Model.Documents[item].ContentType, title = Model.Documents[item].Title })">Click here to download file</a>
                            <br />
                            <div class="row">
                                <div class="col-sm-12">
                                    <label style="font-weight: bold;">Title</label>
                                </div>
                                <div class="col-sm-12">
                                    @Html.TextBoxFor(s => Model.Documents[item].Title)
                                </div>
                                <div class="col-sm-12">
                                    <label style="font-weight: bold;">Description</label>
                                </div>
                                <div class="col-sm-12">
                                    @Html.TextAreaFor(s => Model.Documents[item].Description, 4, 10, null)
                                </div>
                            </div>
                            @Html.HiddenFor(s => Model.Documents[item].Type)
                            @Html.HiddenFor(s => Model.Documents[item].AssetDocumentId)
                            @Html.HiddenFor(s => Model.Documents[item].Size)
                            @Html.HiddenFor(s => Model.Documents[item].ContentType)
                            @Html.HiddenFor(s => Model.Documents[item].AssetId)
                            @Html.HiddenFor(x => Model.Documents[item].Viewable)
                            @Html.HiddenFor(s => Model.Documents[item].FileName, new { @class = "docName" })
                            <input type='button' class='deleteDocUpload' value='Delete' data-button="@Model.Documents[item].FileName" onclick='docDelete(this)'/>
                        </div>
                        }
                    }
                </div>
            </div>
            <div class="document-item">
                <span style="width: 40%; float: left;">Prior Fiscal Year Oper Report:</span>
                @Html.RadioButtonFor(s => s.availablepriorFiscalYearOperReport, "false", new { onchange = "hide('priorFiscalYearOperReport')", id = "rdBtnCurrRollNAvai3" })
                Data Not Available
                @Html.RadioButtonFor(s => s.availablepriorFiscalYearOperReport, "true", new { onchange = "show('priorFiscalYearOperReport')", id = "rdBtnCurrRollAvai3" })
                Data Available
                @if (Model.availablepriorFiscalYearOperReport)
                {
                    <a onclick="show('priorFiscalYearOperReport')" style="margin-left: 15px;">View Document(s)</a>
                }
                <div id="priorFiscalYearOperReport" style="display: none;" class="document-item-expanded">
                    <div class="docSetup" style="width: 100%">
                        <a onclick="hide('priorFiscalYearOperReport') ; document.getElementById('rdBtnCurrRollNAvai3').checked = true; document.getElementById('rdBtnCurrRollAvai3').checked = false;" style="text-align: right; margin-left: 550px;"><span class="glyphicon glyphicon-remove"></span></a>
                        <h4 style="margin-top: 0px;">Upload New Document</h4>
                        <div class="row">
                            <div class="col-sm-12">
                                <label>Title</label>
                            </div>
                            <div class="col-sm-12">
                                <input type="text" id="pfyorTitle" value="Prior Fiscal Year Oper Report" />
                            </div>
                            <div class="col-sm-12">
                                <label>Description</label>
                            </div>
                            <div class="col-sm-12">
                                <textarea cols="10" rows="4" id="pfyorDescription"></textarea>
                            </div>
                            <div class="col-sm-12">
                                <input type="file" data-type="@((int)Inview.Epi.EpiFund.Domain.Enum.AssetDocumentType.PriorFiscalYearOperReport)" id="pfyor" />
                            </div>
                        </div>
                    </div>
                    @for (int item = 0; item < Model.Documents.Count; item++)
                    {
                        if (Model.Documents[item].Type == (int)Inview.Epi.EpiFund.Domain.Enum.AssetDocumentType.PriorFiscalYearOperReport)
                        {
                        <div class="docPreviewDiv">
                            <a target='_blank' href="@Url.Action("DownloadDocument", "Admin", new { fileName = Model.Documents[item].FileName, assetId = Model.AssetId, contentType = Model.Documents[item].ContentType, title = Model.Documents[item].Title })">Click here to download file</a>
                            <br />
                            <div class="row">
                                <div class="col-sm-12">
                                    <label style="font-weight: bold;">Title</label>
                                </div>
                                <div class="col-sm-12">
                                    @Html.TextBoxFor(s => Model.Documents[item].Title)
                                </div>
                                <div class="col-sm-12">
                                    <label style="font-weight: bold;">Description</label>
                                </div>
                                <div class="col-sm-12">
                                    @Html.TextAreaFor(s => Model.Documents[item].Description, 4, 10, null)
                                </div>
                            </div>
                            @Html.HiddenFor(s => Model.Documents[item].Type)
                            @Html.HiddenFor(s => Model.Documents[item].AssetDocumentId)
                            @Html.HiddenFor(s => Model.Documents[item].Size)
                            @Html.HiddenFor(s => Model.Documents[item].ContentType)
                            @Html.HiddenFor(s => Model.Documents[item].AssetId)
                            @Html.HiddenFor(x => Model.Documents[item].Viewable)
                            @Html.HiddenFor(s => Model.Documents[item].FileName, new { @class = "docName" })
                            <input type='button' class='deleteDocUpload' value='Delete' data-button="@Model.Documents[item].FileName" onclick='docDelete(this)'/>
                        </div>
                        }
                    }
                </div>
            </div>
            <div class="document-item">
                <span style="width: 40%; float: left;">Preliminary Title Report:</span>
                @Html.RadioButtonFor(s => s.availablepreliminaryTitleReport, "false", new { onchange = "hide('preliminaryTitleReport')", id = "rdBtnCurrRollNAvai4" })
                Data Not Available
                @Html.RadioButtonFor(s => s.availablepreliminaryTitleReport, "true", new { onchange = "show('preliminaryTitleReport')", id = "rdBtnCurrRollAvai4" })
                Data Available
                @if (Model.availablepreliminaryTitleReport)
                {
                    <a onclick="show('preliminaryTitleReport')" style="margin-left: 15px;">View Document(s)</a>
                }
                <div id="preliminaryTitleReport" style="display: none;" class="document-item-expanded">
                    <div class="docSetup" style="width: 100%">
                        <a onclick="hide('preliminaryTitleReport') ; document.getElementById('rdBtnCurrRollNAvai4').checked = true; document.getElementById('rdBtnCurrRollAvai4').checked = false;" style="text-align: right; margin-left: 550px;"><span class="glyphicon glyphicon-remove"></span></a>
                        <h4 style="margin-top: 0px;">Upload New Document</h4>
                        <div class="row">
                            <div class="col-sm-12">
                                <label>Title</label>
                            </div>
                            <div class="col-sm-12">
                                <input type="text" id="ptrTitle" value="Preliminary Title Report" />
                            </div>
                            <div class="col-sm-12">
                                <label>Description</label>
                            </div>
                            <div class="col-sm-12">
                                <textarea cols="10" rows="4" id="ptrDescription"></textarea>
                            </div>
                            <div class="col-sm-12">
                                <input type="file" data-type="@((int)Inview.Epi.EpiFund.Domain.Enum.AssetDocumentType.PreliminaryTitleReport)" id="ptr" />
                            </div>
                        </div>
                    </div>
                    @for (int item = 0; item < Model.Documents.Count; item++)
                    {
                        if (Model.Documents[item].Type == (int)Inview.Epi.EpiFund.Domain.Enum.AssetDocumentType.PreliminaryTitleReport)
                        {
                        <div class="docPreviewDiv">
                            <a target='_blank' href="@Url.Action("DownloadDocument", "Admin", new { fileName = Model.Documents[item].FileName, assetId = Model.AssetId, contentType = Model.Documents[item].ContentType, title = Model.Documents[item].Title })">Click here to download file</a>
                            <br />
                            <div class="row">
                                <div class="col-sm-12">
                                    <label style="font-weight: bold;">Title</label>
                                </div>
                                <div class="col-sm-12">
                                    @Html.TextBoxFor(s => Model.Documents[item].Title)
                                </div>
                                <div class="col-sm-12">
                                    <label style="font-weight: bold;">Description</label>
                                </div>
                                <div class="col-sm-12">
                                    @Html.TextAreaFor(s => Model.Documents[item].Description, 4, 10, null)
                                </div>
                            </div>
                            @Html.HiddenFor(s => Model.Documents[item].Type)
                            @Html.HiddenFor(s => Model.Documents[item].AssetDocumentId)
                            @Html.HiddenFor(s => Model.Documents[item].Size)
                            @Html.HiddenFor(s => Model.Documents[item].ContentType)
                            @Html.HiddenFor(s => Model.Documents[item].AssetId)
                            @Html.HiddenFor(x => Model.Documents[item].Viewable)
                            @Html.HiddenFor(s => Model.Documents[item].FileName, new { @class = "docName" })
                            <input type='button' class='deleteDocUpload' value='Delete' data-button="@Model.Documents[item].FileName" onclick='docDelete(this)'/>
                        </div>
                        }
                    }
                </div>
            </div>
            <div class="document-item">
                <span style="width: 40%; float: left;">Plat Map:</span>
                @Html.RadioButtonFor(s => s.availableplatMap, "false", new { onchange = "hide('platMap')", id = "rdBtnCurrRollNAvai5" })
                Data Not Available
                @Html.RadioButtonFor(s => s.availableplatMap, "true", new { onchange = "show('platMap')", id = "rdBtnCurrRollAvai5" })
                Data Available
                @if (Model.availableplatMap)
                {
                    <a onclick="show('platMap') ; " style="margin-left: 15px;">View Document(s)</a>
                }
                <div id="platMap" style="display: none;" class="document-item-expanded">
                    <div class="docSetup" style="width: 100%">
                        <a onclick="hide('platMap'); document.getElementById('rdBtnCurrRollNAvai5').checked = true; document.getElementById('rdBtnCurrRollAvai5').checked = false;" style="text-align: right; margin-left: 550px;"><span class="glyphicon glyphicon-remove"></span></a>
                        <h4 style="margin-top: 0px;">Upload New Document</h4>
                        <div class="row">
                            <div class="col-sm-12">
                                <label>Title</label>
                            </div>
                            <div class="col-sm-12">
                                <input type="text" id="pmTitle" value="Plat Map" />
                            </div>
                            <div class="col-sm-12">
                                <label>Description</label>
                            </div>
                            <div class="col-sm-12">
                                <textarea cols="10" rows="4" id="pmDescription"></textarea>
                            </div>
                            <div class="col-sm-12">
                                <input type="file" data-type="@((int)Inview.Epi.EpiFund.Domain.Enum.AssetDocumentType.PlatMap)" id="pm" />
                            </div>
                        </div>
                    </div>
                    @for (int item = 0; item < Model.Documents.Count; item++)
                    {
                        if (Model.Documents[item].Type == (int)Inview.Epi.EpiFund.Domain.Enum.AssetDocumentType.PlatMap)
                        {
                        <div class="docPreviewDiv">
                            <a target='_blank' href="@Url.Action("DownloadDocument", "Admin", new { fileName = Model.Documents[item].FileName, assetId = Model.AssetId, contentType = Model.Documents[item].ContentType, title = Model.Documents[item].Title })">Click here to download file</a>
                            <br />
                            <div class="row">
                                <div class="col-sm-12">
                                    <label style="font-weight: bold;">Title</label>
                                </div>
                                <div class="col-sm-12">
                                    @Html.TextBoxFor(s => Model.Documents[item].Title)
                                </div>
                                <div class="col-sm-12">
                                    <label style="font-weight: bold;">Description</label>
                                </div>
                                <div class="col-sm-12">
                                    @Html.TextAreaFor(s => Model.Documents[item].Description, 4, 10, null)
                                </div>
                            </div>
                            @Html.HiddenFor(s => Model.Documents[item].Type)
                            @Html.HiddenFor(s => Model.Documents[item].AssetDocumentId)
                            @Html.HiddenFor(s => Model.Documents[item].Size)
                            @Html.HiddenFor(s => Model.Documents[item].ContentType)
                            @Html.HiddenFor(s => Model.Documents[item].AssetId)
                            @Html.HiddenFor(x => Model.Documents[item].Viewable)
                            @Html.HiddenFor(s => Model.Documents[item].FileName, new { @class = "docName" })
                            <input type='button' class='deleteDocUpload' value='Delete' data-button="@Model.Documents[item].FileName" onclick='docDelete(this)'/>
                        </div>
                        }
                    }
                </div>
            </div>
            <div class="document-item">
                <span style="width: 40%; float: left;">Aerial Map:</span>
                @Html.RadioButtonFor(s => s.availablearialMap, "false", new { onchange = "hide('arialMap')", id = "rdBtnCurrRollNAvai6" })
                Data Not Available
                @Html.RadioButtonFor(s => s.availablearialMap, "true", new { onchange = "show('arialMap')", id = "rdBtnCurrRollAvai6" })
                Data Available
                @if (Model.availablearialMap)
                {
                    <a onclick="show('arialMap')" style="margin-left: 15px;">View Document(s)</a>
                }
                <div id="arialMap" style="display: none;" class="document-item-expanded">
                    <div class="docSetup" style="width: 100%">
                        <a onclick="hide('arialMap') ; document.getElementById('rdBtnCurrRollNAvai6').checked = true; document.getElementById('rdBtnCurrRollAvai6').checked = false;" style="text-align: right; margin-left: 550px;"><span class="glyphicon glyphicon-remove"></span></a>
                        <h4 style="margin-top: 0px;">Upload New Document</h4>
                        <div class="row">
                            <div class="col-sm-12">
                                <label>Title</label>
                            </div>
                            <div class="col-sm-12">
                                <input type="text" id="amTitle" value="Aerial Map" />
                            </div>
                            <div class="col-sm-12">
                                <label>Description</label>
                            </div>
                            <div class="col-sm-12">
                                <textarea cols="10" rows="4" id="amDescription"></textarea>
                            </div>
                            <div class="col-sm-12">
                                <input type="file" data-type="@((int)Inview.Epi.EpiFund.Domain.Enum.AssetDocumentType.ArialMap)" id="am" />
                            </div>
                        </div>
                    </div>
                    @for (int item = 0; item < Model.Documents.Count; item++)
                    {
                        if (Model.Documents[item].Type == (int)Inview.Epi.EpiFund.Domain.Enum.AssetDocumentType.ArialMap)
                        {
                        <div class="docPreviewDiv">
                            <a target='_blank' href="@Url.Action("DownloadDocument", "Admin", new { fileName = Model.Documents[item].FileName, assetId = Model.AssetId, contentType = Model.Documents[item].ContentType, title = Model.Documents[item].Title })">Click here to download file</a>
                            <br />
                            <div class="row">
                                <div class="col-sm-12">
                                    <label style="font-weight: bold;">Title</label>
                                </div>
                                <div class="col-sm-12">
                                    @Html.TextBoxFor(s => Model.Documents[item].Title)
                                </div>
                                <div class="col-sm-12">
                                    <label style="font-weight: bold;">Description</label>
                                </div>
                                <div class="col-sm-12">
                                    @Html.TextAreaFor(s => Model.Documents[item].Description, 4, 10, null)
                                </div>
                            </div>
                            @Html.HiddenFor(s => Model.Documents[item].Type)
                            @Html.HiddenFor(s => Model.Documents[item].AssetDocumentId)
                            @Html.HiddenFor(s => Model.Documents[item].Size)
                            @Html.HiddenFor(s => Model.Documents[item].ContentType)
                            @Html.HiddenFor(s => Model.Documents[item].AssetId)
                            @Html.HiddenFor(x => Model.Documents[item].Viewable)
                            @Html.HiddenFor(s => Model.Documents[item].FileName, new { @class = "docName" })
                            <input type='button' class='deleteDocUpload' value='Delete' data-button="@Model.Documents[item].FileName" onclick='docDelete(this)'/>
                        </div>
                        }
                    }
                </div>
            </div>
            <div class="document-item">
                <span style="width: 40%; float: left;">Original Appraisal/BPO:</span>
                @Html.RadioButtonFor(s => s.availableoriginalAppraisal, "false", new { onchange = "hide('originalAppraisal')", id = "rdBtnCurrRollNAvai7" })
                Data Not Available
                @Html.RadioButtonFor(s => s.availableoriginalAppraisal, "true", new { onchange = "show('originalAppraisal')", id = "rdBtnCurrRollAvai7" })
                Data Available
                @if (Model.availableoriginalAppraisal)
                {
                    <a onclick="show('originalAppraisal') ; " style="margin-left: 15px;">View Document(s)</a>
                }
                <div id="originalAppraisal" style="display: none;" class="document-item-expanded">
                    <div class="docSetup" style="width: 100%">
                        <a onclick="hide('originalAppraisal'); document.getElementById('rdBtnCurrRollNAvai7').checked = true; document.getElementById('rdBtnCurrRollAvai7').checked = false;" style="text-align: right; margin-left: 550px;"><span class="glyphicon glyphicon-remove"></span></a>
                        <h4 style="margin-top: 0px;">Upload New Document</h4>
                        <div class="row">
                            <div class="col-sm-12">
                                <label>Title</label>
                            </div>
                            <div class="col-sm-12">
                                <input type="text" id="oaTitle" value="Original Appraisal" />
                            </div>
                            <div class="col-sm-12">
                                <label>Description</label>
                            </div>
                            <div class="col-sm-12">
                                <textarea cols="10" rows="4" id="oaDescription"></textarea>
                            </div>
                            <div class="col-sm-12">
                                <input type="file" data-type="@((int)Inview.Epi.EpiFund.Domain.Enum.AssetDocumentType.OriginalAppraisal)" id="oa" />
                            </div>
                        </div>
                    </div>
                    @for (int item = 0; item < Model.Documents.Count; item++)
                    {
                        if (Model.Documents[item].Type == (int)Inview.Epi.EpiFund.Domain.Enum.AssetDocumentType.OriginalAppraisal)
                        {
                        <div class="docPreviewDiv">
                            <a target='_blank' href="@Url.Action("DownloadDocument", "Admin", new { fileName = Model.Documents[item].FileName, assetId = Model.AssetId, contentType = Model.Documents[item].ContentType, title = Model.Documents[item].Title })">Click here to download file</a>
                            <br />
                            <div class="row">
                                <div class="col-sm-12">
                                    <label style="font-weight: bold;">Title</label>
                                </div>
                                <div class="col-sm-12">
                                    @Html.TextBoxFor(s => Model.Documents[item].Title)
                                </div>
                                <div class="col-sm-12">
                                    <label style="font-weight: bold;">Description</label>
                                </div>
                                <div class="col-sm-12">
                                    @Html.TextAreaFor(s => Model.Documents[item].Description, 4, 10, null)
                                </div>
                            </div>
                            @Html.HiddenFor(s => Model.Documents[item].Type)
                            @Html.HiddenFor(s => Model.Documents[item].AssetDocumentId)
                            @Html.HiddenFor(s => Model.Documents[item].Size)
                            @Html.HiddenFor(s => Model.Documents[item].ContentType)
                            @Html.HiddenFor(s => Model.Documents[item].AssetId)
                            @Html.HiddenFor(x => Model.Documents[item].Viewable)
                            @Html.HiddenFor(s => Model.Documents[item].FileName, new { @class = "docName" })
                            <input type='button' class='deleteDocUpload' value='Delete' data-button="@Model.Documents[item].FileName" onclick='docDelete(this)'/>
                        </div>
                        }
                    }
                </div>
            </div>
            <div class="document-item">
                <span style="width: 40%; float: left;">Calculated Market Value/CMV:</span>
                @Html.RadioButtonFor(s => s.availablecurrentAppraisal, "false", new { onchange = "hide('currentAppraisal')", id = "rdBtnCurrRollNAvai8" })
                Data Not Available
                @Html.RadioButtonFor(s => s.availablecurrentAppraisal, "true", new { onchange = "show('currentAppraisal')", id = "rdBtnCurrRollAvai8" })
                Data Available
                @if (Model.availablecurrentAppraisal)
                {
                    <a onclick="show('currentAppraisal') ; " style="margin-left: 15px;">View Document(s)</a>
                }
                <div id="currentAppraisal" style="display: none;" class="document-item-expanded">
                    <div class="docSetup" style="width: 100%">
                        <a onclick="hide('currentAppraisal'); document.getElementById('rdBtnCurrRollNAvai8').checked = true; document.getElementById('rdBtnCurrRollAvai8').checked = false;" style="text-align: right; margin-left: 550px;"><span class="glyphicon glyphicon-remove"></span></a>
                        <h4 style="margin-top: 0px;">Upload New Document</h4>
                        <div class="row">
                            <div class="col-sm-12">
                                <label>Title</label>
                            </div>
                            <div class="col-sm-12">
                                <input type="text" id="caTitle" value="Current Appraisal" />
                            </div>
                            <div class="col-sm-12">
                                <label>Description</label>
                            </div>
                            <div class="col-sm-12">
                                <textarea cols="10" rows="4" id="caDescription"></textarea>
                            </div>
                            <div class="col-sm-12">
                                <input type="file" data-type="@((int)Inview.Epi.EpiFund.Domain.Enum.AssetDocumentType.CurrentAppraisal)" id="ca" />
                            </div>
                        </div>
                    </div>
                    @for (int item = 0; item < Model.Documents.Count; item++)
                    {
                        if (Model.Documents[item].Type == (int)Inview.Epi.EpiFund.Domain.Enum.AssetDocumentType.CurrentAppraisal)
                        {
                        <div class="docPreviewDiv">
                            <a target='_blank' href="@Url.Action("DownloadDocument", "Admin", new { fileName = Model.Documents[item].FileName, assetId = Model.AssetId, contentType = Model.Documents[item].ContentType, title = Model.Documents[item].Title })">Click here to download file</a>
                            <br />
                            <div class="row">
                                <div class="col-sm-12">
                                    <label style="font-weight: bold;">Title</label>
                                </div>
                                <div class="col-sm-12">
                                    @Html.TextBoxFor(s => Model.Documents[item].Title)
                                </div>
                                <div class="col-sm-12">
                                    <label style="font-weight: bold;">Description</label>
                                </div>
                                <div class="col-sm-12">
                                    @Html.TextAreaFor(s => Model.Documents[item].Description, 4, 10, null)
                                </div>
                            </div>
                            @Html.HiddenFor(s => Model.Documents[item].Type)
                            @Html.HiddenFor(s => Model.Documents[item].AssetDocumentId)
                            @Html.HiddenFor(s => Model.Documents[item].Size)
                            @Html.HiddenFor(s => Model.Documents[item].ContentType)
                            @Html.HiddenFor(s => Model.Documents[item].AssetId)
                            @Html.HiddenFor(x => Model.Documents[item].Viewable)
                            @Html.HiddenFor(s => Model.Documents[item].FileName, new { @class = "docName" })
                            <input type='button' class='deleteDocUpload' value='Delete' data-button="@Model.Documents[item].FileName" onclick='docDelete(this)'/>
                        </div>
                        }
                    }
                </div>
            </div>
            <div class="document-item">
                <span style="width: 40%; float: left;">Marketing Brochure:</span>
                @Html.RadioButtonFor(s => s.availableListingAgentMarketingBrochure, "false", new { onchange = "hide('marketingBrochure')", id = "rdBtnCurrRollNAvai9" })
                Data Not Available
                @Html.RadioButtonFor(s => s.availableListingAgentMarketingBrochure, "true", new { onchange = "show('marketingBrochure')", id = "rdBtnCurrRollAvai9" })
                Data Available
                @if (Model.availableListingAgentMarketingBrochure)
                {
                    <a onclick="show('marketingBrochure')" style="margin-left: 15px;">View Document(s)</a>
                }
                <div id="marketingBrochure" style="display: none;" class="document-item-expanded">
                    <div class="docSetup" style="width: 100%">
                        <a onclick="hide('marketingBrochure'); document.getElementById('rdBtnCurrRollNAvai9').checked = true; document.getElementById('rdBtnCurrRollAvai9').checked = false; " style="text-align: right; margin-left: 550px;"><span class="glyphicon glyphicon-remove"></span></a>
                        <h4 style="margin-top: 0px;">Upload New Document</h4>
                        <div class="row">
                            <div class="col-sm-12">
                                <label>Title</label>
                            </div>
                            <div class="col-sm-12">
                                <input type="text" id="mbTitle" value="Listing Agent Marketing Brochure" />
                            </div>
                            <div class="col-sm-12">
                                <label>Description</label>
                            </div>
                            <div class="col-sm-12">
                                <textarea cols="10" rows="4" id="mbDescription"></textarea>
                            </div>
                            <div class="col-sm-12">
                                <input type="file" data-type="@((int)Inview.Epi.EpiFund.Domain.Enum.AssetDocumentType.ListingAgentMarketingBrochure)" id="mb" />
                            </div>
                        </div>
                    </div>
                    @for (int item = 0; item < Model.Documents.Count; item++)
                    {
                        if (Model.Documents[item].Type == (int)Inview.Epi.EpiFund.Domain.Enum.AssetDocumentType.ListingAgentMarketingBrochure)
                        {
                        <div class="docPreviewDiv">
                            <a target='_blank' href="@Url.Action("DownloadDocument", "Admin", new { fileName = Model.Documents[item].FileName, assetId = Model.AssetId, contentType = Model.Documents[item].ContentType, title = Model.Documents[item].Title })">Click here to download file</a>
                            <br />
                            <div class="row">
                                <div class="col-sm-12">
                                    <label style="font-weight: bold;">Title</label>
                                </div>
                                <div class="col-sm-12">
                                    @Html.TextBoxFor(s => Model.Documents[item].Title)
                                </div>
                                <div class="col-sm-12">
                                    <label style="font-weight: bold;">Description</label>
                                </div>
                                <div class="col-sm-12">
                                    @Html.TextAreaFor(s => Model.Documents[item].Description, 4, 10, null)
                                </div>
                            </div>
                            @Html.HiddenFor(s => Model.Documents[item].Type)
                            @Html.HiddenFor(s => Model.Documents[item].AssetDocumentId)
                            @Html.HiddenFor(s => Model.Documents[item].Size)
                            @Html.HiddenFor(s => Model.Documents[item].ContentType)
                            @Html.HiddenFor(s => Model.Documents[item].AssetId)
                            @Html.HiddenFor(x => Model.Documents[item].Viewable)
                            @Html.HiddenFor(s => Model.Documents[item].FileName, new { @class = "docName" })
                            <input type='button' class='deleteDocUpload' value='Delete' data-button="@Model.Documents[item].FileName" onclick='docDelete(this)'/>
                        </div>
                        }
                    }
                </div>
            </div>
            <div class="document-item">
                <span style="width: 40%; float: left;">Other:</span>
                @Html.RadioButtonFor(s => s.availableOtherDocument, "false", new { onchange = "hide('otherDocuments')", id = "rdBtnCurrRollNAvai10" })
                Data Not Available
                @Html.RadioButtonFor(s => s.availableOtherDocument, "true", new { onchange = "show('otherDocuments')", id = "rdBtnCurrRollAvai10" })
                Data Available
                @if (Model.availableOtherDocument)
                {
                    <a onclick="show('otherDocuments'); " style="margin-left: 15px;">View Document(s)</a>
                }
                <div id="otherDocuments" style="display: none;" class="document-item-expanded">
                    <div class="docSetup" style="width: 100%">
                        <a onclick="hide('otherDocuments'); document.getElementById('rdBtnCurrRollNAvai10').checked = true; document.getElementById('rdBtnCurrRollAvai10').checked = false;" style="text-align: right; margin-left: 550px;"><span class="glyphicon glyphicon-remove"></span></a>
                        <h4 style="margin-top: 0px;">Upload New Document</h4>
                        <div class="row">
                            <div class="col-sm-12">
                                <label>Title</label>
                            </div>
                            <div class="col-sm-12">
                                <input type="text" id="odTitle" value="Other Document" />
                            </div>
                            <div class="col-sm-12">
                                <label>Description</label>
                            </div>
                            <div class="col-sm-12">
                                <textarea cols="10" rows="4" id="odDescription"></textarea>
                            </div>
                            <div class="col-sm-12">
                                <input type="file" data-type="@((int)Inview.Epi.EpiFund.Domain.Enum.AssetDocumentType.Other)" id="od" />
                            </div>
                        </div>
                    </div>
                    @for (int item = 0; item < Model.Documents.Count; item++)
                    {
                        if (Model.Documents[item].Type == (int)Inview.Epi.EpiFund.Domain.Enum.AssetDocumentType.Other)
                        {
                        <div class="docPreviewDiv">
                            <a target='_blank' href="@Url.Action("DownloadDocument", "Admin", new { fileName = Model.Documents[item].FileName, assetId = Model.AssetId, contentType = Model.Documents[item].ContentType, title = Model.Documents[item].Title })">Click here to download file</a>
                            <br />
                            <div class="row">
                                <div class="col-sm-12">
                                    <label style="font-weight: bold;">Title</label>
                                </div>
                                <div class="col-sm-12">
                                    @Html.TextBoxFor(s => Model.Documents[item].Title)
                                </div>
                                <div class="col-sm-12">
                                    <label style="font-weight: bold;">Description</label>
                                </div>
                                <div class="col-sm-12">
                                    @Html.TextAreaFor(s => Model.Documents[item].Description, 4, 10, null)
                                </div>
                            </div>
                            @Html.HiddenFor(s => Model.Documents[item].Type)
                            @Html.HiddenFor(s => Model.Documents[item].AssetDocumentId)
                            @Html.HiddenFor(s => Model.Documents[item].Size)
                            @Html.HiddenFor(s => Model.Documents[item].ContentType)
                            @Html.HiddenFor(s => Model.Documents[item].AssetId)
                            @Html.HiddenFor(x => Model.Documents[item].Viewable)
                            @Html.HiddenFor(s => Model.Documents[item].FileName, new { @class = "docName" })
                            <input type='button' class='deleteDocUpload' value='Delete' data-button="@Model.Documents[item].FileName" onclick='docDelete(this)'/>
                        </div>
                        }
                    }
                </div>
            </div>

            <div class="document-item">
                <span style="width: 40%; float: left;">Title Company Mortgage Instrument of Record:</span>
                @Html.RadioButtonFor(s => s.availableMortgageInstrumentRecord, "false", new { onchange = "hide('mgInstRec')", id = "rdBtnMgInstNAvai1" })
                Data Not Available
                @Html.RadioButtonFor(s => s.availableMortgageInstrumentRecord, "true", new { onchange = "show('mgInstRec')", id = "rdBtnMgInstAvai1" })
                Data Available
                @if (Model.availableMortgageInstrumentRecord)
                {
                    <a onclick="show('mgInstRec')" style="margin-left: 15px;">View Document(s)</a>
                }
                <div id="mgInstRec" style="display: none;" class="document-item-expanded">
                    <div class="docSetup" style="width: 100%">
                        <a onclick="hide('mgInstRec'); document.getElementById('rdBtnMgInstNAvai1').checked = true; document.getElementById('rdBtnMgInstAvai1').checked = false;" style="text-align: right; margin-left: 550px;"><span class="glyphicon glyphicon-remove"></span></a>
                        <h4 style="margin-top: 0px;">Upload New Document</h4>
                        <div class="row">
                            <div class="col-sm-12">
                                <label>Title</label>
                            </div>
                            <div class="col-sm-12">
                                <input type="text" id="mgInstRecTitle" value="Mortgage Instrument of Record" />
                            </div>
                            <div class="col-sm-12">
                                <label>Description</label>
                            </div>
                            <div class="col-sm-12">
                                <textarea cols="10" rows="4" id="mgInstRecDescription"></textarea>
                            </div>
                            <div class="col-sm-12">
                                <input type="file" data-type="@((int)Inview.Epi.EpiFund.Domain.Enum.AssetDocumentType.MortgageInstrumentOfRecord)" id="instrumentRecord" />
                            </div>
                        </div>
                    </div>
                    @for (int item = 0; item < Model.Documents.Count; item++)
                    {
                        if (Model.Documents[item].Type == (int)Inview.Epi.EpiFund.Domain.Enum.AssetDocumentType.MortgageInstrumentOfRecord)
                        {
                        <div class="docPreviewDiv">
                            <a target='_blank' href="@Url.Action("DownloadDocument", "Admin", new { fileName = Model.Documents[item].FileName, assetId = Model.AssetId, contentType = Model.Documents[item].ContentType, title = Model.Documents[item].Title })">Click here to download file</a>
                            <br />
                            <div class="row">
                                <div class="col-sm-12">
                                    <label style="font-weight: bold;">Title</label>
                                </div>
                                <div class="col-sm-12">
                                    @Html.TextBoxFor(s => Model.Documents[item].Title)
                                </div>
                                <div class="col-sm-12">
                                    <label style="font-weight: bold;">Description</label>
                                </div>
                                <div class="col-sm-12">
                                    @Html.TextAreaFor(s => Model.Documents[item].Description, 4, 10, null)
                                </div>
                            </div>
                            @Html.HiddenFor(s => Model.Documents[item].AssetDocumentId)
                            @Html.HiddenFor(s => Model.Documents[item].Size)
                            @Html.HiddenFor(s => Model.Documents[item].ContentType)
                            @Html.HiddenFor(s => Model.Documents[item].AssetId)
                            @Html.HiddenFor(s => Model.Documents[item].Type)
                            @Html.HiddenFor(x => Model.Documents[item].Viewable)
                            @Html.HiddenFor(s => Model.Documents[item].FileName, new { @class = "docName" })
                            <input type='button' class='deleteDocUpload' value='Delete' data-id="#instrumentRecord" data-button="@Model.Documents[item].FileName" onclick='docDelete(this)'/>
                        </div>
                        }
                    }
                </div>
            </div>
            <div class="document-item">
                <span style="width: 40%; float: left;">Title Company Recorded Liens:</span>
                @Html.RadioButtonFor(s => s.availableRecordedLiens, "false", new { onchange = "hide('recordedLiens')", id = "rdBtnRecordedLiensNAvai1" })
                Data Not Available
                @Html.RadioButtonFor(s => s.availableRecordedLiens, "true", new { onchange = "show('recordedLiens')", id = "rdBtnRecordedLiensAvai1" })
                Data Available
                @if (Model.availableRecordedLiens)
                {
                    <a onclick="show('recordedLiens')" style="margin-left: 15px;">View Document(s)</a>
                }
                <div id="recordedLiens" style="display: none;" class="document-item-expanded">
                    <div class="docSetup" style="width: 100%">
                        <a onclick="hide('recordedLiens'); document.getElementById('rdBtnRecordedLiensNAvai1').checked = true; document.getElementById('rdBtnRecordedLiensAvai1').checked = false;" style="text-align: right; margin-left: 550px;"><span class="glyphicon glyphicon-remove"></span></a>
                        <h4 style="margin-top: 0px;">Upload New Document</h4>
                        <div class="row">
                            <div class="col-sm-12">
                                <label>Title</label>
                            </div>
                            <div class="col-sm-12">
                                <input type="text" id="recLiensTitle" value="Recorded Liens" />
                            </div>
                            <div class="col-sm-12">
                                <label>Description</label>
                            </div>
                            <div class="col-sm-12">
                                <textarea cols="10" rows="4" id="recLiensDescription"></textarea>
                            </div>
                            <div class="col-sm-12">
                                <input type="file" data-type="@((int)Inview.Epi.EpiFund.Domain.Enum.AssetDocumentType.RecordedLiens)" id="recLiens" />
                            </div>
                        </div>
                    </div>
                    @for (int item = 0; item < Model.Documents.Count; item++)
                    {
                        if (Model.Documents[item].Type == (int)Inview.Epi.EpiFund.Domain.Enum.AssetDocumentType.RecordedLiens)
                        {
                        <div class="docPreviewDiv">
                            <a target='_blank' href="@Url.Action("DownloadDocument", "Admin", new { fileName = Model.Documents[item].FileName, assetId = Model.AssetId, contentType = Model.Documents[item].ContentType, title = Model.Documents[item].Title })">Click here to download file</a>
                            <br />
                            <div class="row">
                                <div class="col-sm-12">
                                    <label style="font-weight: bold;">Title</label>
                                </div>
                                <div class="col-sm-12">
                                    @Html.TextBoxFor(s => Model.Documents[item].Title)
                                </div>
                                <div class="col-sm-12">
                                    <label style="font-weight: bold;">Description</label>
                                </div>
                                <div class="col-sm-12">
                                    @Html.TextAreaFor(s => Model.Documents[item].Description, 4, 10, null)
                                </div>
                            </div>
                            @Html.HiddenFor(s => Model.Documents[item].AssetDocumentId)
                            @Html.HiddenFor(s => Model.Documents[item].Size)
                            @Html.HiddenFor(s => Model.Documents[item].ContentType)
                            @Html.HiddenFor(s => Model.Documents[item].AssetId)
                            @Html.HiddenFor(s => Model.Documents[item].Type)
                            @Html.HiddenFor(x => Model.Documents[item].Viewable)
                            @Html.HiddenFor(s => Model.Documents[item].FileName, new { @class = "docName" })
                            <input type='button' class='deleteDocUpload' value='Delete' data-id="#recLiens" data-button="@Model.Documents[item].FileName" onclick='docDelete(this)'/>
                        </div>
                        }
                    }
                </div>
            </div>
            <div class="document-item">
                <span style="width: 40%; float: left;">Title Company Tax Liens:</span>
                @Html.RadioButtonFor(s => s.availableTaxLiens, "false", new { onchange = "hide('taxLiens')", id = "rdBtnTaxLiensNAvail" })
                Data Not Available
                @Html.RadioButtonFor(s => s.availableTaxLiens, "true", new { onchange = "show('taxLiens')", id = "rdBtnTaxLiensAvail" })
                Data Available
                @if (Model.availableTaxLiens)
                {
                    <a onclick="show('taxLiens')" style="margin-left: 15px;">View Document(s)</a>
                }
                <div id="taxLiens" style="display: none;" class="document-item-expanded">
                    <div class="docSetup" style="width: 100%">
                        <a onclick="hide('taxLiens'); document.getElementById('rdBtnTaxLiensNAvail').checked = true; document.getElementById('rdBtnTaxLiensAvail').checked = false;" style="text-align: right; margin-left: 550px;"><span class="glyphicon glyphicon-remove"></span></a>
                        <h4 style="margin-top: 0px;">Upload New Document</h4>
                        <div class="row">
                            <div class="col-sm-12">
                                <label>Title</label>
                            </div>
                            <div class="col-sm-12">
                                <input type="text" id="taxLiensTitle" value="Assessor's Annual Tax Billing Statement" />
                            </div>
                            <div class="col-sm-12">
                                <label>Description</label>
                            </div>
                            <div class="col-sm-12">
                                <textarea cols="10" rows="4" id="taxLiensDescription"></textarea>
                            </div>
                            <div class="col-sm-12">
                                <input type="file" data-type="@((int)Inview.Epi.EpiFund.Domain.Enum.AssetDocumentType.TaxLiens)" id="txLiens" />
                            </div>
                        </div>
                    </div>
                    @for (int item = 0; item < Model.Documents.Count; item++)
                    {
                        if (Model.Documents[item].Type == (int)Inview.Epi.EpiFund.Domain.Enum.AssetDocumentType.TaxLiens)
                        {
                        <div class="docPreviewDiv">
                            <a target='_blank' href="@Url.Action("DownloadDocument", "Admin", new { fileName = Model.Documents[item].FileName, assetId = Model.AssetId, contentType = Model.Documents[item].ContentType, title = Model.Documents[item].Title })">Click here to download file</a>
                            <br />
                            <div class="row">
                                <div class="col-sm-12">
                                    <label style="font-weight: bold;">Title</label>
                                </div>
                                <div class="col-sm-12">
                                    @Html.TextBoxFor(s => Model.Documents[item].Title)
                                </div>
                                <div class="col-sm-12">
                                    <label style="font-weight: bold;">Description</label>
                                </div>
                                <div class="col-sm-12">
                                    @Html.TextAreaFor(s => Model.Documents[item].Description, 4, 10, null)
                                </div>
                            </div>
                            @Html.HiddenFor(s => Model.Documents[item].Type)
                            @Html.HiddenFor(s => Model.Documents[item].AssetDocumentId)
                            @Html.HiddenFor(s => Model.Documents[item].Size)
                            @Html.HiddenFor(s => Model.Documents[item].ContentType)
                            @Html.HiddenFor(s => Model.Documents[item].AssetId)
                            @Html.HiddenFor(x => Model.Documents[item].Viewable)
                            @Html.HiddenFor(s => Model.Documents[item].FileName, new { @class = "docName" })
                            <input type='button' class='deleteDocUpload' value='Delete' data-id="#txLiens" data-button="@Model.Documents[item].FileName" onclick='docDelete(this)'/>
                        </div>
                        }
                    }
                </div>
            </div>
            <div class="document-item">
                <span style="width: 40%; float: left;">Title Company BK Related Filings:</span>
                @Html.RadioButtonFor(s => s.availableBKRelated, "false", new { onchange = "hide('bkRelated')", id = "rdBtnBKRelatedNAvail" })
                Data Not Available
                @Html.RadioButtonFor(s => s.availableBKRelated, "true", new { onchange = "show('bkRelated')", id = "rdBtnBKRelatedAvail" })
                Data Available
                @if (Model.availableBKRelated)
                {
                    <a onclick="show('bkRelated')" style="margin-left: 15px;">View Document(s)</a>
                }
                <div id="bkRelated" style="display: none;" class="document-item-expanded">
                    <div class="docSetup" style="width: 100%">
                        <a onclick="hide('bkRelated') ; document.getElementById('rdBtnBKRelatedNAvail').checked = true; document.getElementById('rdBtnBKRelatedAvail').checked = false;" style="text-align: right; margin-left: 550px;"><span class="glyphicon glyphicon-remove"></span></a>
                        <h4 style="margin-top: 0px;">Upload New Document</h4>
                        <div class="row">
                            <div class="col-sm-12">
                                <label>Title</label>
                            </div>
                            <div class="col-sm-12">
                                <input type="text" id="bkRelatedTitle" value="BK Related Filings" />
                            </div>
                            <div class="col-sm-12">
                                <label>Description</label>
                            </div>
                            <div class="col-sm-12">
                                <textarea cols="10" rows="4" id="bkRelatedDescription"></textarea>
                            </div>
                            <div class="col-sm-12">
                                <input type="file" data-type="@((int)Inview.Epi.EpiFund.Domain.Enum.AssetDocumentType.BKRelated)" id="related" />
                            </div>
                        </div>
                    </div>
                    @for (int item = 0; item < Model.Documents.Count; item++)
                    {
                        if (Model.Documents[item].Type == (int)Inview.Epi.EpiFund.Domain.Enum.AssetDocumentType.BKRelated)
                        {
                        <div class="docPreviewDiv">
                            <a target='_blank' href="@Url.Action("DownloadDocument", "Admin", new { fileName = Model.Documents[item].FileName, assetId = Model.AssetId, contentType = Model.Documents[item].ContentType, title = Model.Documents[item].Title })">Click here to download file</a>
                            <br />
                            <div class="row">
                                <div class="col-sm-12">
                                    <label style="font-weight: bold;">Title</label>
                                </div>
                                <div class="col-sm-12">
                                    @Html.TextBoxFor(s => Model.Documents[item].Title)
                                </div>
                                <div class="col-sm-12">
                                    <label style="font-weight: bold;">Description</label>
                                </div>
                                <div class="col-sm-12">
                                    @Html.TextAreaFor(s => Model.Documents[item].Description, 4, 10, null)
                                </div>
                            </div>
                            @Html.HiddenFor(s => Model.Documents[item].Type)
                            @Html.HiddenFor(s => Model.Documents[item].AssetDocumentId)
                            @Html.HiddenFor(s => Model.Documents[item].Size)
                            @Html.HiddenFor(s => Model.Documents[item].ContentType)
                            @Html.HiddenFor(s => Model.Documents[item].AssetId)
                            @Html.HiddenFor(x => Model.Documents[item].Viewable)
                            @Html.HiddenFor(s => Model.Documents[item].FileName, new { @class = "docName" })
                            <input type='button' class='deleteDocUpload' value='Delete' data-id="#related" data-button="@Model.Documents[item].FileName" onclick='docDelete(this)'/>
                        </div>
                        }
                    }
                </div>
            </div>
            <div class="document-item">
                <span style="width: 40%; float: left;">Title Company Preliminary Title Report:</span>
                @Html.RadioButtonFor(s => s.availablePreliminaryTitleReportTitle, "false", new { onchange = "hide('preliminaryTitleReportTitle')", id = "rdBtnTitleRepTitleNAvail" })
                Data Not Available
                @Html.RadioButtonFor(s => s.availablePreliminaryTitleReportTitle, "true", new { onchange = "show('preliminaryTitleReportTitle')", id = "rdBtnTitleRepTitleAvail" })
                Data Available
                @if (Model.availablePreliminaryTitleReportTitle)
                {
                    <a onclick="show('preliminaryTitleReportTitle')" style="margin-left: 15px;">View Document(s)</a>
                }
                <div id="preliminaryTitleReportTitle" style="display: none;" class="document-item-expanded">
                    <div class="docSetup" style="width: 100%">
                        <a onclick="hide('preliminaryTitleReportTitle') ; document.getElementById('rdBtnTitleRepTitleNAvail').checked = true; document.getElementById('rdBtnTitleRepTitleAvail').checked = false;" style="text-align: right; margin-left: 550px;"><span class="glyphicon glyphicon-remove"></span></a>
                        <h4 style="margin-top: 0px;">Upload New Document</h4>
                        <div class="row">
                            <div class="col-sm-12">
                                <label>Title</label>
                            </div>
                            <div class="col-sm-12">
                                <input type="text" id="ptrTitleTitle" value="Preliminary Title Report" />
                            </div>
                            <div class="col-sm-12">
                                <label>Description</label>
                            </div>
                            <div class="col-sm-12">
                                <textarea cols="10" rows="4" id="ptrTitleDescription"></textarea>
                            </div>
                            <div class="col-sm-12">
                                <input type="file" data-type="@((int)Inview.Epi.EpiFund.Domain.Enum.AssetDocumentType.PreliminaryTitleReportTitle)" id="ptrTitle" />
                            </div>
                        </div>
                    </div>
                    @for (int item = 0; item < Model.Documents.Count; item++)
                    {
                        if (Model.Documents[item].Type == (int)Inview.Epi.EpiFund.Domain.Enum.AssetDocumentType.PreliminaryTitleReportTitle)
                        {
                        <div class="docPreviewDiv">
                            <a target='_blank' href="@Url.Action("DownloadDocument", "Admin", new { fileName = Model.Documents[item].FileName, assetId = Model.AssetId, contentType = Model.Documents[item].ContentType, title = Model.Documents[item].Title })">Click here to download file</a>
                            <br />
                            <div class="row">
                                <div class="col-sm-12">
                                    <label style="font-weight: bold;">Title</label>
                                </div>
                                <div class="col-sm-12">
                                    @Html.TextBoxFor(s => Model.Documents[item].Title)
                                </div>
                                <div class="col-sm-12">
                                    <label style="font-weight: bold;">Description</label>
                                </div>
                                <div class="col-sm-12">
                                    @Html.TextAreaFor(s => Model.Documents[item].Description, 4, 10, null)
                                </div>
                            </div>
                            @Html.HiddenFor(s => Model.Documents[item].Type)
                            @Html.HiddenFor(s => Model.Documents[item].AssetDocumentId)
                            @Html.HiddenFor(s => Model.Documents[item].Size)
                            @Html.HiddenFor(s => Model.Documents[item].ContentType)
                            @Html.HiddenFor(s => Model.Documents[item].AssetId)
                            @Html.HiddenFor(x => Model.Documents[item].Viewable)
                            @Html.HiddenFor(s => Model.Documents[item].FileName, new { @class = "docName" })
                            <input type='button' class='deleteDocUpload' value='Delete' data-id="#ptrTitle" data-button="@Model.Documents[item].FileName" onclick='docDelete(this)'/>
                        </div>
                        }
                    }
                </div>
            </div>
            <div class="document-item">
                <span style="width: 40%; float: left;">Title Company Recorded DOTs & MTGs:</span>
                @Html.RadioButtonFor(s => s.availableDOTMTG, "false", new { onchange = "hide('recDOTMTG')", id = "rdBtnRecDOTMTGNAvail" })
                Data Not Available
                @Html.RadioButtonFor(s => s.availableDOTMTG, "true", new { onchange = "show('recDOTMTG')", id = "rdBtnRecDOTMTGAvail" })
                Data Available
                @if (Model.availableDOTMTG)
                {
                    <a onclick="show('recDOTMTG') ; " style="margin-left: 15px;">View Document(s)</a>
                }
                <div id="recDOTMTG" style="display: none;" class="document-item-expanded">
                    <div class="docSetup" style="width: 100%">
                        <a onclick="hide('recDOTMTG'); document.getElementById('rdBtnRecDOTMTGNAvail').checked = true; document.getElementById('rdBtnRecDOTMTGAvail').checked = false;" style="text-align: right; margin-left: 550px;"><span class="glyphicon glyphicon-remove"></span></a>
                        <h4 style="margin-top: 0px;">Upload New Document</h4>
                        <div class="row">
                            <div class="col-sm-12">
                                <label>Title</label>
                            </div>
                            <div class="col-sm-12">
                                <input type="text" id="dotMGTitle" value="Recorded DOTs & MTGs" />
                            </div>
                            <div class="col-sm-12">
                                <label>Description</label>
                            </div>
                            <div class="col-sm-12">
                                <textarea cols="10" rows="4" id="dotMGDescription"></textarea>
                            </div>
                            <div class="col-sm-12">
                                <input type="file" data-type="@((int)Inview.Epi.EpiFund.Domain.Enum.AssetDocumentType.DOTMTG)" id="dotMG" />
                            </div>
                        </div>
                    </div>
                    @for (int item = 0; item < Model.Documents.Count; item++)
                    {
                        if (Model.Documents[item].Type == (int)Inview.Epi.EpiFund.Domain.Enum.AssetDocumentType.DOTMTG)
                        {
                        <div class="docPreviewDiv">
                            <a target='_blank' href="@Url.Action("DownloadDocument", "Admin", new { fileName = Model.Documents[item].FileName, assetId = Model.AssetId, contentType = Model.Documents[item].ContentType, title = Model.Documents[item].Title })">Click here to download file</a>
                            <br />
                            <div class="row">
                                <div class="col-sm-12">
                                    <label style="font-weight: bold;">Title</label>
                                </div>
                                <div class="col-sm-12">
                                    @Html.TextBoxFor(s => Model.Documents[item].Title)
                                </div>
                                <div class="col-sm-12">
                                    <label style="font-weight: bold;">Description</label>
                                </div>
                                <div class="col-sm-12">
                                    @Html.TextAreaFor(s => Model.Documents[item].Description, 4, 10, null)
                                </div>
                            </div>
                            @Html.HiddenFor(s => Model.Documents[item].Type)
                            @Html.HiddenFor(s => Model.Documents[item].AssetDocumentId)
                            @Html.HiddenFor(s => Model.Documents[item].Size)
                            @Html.HiddenFor(s => Model.Documents[item].ContentType)
                            @Html.HiddenFor(s => Model.Documents[item].AssetId)
                            @Html.HiddenFor(x => Model.Documents[item].Viewable)
                            @Html.HiddenFor(s => Model.Documents[item].FileName, new { @class = "docName" })
                            <input type='button' class='deleteDocUpload' value='Delete' data-id="#dotMG" data-button="@Model.Documents[item].FileName" onclick='docDelete(this)'/>
                        </div>
                        }
                    }
                </div>
            </div>
            <div class="document-item">
                <span style="width: 40%; float: left;">Title Company Other:</span>
                @Html.RadioButtonFor(s => s.availableOtherTitle, "false", new { onchange = "hide('otherDocumentsTitle')", id = "rdBtnOtherTitleNAvail" })
                Data Not Available
                @Html.RadioButtonFor(s => s.availableOtherTitle, "true", new { onchange = "show('otherDocumentsTitle')", id = "rdBtnOtherTitleAvail" })
                Data Available
                @if (Model.availableOtherTitle)
                {
                    <a onclick="show('otherDocumentsTitle'); " style="margin-left: 15px;">View Document(s)</a>
                }
                <div id="otherDocumentsTitle" style="display: none;" class="document-item-expanded">
                    <div class="docSetup" style="width: 100%">
                        <a onclick="hide('otherDocumentsTitle'); document.getElementById('rdBtnOtherTitleNAvail').checked = true; document.getElementById('rdBtnOtherTitleAvail').checked = false;" style="text-align: right; margin-left: 550px;"><span class="glyphicon glyphicon-remove"></span></a>
                        <h4 style="margin-top: 0px;">Upload New Document</h4>
                        <div class="row">
                            <div class="col-sm-12">
                                <label>Title</label>
                            </div>
                            <div class="col-sm-12">
                                <input type="text" id="otherTitleTitle" value="Other Document" />
                            </div>
                            <div class="col-sm-12">
                                <label>Description</label>
                            </div>
                            <div class="col-sm-12">
                                <textarea cols="10" rows="4" id="otherTitleDescription"></textarea>
                            </div>
                            <div class="col-sm-12">
                                <input type="file" data-type="@((int)Inview.Epi.EpiFund.Domain.Enum.AssetDocumentType.OtherTitle)" id="othTitle" />
                            </div>
                        </div>
                    </div>
                    @for (int item = 0; item < Model.Documents.Count; item++)
                    {
                        if (Model.Documents[item].Type == (int)Inview.Epi.EpiFund.Domain.Enum.AssetDocumentType.OtherTitle)
                        {
                        <div class="docPreviewDiv">
                            <a target='_blank' href="@Url.Action("DownloadDocument", "Admin", new { fileName = Model.Documents[item].FileName, assetId = Model.AssetId, contentType = Model.Documents[item].ContentType, title = Model.Documents[item].Title })">Click here to download file</a>
                            <br />
                            <div class="row">
                                <div class="col-sm-12">
                                    <label style="font-weight: bold;">Title</label>
                                </div>
                                <div class="col-sm-12">
                                    @Html.TextBoxFor(s => Model.Documents[item].Title)
                                </div>
                                <div class="col-sm-12">
                                    <label style="font-weight: bold;">Description</label>
                                </div>
                                <div class="col-sm-12">
                                    @Html.TextAreaFor(s => Model.Documents[item].Description, 4, 10, null)
                                </div>
                            </div>
                            @Html.HiddenFor(s => Model.Documents[item].Type)
                            @Html.HiddenFor(s => Model.Documents[item].AssetDocumentId)
                            @Html.HiddenFor(s => Model.Documents[item].Size)
                            @Html.HiddenFor(s => Model.Documents[item].ContentType)
                            @Html.HiddenFor(s => Model.Documents[item].AssetId)
                            @Html.HiddenFor(x => Model.Documents[item].Viewable)
                            @Html.HiddenFor(s => Model.Documents[item].FileName, new { @class = "docName" })
                            <input type='button' class='deleteDocUpload' value='Delete' data-id="#othTitle" data-button="@Model.Documents[item].FileName" onclick='docDelete(this)'/>
                        </div>
                        }
                    }
                </div>
            </div>
        </div>

        <br />
        <input type="button" class="btn btn-warning" onclick="if (confirm('If you click ok, you will lose all of the data you entered and be returned to the manage assets page.')) goBack()" value="Cancel" />
        <input type="button" class="btn btn-default" onclick="backTab($(this));" value="Back" />
        <input type="button" class="btn btn-primary" onclick="nextTab($(this));" value="Next" />
    </div>

    <div class="tab-pane" id="videos">
        <h3>Videos</h3>
        <div class="row">
            <div class="col-sm-12">
                <label for="videoUploader">Upload Video:</label>
                <br />
                <em>Video must be in .mp4 format and must not exceed 100MB in size. Note: Only browsers with Internet Explorer 9+, Chrome 6+, Safari 5+ will be able to view these videos.</em>
                <br />
                <br />
            </div>
        </div>
        <div class="row">
            <div class="col-sm-12">
                <input type="file" name="videoFile" id="videoUploader" style="width: 100%;" />
            </div>
            <hr />
        </div>
        <br />
        <div id="videosPreviewer" data-videocount="@Model.Videos.Count">
            @for (int item = 0; item < Model.Videos.Count; item++)
            {       
                <div class="videoPreviewDiv" style="display: inline-block;">
                    @Html.Video(new VideoOptions()
               {
                   Mp4Url = @Url.Action("GetVideo", new { id = Model.Videos[item].AssetId, filepath = Model.Videos[item].FilePath }),
                   HasPoster = false,
                   HasDownloadLink = true,
                   VideoNotSupported = "<p>No video playback capabilities, please download the video below</p>",
                   TrackEnable = false
               }, new { @class = "video-responsive", id = "video" + item })
                    @Html.HiddenFor(s => Model.Videos[item].FilePath, new { @class = "videoName" })
                    @Html.HiddenFor(s => Model.Videos[item].AssetId)
                    <input type='button' class='deleteImgUpload' value='Delete' data-button="@Model.Videos[item].FilePath" onclick='videoDelete(this)'/>
                </div>
                <hr />
                <br />
            }
            <br />
        </div>
        <br />
        <input type="button" class="btn btn-warning" onclick="if (confirm('If you click ok, you will lose all of the data you entered and be returned to the manage assets page.')) goBack()" value="Cancel" />
        <input type="button" class="btn btn-default" onclick="backTab($(this));" value="Back" />
        <input type="button" class="btn btn-primary" onclick="nextTab($(this));" value="Next" />
    </div>

    <div class="tab-pane" id="finish">
        <h3 style="border-bottom: 0 !important">End</h3>
        <br />
        <input type="button" class="btn btn-warning" onclick="if (confirm('If you click ok, you will lose all of the data you entered and be returned to the manage assets page.')) goBack()" value="Cancel" />
        <input type="button" class="btn btn-default" onclick="backTab($(this));" value="Back" />
        <input type="submit" class="btn btn-primary" onclick="SaveAsset('User')" name="action:Save" value="Save Asset">
        @if (!Model.IsSubmitted)
        {
            if (isCorpAdmin)
            {
            <input type="submit" class="btn btn-primary" onclick="SaveAsset('User')" name="action:Submit" value="Save & Submit">
            }
            else
            {
            <input type="submit" class="btn btn-primary" onclick="SaveAsset('User')" name="action:Submit" value="Save & Submit to Corp Admin">
            }
        }
    </div>

</div>
@Html.HiddenFor(s => s.CreationDate)
@Html.HiddenFor(s => s.IsActive)
@Html.HiddenFor(s => s.ListedByUserId)
@Html.HiddenFor(s => s.AssetNumber)
<input type="hidden" value="@(Model.AssetId)" data-asset="@(Model.AssetId)" id="AssetId" name="AssetId"/>
<input type="hidden" value="@(Model.GetType())" name="TypeOfAsset"/>


<script>
    function RemoveFile(file) {
        file.previewElement.className += ' hide';
        // remove the filename so we can remove the file on post
        file.previewElement.children[0].children[3].children[0].value = '';
    }

    function addCommasToInputAndCalculate(control, index) {
        $(control).val(addCommas($(control).val(), false));
        calculateEstimatedDeferredMaintenance(index);
    };
    
    function SaveAsset(method) {
        $('#Method').val(method);
        fixNumbers();
    }

    function fixNumbers() {
        $("input.formatNumber").each(function (index) {
            $(this).val($(this).val().replace(/,/g, ""));
        });
        $("input.formatMaint").each(function (index) {
            $(this).val($(this).val().replace(/,/g, ""));
        });
    };

    $('#myTab a').click(function (e) {
        e.preventDefault()
        $(this).tab('show')
    })

    $("[name = 'rbIsPaperAsset']").change(togglePaperTab);

    function togglePaperTab() {
        $("#tabPaper").toggle();
    }

    function goBack() {
        window.location.href = "/Admin/ManageAssets";
    }

    function nextTab(button) {
        $('.nav li.active').removeClass('active');
        var currentId = button.closest('.tab-pane');
        var nextId = button.closest('.tab-pane').next('.tab-pane');
        currentId.removeClass('active');
        nextId.addClass('active');
        var tabLink = '#' + nextId.attr('id');
        $("[href = '" + tabLink + "']").closest('li').addClass('active');
    }

    function backTab(button) {
        $('.nav li.active').removeClass('active');
        var currentId = button.closest('.tab-pane');
        var prevId = button.closest('.tab-pane').prev('.tab-pane');
        currentId.removeClass('active');
        prevId.addClass('active');
        var tabLink = '#' + prevId.attr('id');
        $("[href = '" + tabLink + "']").closest('li').addClass('active');
    }

    function toggleWRAP(show) {
        if (show) {
            $("#wrapFields").show();
        } else {
            $("#wrapFields").hide();
        }
    }

    $("#imgUploader").change(function () {
        var path = $(this).val();
        var fileName = path.match(/[^\/\\]+$/);
        readIMG(this, fileName);
    });

    $("#videoUploader").change(function () {
        var path = $(this).val();
        var fileName = path.match(/[^\/\\]+$/);
        readVideo(this, fileName);
    });

    //$("#TaxParcelNumber").change(function () {
    //    var tpn = $("#TaxParcelNumber").val();
    //    $.ajax({
    //        type: "POST",
    //        url: "/Admin/ValidateAssetParcelNumber/",
    //        data: JSON.stringify({ parcelNumber: tpn }),
    //        contentType: "application/json; charset=utf-8",
    //        dataType: "json",
    //        async: false,
    //        cache: false,
    //        success: function (response) {
    //            if (response.Status == "True") {
    //                alert('Tax Parcel Number already in use');
    //            } 
    //            else {

    //            }
    //        },
    //        error: function (jqXHR, exception) {
    //        },
    //        failure: function (response) {
    //        }
    //    });
    //});

    function showExtraListingAgentBox(item) {
        $("#FirstName-" + item).val("");
        $("#LastName-" + item).val("");
        $("#Email-" + item).val("");
        $("#CompanyName-" + item).val("");
        $("#CompanyAddressLine1-" + item).val("");
        $("#CompanyAddressLine2-" + item).val("");
        $("#CompanyCity-" + item).val("");
        $("#CompanyState-" + item).val("");
        $("#CompanyZip-" + item).val("");
        $("#CellPhoneNumber-" + item).val("");
        $("#WorkPhoneNumber-" + item).val("");
        $("#FaxNumber-" + item).val("");
        $("#CommissionShareAgr-" + item).val("");
        $("#CommissionAmount-" + item).val("");
        $("#DateOfCsaConfirm-" + item).val("");

        $("#NARMemberId-" + item).val("0");
        $("#ReferredByUserId-" + item).val("");
        $("#IsActive-" + item).val("false");
        $("#Website-" + item).val("");
        $("#Registered-" + item).val("");
        $("#agentId-" + item).val("0");

        $("#AssetNARMemberId-" + item).val("00000000-0000-0000-0000-000000000000");
        $("#OptionName-" + item).toggle();
    }

    $('#addListingAgent').click(function () {
        listingAgentCount++;
        $('#listingAgentList').append("<div class='iterateListingAgents'>  <input id='agentId-" + listingAgentCount + "' name='AssetNARMembers[" + listingAgentCount + "].NARMemberId' type='text' style='display:none;'><input id='NARMemberId-" + listingAgentCount + "' name='AssetNARMembers[" + listingAgentCount + "].NARMember.NARMemberId' type='text' style='display:none;'><input id='ReferredByUserId-" + listingAgentCount + "' name='AssetNARMembers[" + listingAgentCount + "].NARMember.ReferredByUserId' type='text' style='display:none;'><input id='IsActive-" + listingAgentCount + "' name='AssetNARMembers[" + listingAgentCount + "].NARMember.IsActive' type='text' style='display:none;'><input id='Website-" + listingAgentCount + "' name='AssetNARMembers[" + listingAgentCount + "].NARMember.Website' type='text' style='display:none;'><input id='Registered-" + listingAgentCount + "' name='AssetNARMembers[" + listingAgentCount + "].NARMember.Registered' type='text' style='display:none;'>  <input id='AssetNARMemberId-" + listingAgentCount + "' name='AssetNARMembers[" + listingAgentCount + "].AssetNARMemberId' type='text' style='display:none;' value='00000000-0000-0000-0000-000000000000'> <input id='AssetId-" + listingAgentCount + "' name='AssetNARMembers[" + listingAgentCount + "].AssetId' type='text' style='display:none;' value='" + $('#AssetId').val() + "'> <div class='row'> <div class='col-sm-6'> <div class='input-group'> <label>Listing Agent Company</label> </div> </div> <div class='col-sm-6'> <div class='input-group'> <input id='CompanyName-" + listingAgentCount + "' name='AssetNARMembers[" + listingAgentCount + "].NARMember.CompanyName' type='text' value=''> </div> </div> <div class='col-sm-6'> <div class='input-group'> <span class='field-validation-valid' data-valmsg-for='AssetNARMembers[" + listingAgentCount + "].NARMember.CompanyName' data-valmsg-replace='true'></span> </div> </div> </div>  <div class='row'> <div class='col-sm-6'> <div class='input-group'> <label>Listing Agent Name</label> </div> </div> <div class='col-sm-6'> <div class='input-group'> <select id='SelectedNarMemberId-" + listingAgentCount + "' name='AssetNARMembers[" + listingAgentCount + "].NARMember.SelectedNarMemberId' onchange='fillListingUserInformation(" + listingAgentCount + ")'></select> <input class='NotOnList' style='margin-left: 10px;' type='checkbox' name='AssetNARMembers[" + listingAgentCount + "].NARMember.NotOnList' onchange='showExtraListingAgentBox(" + listingAgentCount + ")' value='true'/> <input  type='hidden' name='AssetNARMembers[" + listingAgentCount + "].NARMember.NotOnList' value='false'/>Not on list? <span class='field-validation-valid' data-valmsg-for='AssetNARMembers[" + listingAgentCount + "].NARMember.FullName' data-valmsg-replace='true'></span> </div> </div> </div>  <div id='OptionName-" + listingAgentCount + "' style='display: none;'> <div class='row'> <div class='col-sm-6'> <div class='input-group'><em>Type new listing agent first name here:</em></div> </div> <div class='col-sm-6'> <div class='input-group'> <input id='FirstName-" + listingAgentCount + "' name='AssetNARMembers[" + listingAgentCount + "].NARMember.FirstName' type='text' value=''> </div> </div> </div> <div class='row'> <div class='col-sm-6'> <div class='input-group'><em>Type new listing agent last name here:</em></div> </div> <div class='col-sm-6'> <div class='input-group'> <input id='LastName-" + listingAgentCount + "' name='AssetNARMembers[" + listingAgentCount + "].NARMember.LastName' type='text' value=''> </div> </div> </div> </div>  <div class='row'> <div class='col-sm-6'> <div class='input-group'> <label>Listing Agent Email</label> </div> </div> <div class='col-sm-6'> <div class='input-group'> <input id='Email-" + listingAgentCount + "' name='AssetNARMembers[" + listingAgentCount + "].NARMember.Email' type='text' value=''> <span class='field-validation-valid' data-valmsg-for='AssetNARMembers[" + listingAgentCount + "].NARMember.Email' data-valmsg-replace='true'></span> </div> </div> </div>  <div class='row'> <div class='col-sm-6'> <div class='input-group'> <label>Listing Agent Corp Address 1</label> </div> </div> <div class='col-sm-6'> <div class='input-group'> <input id='CompanyAddressLine1-" + listingAgentCount + "' name='AssetNARMembers[" + listingAgentCount + "].NARMember.CompanyAddressLine1' type='text' value=''> </div> </div> <div class='col-sm-6'> <div class='input-group'> <span class='field-validation-valid' data-valmsg-for='AssetNARMembers[" + listingAgentCount + "].NARMember.CompanyAddressLine1' data-valmsg-replace='true'></span> </div> </div> </div>  <div class='row'> <div class='col-sm-6'> <div class='input-group'> <label>Listing Agent Corp Address 2</label> </div> </div> <div class='col-sm-6'> <div class='input-group'> <input id='CompanyAddressLine2-" + listingAgentCount + "' name='AssetNARMembers[" + listingAgentCount + "].NARMember.CompanyAddressLine2' type='text' value=''> </div> </div> <div class='col-sm-6'> <div class='input-group'> <span class='field-validation-valid' data-valmsg-for='AssetNARMembers[" + listingAgentCount + "].NARMember.CompanyAddressLine2' data-valmsg-replace='true'></span> </div> </div> </div>  <div class='row'> <div class='col-sm-6'> <div class='input-group'> <label>Listing Agent City</label> </div> </div> <div class='col-sm-6'> <div class='input-group'> <input id='CompanyCity-" + listingAgentCount + "' name='AssetNARMembers[" + listingAgentCount + "].NARMember.CompanyCity' type='text' value=''> </div> </div> <div class='col-sm-6'> <div class='input-group'> <span class='field-validation-valid' data-valmsg-for='AssetNARMembers[" + listingAgentCount + "].NARMember.CompanyCity' data-valmsg-replace='true'></span> </div> </div> </div>  <div class='row'> <div class='col-sm-6'> <div class='input-group'> <label>Listing Agent State</label> </div> </div> <div class='col-sm-6'> <div class='input-group'> <input id='CompanyState-" + listingAgentCount + "' name='AssetNARMembers[" + listingAgentCount + "].NARMember.CompanyState' type='text' value=''> </div> </div> <div class='col-sm-6'> <div class='input-group'> <span class='field-validation-valid' data-valmsg-for='AssetNARMembers[" + listingAgentCount + "].NARMember.CompanyState' data-valmsg-replace='true'></span> </div> </div> </div>  <div class='row'> <div class='col-sm-6'> <div class='input-group'> <label>Listing Agent Zip</label> </div> </div> <div class='col-sm-6'> <div class='input-group'> <input id='CompanyZip-" + listingAgentCount + "' name='AssetNARMembers[" + listingAgentCount + "].NARMember.CompanyZip' type='text' value=''> </div> </div> <div class='col-sm-6'> <div class='input-group'> <span class='field-validation-valid' data-valmsg-for='AssetNARMembers[" + listingAgentCount + "].NARMember.CompanyZip' data-valmsg-replace='true'></span> </div> </div> </div>  <div class='row'> <div class='col-sm-6'> <div class='input-group'> <label>Listing Agent Work Number</label> </div> </div> <div class='col-sm-6'> <div class='input-group'> <input id='WorkPhoneNumber-" + listingAgentCount + "' name='AssetNARMembers[" + listingAgentCount + "].NARMember.WorkPhoneNumber' type='text' value=''> </div> </div> <div class='col-sm-6'> <div class='input-group'> <span class='field-validation-valid' data-valmsg-for='AssetNARMembers[" + listingAgentCount + "].NARMember.WorkPhoneNumber' data-valmsg-replace='true'></span> </div> </div> </div>  <div class='row'> <div class='col-sm-6'> <div class='input-group'> <label>Listing Agent Cell Number</label> </div> </div> <div class='col-sm-6'> <div class='input-group'> <input id='CellPhoneNumber-" + listingAgentCount + "' name='AssetNARMembers[" + listingAgentCount + "].NARMember.CellPhoneNumber' type='text' value=''> </div> </div> <div class='col-sm-6'> <div class='input-group'> <span class='field-validation-valid' data-valmsg-for='AssetNARMembers[" + listingAgentCount + "].NARMember.CellPhoneNumber' data-valmsg-replace='true'></span> </div> </div> </div> <div class='row'> <div class='col-sm-6'> <div class='input-group'> <label>Listing Agent Fax Number</label> </div> </div> <div class='col-sm-6'> <div class='input-group'> <input id='FaxNumber-" + listingAgentCount + "' name='AssetNARMembers[" + listingAgentCount + "].NARMember.FaxNumber' type='text' value=''> </div> </div> <div class='col-sm-6'> <div class='input-group'> <span class='field-validation-valid' data-valmsg-for='AssetNARMembers[" + listingAgentCount + "].NARMember.FaxNumber' data-valmsg-replace='true'></span> </div> </div> </div> <div class='row'> <div class='col-sm-6'> <div class='input-group'> <label>Commission Share Agr</label> </div> </div> <div class='col-sm-6'> <div class='input-group' style='padding-top: 5px'> <input class='csa' data-val='true' data-val-required='The Commission Share Agreement field is required.' name='AssetNARMembers[" + listingAgentCount + "].NARMember.CommissionShareAgr' onchange='toggleCommissionDetails(true, " + listingAgentCount + ")' type='radio' value='True'> Yes <input class='csa' data-val='true' data-val-required='The Commission Share Agreement field is required.' name='AssetNARMembers[" + listingAgentCount + "].NARMember.CommissionShareAgr' type='radio' onchange='toggleCommissionDetails(false, " + listingAgentCount + ")' value='False'> No <span class='field-validation-valid' data-valmsg-for='AssetNARMembers[" + listingAgentCount + "].NARMember.CommissionShareAgr' data-valmsg-replace='true'></span> </div> </div> </div> <div id='commissionDetails-" + listingAgentCount + "' class='commissionDetailItem' style='display: none;'> <div class='row'> <div class='col-sm-6'> <div class='input-group'> <label>Listing Agent Commission Amount</label> </div> </div> <div class='col-sm-6'> <div class='input-group'> <input id='CommissionAmount-" + listingAgentCount + "' name='AssetNARMembers[" + listingAgentCount + "].NARMember.CommissionAmount' type='text' value=''> % </div> </div> <div class='col-sm-6'> <div class='input-group'> <span class='field-validation-valid' data-valmsg-for='AssetNARMembers[" + listingAgentCount + "].NARMember.CommissionAmount' data-valmsg-replace='true'></span> </div> </div> </div> <div class='row'> <div class='col-sm-6'> <div class='input-group'> <label>Date of CSA Confirm</label> </div> </div> <div class='col-sm-6'> <div class='input-group'> <input id='DateOfCsaConfirm-" + listingAgentCount + "' name='AssetNARMembers[" + listingAgentCount + "].NARMember.DateOfCsaConfirm' type='text' value='' class='datepicker'> <span class='field-validation-valid' data-valmsg-for='AssetNARMembers[" + listingAgentCount + "].NARMember.DateOfCsaConfirm' data-valmsg-replace='true'></span> </div> </div> </div> </div> <hr /> </div>");

        document.getElementById("SelectedNarMemberId-" + listingAgentCount).innerHTML = document.getElementById("SelectedNarMemberId-0").innerHTML;
        $('#SelectedNarMemberId-' + listingAgentCount).val('');
        //rebind datepickers
        $(".datepicker").datepicker();

        if (listingAgentCount > 0) {
            $('#removeListingAgent').show();
        }
    });

    $('#removeListingAgent').click(function () {
        if (listingAgentCount > 0) {
            listingAgentCount--;
            $('#listingAgentList').children('.iterateListingAgents').last().remove();
        }
    });

    $('#addTaxParcelNumber').click(function () {
        taxParcelNumberCount++;
        $('#taxParcelNumberList').append("<div class='iterateTaxParcelNumbers'> <div class='row'> <div class='col-sm-6'> <div class='input-group'> <label>Tax Parcel Number</label> </div> </div> <div class='col-sm-6'> <div class='input-group'> <input class='text-box single-line' id='AssetTaxParcelNumbers_" + taxParcelNumberCount + "__TaxParcelNumber' name='AssetTaxParcelNumbers[" + taxParcelNumberCount + "].TaxParcelNumber' type='text' value=''> <span class='field-validation-valid' data-valmsg-for='AssetTaxParcelNumbers[" + taxParcelNumberCount + "].TaxParcelNumber' data-valmsg-replace='true'></span> </div> </div> </div> </div>");
    });

    $('#removeTaxParcelNumber').click(function () {
        if (taxParcelNumberCount > 0) {
            taxParcelNumberCount--;
            $('#taxParcelNumberList').children('.iterateTaxParcelNumbers').last().remove();
        }
    });

    function fillListingUserInformation(item) {
        var id = $("#SelectedNarMemberId-" + item).val();
        if (id != "0") {
            $.ajax({
                type: "POST",
                url: "/Admin/GetListingUserInformation/",
                data: JSON.stringify({ id: id }),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                async: false,
                cache: false,
                success: function (response) {
                    $("#WorkPhoneNumber-" + item).val(response.WorkNumber);
                    $("#FaxNumber-" + item).val(response.FaxNumber);
                    $("#CellPhoneNumber-" + item).val(response.CellPhoneNumber);
                    $("#FullName-" + item).val(response.FullName);
                    $("#CompanyName-" + item).val(response.CompanyName);
                    $("#Email-" + item).val(response.Email);
                    $("#CompanyAddressLine1-" + item).val(response.AddressLine1);
                    $("#CompanyAddressLine2-" + item).val(response.AddressLine2);
                    $("#CompanyCity-" + item).val(response.City);
                    $("#CompanyState-" + item).val(response.State);
                    $("#CompanyZip-" + item).val(response.Zip);
                    $("#FirstName-" + item).val(response.FirstName);
                    $("#LastName-" + item).val(response.LastName);
                    $("#CommissionShareAgr-" + item).val(response.CommissionShareAgr);
                    $("#CommissionAmount-" + item).val(response.CommissionAmount);
                    $("#DateOfCsaConfirm-" + item).val(response.DateOfCsaConfirm);
                    $("#NARMemberId-" + item).val(response.NARMemberId);
                    $("#ReferredByUserId-" + item).val(response.ReferredByUserId);
                    $("#IsActive-" + item).val(response.IsActive);
                    $("#Website-" + item).val(response.Website);
                    $("#Registered-" + item).val(response.Registered);
                    $("#agentId-" + item).val(response.NARMemberId);
                    $("#AssetId-" + item).val($('#AssetId').val());
                    $("#AssetNARMemberId-" + item).val("00000000-0000-0000-0000-000000000000");
                },
                error: function (jqXHR, exception) {
                },
                failure: function (response) {
                }
            });
        }
        else {
            $("#WorkPhoneNumber-" + item).val("");
            $("#FaxNumber-" + item).val("");
            $("#CellPhoneNumber-" + item).val("");
            $("#FullName-" + item).val("");
            $("#CompanyName-" + item).val("");
            $("#Email-" + item).val("");
            $("#CompanyAddressLine1-" + item).val("");
            $("#CompanyAddressLine2-" + item).val("");
            $("#CompanyCity-" + item).val("");
            $("#CompanyState-" + item).val("");
            $("#CompanyZip-" + item).val("");
            $("#FirstName-" + item).val("");
            $("#LastName-" + item).val("");
            $("#CommissionShareAgr-" + item).val("");
            $("#CommissionAmount-" + item).val("");
            $("#DateOfCsaConfirm-" + item).val("");
            $("#NARMemberId-" + item).val("0");
            $("#agentId-" + item).val("0");
            $("#IsActive-" + item).val("false");
            $("#AssetId-" + item).val("00000000-0000-0000-0000-000000000000");
            $("#AssetNARMemberId-" + item).val("00000000-0000-0000-0000-000000000000");
        }
    }

    function fillUserInformation() {
        $.ajax({
            type: "POST",
            url: "/Admin/GetUserInformation/",
            data: JSON.stringify({ userId: $("#ProposedBuyer").val() }),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            async: false,
            cache: false,
            success: function (response) {
                $("#ProposedBuyerContact").val(response.PrincipalContact);
                $("#ProposedBuyerAddress").val(response.BuyerAddress);
            },
            error: function (jqXHR, exception) {
            },
            failure: function (response) {
            }
        });
    }

    function readVideo(input, fileName) {

        if (input.files && input.files[0]) {

            var xhr = new XMLHttpRequest();
            var fd = new FormData();
            fd.append("file", input.files[0]);
            fd.append("assetId", $('#AssetId').attr('data-asset'));
            xhr.open("POST", "@Url.Action("VideoUpload", "Admin")", true);
            xhr.send(fd);
            xhr.addEventListener("load", function (event) {
                var response = JSON.parse(event.target.response);
                var success = response["message"];
                var newFilename = response["filename"];
                var fileSize = response["size"];
                if (success == "true") {
                    var reader = new FileReader();
                    reader.onload = function (e) {
                        $('#videosPreviewer').append("<div class='videoPreviewDiv'  style='display:inline-block;'><label>Uploaded Filename: " + newFilename + "<label/><br/><label>Size: " + fileSize + "<label/><input type='hidden' class='videoName'  name='Videos[" + videoCount + "].FilePath' value='" + newFilename + "'> <input type='hidden' name='Videos[" + videoCount + "].AssetId' value='@Model.AssetId'> <input type='button' class='deleteImgUpload' value='Delete' data-button=" + newFilename + " onclick='videoDelete(this)'> </div>")
                    };
                    reader.readAsDataURL(input.files[0]);
                    videoCount++;
                    $('#videosPreviewer .uploadPlaceholder').first().remove();
                }
                else {
                    $('#videosPreviewer .uploadPlaceholder').first().find('img').remove();
                    $('#videosPreviewer .uploadPlaceholder').first().html(success + " for " + fileName);
                }
            }, false);
            $('#videosPreviewer').append("<div class='uploadPlaceholder' style='display:inline-block;text-align:center'> <img src='@Url.Content("~/Content/images/fileUploadPlaceholder.gif")' style='width:20px;' /></div>");
        }
    }

    function readIMG(input, fileName) {

        if (input.files && input.files[0]) {

            var xhr = new XMLHttpRequest();
            var fd = new FormData();
            fd.append("file", input.files[0]);
            fd.append("assetId", $('#AssetId').attr('data-asset'));
            xhr.open("POST", "@Url.Action("ImageUpload", "Admin")", true);
            xhr.send(fd);
            xhr.addEventListener("load", function (event) {
                var response = JSON.parse(event.target.response);
                var success = response["message"];
                var contentType = response["contentType"];
                var isCorpAdmin = response["isCorpAdmin"];
                var isICAdmin = response["isICAdmin"];
                var newFilename = response["filename"];
                if (success == "true") {
                    var reader = new FileReader();
                    reader.onload = function (e) {
                        if (isCorpAdmin || isICAdmin) {
                            $('#imgsPreviewer').append("<div class='imgPreviewDiv' style='display:inline-block; height:235px;'><div class='imgPreviewImg' style='background-image: url(" + e.target.result + ")'></div><hr/><input type='checkbox' class='mainflyer' name='Images[" + imgCount + "].IsMainImage' value='true' style='margin:0' onclick='onlyOneCheckbox(this)'><input type='hidden' name='Images[" + imgCount + "].IsMainImage' value='false'/><span> Is Main Image?</span> <br/> <input type='checkbox' name='Images[" + imgCount + "].IsFlyerImage' value='true' style='margin:0'><input type='hidden' name='Images[" + imgCount + "].IsFlyerImage' value='false'/><span> Is Flyer Image?</span> <br/><input type='hidden' class='imgName'  name='Images[" + imgCount + "].FileName' value=" + newFilename + "> <br/><span>Order: </span><span class='currentpositionlabel'>" + imgCount.toString() + "</span><input class='currentposition' name='Images[" + imgCount + "].Order' value='" + imgCount + "' type='hidden'/><input type='hidden' name='Images[" + imgCount + "].ContentType' value=" + contentType + "> <input type='hidden' name='Images[" + imgCount + "].AssetId' value='@Model.AssetId'> <input type='button' class='deleteImgUpload' value='Delete' data-button=" + newFilename + " onclick='imgDelete(this)'> </div>")
                        }
                        else {
                            $('#imgsPreviewer').append("<div class='imgPreviewDiv' style='display:inline-block;'><div class='imgPreviewImg' style='background-image: url(" + e.target.result + ")'></div><hr/><input type='checkbox' style='display:none;' class='mainflyer' name='Images[" + imgCount + "].IsMainImage' value='true' style='margin:0' onclick='onlyOneCheckbox(this)'><input type='hidden' name='Images[" + imgCount + "].IsMainImage' value='false'/><br/> <input type='checkbox' style='display:none;' name='Images[" + imgCount + "].IsFlyerImage' value='true' style='margin:0'><input type='hidden' name='Images[" + imgCount + "].IsFlyerImage' value='false'/><br/><input type='hidden' class='imgName'  name='Images[" + imgCount + "].FileName' value=" + newFilename + ">  <input type='hidden' name='Images[" + imgCount + "].ContentType' value=" + contentType + "> <input type='hidden' name='Images[" + imgCount + "].AssetId' value='@Model.AssetId'> <input type='button' class='deleteImgUpload' value='Delete' data-button=" + newFilename + " onclick='imgDelete(this)'> </div>")
                        }
                    };
                    reader.readAsDataURL(input.files[0]);
                    imgCount++;
                    $('#imgsPreviewer .uploadPlaceholder').first().remove();
                }
                else {
                    $('#imgsPreviewer .uploadPlaceholder').first().find('img').remove();
                    $('#imgsPreviewer .uploadPlaceholder').first().html(success + " for " + fileName);
                }
            }, false);
            $('#imgsPreviewer').append("<div class='uploadPlaceholder' style='display:inline-block;text-align:center'> <img src='@Url.Content("~/Content/images/fileUploadPlaceholder.gif")' style='width:20px;' /></div>");
            $(".imgsPreviewer").sortable("refreshPositions");
        }
    }

    $('#addUnitSpecs').click(function () {
        unitSpecCount++;
        $('#unitSpecList').append("<div class='unitSpecDiv'><div class='row'><div class='col-sm-6'><div class='input-group'><label>Number of Unit Types</label></div></div><div class='col-sm-6'><div class='input-group'><input class='text-box single-line formatNumber' onchange='addCommasToInput(this)'  name='UnitSpecifications[" + unitSpecCount + "].CountOfUnits' type='text' value='0'></div></div> </div><div class='row'><div class='col-sm-6'><div class='input-group'><label>Bedrooms:</label> </div></div><div class='col-sm-6'><div class='input-group'><select name='UnitSpecifications[" + unitSpecCount + "].BedCount'><option value='Zero'>Studio</option><option value='One'>1</option><option value='Two'>2</option><option value='Three'>3</option><option value='Four'>4</option><option value='Five'>5</option><option value='Six'>6</option><option value='SevenPlus'>7+</option></select> </div></div></div><div class='row'><div class='col-sm-6'><div class='input-group'><label>Baths:</label> </div></div><div class='col-sm-6'><div class='input-group'><select name='UnitSpecifications[" + unitSpecCount + "].BathCount'><option value='Zero'>0</option><option value='One'>1.0</option><option value='OneAndHalf'>1.5</option><option value='Two'>2.0</option><option value='TwoAndHalf'>2.5</option><option value='Three'>3.0</option><option value='ThreeAndHalf'>3.5</option><option value='Four'>4.0</option><option value='FourAndHalf'>4.5</option><option value='Five'>5.0</option><option value='FiveAndHalf'>5.5</option><option value='Six'>6+</option></select> </div></div></div><div class='row'><div class='col-sm-6'><div class='input-group'><label>Unit Base Rent</label> </div></div><div class='col-sm-6'><div class='input-group'><input class='text-box single-line formatNumber' onchange='addCommasToInput(this)' name='UnitSpecifications[" + unitSpecCount + "].UnitBaseRent' type='text' value='0'></div></div></div><div class='row'><div class='col-sm-6'><div class='input-group'><label>Unit Square Feet</label></div></div><div class='col-sm-6'><div class='input-group'><input class='text-box single-line formatNumber' name='UnitSpecifications[" + unitSpecCount + "].UnitSquareFeet' type='text' onchange='addCommasToInput(this)' value='0'></div></div></div><hr></div></div>");
        if (unitSpecCount > 0) {
            $('#removeUnitSpecs').show();
        }
    });

    $('#removeUnitSpecs').click(function () {
        if (unitSpecCount > 0) {
            unitSpecCount--;
            $('#unitSpecList').children('.unitSpecDiv').last().remove();
        }
    });

    function onlyOneCheckbox(cb) {
        if (cb.checked) {
            $("input:checkbox[class='mainflyer']").not(cb).removeAttr("checked");
        }
    }
    $("#mb").change(function () {
        var path = $(this).val();
        var type = $("#mb").attr('data-type');
        var title = $('#mbTitle').val();
        var description = $('#mbDescription').val();
        var fileName = path.match(/[^\/\\]+$/);
        readDOC(this, fileName, title, description, type, '#marketingBrochure', "#mb");
    });

    $("#od").change(function () {
        var path = $(this).val();
        var type = $("#od").attr('data-type');
        var title = $('#odTitle').val();
        var description = $('#odDescription').val();
        var fileName = path.match(/[^\/\\]+$/);
        readDOC(this, fileName, title, description, type, '#otherDocuments', "#od");
    });

    $("#rentRoll").change(function () {
        var path = $(this).val();
        var type = $("#rentRoll").attr('data-type');
        var title = $('#rentRollTitle').val();
        var description = $('#rentRollDescription').val();
        var fileName = path.match(/[^\/\\]+$/);
        readDOC(this, fileName, title, description, type, '#currentRentRoll', "#rentRoll");
    });

    $("#cor").change(function () {
        var path = $(this).val();
        var type = $('#cor').attr('data-type');
        var title = $('#corTitle').val();
        var description = $('#corDescription').val();
        var fileName = path.match(/[^\/\\]+$/);
        readDOC(this, fileName, title, description, type, '#currentOperatingReport', "#cor");
    });

    $("#pfyor").change(function () {
        var path = $(this).val();
        var type = $('#pfyor').attr('data-type');
        var title = $('#pfyorTitle').val();
        var description = $('#pfyorDescription').val();
        var fileName = path.match(/[^\/\\]+$/);
        readDOC(this, fileName, title, description, type, '#priorFiscalYearOperReport', "#pfyor");
    });

    $("#ptr").change(function () {
        var path = $(this).val();
        var type = $('#ptr').attr('data-type');
        var title = $('#ptrTitle').val();
        var description = $('#ptrDescription').val();
        var fileName = path.match(/[^\/\\]+$/);
        readDOC(this, fileName, title, description, type, '#preliminaryTitleReport', "#ptr");
    });

    $("#pm").change(function () {
        var path = $(this).val();
        var type = $('#pm').attr('data-type');
        var title = $('#pmTitle').val();
        var description = $('#pmDescription').val();
        var fileName = path.match(/[^\/\\]+$/);
        readDOC(this, fileName, title, description, type, '#platMap', "#pm");
    });

    $("#am").change(function () {
        var path = $(this).val();
        var type = $('#am').attr('data-type');
        var title = $('#amTitle').val();
        var description = $('#amDescription').val();
        var fileName = path.match(/[^\/\\]+$/);
        readDOC(this, fileName, title, description, type, '#arialMap', "#am");
    });

    $("#oa").change(function () {
        var path = $(this).val();
        var type = $('#oa').attr('data-type');
        var title = $('#oaTitle').val();
        var description = $('#oaDescription').val();
        var fileName = path.match(/[^\/\\]+$/);
        readDOC(this, fileName, title, description, type, '#originalAppraisal', "#oa");
    });

    $("#ca").change(function () {
        var path = $(this).val();
        var type = $('#ca').attr('data-type');
        var title = $('#caTitle').val();
        var description = $('#caDescription').val();
        var fileName = path.match(/[^\/\\]+$/);
        readDOC(this, fileName, title, description, type, '#currentAppraisal', "#ca");
    });

    $("#instrumentRecord").change(function () {
        var path = $(this).val();
        var type = $('#instrumentRecord').attr('data-type');
        var title = $('#mgInstRecTitle').val();
        var description = $('#mgInstRecDescription').val();
        var fileName = path.match(/[^\/\\]+$/);
        readDOC(this, fileName, title, description, type, '#mgInstRec', "#instrumentRecord");
    });

    $("#recLiens").change(function () {
        var path = $(this).val();
        var type = $('#recLiens').attr('data-type');
        var title = $('#recLiensTitle').val();
        var description = $('#recLiensDescription').val();
        var fileName = path.match(/[^\/\\]+$/);
        readDOC(this, fileName, title, description, type, '#recordedLiens', "#recLiens");
    });

    $("#txLiens").change(function () {
        var path = $(this).val();
        var type = $('#txLiens').attr('data-type');
        var title = $('#taxLiensTitle').val();
        var description = $('#taxLiensDescription').val();
        var fileName = path.match(/[^\/\\]+$/);
        readDOC(this, fileName, title, description, type, '#taxLiens', "#txLiens");
    });

    $("#related").change(function () {
        var path = $(this).val();
        var type = $('#related').attr('data-type');
        var title = $('#bkRelatedTitle').val();
        var description = $('#bkRelatedDescription').val();
        var fileName = path.match(/[^\/\\]+$/);
        readDOC(this, fileName, title, description, type, '#bkRelated', "#related");
    });

    $("#ptrTitle").change(function () {
        var path = $(this).val();
        var type = $('#ptrTitle').attr('data-type');
        var title = $('#ptrTitleTitle').val();
        var description = $('#ptrTitleDescription').val();
        var fileName = path.match(/[^\/\\]+$/);
        readDOC(this, fileName, title, description, type, '#preliminaryTitleReportTitle', "#ptrTitle");
    });

    $("#dotMG").change(function () {
        var path = $(this).val();
        var type = $('#dotMG').attr('data-type');
        var title = $('#dotMGTitle').val();
        var description = $('#dotMGDescription').val();
        var fileName = path.match(/[^\/\\]+$/);
        readDOC(this, fileName, title, description, type, '#recDOTMTG', "#dotMG");
    });

    $("#othTitle").change(function () {
        var path = $(this).val();
        var type = $('#othTitle').attr('data-type');
        var title = $('#otherTitleTitle').val();
        var description = $('#otherTitleDescription').val();
        var fileName = path.match(/[^\/\\]+$/);
        readDOC(this, fileName, title, description, type, '#otherDocumentsTitle', "#othTitle");
    });

    function readDOC(input, fileName, title, description, type, id, fileUploadId) {

        if (input.files && input.files[0]) {
            var xhr = new XMLHttpRequest();
            var fd = new FormData();
            fd.append("file", input.files[0]);
            fd.append("assetId", $('#AssetId').attr('data-asset'));
            fd.append("title", title);
            xhr.open("POST", "@Url.Action("DocumentUpload", "Admin")", true);
            xhr.send(fd);
            xhr.addEventListener("load", function (event) {
                var response = JSON.parse(event.target.response);
                var success = response["message"];
                var contentType = response["contentType"];
                var newFilename = response["filename"];
                var size = response["size"];
                var downloadUrl = response["downloadUrl"];
                if (success.toLowerCase() == "true") {
                    var reader = new FileReader();
                    reader.onload = function (e) {
                        if (isNaN(docCount)) {
                            docCount = 0;
                        }
                        $(id).append("<div class='docPreviewDiv'><a target='_blank' href=" + downloadUrl + ">Click here to download file</a><br /><span>Title: </span><label class='title' name='Documents[" + docCount + "].Title' >" + title + "</label><br /><span>Description: </span><label class='description' name='Documents[" + docCount + "].Description'>" + description + "</label><input type='hidden' class='docTitle' name='Documents[" + docCount + "].Title' value='" + title + "'><input type='hidden' class='docDescription' name='Documents[" + docCount + "].Description' value=" + description + "><input type='hidden' class='docName' name='Documents[" + docCount + "].FileName' value=" + newFilename + "><input type='hidden' name='Documents[" + docCount + "].Size' value=" + size + "> <input type='hidden' name='Documents[" + docCount + "].ContentType' value=" + contentType + "> <input type='hidden' name='Documents[" + docCount + "].AssetId' value='@Model.AssetId'> <input type='hidden' name='Documents[" + docCount + "].Type' value='" + type + "'><input type='button' class='deleteDocUpload' value='Delete' data-id=" + fileUploadId + " data-button=" + newFilename + " onclick='docDelete(this)'> <hr/></div>");
                    };
                    reader.readAsDataURL(input.files[0]);
                    docCount++;
                }
                else {
                    alert("This document already exists on the server for this asset and this document. Please change the filename of the file before uploading.");
                    $('#docsPreviewer').append("<div>" + success + " for " + fileName + "</div>")
                }
            }, false);
        }
    }

    function docDelete(param) {
        var input = $($(param).attr('data-id'));
        var xhr = new XMLHttpRequest();
        var fd = new FormData();
        fd.append("docId", param.getAttribute("data-button"));
        fd.append("assetId", $('#AssetId').attr('data-asset'));
        xhr.open("POST", "@Url.Action("DocumentDelete", "Admin")", true);
        xhr.send(fd);
        xhr.addEventListener("load", function (event) {
            var response = JSON.parse(event.target.response);
            var success = response["message"];
            if (success == "true") {
                $(param).closest('.docPreviewDiv').hide();
                $(param).closest('.docPreviewDiv').find('.docName').val('');
                $(input).wrap('<form>').closest('form').get(0).reset();
                $(input).unwrap();
            }
            else {
                //alert("Data Saved: " + response["message"]);
                $(param).closest('.docPreviewDiv').hide();
                $(param).closest('.docPreviewDiv').find('.docName').val('');
                $(input).wrap('<form>').closest('form').get(0).reset();
                $(input).unwrap();
            }
        }, false);
    }


    function videoDelete(param) {
        $.ajax({
            type: "POST",
            url: "../VideoDelete",
            data: {
                videoId: param.getAttribute("data-button"),
                assetId: $('#AssetId').attr('data-asset')
            },
            success: function (message) {
                var response = JSON.parse(JSON.stringify(message));
                if (response["message"] == "true") {
                    $(param).closest('.videoPreviewDiv').hide();
                    $(param).closest('.videoPreviewDiv').find('.videoName').val('');
                }
                else {
                    //alert("Data Saved: " + response["message"]);
                    $(param).closest('.videoPreviewDiv').hide();
                    $(param).closest('.videoPreviewDiv').find('.videoName').val('');
                }
            }
        });
    };
    function imgDelete(param) {
        $.ajax({
            type: "POST",
            url: "../ImageDelete",
            data: {
                imgId: param.getAttribute("data-button"),
                assetId: $('#AssetId').attr('data-asset')
            },
            success: function (message) {
                $(param).closest('.imgPreviewDiv').hide();
                $(param).closest('.imgPreviewDiv').find('.imgName').val('');
            }
        });
    };

    function toggleMortgage(level) {
        if (level == 1) {
            $("#hasMortgage").show();
            //$("#hasLienType").hide();
        }
        if (level == 2) {
            //$("#hasLienType").show();
        }
        // hiding
        if (level == 3) {
            //$("#hasLienType").hide();
            //$(".mltRecourse").prop('checked', false);
            //$(".mltNonRecourse").prop('checked', false);
            //$(".mltUnknown").prop('checked', false);
            //var mlt = document.getElementsByName("MortgageLienType");
            //$(mlt).removeProp('checked');
        }
        if (level == 4) {
            $("#hasMortgage").hide();
            $(".mltRecourse").prop('checked', false);
            $(".mltNonRecourse").prop('checked', false);
            $(".mltUnknown").prop('checked', false);

            $(".mlaYes").prop('checked', false);
            $(".mlaNo").prop('checked', false);
            $(".mlaUnknown").prop('checked', false);
            //var mlt = document.getElementsByName("MortgageLienType");
            //var mla = document.getElementsByName("MortgageLienAssumable");
            //$(mlt).removeProp('checked');
            //$(mla).removeProp('checked');

        }
    }

    var imgCount = 0;
    var docCount = 0;
    var unitSpecCount = 0;
    var videoCount = 0;
    var listingAgentCount = 0;
    var taxParcelNumberCount = 0;

    $(window).bind("load", function () {
        calcMonthlyIncome(document.getElementById("AnnualGrossIncome"), 'calculateMonthlyIncome', 'MonthlyGrossIncome');
        calcMonthlyIncome(document.getElementById("ProformaAnnualIncome"), 'calculateProformaMonthlyIncome', 'ProformaMonthlyIncome');
    });

    function autoSave() {
        var tab = $("ul.nav li.active a").text();
        if (tab != "Images" && tab != "Documents" && tab != "Videos" && tab != "Finish") {
            SaveAsset('AutoSave');
            var form = $('#assetform').serialize();
            $.ajax({
                type: "POST",
                url: "/Admin/SavePartialAsset/",
                data: form,
                async: false,
                cache: false,
                success: function (response) {
                    $("input.formatNumber").each(function (index) {
                        $(this).val(addCommas($(this).val(), true));
                        $(this).on("input", null, null, function () {
                            $(this).val(addCommas($(this).val(), true));
                        });
                    });
                    $("input.formatMaint").each(function (index) {
                        $(this).val(addCommas($(this).val(), true));
                    });
                    if (response.Status == "Created") {
                        $('#AssetNumber').val(response.Id);
                        var today = new Date();
                        $('#ListedByUserId').val(response.ListedByUserId);
                        $('#saveDate').text("Auto saved on: " + (new Date()));
                        $('#CreationDate').val(response.CreationDate);

                    } else if (response.Status == "Updated") {
                        $('#saveDate').text("Auto saved on: " + (new Date()));
                    } else {
                        $('#saveDate').text("Auto saved on: Problem auto saving.");
                    }
                },
                error: function (jqXHR, exception) {
                },
                failure: function (response) {
                }
            });
        }
    }

    //Prepare Image and Document index
    $(document).ready(function () {



        if ($("#HasPositionMortgage").prop('checked')) {
            toggleMortgage(1);
            //if (!$("#MortgageLienType").prop('checked')) {
            //    toggleMortgage(2);
            //}
            //else {
            //    toggleMortgage(3);
            //}
        } else {
            toggleMortgage(4);
        }

        if (!$("#IsNoteWRAP").prop('checked')) {
            toggleWRAP(false);
        } else {
            toggleWRAP(true);
        }

        //window.setInterval(function () {
        //    autoSave();
        //}, 30000);

        $('#imgsPreviewer').sortable({
            stop: function (event, ui) {
                if ($(ui.item).find('.mainflyer').is(':checked')) {
                    $('#imgsPreviewer').sortable("cancel");
                    alert("Cannot change order of main flyer image. This image will always show first. Uncheck the Is Main Flyer image checkbox to change order of image.");
                } else {
                    var inputs = $('.currentposition');
                    var labels = $('.currentpositionlabel');
                    var nbElems = inputs.length;
                    $(inputs).each(function (idx) {
                        $(this).val(idx);
                    });
                    $(labels).each(function (idx) {
                        $(this).text(idx);
                    });
                }
            }
        }).disableSelection();
        videoCount = 0;
        imgCount = 0;
        docCount = 0;
        unitSpecCount = 0;
        listingAgentCount = 0;
        taxParcelNumberCount = 0;
        videoCount = $('#videosPreviewer').attr('data-videocount');
        imgCount = $('#imgsPreviewer').attr('data-imgcount');
        docCount = $('#docManager').attr('data-doccount');
        unitSpecCount = $('#unitSpecList').attr('data-unitcount');
        listingAgentCount = $('#listingAgentList').attr('data-unitcount');
        taxParcelNumberCount = $('#taxParcelNumberList').attr('data-count');
        imgCount--;
        docCount--;
        videoCount--;
        unitSpecCount--;
        listingAgentCount--;
        taxParcelNumberCount--;
        if ($("#isPendingForeclosure").is(':checked')) {
            $("#foreclosureSection").show();
        }
        else {
            $("#foreclosureSection").hide();
        }

        if (unitSpecCount < 1) {
            $('#removeUnitSpecs').hide();
        }

        if (!$("#HasIncome").prop('checked')) {
            toggleIncomeReason(true);
        }
        else {
            toggleIncomeReason(false);
        }

        if (!$("#IsTBDMarket").prop('checked')) {
            toggleActionDetails(false);
        }
        else {
            toggleActionDetails(true);
        }

        if (!$("#HasAAARatedMajorTenant").prop('checked')) {
            toggleMajorTenant(false);
        }
        else {
            toggleMajorTenant(true);
        }

        if (!$("#HasDeferredMaintenance").prop('checked')) {
            toggleDeferredMaintenanceDetails(false);
        } else {
            toggleDeferredMaintenanceDetails(true);
        }



        //if ($("#CommissionShareAgr").prop('checked')) {
        //    toggleCommissionDetails(true);
        //} else {
        //    toggleCommissionDetails(false);
        //}

        $('.iterateListingAgents').each(function (index) {
            // this LOC sets the DDL value
            $("#ListingAgentNewName-" + index).val($("#agentId-" + index).val());
            var csa = $(this).find(".csa");
            var cdi = $(this).find(".commissionDetailItem");
            var nol = $(this).find(".NotOnList");
            if (csa.prop('checked')) {
                toggleCommissionDetails(true, index);
            }
            else {
                toggleCommissionDetails(false, index);
            }
            if (nol.prop('checked')) {
                $("#OptionName-" + index).show();
                $("#SelectedNarMemberId-" + index).hide();
            }
            else
            {
                $("#OptionName-" + index).hide();
                $("#SelectedNarMemberId-" + index).show();
            }
        });

        jQuery(function ($) {
            $(document).on('nested:fieldRemoved', function (event) {
                $('[required]', event.field).removeAttr('required');
            });
        });

        $("input.formatNumber").each(function (index) {
            $(this).val(addCommas($(this).val(), true));
            $(this).on("input", null, null, function () {
                $(this).val(addCommas($(this).val(), true));
            });
        });
        $("input.formatMaint").each(function (index) {
            $(this).val(addCommas($(this).val(), true));
        });
        $("span.formatNumber").each(function (index) {
            $(this).text(addCommas($(this).text(), false));
        });


        $("#HasIncome").change('checked', function () {
            $('.IncomeObject').toggle();
            $('.NoIncome').toggle();
        });
        //Setup Calendar UI
        $(function () {
            $(".datepicker").datepicker();
        });
    });

    function toggleMajorTenant(show) {
        if (show) {
            $("#majorTenant").show();
        } else {
            $("#majorTenant").hide();
        }
    }

    function calcMonthlyIncome(input, idOfFieldToShow, idOfFieldToSave) {
        if (input.value) {
            var num = getNumber(input);
            var intVal = (num / 12).toFixed(0); // he wants whole numbers so we round up if we have to
            var val = (num / 12).toFixed(2);
            $('#' + idOfFieldToShow).text(addCommas(intVal.toString()));
            $('#' + idOfFieldToSave).val(intVal);
            calcProformaSGI();
        }
    }

    function calcProformaSGI() {
        var aoe = $('#ProformaAnnualOperExpenses').val();
        var pagi = $('#ProformaAnnualIncome').val();
        var pami = $('#ProformaMiscIncome').val();
        if (aoe && pagi) {
            aoe = getNumberFromValue(aoe);
            pagi = getNumberFromValue(pagi);
            if (pami) {
                pami = getNumberFromValue(pami);
            } else {
                pami = 0;
            }
            var totalIncome = pagi + pami;
            if (totalIncome > 0) {
                var calc = ((aoe / pagi) * 100).toFixed(2);
                //var calc = ((aoe / totalIncome) * 100).toFixed(2);
                document.getElementById('aoeFactor').innerHTML = calc;
                $('#ProformaAoeFactorAsPerOfSGI').val(addCommas(calc.toString(), true));
            }
            calcCapRate();
        }
    }

    function calcCapRate() {
        var aoe = getNumberFromValue($('#ProformaAnnualOperExpenses').val());
        var vf = getNumberFromValue($('#ProformaVacancyFac').val());
        var pagi = getNumberFromValue($('#ProformaAnnualIncome').val());
        var sgi = getNumberFromValue($('#ProformaAoeFactorAsPerOfSGI').val());
        var pami = getNumberFromValue($('#ProformaMiscIncome').val());
        var lp = getNumberFromValue($('#AskingPrice').val());
        var bpo = getNumberFromValue($('#CurrentBpo').val());
        var totalIncome = pagi + pami;

        var pvf = (vf / 100) * totalIncome;
        var pretax = totalIncome - pvf - aoe;
        var calc = 0;
        if ($("#IsTBDMarket").is(':checked')) {
            calc = ((pretax / bpo) * 100).toFixed(2);
        } else {
            calc = ((pretax / lp) * 100).toFixed(2);
        }
        if (calc == "-Infinity" || calc == "NaN" || calc == "Infinity") {
            calc = 0;
        }

        $("#cap").text(addCommas(calc.toString(), true));
        $("#CashInvestmentApy").val(calc);

        calculateOccupancyPercentage();
    }

    function calculateOccupancyPercentage() {
        var vf = getNumberFromValue($('#CurrentVacancyFac').val());
        $("#OccupancyPercentage").val((100 - vf).toFixed(2));
    }

    function show(id) {
        $('#' + id).show();
    }
    function hide(id) {
        $('#' + id).hide();
    }

    function toggleForeclosureSection(show) {
        if (show) {
            $("#foreclosureSection").show();
        }
        else {
            $("#foreclosureSection").hide();
        }
    }

    function toggleIncomeReason(show) {
        if (show) {
            $("#incomeDetails").hide();
            $("#incomeReason").show();
        } else {
            $("#incomeDetails").show();
            $("#incomeReason").hide();
        }
    }

    function toggleDeferredMaintenanceDetails(show) {
        if (show) {
            $("#deferredMaintenanaceDetails").show();
        } else {
            $("#deferredMaintenanaceDetails").hide();
        }
    }

    function toggleCommissionDetails(show, item) {
        if (show) {
            $("#commissionDetails-" + item).show();
        } else {
            $("#commissionDetails-" + item).hide();
        }
    }

    function toggleActionDetails(show) {
        if (show) {
            $("#auctionDetails").show();
        }
        else {
            $("#auctionDetails").hide();
        }
    }

    $("#PropHoldTypeId").on("change", function () {
        var temp = $(this).val();
        if ($(this).val() == "Leasehold") {
            $("#maturityDiv").show();
        } else {
            $("#maturityDiv").hide();
        }
    });

    function checkText(field) {
        if (field.value.length < 1) 
        {
            alert("Please provide a description for the Other item");
        }
    }

    function calculateEstimatedDeferredMaintenance() {
        var total = 0;
        for (var i = 0; i < 17; i++) {
            var itemName = $("#DeferredMaintenanceItems_" + i + "__ItemTitle").val();
            var unitCost = getNumberFromValue($("#DeferredMaintenanceItems_" + i + "__UnitCost").val());
            var units = getNumberFromValue($("#DeferredMaintenanceItems_" + i + "__NumberOfUnits").val());
            if (!units) {
                units = 1;
            }
            if ($("#DeferredMaintenanceItems_" + i + "__Selected").is(':checked')) {
                if(itemName.toLowerCase() == "other" && (getNumberFromValue($("#DeferredMaintenanceItems_" + i + "__UnitCost").val()) == 0 || getNumberFromValue($("#DeferredMaintenanceItems_" + i + "__UnitCost").val()) == null ))
                {
                    alert("Please provide a value for the Other item")   
                }
                if(itemName.toLowerCase() == "other" && getNumberFromValue($("#DeferredMaintenanceItems_" + i + "__UnitCost").val()) != 0 && $("#DeferredMaintenanceItems_" + i + "__ItemDescription").val() == "")
                {
                    alert("Please provide a description for the Other item")   
                }
                total += (unitCost * units);
            }
        }
        if (total > 0) {
            $("#EstDeferredMaintenance").val(addCommas(Math.ceil(total.toFixed(2)).toString(), false));
        } else {
            $("#EstDeferredMaintenance").val(0);
        }
    }
</script>
